// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–æ–≤ - –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö

export const lessonContent = {
  // –ú–æ–¥—É–ª—å 1: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã AI
  1: {
    title: "–í–µ–∫—Ç–æ—Ä—ã –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: "120 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–í–µ–∫—Ç–æ—Ä—ã –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏</h2>
      
      <h3>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞</h3>
      <p>–í–µ–∫—Ç–æ—Ä - —ç—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–æ—á–∫—É –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–ª–∏ –∫–∞–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong></p>
      <p>–í–µ–∫—Ç–æ—Ä <strong>v</strong> –≤ n-–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫:</p>
      <pre><code>v = [v‚ÇÅ, v‚ÇÇ, v‚ÇÉ, ..., v‚Çô]</code></pre>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>1. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤</h4>
      <p>–í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∫–∞–∂–¥–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≤–µ–∫—Ç–æ—Ä:</p>
      <ul>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏:</strong> [T‚ÇÅ, T‚ÇÇ, T‚ÇÉ, T‚ÇÑ] - –ø–æ–∫–∞–∑–∞–Ω–∏—è 4 –¥–∞—Ç—á–∏–∫–æ–≤</li>
        <li><strong>–í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏:</strong> [x, y, z] - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–º –æ—Å—è–º</li>
        <li><strong>–•–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</strong> [pH, O‚ÇÇ, CO‚ÇÇ, H‚ÇÇO] - –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–µ—â–µ—Å—Ç–≤</li>
      </ul>
      
      <h4>2. –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏</h4>
      
      <p><strong>–°–ª–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤:</strong></p>
      <pre><code>a + b = [a‚ÇÅ + b‚ÇÅ, a‚ÇÇ + b‚ÇÇ, ..., a‚Çô + b‚Çô]</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π</p>
      
      <p><strong>–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:</strong></p>
      <pre><code>a ¬∑ b = a‚ÇÅb‚ÇÅ + a‚ÇÇb‚ÇÇ + ... + a‚Çôb‚Çô</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</p>
      
      <p><strong>–ù–æ—Ä–º–∞ –≤–µ–∫—Ç–æ—Ä–∞ (–¥–ª–∏–Ω–∞):</strong></p>
      <pre><code>||v|| = ‚àö(v‚ÇÅ¬≤ + v‚ÇÇ¬≤ + ... + v‚Çô¬≤)</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞</p>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–≤–∏–≥–∞—Ç–µ–ª—è</h3>
      <p>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–º:</p>
      <pre><code>—Å–æ—Å—Ç–æ—è–Ω–∏–µ = [—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–∏–±—Ä–∞—Ü–∏—è_x, –≤–∏–±—Ä–∞—Ü–∏—è_y, —Ç–æ–∫, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ]
–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ = [75¬∞C, 0.1g, 0.1g, 10A, 220V]
—Ç–µ–∫—É—â–µ–µ = [85¬∞C, 0.3g, 0.2g, 12A, 218V]</code></pre>
      
      <p>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã:</p>
      <pre><code>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = ||—Ç–µ–∫—É—â–µ–µ - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ||</code></pre>`,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª—è</h3>
      <p>–°–æ–∑–¥–∞–¥–∏–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.</p>
      
      <div class="code-block">
        <h4>–®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h4>
        <pre><code>import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è
# –í–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: [—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–∏–±—Ä–∞—Ü–∏—è, —Ç–æ–∫, —Å–∫–æ—Ä–æ—Å—Ç—å]

# –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è
normal_state = np.array([75, 2.1, 45, 1800])  # ¬∞C, –º–º/—Å, –ê, –æ–±/–º–∏–Ω

# –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å)
np.random.seed(42)
hours = 24
time_points = [datetime.now() - timedelta(hours=i) for i in range(hours, 0, -1)]

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
sensor_data = []
for i in range(hours):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    noise = np.random.normal(0, [2, 0.1, 1.5, 50], 4)
    current_state = normal_state + noise
    sensor_data.append(current_state)

sensor_data = np.array(sensor_data)
print("–§–æ—Ä–º–∞ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö:", sensor_data.shape)
print("–ü–µ—Ä–≤—ã–µ 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π:")
print(sensor_data[:5])</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 2: –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h4>
        <pre><code># –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
deviations = sensor_data - normal_state

# –í—ã—á–∏—Å–ª—è–µ–º –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ—Ä–º—É) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
distances = np.linalg.norm(deviations, axis=1)

# –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
max_deviation_idx = np.argmax(distances)
max_deviation_time = time_points[max_deviation_idx]
max_deviation_vector = sensor_data[max_deviation_idx]

print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤: {max_deviation_time}")
print(f"–í–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: {max_deviation_vector}")
print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã: {distances[max_deviation_idx]:.2f}")

# –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
mean_state = np.mean(sensor_data, axis=0)
print(f"\\n–°—Ä–µ–¥–Ω–∏–π –≤–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: {mean_state}")
print(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã: {mean_state - normal_state}")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 3: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</h4>
        <pre><code>class EngineMonitoringSystem:
    def __init__(self, normal_state, threshold_multiplier=2.0):
        self.normal_state = np.array(normal_state)
        self.threshold_multiplier = threshold_multiplier
        self.history = []
        self.alerts = []
    
    def add_measurement(self, measurement):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏"""
        measurement = np.array(measurement)
        self.history.append(measurement)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã
        deviation = measurement - self.normal_state
        distance = np.linalg.norm(deviation)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
        if distance > 50:  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            alert = {
                'timestamp': datetime.now(),
                'measurement': measurement,
                'distance': distance,
                'critical_parameter': self._identify_critical_parameter(deviation)
            }
            self.alerts.append(alert)
            return alert
        
        return None
    
    def _identify_critical_parameter(self, deviation):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä"""
        abs_deviation = np.abs(deviation)
        critical_idx = np.argmax(abs_deviation)
        parameters = ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–í–∏–±—Ä–∞—Ü–∏—è', '–¢–æ–∫', '–°–∫–æ—Ä–æ—Å—Ç—å']
        return parameters[critical_idx]

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor = EngineMonitoringSystem(normal_state)

test_measurements = [
    [76, 2.0, 44, 1820],    # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    [92, 4.2, 58, 1950],    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
]

for measurement in test_measurements:
    alert = monitor.add_measurement(measurement)
    if alert:
        print(f"üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï! –ö—Ä–∏—Ç–∏—á–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {alert['critical_parameter']}")
    else:
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ")</code></pre>
      </div>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã</h3>
      <p>–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã –∏–∑—É—á–∏–ª–∏:</p>
      <ul>
        <li><strong>–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</strong></li>
        <li><strong>–í–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</strong></li>
        <li><strong>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</strong></li>
      </ul>
    `
      
      <h3>–í–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ ML</h3>
      <p>–í –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏:</p>
      <ul>
        <li><strong>–ü—Ä–∏–∑–Ω–∞–∫–∏ (features)</strong> - —ç—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–µ–∫—Ç–æ—Ä–∞</li>
        <li><strong>–û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö</strong> - —ç—Ç–æ —Ç–æ—á–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</li>
        <li><strong>–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞</strong> - —ç—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤</li>
      </ul>
      
      <h3>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è</h3>
      <ul>
        <li><strong>–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–µ–∫—Ç–æ—Ä–∞</li>
        <li><strong>–ë–∞–∑–∏—Å:</strong> –Ω–∞–±–æ—Ä –ª–∏–Ω–µ–π–Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤</li>
        <li><strong>–û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</strong> –≤–µ–∫—Ç–æ—Ä—ã –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã (—Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ = 0)</li>
        <li><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –∫ –µ–¥–∏–Ω–∏—á–Ω–æ–π –¥–ª–∏–Ω–µ</li>
      </ul>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤</h2>
      
      <h3>–ó–∞–¥–∞—á–∞</h3>
      <p>–£ –≤–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å 4 —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –ø–µ—á–∏ –∑–∞ 5 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫:</p>
      
      <pre><code>–í—Ä–µ–º—è 1: [850¬∞C, 845¬∞C, 855¬∞C, 848¬∞C]
–í—Ä–µ–º—è 2: [852¬∞C, 847¬∞C, 857¬∞C, 850¬∞C]  
–í—Ä–µ–º—è 3: [855¬∞C, 850¬∞C, 860¬∞C, 853¬∞C]
–í—Ä–µ–º—è 4: [858¬∞C, 853¬∞C, 863¬∞C, 856¬∞C]
–í—Ä–µ–º—è 5: [860¬∞C, 855¬∞C, 865¬∞C, 858¬∞C]</code></pre>
      
      <h3>–ó–∞–¥–∞–Ω–∏—è:</h3>
      <ol>
        <li>–í—ã—á–∏—Å–ª–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏</li>
        <li>–ù–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</li>
        <li>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
import numpy as np

# –î–∞–Ω–Ω—ã–µ —Å 4 –¥–∞—Ç—á–∏–∫–æ–≤ –∑–∞ 5 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
temperatures = [
    [850, 845, 855, 848],  # –í—Ä–µ–º—è 1
    [852, 847, 857, 850],  # –í—Ä–µ–º—è 2
    [855, 850, 860, 853],  # –í—Ä–µ–º—è 3
    [858, 853, 863, 856],  # –í—Ä–µ–º—è 4
    [860, 855, 865, 858]   # –í—Ä–µ–º—è 5
]

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
temp_array = np.array(temperatures)

# –ó–∞–¥–∞–Ω–∏–µ 1: –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
mean_temps = np.mean(temp_array, axis=1)
print("–°—Ä–µ–¥–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:", mean_temps)

# –ó–∞–¥–∞–Ω–∏–µ 2: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
max_deviation = np.max(np.abs(temp_array - mean_temps.reshape(-1, 1)))
print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:", max_deviation)

# –ó–∞–¥–∞–Ω–∏–µ 3: –¢—Ä–µ–Ω–¥ (—Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –ø–µ—Ä–≤—ã–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º)
trend = mean_temps[-1] - mean_temps[0]
print("–¢—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:", trend, "¬∞C")`
  },
  
  2: {
    title: "–ú–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    duration: "150 –º–∏–Ω", 
    type: "theory",
    content: `
      <h2>–ú–∞—Ç—Ä–∏—Ü—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö</h2>
      
      <h3>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã</h3>
      <p>–ú–∞—Ç—Ä–∏—Ü–∞ - —ç—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —á–∏—Å–µ–ª, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã.</p>
      
      <p><strong>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> –ú–∞—Ç—Ä–∏—Ü–∞ A —Ä–∞–∑–º–µ—Ä–æ–º m√ón:</p>
      <pre><code>A = [a‚ÇÅ‚ÇÅ  a‚ÇÅ‚ÇÇ  ...  a‚ÇÅ‚Çô]
    [a‚ÇÇ‚ÇÅ  a‚ÇÇ‚ÇÇ  ...  a‚ÇÇ‚Çô]
    [‚ãÆ    ‚ãÆ    ‚ã±   ‚ãÆ  ]
    [a‚Çò‚ÇÅ  a‚Çò‚ÇÇ  ...  a‚Çò‚Çô]</code></pre>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>1. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</h4>
      <p>–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞, –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü - –¥–∞—Ç—á–∏–∫:</p>
      <pre><code>        –î–∞—Ç—á–∏–∫1  –î–∞—Ç—á–∏–∫2  –î–∞—Ç—á–∏–∫3
–í—Ä–µ–º—è1    75.2     0.1      220
–í—Ä–µ–º—è2    75.8     0.2      218  
–í—Ä–µ–º—è3    76.1     0.15     219</code></pre>
      
      <h4>2. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞</h4>
      <p>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:</p>
      <pre><code>R = [1.00   0.85  -0.23]
    [0.85   1.00  -0.31]
    [-0.23 -0.31   1.00]</code></pre>
      
      <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏</h3>
      
      <h4>–°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü</h4>
      <pre><code>C = A + B, –≥–¥–µ c·µ¢‚±º = a·µ¢‚±º + b·µ¢‚±º</code></pre>
      
      <h4>–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü</h4>
      <pre><code>C = A √ó B, –≥–¥–µ c·µ¢‚±º = Œ£‚Çñ a·µ¢‚Çñ √ó b‚Çñ‚±º</code></pre>
      
      <h4>–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
      <pre><code>A·µÄ - —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—Ç–æ–ª–±—Ü–∞–º–∏</code></pre>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</h3>
      
      <h4>1. –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (PCA)</h4>
      <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:</p>
      <ul>
        <li>–ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è</li>
        <li>–ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</li>
      </ul>
      
      <h4>2. –°–∏—Å—Ç–µ–º—ã –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π</h4>
      <p>–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –≤–∏–¥–∞ Ax = b –º–µ—Ç–æ–¥–æ–º –ì–∞—É—Å—Å–∞ –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã</p>
      
      <h4>3. –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</h4>
      <p>–ú–∞—Ç—Ä–∏—Ü–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–µ–ª–∏—á–∏–Ω—ã</p>
      
      <h3>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ç—Ä–∏—Ü</h3>
      <ul>
        <li><strong>–ï–¥–∏–Ω–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ I:</strong> –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω—ã 1</li>
        <li><strong>–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:</strong> –Ω–µ–Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏</li>
        <li><strong>–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:</strong> A = A·µÄ</li>
        <li><strong>–û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:</strong> AA·µÄ = I</li>
      </ul>
      
      <h3>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –∏ –æ–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞</h3>
      <p><strong>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å det(A):</strong> —Å–∫–∞–ª—è—Ä–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã</p>
      <p><strong>–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A‚Åª¬π:</strong> AA‚Åª¬π = I (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –µ—Å–ª–∏ det(A) ‚â† 0)</p>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h2>
      
      <h3>–ó–∞–¥–∞—á–∞</h3>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.</p>
      
      <h3>–î–∞–Ω–Ω—ã–µ (20 –∏–∑–º–µ—Ä–µ–Ω–∏–π):</h3>
      <ul>
        <li>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C): 180-220</li>
        <li>–î–∞–≤–ª–µ–Ω–∏–µ (–±–∞—Ä): 5-8</li>
        <li>–°–∫–æ—Ä–æ—Å—Ç—å (–º/–º–∏–Ω): 10-15</li>
        <li>–ö–∞—á–µ—Å—Ç–≤–æ (%): 85-98</li>
      </ul>
      
      <h3>–ó–∞–¥–∞–Ω–∏—è:</h3>
      <ol>
        <li>–í—ã—á–∏—Å–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É</li>
        <li>–ù–∞–π–¥–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</li>
        <li>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `import numpy as np
import pandas as pd

# –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (20 –∏–∑–º–µ—Ä–µ–Ω–∏–π)
data = {
    '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': [185, 190, 195, 200, 205, 210, 215, 188, 192, 198,
                   202, 208, 212, 187, 193, 197, 203, 207, 211, 189],
    '–¥–∞–≤–ª–µ–Ω–∏–µ': [5.2, 5.8, 6.1, 6.5, 6.8, 7.2, 7.5, 5.5, 5.9, 6.3,
                6.6, 7.0, 7.3, 5.4, 6.0, 6.2, 6.7, 7.1, 7.4, 5.6],
    '—Å–∫–æ—Ä–æ—Å—Ç—å': [12, 11, 13, 12, 14, 13, 15, 11, 12, 13,
                14, 13, 15, 10, 12, 13, 14, 13, 14, 11],
    '–∫–∞—á–µ—Å—Ç–≤–æ': [88, 90, 92, 94, 95, 96, 97, 89, 91, 93,
                94, 96, 97, 87, 91, 92, 95, 96, 97, 89]
}

# –°–æ–∑–¥–∞–µ–º DataFrame
df = pd.DataFrame(data)

# –ó–∞–¥–∞–Ω–∏–µ 1: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
correlation_matrix = df.corr()
print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
print(correlation_matrix)

# –ó–∞–¥–∞–Ω–∏–µ 2: –ù–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
print("\\n–ù–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º:")
quality_corr = correlation_matrix['–∫–∞—á–µ—Å—Ç–≤–æ'].abs().sort_values(ascending=False)
print(quality_corr)

# –ó–∞–¥–∞–Ω–∏–µ 3: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
best_quality_idx = df['–∫–∞—á–µ—Å—Ç–≤–æ'].idxmax()
optimal_conditions = df.loc[best_quality_idx]
print("\\n–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞:")
print(optimal_conditions)`
  },

  3: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤",
    duration: "180 –º–∏–Ω",
    type: "practice", 
    steps: [
      {
        title: "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        description: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        code: `import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
data = pd.read_csv('sensor_data.csv')
print(data.head())
print(data.describe())`
      },
      {
        title: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π",
        description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤",
        code: `# –ú–µ—Ç–æ–¥ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞ (IQR)
Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
outliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–∞—Ç—á–∏–∫—É:")
print(outliers.sum())`
      },
      {
        title: "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        description: "–°–æ–∑–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–æ–º–∞–ª–∏–π",
        code: `# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∞–Ω–æ–º–∞–ª–∏–π
fig, axes = plt.subplots(2, 2, figsize=(12, 8))
sensors = ['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4']

for i, sensor in enumerate(sensors):
    ax = axes[i//2, i%2]
    ax.plot(data.index, data[sensor], label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ')
    ax.scatter(data.index[outliers[sensor]], 
              data[sensor][outliers[sensor]], 
              color='red', label='–ê–Ω–æ–º–∞–ª–∏–∏')
    ax.set_title(f'–î–∞—Ç—á–∏–∫ {i+1}')
    ax.legend()

plt.tight_layout()
plt.show()`
      }
    ],
    hasCodeEditor: true,
    initialCode: `# –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
np.random.seed(42)
n_samples = 1000

# –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
time = np.arange(n_samples)
sensor_1 = 50 + 0.01 * time + np.random.normal(0, 2, n_samples)
sensor_2 = 75 + 0.005 * time + np.random.normal(0, 1.5, n_samples)
sensor_3 = 100 - 0.008 * time + np.random.normal(0, 3, n_samples)
sensor_4 = 25 + np.sin(time * 0.01) * 5 + np.random.normal(0, 1, n_samples)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
anomaly_indices = np.random.choice(n_samples, 20, replace=False)
sensor_1[anomaly_indices] += np.random.normal(0, 10, 20)
sensor_2[anomaly_indices] += np.random.normal(0, 8, 20)

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
data = pd.DataFrame({
    'sensor_1': sensor_1,
    'sensor_2': sensor_2, 
    'sensor_3': sensor_3,
    'sensor_4': sensor_4
})

print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:")
print(data.head())
print("\\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(data.describe())`
  },

  4: {
    title: "–û—Å–Ω–æ–≤—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è AI",
    duration: "135 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏</h2>
      
      <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è</h3>
      <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —ç—Ç–æ –Ω–∞—É–∫–∞ –æ —Å–±–æ—Ä–µ, –∞–Ω–∞–ª–∏–∑–µ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –í –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è:</p>
      <ul>
        <li>–ê–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π</li>
        <li>–ü—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h3>–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
      
      <h4>–ú–µ—Ä—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏</h4>
      <p><strong>–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ:</strong></p>
      <pre><code>Œº = (x‚ÇÅ + x‚ÇÇ + ... + x‚Çô) / n</code></pre>
      
      <p><strong>–ú–µ–¥–∏–∞–Ω–∞:</strong> –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç –≤—ã–±–æ—Ä–∫—É –ø–æ–ø–æ–ª–∞–º</p>
      <p><strong>–ú–æ–¥–∞:</strong> –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ</p>
      
      <h4>–ú–µ—Ä—ã —Ä–∞–∑–±—Ä–æ—Å–∞</h4>
      <p><strong>–î–∏—Å–ø–µ—Ä—Å–∏—è:</strong></p>
      <pre><code>œÉ¬≤ = Œ£(x·µ¢ - Œº)¬≤ / n</code></pre>
      
      <p><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</strong></p>
      <pre><code>œÉ = ‚àöœÉ¬≤</code></pre>
      
      <p><strong>–†–∞–∑–º–∞—Ö:</strong> —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏</p>
      
      <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</h3>
      
      <h4>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–ù–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è:</p>
      <ul>
        <li>–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ</li>
        <li>–ö–æ–ª–æ–∫–æ–ª–æ–æ–±—Ä–∞–∑–Ω–æ–π —Ñ–æ—Ä–º–æ–π</li>
        <li>–ü—Ä–∞–≤–∏–ª–æ–º "—Ç—Ä–µ—Ö —Å–∏–≥–º": 99.7% –∑–Ω–∞—á–µ–Ω–∏–π –ª–µ–∂–∞—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Œº ¬± 3œÉ</li>
      </ul>
      
      <h4>–î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</h4>
      <ul>
        <li><strong>–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ:</strong> –¥–ª—è –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</li>
        <li><strong>–ü—É–∞—Å—Å–æ–Ω–∞:</strong> –¥–ª—è —Ä–µ–¥–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π</li>
        <li><strong>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ:</strong> –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏</li>
      </ul>
      
      <h3>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏ —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h3>
      
      <h4>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞</h4>
      <pre><code>r = Œ£((x·µ¢ - xÃÑ)(y·µ¢ - »≥)) / ‚àö(Œ£(x·µ¢ - xÃÑ)¬≤ √ó Œ£(y·µ¢ - »≥)¬≤)</code></pre>
      
      <p>–ó–Ω–∞—á–µ–Ω–∏—è r:</p>
      <ul>
        <li>r = 1: –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è</li>
        <li>r = 0: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Å–≤—è–∑–∏</li>
        <li>r = -1: –∏–¥–µ–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è</li>
      </ul>
      
      <h4>–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h4>
      <p>–ú–æ–¥–µ–ª—å: y = ax + b</p>
      <p>–ú–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤</p>
      
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã</h3>
      
      <h4>t-—Ç–µ—Å—Ç</h4>
      <p>–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–≤—É—Ö –≥—Ä—É–ø–ø</p>
      
      <h4>–•–∏-–∫–≤–∞–¥—Ä–∞—Ç —Ç–µ—Å—Ç</h4>
      <p>–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</p>
      
      <h4>ANOVA</h4>
      <p>–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø</p>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</h4>
      <ul>
        <li>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞</li>
        <li>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (SPC)</li>
        <li>–ê–Ω–∞–ª–∏–∑ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (Cp, Cpk)</li>
      </ul>
      
      <h4>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤</h4>
      <ul>
        <li>–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑</li>
        <li>–î–∏—Å–ø–µ—Ä—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
      </ul>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h2>
      
      <h3>–ó–∞–¥–∞—á–∞</h3>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –∑–∞ –º–µ—Å—è—Ü.</p>
      
      <h3>–î–∞–Ω–Ω—ã–µ:</h3>
      <p>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π</p>
      
      <h3>–ó–∞–¥–∞–Ω–∏—è:</h3>
      <ol>
        <li>–í—ã—á–∏—Å–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</li>
        <li>–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</li>
        <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</li>
        <li>–ù–∞–π–¥–∏—Ç–µ –≤—ã–±—Ä–æ—Å—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏</li>
        <li>–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥—ã –æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import pandas as pd

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (—Å–µ–∫—É–Ω–¥—ã)
np.random.seed(42)
n_samples = 100

# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
main_data = np.random.normal(45, 5, 85)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–±—Ä–æ—Å–æ–≤
outliers = np.random.normal(65, 3, 15)
operation_times = np.concatenate([main_data, outliers])

# –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
np.random.shuffle(operation_times)

print("–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(operation_times)}")
print(f"–ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π: {operation_times[:10]}")

# –ó–∞–¥–∞–Ω–∏–µ 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
mean_time = np.mean(operation_times)
median_time = np.median(operation_times)
std_time = np.std(operation_times)
min_time = np.min(operation_times)
max_time = np.max(operation_times)

print(f"\\n–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {mean_time:.2f} —Å–µ–∫")
print(f"–ú–µ–¥–∏–∞–Ω–∞: {median_time:.2f} —Å–µ–∫")
print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_time:.2f} —Å–µ–∫")
print(f"–ú–∏–Ω–∏–º—É–º: {min_time:.2f} —Å–µ–∫")
print(f"–ú–∞–∫—Å–∏–º—É–º: {max_time:.2f} —Å–µ–∫")

# –ó–∞–¥–∞–Ω–∏–µ 2: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
plt.figure(figsize=(10, 6))
plt.hist(operation_times, bins=15, alpha=0.7, color='skyblue', edgecolor='black')
plt.axvline(mean_time, color='red', linestyle='--', label=f'–°—Ä–µ–¥–Ω–µ–µ: {mean_time:.2f}')
plt.axvline(median_time, color='green', linestyle='--', label=f'–ú–µ–¥–∏–∞–Ω–∞: {median_time:.2f}')
plt.xlabel('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫)')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π')
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()

# –ó–∞–¥–∞–Ω–∏–µ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ (—Ç–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞)
statistic, p_value = stats.shapiro(operation_times)
print(f"\\n–¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å:")
print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {statistic:.4f}")
print(f"p-value: {p_value:.4f}")
print(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {'–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ' if p_value > 0.05 else '–Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ'} (Œ± = 0.05)")

# –ó–∞–¥–∞–Ω–∏–µ 4: –ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤ (–º–µ—Ç–æ–¥ IQR)
Q1 = np.percentile(operation_times, 25)
Q3 = np.percentile(operation_times, 75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers_mask = (operation_times < lower_bound) | (operation_times > upper_bound)
outliers_count = np.sum(outliers_mask)

print(f"\\n–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤ (–º–µ—Ç–æ–¥ IQR):")
print(f"Q1: {Q1:.2f}, Q3: {Q3:.2f}, IQR: {IQR:.2f}")
print(f"–ì—Ä–∞–Ω–∏—Ü—ã: [{lower_bound:.2f}, {upper_bound:.2f}]")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤: {outliers_count}")
print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–±—Ä–æ—Å–æ–≤: {outliers_count/len(operation_times)*100:.1f}%")

# –ó–∞–¥–∞–Ω–∏–µ 5: –í—ã–≤–æ–¥—ã –æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
cv = std_time / mean_time * 100  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
print(f"\\n–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.1f}%")
if cv < 10:
    stability = "–≤—ã—Å–æ–∫–∞—è"
elif cv < 20:
    stability = "—Å—Ä–µ–¥–Ω—è—è"
else:
    stability = "–Ω–∏–∑–∫–∞—è"
print(f"–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {stability}")
print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–±–∏–ª–µ–Ω' if cv < 15 else '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –≤–∞—Ä–∏–∞—Ü–∏–∏'}")`
  },

  5: {
    title: "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏",
    duration: "120 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏</h2>
      
      <h3>–û—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</h3>
      
      <h4>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏</h4>
      <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è A - —ç—Ç–æ —á–∏—Å–ª–æ P(A), —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–µ —É—Å–ª–æ–≤–∏—è–º:</p>
      <ul>
        <li>0 ‚â§ P(A) ‚â§ 1</li>
        <li>P(Œ©) = 1 (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è)</li>
        <li>P(‚àÖ) = 0 (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è)</li>
      </ul>
      
      <h4>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞</h4>
      <p><strong>–ü—Ä–∞–≤–∏–ª–æ —Å–ª–æ–∂–µ–Ω–∏—è:</strong></p>
      <pre><code>P(A ‚à™ B) = P(A) + P(B) - P(A ‚à© B)</code></pre>
      
      <p><strong>–ü—Ä–∞–≤–∏–ª–æ —É–º–Ω–æ–∂–µ–Ω–∏—è:</strong></p>
      <pre><code>P(A ‚à© B) = P(A) √ó P(B|A) = P(B) √ó P(A|B)</code></pre>
      
      <h3>–£—Å–ª–æ–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</h3>
      
      <p><strong>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong></p>
      <pre><code>P(A|B) = P(A ‚à© B) / P(B), –ø—Ä–∏ P(B) > 0</code></pre>
      
      <h4>–§–æ—Ä–º—É–ª–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏</h4>
      <pre><code>P(A) = Œ£·µ¢ P(A|B·µ¢) √ó P(B·µ¢)</code></pre>
      
      <h4>–§–æ—Ä–º—É–ª–∞ –ë–∞–π–µ—Å–∞</h4>
      <pre><code>P(A|B) = P(B|A) √ó P(A) / P(B)</code></pre>
      
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ ML:</p>
      <ul>
        <li><strong>P(A):</strong> –∞–ø—Ä–∏–æ—Ä–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</li>
        <li><strong>P(A|B):</strong> –∞–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</li>
        <li><strong>P(B|A):</strong> —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è</li>
        <li><strong>P(B):</strong> –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—â–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞</li>
      </ul>
      
      <h3>–°–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã</h3>
      
      <h4>–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã</h4>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong> P(X = x)</p>
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ:</strong></p>
      <pre><code>E[X] = Œ£ x √ó P(X = x)</code></pre>
      
      <h4>–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã</h4>
      <p><strong>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong> f(x)</p>
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ:</strong></p>
      <pre><code>E[X] = ‚à´ x √ó f(x) dx</code></pre>
      
      <h3>–í–∞–∂–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ ML</h3>
      
      <h4>–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–î–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—Ö–æ–≤ –≤ n –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö:</p>
      <pre><code>P(X = k) = C(n,k) √ó p^k √ó (1-p)^(n-k)</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</p>
      
      <h4>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:</p>
      <pre><code>f(x) = (1/‚àö(2œÄœÉ¬≤)) √ó exp(-(x-Œº)¬≤/(2œÉ¬≤))</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Ä–µ–≥—Ä–µ—Å—Å–∏—è, —à—É–º –≤ –¥–∞–Ω–Ω—ã—Ö, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞</p>
      
      <h4>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:</p>
      <pre><code>f(x) = Œª √ó exp(-Œªx), x ‚â• 0</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏, –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏</p>
      
      <h3>–ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</h3>
      
      <h4>–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–î–ª—è –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω X –∏ Y:</p>
      <pre><code>f(x,y) - —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å</code></pre>
      
      <h4>–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å</h4>
      <p>X –∏ Y –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã, –µ—Å–ª–∏:</p>
      <pre><code>f(x,y) = f(x) √ó f(y)</code></pre>
      
      <h4>–ö–æ–≤–∞—Ä–∏–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è</h4>
      <p><strong>–ö–æ–≤–∞—Ä–∏–∞—Ü–∏—è:</strong></p>
      <pre><code>Cov(X,Y) = E[(X - E[X])(Y - E[Y])]</code></pre>
      
      <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:</strong></p>
      <pre><code>œÅ = Cov(X,Y) / (œÉ‚Çì √ó œÉ·µß)</code></pre>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–ê–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏</h4>
      <ul>
        <li>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–∫–∞–∑–∞</li>
        <li>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–µ–π–±—É–ª–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–Ω–æ—Å–∞</li>
        <li>–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</h4>
      <ul>
        <li>–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –¥–æ–ª–∏ –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π</li>
        <li>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
        <li>–ü—É–∞—Å—Å–æ–Ω–æ–≤—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <h4>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞</h4>
      <ul>
        <li>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞</li>
        <li>–ì–∞–º–º–∞-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤</li>
        <li>–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</li>
      </ul>
      
      <h3>–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤ ML</h3>
      
      <h4>–ù–∞–∏–≤–Ω—ã–π –±–∞–π–µ—Å–æ–≤—Å–∫–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä</h4>
      <p>–ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:</p>
      <pre><code>P(y|x‚ÇÅ,...,x‚Çô) ‚àù P(y) √ó ‚àè·µ¢ P(x·µ¢|y)</code></pre>
      
      <h4>–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h4>
      <p>–£—á–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–æ–¥–µ–ª–∏</p>
      
      <h4>–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</h4>
      <p>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π</p>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h2>
      
      <h3>–ó–∞–¥–∞—á–∞</h3>
      <p>–ù–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–≤–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å—ã—Ä—å—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
      
      <h3>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h3>
      <ul>
        <li>–ü–æ—Å—Ç–∞–≤—â–∏–∫ A: 5% –±—Ä–∞–∫–∞ (–∞–ø—Ä–∏–æ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)</li>
        <li>–ü–æ—Å—Ç–∞–≤—â–∏–∫ B: 8% –±—Ä–∞–∫–∞ (–∞–ø—Ä–∏–æ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)</li>
        <li>–î–æ–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫: A - 60%, B - 40%</li>
      </ul>
      
      <h3>–ó–∞–¥–∞–Ω–∏—è:</h3>
      <ol>
        <li>–í—ã—á–∏—Å–ª–∏—Ç–µ –æ–±—â—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞</li>
        <li>–ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±—Ä–∞–∫, –∫–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —ç—Ç–æ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ A?</li>
        <li>–û–±–Ω–æ–≤–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
p_defect_A = 0.05  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ A
p_defect_B = 0.08  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ B
p_supplier_A = 0.6  # –î–æ–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –æ—Ç A
p_supplier_B = 0.4  # –î–æ–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫ –æ—Ç B

print("–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
print("=" * 40)

# –ó–∞–¥–∞–Ω–∏–µ 1: –û–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ (—Ñ–æ—Ä–º—É–ª–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
p_defect_total = p_defect_A * p_supplier_A + p_defect_B * p_supplier_B
print(f"–û–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞: {p_defect_total:.3f} ({p_defect_total*100:.1f}%)")

# –ó–∞–¥–∞–Ω–∏–µ 2: –ê–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (—Ñ–æ—Ä–º—É–ª–∞ –ë–∞–π–µ—Å–∞)
# P(A|–±—Ä–∞–∫) = P(–±—Ä–∞–∫|A) * P(A) / P(–±—Ä–∞–∫)
p_A_given_defect = (p_defect_A * p_supplier_A) / p_defect_total
p_B_given_defect = (p_defect_B * p_supplier_B) / p_defect_total

print(f"\\n–ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±—Ä–∞–∫:")
print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ A: {p_A_given_defect:.3f} ({p_A_given_defect*100:.1f}%)")
print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ B: {p_B_given_defect:.3f} ({p_B_given_defect*100:.1f}%)")

# –ó–∞–¥–∞–Ω–∏–µ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
# –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–∏–π
np.random.seed(42)
n_batches = 50
batch_size = 100

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–∞–∫–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏
defects_A = []
defects_B = []
updated_p_A = []
updated_p_B = []

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∞–ø—Ä–∏–æ—Ä–Ω—ã–µ)
current_p_A = p_defect_A
current_p_B = p_defect_B

for i in range(n_batches):
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –ø–∞—Ä—Ç–∏–∏
    if np.random.random() < p_supplier_A:
        # –ü–∞—Ä—Ç–∏—è –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ A
        defects = np.random.binomial(batch_size, p_defect_A)
        defects_A.append(defects)
        
        # –ë–∞–π–µ—Å–æ–≤—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è A
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Ç–∞-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ–µ –∞–ø—Ä–∏–æ—Ä–Ω–æ–µ
        alpha_A = 2  # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        beta_A = 38
        alpha_A += defects
        beta_A += batch_size - defects
        current_p_A = alpha_A / (alpha_A + beta_A)
        
    else:
        # –ü–∞—Ä—Ç–∏—è –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ B
        defects = np.random.binomial(batch_size, p_defect_B)
        defects_B.append(defects)
        
        # –ë–∞–π–µ—Å–æ–≤—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è B
        alpha_B = 3  # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        beta_B = 37
        alpha_B += defects
        beta_B += batch_size - defects
        current_p_B = alpha_B / (alpha_B + beta_B)
    
    updated_p_A.append(current_p_A)
    updated_p_B.append(current_p_B)

print(f"\\n–ü–æ—Å–ª–µ {n_batches} –ø–∞—Ä—Ç–∏–π:")
print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ A: {current_p_A:.3f} ({current_p_A*100:.1f}%)")
print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ B: {current_p_B:.3f} ({current_p_B*100:.1f}%)")

# –ó–∞–¥–∞–Ω–∏–µ 4: –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.plot(updated_p_A, 'b-', label='–ü–æ—Å—Ç–∞–≤—â–∏–∫ A', linewidth=2)
plt.plot(updated_p_B, 'r-', label='–ü–æ—Å—Ç–∞–≤—â–∏–∫ B', linewidth=2)
plt.axhline(y=p_defect_A, color='b', linestyle='--', alpha=0.7, label='–ê–ø—Ä–∏–æ—Ä–Ω–∞—è A')
plt.axhline(y=p_defect_B, color='r', linestyle='--', alpha=0.7, label='–ê–ø—Ä–∏–æ—Ä–Ω–∞—è B')
plt.xlabel('–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏')
plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞')
plt.title('–ë–∞–π–µ—Å–æ–≤—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫')
plt.legend()
plt.grid(True, alpha=0.3)

plt.subplot(1, 2, 2)
# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤
all_defects_A = np.array(defects_A) if defects_A else np.array([])
all_defects_B = np.array(defects_B) if defects_B else np.array([])

if len(all_defects_A) > 0:
    plt.hist(all_defects_A, bins=10, alpha=0.7, label='–ü–æ—Å—Ç–∞–≤—â–∏–∫ A', color='blue')
if len(all_defects_B) > 0:
    plt.hist(all_defects_B, bins=10, alpha=0.7, label='–ü–æ—Å—Ç–∞–≤—â–∏–∫ B', color='red')

plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –ø–∞—Ä—Ç–∏–∏')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –ø–∞—Ä—Ç–∏—è–º')
plt.legend()
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
print(f"\\n95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:")
if len(defects_A) > 0:
    ci_A = stats.beta.interval(0.95, alpha_A, beta_A)
    print(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ A: [{ci_A[0]:.3f}, {ci_A[1]:.3f}]")

if len(defects_B) > 0:
    ci_B = stats.beta.interval(0.95, alpha_B, beta_B)
    print(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ B: [{ci_B[0]:.3f}, {ci_B[1]:.3f}]")`
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
export const getLessonContent = (lessonId) => {
  return lessonContent[lessonId] || null;
};


  // –£—Ä–æ–∫ 3 - –ü—Ä–∞–∫—Ç–∏–∫–∞: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
  3: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤",
    duration: "180 –º–∏–Ω",
    type: "practice",
    content: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤</h2>
      
      <h3>–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã</h3>
      <p>–ù–∞—É—á–∏—Ç—å—Å—è –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤, –≤—ã—è–≤–ª—è—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –∏ —Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.</p>
      
      <h3>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
      <p>–£ –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</p>
      <ul>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏:</strong> 4 —Ç–æ—á–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è</li>
        <li><strong>–î–∞—Ç—á–∏–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏:</strong> 3 –æ—Å–∏ (X, Y, Z)</li>
        <li><strong>–î–∞—Ç—á–∏–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è:</strong> 2 —Ç–æ—á–∫–∏</li>
        <li><strong>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> —Ç–æ–∫, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ</li>
      </ul>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
      <p>–°–æ–∑–¥–∞–π—Ç–µ –≤–µ–∫—Ç–æ—Ä—ã –∏–∑ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±–∞–∑–æ–≤—É—é –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É.</p>
    `,
    initialCode: `import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –±—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
np.random.seed(42)
n_samples = 1000

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
timestamps = [datetime.now() - timedelta(minutes=i) for i in range(n_samples, 0, -1)]

# –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
temp_sensors = np.random.normal([75, 78, 72, 80], [2, 1.5, 2.5, 1.8], (n_samples, 4))
vibration_sensors = np.random.normal([0.1, 0.1, 0.05], [0.02, 0.02, 0.01], (n_samples, 3))
pressure_sensors = np.random.normal([2.5, 2.3], [0.1, 0.15], (n_samples, 2))
electrical = np.random.normal([10, 220], [0.5, 5], (n_samples, 2))

# –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ (10% –¥–∞–Ω–Ω—ã—Ö)
anomaly_indices = np.random.choice(n_samples, size=int(0.1 * n_samples), replace=False)
temp_sensors[anomaly_indices] += np.random.normal(0, 10, (len(anomaly_indices), 4))
vibration_sensors[anomaly_indices] *= np.random.uniform(2, 5, (len(anomaly_indices), 3))

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
sensor_data = np.hstack([temp_sensors, vibration_sensors, pressure_sensors, electrical])

print("–§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö:", sensor_data.shape)
print("–ü–µ—Ä–≤—ã–µ 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π:")
print(sensor_data[:5])

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
fig, axes = plt.subplots(2, 2, figsize=(15, 10))

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
axes[0,0].plot(temp_sensors[:100])
axes[0,0].set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏')
axes[0,0].set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
axes[0,0].legend(['T1', 'T2', 'T3', 'T4'])

# –î–∞—Ç—á–∏–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏
axes[0,1].plot(vibration_sensors[:100])
axes[0,1].set_title('–î–∞—Ç—á–∏–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏')
axes[0,1].set_ylabel('–£—Å–∫–æ—Ä–µ–Ω–∏–µ (g)')
axes[0,1].legend(['X', 'Y', 'Z'])

# –î–∞—Ç—á–∏–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è
axes[1,0].plot(pressure_sensors[:100])
axes[1,0].set_title('–î–∞—Ç—á–∏–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è')
axes[1,0].set_ylabel('–î–∞–≤–ª–µ–Ω–∏–µ (bar)')
axes[1,0].legend(['P1', 'P2'])

# –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
axes[1,1].plot(electrical[:100])
axes[1,1].set_title('–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
axes[1,1].set_ylabel('–¢–æ–∫ (A) / –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (V)')
axes[1,1].legend(['–¢–æ–∫', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ'])

plt.tight_layout()
plt.show()`,
    practiceSteps: [
      {
        title: "–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏",
        description: "–í—ã—á–∏—Å–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –¥–∞—Ç—á–∏–∫–∞–º–∏",
        code: `# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
correlation_matrix = np.corrcoef(sensor_data.T)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
plt.figure(figsize=(12, 10))
plt.imshow(correlation_matrix, cmap='coolwarm', vmin=-1, vmax=1)
plt.colorbar(label='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è')

# –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
sensor_names = ['T1', 'T2', 'T3', 'T4', 'Vib_X', 'Vib_Y', 'Vib_Z', 'P1', 'P2', '–¢–æ–∫', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ']
plt.xticks(range(len(sensor_names)), sensor_names, rotation=45)
plt.yticks(range(len(sensor_names)), sensor_names)
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–∞—Ç—á–∏–∫–æ–≤')
plt.tight_layout()
plt.show()

print("–°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (|r| > 0.7):")
for i in range(len(sensor_names)):
    for j in range(i+1, len(sensor_names)):
        if abs(correlation_matrix[i,j]) > 0.7:
            print(f"{sensor_names[i]} - {sensor_names[j]}: {correlation_matrix[i,j]:.3f}")`
      },
      {
        title: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –º–µ—Ç–æ–¥–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π",
        description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π",
        code: `# –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
mean_state = np.mean(sensor_data, axis=0)
print("–°—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:", mean_state)

# –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
distances = np.linalg.norm(sensor_data - mean_state, axis=1)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –∞–Ω–æ–º–∞–ª–∏–∏ (95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å)
anomaly_threshold = np.percentile(distances, 95)
anomalies = distances > anomaly_threshold

print(f"–ü–æ—Ä–æ–≥ –∞–Ω–æ–º–∞–ª–∏–∏: {anomaly_threshold:.3f}")
print(f"–ù–∞–π–¥–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: {np.sum(anomalies)} –∏–∑ {len(distances)} ({100*np.sum(anomalies)/len(distances):.1f}%)")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
plt.figure(figsize=(15, 8))

plt.subplot(2, 1, 1)
plt.plot(distances)
plt.axhline(y=anomaly_threshold, color='r', linestyle='--', label=f'–ü–æ—Ä–æ–≥: {anomaly_threshold:.3f}')
plt.scatter(np.where(anomalies)[0], distances[anomalies], color='red', s=50, alpha=0.7, label='–ê–Ω–æ–º–∞–ª–∏–∏')
plt.title('–†–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è')
plt.ylabel('–ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ')
plt.legend()

plt.subplot(2, 1, 2)
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
normal_temp = temp_sensors[~anomalies]
anomaly_temp = temp_sensors[anomalies]

plt.scatter(range(len(normal_temp)), normal_temp[:, 0], alpha=0.5, label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ', s=20)
plt.scatter(np.where(anomalies)[0], anomaly_temp[:, 0], color='red', label='–ê–Ω–æ–º–∞–ª–∏–∏', s=50)
plt.title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∞—Ç—á–∏–∫ T1: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ vs –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è')
plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
plt.xlabel('–ù–æ–º–µ—Ä –∏–∑–º–µ—Ä–µ–Ω–∏—è')
plt.legend()

plt.tight_layout()
plt.show()`
      },
      {
        title: "–ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (PCA)",
        description: "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ PCA –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        code: `from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
sensor_data_scaled = scaler.fit_transform(sensor_data)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ PCA
pca = PCA()
pca_data = pca.fit_transform(sensor_data_scaled)

# –ê–Ω–∞–ª–∏–∑ –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
explained_variance_ratio = pca.explained_variance_ratio_
cumulative_variance = np.cumsum(explained_variance_ratio)

plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.bar(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio)
plt.title('–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º')
plt.xlabel('–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞')
plt.ylabel('–î–æ–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏')

plt.subplot(1, 3, 2)
plt.plot(range(1, len(cumulative_variance) + 1), cumulative_variance, 'bo-')
plt.axhline(y=0.95, color='r', linestyle='--', label='95% –¥–∏—Å–ø–µ—Ä—Å–∏–∏')
plt.title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è')
plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')
plt.ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏')
plt.legend()

plt.subplot(1, 3, 3)
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
plt.scatter(pca_data[~anomalies, 0], pca_data[~anomalies, 1], alpha=0.5, label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ', s=20)
plt.scatter(pca_data[anomalies, 0], pca_data[anomalies, 1], color='red', label='–ê–Ω–æ–º–∞–ª–∏–∏', s=50)
plt.title('–î–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')
plt.xlabel(f'PC1 ({explained_variance_ratio[0]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)')
plt.ylabel(f'PC2 ({explained_variance_ratio[1]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)')
plt.legend()

plt.tight_layout()
plt.show()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è 95% –¥–∏—Å–ø–µ—Ä—Å–∏–∏
n_components_95 = np.argmax(cumulative_variance >= 0.95) + 1
print(f"–î–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è 95% –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ {n_components_95} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ {len(explained_variance_ratio)}")

# –ê–Ω–∞–ª–∏–∑ –≤–µ—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
print("\\n–í–µ—Å–∞ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:")
feature_names = ['T1', 'T2', 'T3', 'T4', 'Vib_X', 'Vib_Y', 'Vib_Z', 'P1', 'P2', '–¢–æ–∫', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ']
for i in range(3):
    print(f"\\nPC{i+1}:")
    weights = pca.components_[i]
    for j, weight in enumerate(weights):
        if abs(weight) > 0.3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –≤–µ—Å–∞
            print(f"  {feature_names[j]}: {weight:.3f}")`
      }
    ]
  },

  // –£—Ä–æ–∫ 4 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: –û—Å–Ω–æ–≤—ã
  4: {
    title: "–û—Å–Ω–æ–≤—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    duration: "140 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ</h2>
      
      <h3>–í–≤–µ–¥–µ–Ω–∏–µ</h3>
      <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –í —É—Å–ª–æ–≤–∏—è—Ö Industry 4.0 –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ç—É—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ, –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø–æ–º–æ–≥–∞—é—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ü–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞.</p>
      
      <h3>–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è</h3>
      
      <h4>1. –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
      <p><strong>–ú–µ—Ä—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ:</strong> Œº = (x‚ÇÅ + x‚ÇÇ + ... + x‚Çô) / n</li>
        <li><strong>–ú–µ–¥–∏–∞–Ω–∞:</strong> –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–µ–ª—è—â–µ–µ –≤—ã–±–æ—Ä–∫—É –ø–æ–ø–æ–ª–∞–º</li>
        <li><strong>–ú–æ–¥–∞:</strong> –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ</li>
      </ul>
      
      <p><strong>–ú–µ—Ä—ã —Ä–∞–∑–±—Ä–æ—Å–∞:</strong></p>
      <ul>
        <li><strong>–î–∏—Å–ø–µ—Ä—Å–∏—è:</strong> œÉ¬≤ = Œ£(x·µ¢ - Œº)¬≤ / n</li>
        <li><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</strong> œÉ = ‚àöœÉ¬≤</li>
        <li><strong>–†–∞–∑–º–∞—Ö:</strong> max(x) - min(x)</li>
        <li><strong>–ö–≤–∞—Ä—Ç–∏–ª–∏:</strong> Q‚ÇÅ, Q‚ÇÇ (–º–µ–¥–∏–∞–Ω–∞), Q‚ÇÉ</li>
      </ul>
      
      <h4>2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</h4>
      
      <p><strong>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong></p>
      <p>–ù–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –§—É–Ω–∫—Ü–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:</p>
      <pre><code>f(x) = (1/(œÉ‚àö(2œÄ))) * e^(-((x-Œº)¬≤)/(2œÉ¬≤))</code></pre>
      
      <p><strong>–°–≤–æ–π—Å—Ç–≤–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong></p>
      <ul>
        <li>68% –∑–Ω–∞—á–µ–Ω–∏–π –ª–µ–∂–∞—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Œº ¬± œÉ</li>
        <li>95% –∑–Ω–∞—á–µ–Ω–∏–π –ª–µ–∂–∞—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Œº ¬± 2œÉ</li>
        <li>99.7% –∑–Ω–∞—á–µ–Ω–∏–π –ª–µ–∂–∞—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Œº ¬± 3œÉ (–ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ö —Å–∏–≥–º)</li>
      </ul>
      
      <p><strong>–î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ:</strong> –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏</li>
        <li><strong>–ü—É–∞—Å—Å–æ–Ω–∞:</strong> –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–¥–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π</li>
        <li><strong>–í–µ–π–±—É–ª–ª–∞:</strong> –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>1. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</h4>
      <p>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</p>
      
      <p><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞:</strong></p>
      <ul>
        <li><strong>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (CL):</strong> —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li><strong>–í–µ—Ä—Ö–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª (UCL):</strong> Œº + 3œÉ</li>
        <li><strong>–ù–∏–∂–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª (LCL):</strong> Œº - 3œÉ</li>
      </ul>
      
      <p><strong>–ò–Ω–¥–µ–∫—Å—ã –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>Cp:</strong> (USL - LSL) / (6œÉ) - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å</li>
        <li><strong>Cpk:</strong> min((USL - Œº)/(3œÉ), (Œº - LSL)/(3œÉ)) - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å</li>
      </ul>
      
      <h4>2. –ê–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏</h4>
      <p>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</p>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>R(t) = P(T > t) = 1 - F(t)</code></pre>
      <p>–≥–¥–µ T - –≤—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞, F(t) - —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</p>
      
      <p><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤:</strong></p>
      <pre><code>Œª(t) = f(t) / R(t)</code></pre>
      
      <p><strong>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞ (MTTF):</strong></p>
      <pre><code>MTTF = ‚à´‚ÇÄ^‚àû R(t) dt</code></pre>
      
      <h4>3. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ (DOE)</h4>
      <p>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</p>
      
      <p><strong>–§–∞–∫—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç:</strong></p>
      <p>–ò–∑—É—á–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –î–ª—è k —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ 2 —É—Ä–æ–≤–Ω—è—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è 2^k —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.</p>
      
      <p><strong>–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (ANOVA):</strong></p>
      <p>–ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏:</p>
      <pre><code>F = MSB / MSW</code></pre>
      <p>–≥–¥–µ MSB - –º–µ–∂–≥—Ä—É–ø–ø–æ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è, MSW - –≤–Ω—É—Ç—Ä–∏–≥—Ä—É–ø–ø–æ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è</p>
      
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã</h3>
      
      <h4>1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑</h4>
      <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:</strong></p>
      <ul>
        <li><strong>–ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ (H‚ÇÄ):</strong> –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞</li>
        <li><strong>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ (H‚ÇÅ):</strong> –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞</li>
        <li><strong>–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (Œ±):</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ I —Ä–æ–¥–∞</li>
        <li><strong>p-–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–±–ª—é–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ H‚ÇÄ</li>
      </ul>
      
      <h4>2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã</h4>
      <p><strong>t-—Ç–µ—Å—Ç –°—Ç—å—é–¥–µ–Ω—Ç–∞:</strong></p>
      <p>–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:</p>
      <pre><code>t = (xÃÑ‚ÇÅ - xÃÑ‚ÇÇ) / (s‚àö(1/n‚ÇÅ + 1/n‚ÇÇ))</code></pre>
      
      <p><strong>–¢–µ—Å—Ç —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç:</strong></p>
      <p>–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</p>
      <pre><code>œá¬≤ = Œ£((O·µ¢ - E·µ¢)¬≤ / E·µ¢)</code></pre>
      <p>–≥–¥–µ O·µ¢ - –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã, E·µ¢ - –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã</p>
      
      <h3>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏ —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h3>
      
      <h4>1. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h4>
      <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞:</strong></p>
      <pre><code>r = Œ£((x·µ¢ - xÃÑ)(y·µ¢ - »≥)) / ‚àö(Œ£(x·µ¢ - xÃÑ)¬≤ * Œ£(y·µ¢ - »≥)¬≤)</code></pre>
      
      <p><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</strong></p>
      <ul>
        <li>|r| > 0.8 - —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å</li>
        <li>0.5 < |r| < 0.8 - —É–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å</li>
        <li>|r| < 0.5 - —Å–ª–∞–±–∞—è —Å–≤—è–∑—å</li>
      </ul>
      
      <h4>2. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h4>
      <p><strong>–£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:</strong></p>
      <pre><code>y = Œ≤‚ÇÄ + Œ≤‚ÇÅx + Œµ</code></pre>
      
      <p><strong>–ú–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤:</strong></p>
      <pre><code>Œ≤‚ÇÅ = Œ£((x·µ¢ - xÃÑ)(y·µ¢ - »≥)) / Œ£(x·µ¢ - xÃÑ)¬≤
Œ≤‚ÇÄ = »≥ - Œ≤‚ÇÅxÃÑ</code></pre>
      
      <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏:</strong></p>
      <pre><code>R¬≤ = 1 - (SSres / SStot)</code></pre>
      <p>–≥–¥–µ SSres - —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤, SStot - –æ–±—â–∞—è —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤</p>
      
      <h3>–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
      
      <h4>–¢–µ–æ—Ä–µ–º–∞ –ë–∞–π–µ—Å–∞</h4>
      <p>–û—Å–Ω–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</p>
      <pre><code>P(A|B) = P(B|A) * P(A) / P(B)</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã</li>
        <li><strong>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> —É—á–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–ø—ã—Ç–∞</li>
      </ul>
      
      <h3>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã</h3>
      
      <h4>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞</h4>
      <ul>
        <li><strong>–¢—Ä–µ–Ω–¥:</strong> –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è</li>
        <li><strong>–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:</strong> —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è</li>
        <li><strong>–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è:</strong> –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è</li>
        <li><strong>–°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:</strong> –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–ú–æ–¥–µ–ª—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:</strong></p>
      <pre><code>Y(t) = Trend(t) + Seasonal(t) + Cyclical(t) + Error(t)</code></pre>
      
      <h4>–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞</h4>
      <ul>
        <li><strong>–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ:</strong> —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ:</strong> –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
        <li><strong>ARIMA –º–æ–¥–µ–ª–∏:</strong> –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ</li>
      </ul>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
      
      <h4>1. –í—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤</h4>
      <ul>
        <li><strong>–î–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</strong> t-—Ç–µ—Å—Ç—ã, ANOVA, —Ä–µ–≥—Ä–µ—Å—Å–∏—è</li>
        <li><strong>–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</strong> —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç, —Ç–æ—á–Ω—ã–π —Ç–µ—Å—Ç –§–∏—à–µ—Ä–∞</li>
        <li><strong>–î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤:</strong> –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</li>
      </ul>
      
      <h4>2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π</h4>
      <ul>
        <li><strong>–ù–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å:</strong> —Ç–µ—Å—Ç—ã –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞, –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞-–°–º–∏—Ä–Ω–æ–≤–∞</li>
        <li><strong>–ì–æ–º–æ—Å–∫–µ–¥–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> —Ç–µ—Å—Ç –õ–µ–≤–µ–Ω–∞, –ë–∞—Ä—Ç–ª–µ—Ç—Ç–∞</li>
        <li><strong>–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:</strong> —Ç–µ—Å—Ç –î–∞—Ä–±–∏–Ω–∞-–£–æ—Ç—Å–æ–Ω–∞</li>
      </ul>
      
      <h4>3. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h4>
      <ul>
        <li><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å ‚â† –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å</strong></li>
        <li><strong>–†–∞–∑–º–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞:</strong> Cohen's d, eta-squared</li>
        <li><strong>–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:</strong> –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã, —á–µ–º p-–∑–Ω–∞—á–µ–Ω–∏—è</li>
      </ul>
    `
  },

  // –£—Ä–æ–∫ 5 - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
  5: {
    title: "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ",
    duration: "160 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö</h2>
      
      <h3>–í–≤–µ–¥–µ–Ω–∏–µ</h3>
      <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –º–æ—â–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–∏—Å–∫–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.</p>
      
      <h3>–û—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</h3>
      
      <h4>1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è</h4>
      <p><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è A:</strong></p>
      <pre><code>P(A) = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤ / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–æ–≤</code></pre>
      
      <p><strong>–°–≤–æ–π—Å—Ç–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li>0 ‚â§ P(A) ‚â§ 1</li>
        <li>P(Œ©) = 1 (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è)</li>
        <li>P(‚àÖ) = 0 (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è)</li>
      </ul>
      
      <p><strong>–£—Å–ª–æ–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:</strong></p>
      <pre><code>P(A|B) = P(A ‚à© B) / P(B)</code></pre>
      
      <p><strong>–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π:</strong></p>
      <p>–°–æ–±—ã—Ç–∏—è A –∏ B –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã, –µ—Å–ª–∏ P(A ‚à© B) = P(A) √ó P(B)</p>
      
      <h4>2. –§–æ—Ä–º—É–ª–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏</h4>
      <p>–ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è B‚ÇÅ, B‚ÇÇ, ..., B‚Çô –æ–±—Ä–∞–∑—É—é—Ç –ø–æ–ª–Ω—É—é –≥—Ä—É–ø–ø—É —Å–æ–±—ã—Ç–∏–π, —Ç–æ:</p>
      <pre><code>P(A) = Œ£·µ¢ P(A|B·µ¢) √ó P(B·µ¢)</code></pre>
      
      <h3>–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</h3>
      
      <h4>1. –ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –≤ –ø–∞—Ä—Ç–∏–∏</p>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>P(X = k) = C(n,k) √ó p^k √ó (1-p)^(n-k)</code></pre>
      <p>–≥–¥–µ n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π, p - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞, k - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—Ö–æ–≤</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ:</strong> E[X] = np</p>
      <p><strong>–î–∏—Å–ø–µ—Ä—Å–∏—è:</strong> Var[X] = np(1-p)</p>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –í –ø–∞—Ä—Ç–∏–∏ –∏–∑ 100 –¥–µ—Ç–∞–ª–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.05. –ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–π—Ç–∏ —Ä–æ–≤–Ω–æ 3 –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏?</p>
      
      <h4>2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü—É–∞—Å—Å–æ–Ω–∞</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π (–æ—Ç–∫–∞–∑—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∞–≤–∞—Ä–∏–∏)</p>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>P(X = k) = (Œª^k √ó e^(-Œª)) / k!</code></pre>
      <p>–≥–¥–µ Œª - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π (—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏)</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ:</strong> E[X] = Œª</p>
      <p><strong>–î–∏—Å–ø–µ—Ä—Å–∏—è:</strong> Var[X] = Œª</p>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –ï—Å–ª–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç 2 –æ—Ç–∫–∞–∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –º–µ—Å—è—Ü, –∫–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 0, 1, 2 –æ—Ç–∫–∞–∑–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ?</p>
      
      <h4>3. –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—Ö–∞</p>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>P(X = k) = (1-p)^(k-1) √ó p</code></pre>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ:</strong> E[X] = 1/p</p>
      
      <h3>–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</h3>
      
      <h4>1. –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –æ—Ç–∫–∞–∑–∞–º–∏, –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</p>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>f(x) = Œªe^(-Œªx), x ‚â• 0</code></pre>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong></p>
      <pre><code>F(x) = 1 - e^(-Œªx)</code></pre>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ:</strong> E[X] = 1/Œª</p>
      <p><strong>–î–∏—Å–ø–µ—Ä—Å–∏—è:</strong> Var[X] = 1/Œª¬≤</p>
      
      <p><strong>–°–≤–æ–π—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞–º—è—Ç–∏:</strong></p>
      <pre><code>P(X > s + t | X > s) = P(X > t)</code></pre>
      
      <h4>2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–µ–π–±—É–ª–ª–∞</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>f(x) = (Œ≤/Œ∑) √ó (x/Œ∑)^(Œ≤-1) √ó e^(-(x/Œ∑)^Œ≤)</code></pre>
      <p>–≥–¥–µ Œ≤ - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–æ—Ä–º—ã, Œ∑ - –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å—à—Ç–∞–±–∞</p>
      
      <p><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Œ≤:</strong></p>
      <ul>
        <li>Œ≤ < 1: —É–±—ã–≤–∞—é—â–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤ (–¥–µ—Ç—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏)</li>
        <li>Œ≤ = 1: –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤ (—Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–∫–∞–∑—ã)</li>
        <li>Œ≤ > 1: –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤ (–∏–∑–Ω–æ—Å)</li>
      </ul>
      
      <h4>3. –õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–º–æ–Ω—Ç–∞, —Ä–∞–∑–º–µ—Ä–æ–≤ —á–∞—Å—Ç–∏—Ü</p>
      <p>–ï—Å–ª–∏ ln(X) ~ N(Œº, œÉ¬≤), —Ç–æ X –∏–º–µ–µ—Ç –ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</p>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>f(x) = (1/(xœÉ‚àö(2œÄ))) √ó e^(-((ln(x)-Œº)¬≤)/(2œÉ¬≤))</code></pre>
      
      <h3>–ú–∞—Ä–∫–æ–≤—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã</h3>
      
      <h4>1. –ú–∞—Ä–∫–æ–≤—Å–∫–∏–µ —Ü–µ–ø–∏</h4>
      <p><strong>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –≥–¥–µ –±—É–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è</p>
      
      <p><strong>–°–≤–æ–π—Å—Ç–≤–æ –ú–∞—Ä–∫–æ–≤–∞:</strong></p>
      <pre><code>P(X‚Çô‚Çä‚ÇÅ = j | X‚ÇÄ, X‚ÇÅ, ..., X‚Çô) = P(X‚Çô‚Çä‚ÇÅ = j | X‚Çô)</code></pre>
      
      <p><strong>–ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</strong></p>
      <pre><code>P = [p·µ¢‚±º], –≥–¥–µ p·µ¢‚±º = P(X‚Çô‚Çä‚ÇÅ = j | X‚Çô = i)</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ:</strong></p>
      <ul>
        <li>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç/—Ä–µ–º–æ–Ω—Ç/–ø—Ä–æ—Å—Ç–æ–π)</li>
        <li>–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h4>2. –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ œÄ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–º, –µ—Å–ª–∏:</p>
      <pre><code>œÄ = œÄP</code></pre>
      
      <p><strong>–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:</strong> –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏</p>
      
      <h3>–¢–µ–æ—Ä–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</h3>
      
      <h4>1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è</h4>
      <ul>
        <li><strong>–ü–æ—Ç–æ–∫ –∑–∞—è–≤–æ–∫:</strong> –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</li>
        <li><strong>–í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</strong> –≤—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏</li>
        <li><strong>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</strong> –ø–æ—Ä—è–¥–æ–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫ (FIFO, LIFO, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è)</li>
      </ul>
      
      <h4>2. –ú–æ–¥–µ–ª—å M/M/1</h4>
      <p><strong>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li>M - –ø—É–∞—Å—Å–æ–Ω–æ–≤—Å–∫–∏–π –ø–æ—Ç–æ–∫ –∑–∞—è–≤–æ–∫</li>
        <li>M - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</li>
        <li>1 - –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä</li>
      </ul>
      
      <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong></p>
      <ul>
        <li><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏:</strong> œÅ = Œª/Œº</li>
        <li><strong>–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ:</strong> L = œÅ/(1-œÅ)</li>
        <li><strong>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ —Å–∏—Å—Ç–µ–º–µ:</strong> W = 1/(Œº-Œª)</li>
      </ul>
      
      <p><strong>–£—Å–ª–æ–≤–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:</strong> œÅ < 1</p>
      
      <h4>3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</h4>
      <ul>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö –±—Ä–∏–≥–∞–¥:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤</li>
        <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</li>
      </ul>
      
      <h3>–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ —Å–µ—Ç–∏</h3>
      
      <h4>1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Å–µ—Ç—å - —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ, –≥–¥–µ:</p>
      <ul>
        <li>–£–∑–ª—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ</li>
        <li>–†–µ–±—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏</li>
        <li>–ö–∞–∂–¥—ã–π —É–∑–µ–ª –∏–º–µ–µ—Ç —Ç–∞–±–ª–∏—Ü—É —É—Å–ª–æ–≤–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</li>
      </ul>
      
      <h4>2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ</h4>
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –¥–≤–∏–≥–∞—Ç–µ–ª—è</p>
      <ul>
        <li><strong>–ü—Ä–∏—á–∏–Ω—ã:</strong> –∏–∑–Ω–æ—Å –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤, –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –º–∞—Å–ª–∞, –ø–µ—Ä–µ–≥—Ä–µ–≤</li>
        <li><strong>–°–∏–º–ø—Ç–æ–º—ã:</strong> –≤–∏–±—Ä–∞—Ü–∏—è, —à—É–º, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</li>
        <li><strong>–ò–∑–º–µ—Ä–µ–Ω–∏—è:</strong> –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤</li>
      </ul>
      
      <p><strong>–í—ã–≤–æ–¥:</strong> –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø—Ä–∏—á–∏–Ω –ø–æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–º —Å–∏–º–ø—Ç–æ–º–∞–º</p>
      
      <h3>–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
      
      <h4>1. –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏</h4>
      <p><strong>–°—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li><strong>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø:</strong> –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏</li>
        <li><strong>–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø:</strong> –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è:</strong></p>
      <pre><code>min c^T x + E[Q(x, Œæ)]</code></pre>
      <p>–≥–¥–µ Q(x, Œæ) - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞</p>
      
      <h4>2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</h4>
      <ul>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–µ–π:</strong> —É—á–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞</li>
        <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–º —Å–ø—Ä–æ—Å–µ</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–æ–≤:</strong> —É—á–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤</li>
      </ul>
      
      <h3>–ú–µ—Ç–æ–¥—ã –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ</h3>
      
      <h4>1. –ü—Ä–∏–Ω—Ü–∏–ø –º–µ—Ç–æ–¥–∞</h4>
      <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</p>
      
      <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã:</strong></p>
      <ol>
        <li>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–∫</li>
        <li>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫</li>
        <li>–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
      </ol>
      
      <h4>2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ä–∏—Å–∫–æ–≤</h4>
      <p><strong>–ê–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:</strong></p>
      <ul>
        <li>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
        <li>–û—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º—ã</li>
        <li>–ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤:</strong></p>
      <ul>
        <li>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li>–û—Ü–µ–Ω–∫–∞ NPV –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π</li>
        <li>–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤</li>
      </ul>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
      
      <h4>1. –í—ã–±–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</h4>
      <ul>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:</strong> –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã, Q-Q –≥—Ä–∞—Ñ–∏–∫–∏</li>
        <li><strong>–¢–µ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–∏—è:</strong> –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞-–°–º–∏—Ä–Ω–æ–≤–∞, –ê–Ω–¥–µ—Ä—Å–æ–Ω–∞-–î–∞—Ä–ª–∏–Ω–≥–∞</li>
        <li><strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:</strong> AIC, BIC</li>
      </ul>
      
      <h4>2. –û—Ü–µ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h4>
      <ul>
        <li><strong>–ú–µ—Ç–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è</strong></li>
        <li><strong>–ú–µ—Ç–æ–¥ –º–æ–º–µ–Ω—Ç–æ–≤</strong></li>
        <li><strong>–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã</strong></li>
      </ul>
      
      <h4>3. –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π</h4>
      <ul>
        <li><strong>–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è</strong></li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤</strong></li>
        <li><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏</strong></li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç:</p>
      <ul>
        <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ä–∏—Å–∫–∏</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Å —É—á–µ—Ç–æ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏</li>
        <li>–ü—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</li>
        <li>–ü–æ–≤—ã—à–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</li>
      </ul>
    `
  },

  // –£—Ä–æ–∫ 6 - –ü—Ä–∞–∫—Ç–∏–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
  6: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
    duration: "200 –º–∏–Ω",
    type: "practice",
    content: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞</h2>
      
      <h3>–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã</h3>
      <p>–û—Å–≤–æ–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –Ω–∞—É—á–∏—Ç—å—Å—è —Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –≤—ã—è–≤–ª—è—Ç—å –ø—Ä–∏—á–∏–Ω—ã –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.</p>
      
      <h3>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
      <p>–î–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:</p>
      <ul>
        <li><strong>–†–∞–∑–º–µ—Ä—ã –¥–µ—Ç–∞–ª–µ–π:</strong> –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–∞ –≤–∞–ª–æ–≤</li>
        <li><strong>–î–µ—Ñ–µ–∫—Ç—ã:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–í—Ä–µ–º—è —Ü–∏–∫–ª–∞:</strong> –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π</li>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ä–µ–∂–∏–º—ã:</strong> –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
      </ul>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏</h3>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞.</p>
    `,
    initialCode: `import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy import stats
import seaborn as sns
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–∞–º–µ—Ç—Ä–µ –≤–∞–ª–æ–≤ (–º–º)
np.random.seed(42)
n_samples = 500

# –ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50.0 –º–º
# –î–æ–ø—É—Å–∫: ¬±0.5 –º–º (49.5 - 50.5 –º–º)
nominal_diameter = 50.0
tolerance = 0.5
LSL = nominal_diameter - tolerance  # –ù–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
USL = nominal_diameter + tolerance  # –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏

# –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º –∏ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é
process_mean = 50.1  # –ù–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–æ–º–∏–Ω–∞–ª–∞
process_std = 0.15   # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞

diameters = np.random.normal(process_mean, process_std, n_samples)

# –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
timestamps = pd.date_range(start='2024-01-01', periods=n_samples, freq='H')
quality_data = pd.DataFrame({
    'timestamp': timestamps,
    'diameter': diameters,
    'sample_group': np.repeat(range(n_samples//5), 5)[:n_samples]
})

print("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–≤:")
print(f"–°—Ä–µ–¥–Ω–µ–µ: {np.mean(diameters):.4f} –º–º")
print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(diameters, ddof=1):.4f} –º–º")
print(f"–ú–∏–Ω–∏–º—É–º: {np.min(diameters):.4f} –º–º")
print(f"–ú–∞–∫—Å–∏–º—É–º: {np.max(diameters):.4f} –º–º")
print(f"–ü—Ä–µ–¥–µ–ª—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: [{LSL:.1f}, {USL:.1f}] –º–º")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
fig, axes = plt.subplots(2, 2, figsize=(15, 12))

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
axes[0,0].hist(diameters, bins=30, alpha=0.7, density=True, color='skyblue', edgecolor='black')
axes[0,0].axvline(LSL, color='red', linestyle='--', linewidth=2, label=f'LSL = {LSL}')
axes[0,0].axvline(USL, color='red', linestyle='--', linewidth=2, label=f'USL = {USL}')
axes[0,0].axvline(nominal_diameter, color='green', linestyle='-', linewidth=2, label=f'–ù–æ–º–∏–Ω–∞–ª = {nominal_diameter}')
axes[0,0].axvline(np.mean(diameters), color='orange', linestyle='-', linewidth=2, label=f'–°—Ä–µ–¥–Ω–µ–µ = {np.mean(diameters):.3f}')
axes[0,0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ –≤–∞–ª–æ–≤')
axes[0,0].set_xlabel('–î–∏–∞–º–µ—Ç—Ä (–º–º)')
axes[0,0].set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
axes[0,0].legend()
axes[0,0].grid(True, alpha=0.3)

# Q-Q –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
stats.probplot(diameters, dist="norm", plot=axes[0,1])
axes[0,1].set_title('Q-Q –≥—Ä–∞—Ñ–∏–∫ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏)')
axes[0,1].grid(True, alpha=0.3)

# –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
axes[1,0].plot(quality_data['timestamp'], quality_data['diameter'], alpha=0.7, linewidth=1)
axes[1,0].axhline(LSL, color='red', linestyle='--', label='LSL')
axes[1,0].axhline(USL, color='red', linestyle='--', label='USL')
axes[1,0].axhline(nominal_diameter, color='green', linestyle='-', label='–ù–æ–º–∏–Ω–∞–ª')
axes[1,0].set_title('–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–∏–∞–º–µ—Ç—Ä–æ–≤')
axes[1,0].set_xlabel('–í—Ä–µ–º—è')
axes[1,0].set_ylabel('–î–∏–∞–º–µ—Ç—Ä (–º–º)')
axes[1,0].legend()
axes[1,0].grid(True, alpha=0.3)
axes[1,0].tick_params(axis='x', rotation=45)

# –ë–æ–∫—Å–ø–ª–æ—Ç
axes[1,1].boxplot(diameters, vert=True)
axes[1,1].axhline(LSL, color='red', linestyle='--', label='LSL')
axes[1,1].axhline(USL, color='red', linestyle='--', label='USL')
axes[1,1].axhline(nominal_diameter, color='green', linestyle='-', label='–ù–æ–º–∏–Ω–∞–ª')
axes[1,1].set_title('–ë–æ–∫—Å–ø–ª–æ—Ç –¥–∏–∞–º–µ—Ç—Ä–æ–≤')
axes[1,1].set_ylabel('–î–∏–∞–º–µ—Ç—Ä (–º–º)')
axes[1,1].legend()
axes[1,1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –¢–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
shapiro_stat, shapiro_p = stats.shapiro(diameters)
print(f"\\n–¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å:")
print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {shapiro_stat:.4f}")
print(f"p-–∑–Ω–∞—á–µ–Ω–∏–µ: {shapiro_p:.4f}")
print(f"–í—ã–≤–æ–¥: {'–î–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã' if shapiro_p > 0.05 else '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'} (Œ± = 0.05)")`,
    practiceSteps: [
      {
        title: "–†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
        description: "–í—ã—á–∏—Å–ª–∏—Ç–µ Cp, Cpk, Pp, Ppk –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞",
        code: `# –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
sample_mean = np.mean(diameters)
sample_std = np.std(diameters, ddof=1)

# Cp - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞
Cp = (USL - LSL) / (6 * sample_std)

# Cpk - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞
Cpu = (USL - sample_mean) / (3 * sample_std)  # –í–µ—Ä—Ö–Ω–∏–π –∏–Ω–¥–µ–∫—Å
Cpl = (sample_mean - LSL) / (3 * sample_std)  # –ù–∏–∂–Ω–∏–π –∏–Ω–¥–µ–∫—Å
Cpk = min(Cpu, Cpl)

# Pp –∏ Ppk - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
Pp = (USL - LSL) / (6 * sample_std)
Ppk = min((USL - sample_mean) / (3 * sample_std), (sample_mean - LSL) / (3 * sample_std))

# –ü—Ä–æ—Ü–µ–Ω—Ç –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
defects_below_LSL = np.sum(diameters < LSL)
defects_above_USL = np.sum(diameters > USL)
total_defects = defects_below_LSL + defects_above_USL
defect_rate = (total_defects / len(diameters)) * 100

# –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
z_lsl = (LSL - sample_mean) / sample_std
z_usl = (USL - sample_mean) / sample_std
theoretical_defect_rate = (stats.norm.cdf(z_lsl) + (1 - stats.norm.cdf(z_usl))) * 100

print("=== –ê–ù–ê–õ–ò–ó –ü–†–û–¶–ï–°–°–ù–û–ô –°–ü–û–°–û–ë–ù–û–°–¢–ò ===")
print(f"–ü—Ä–µ–¥–µ–ª—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: [{LSL:.1f}, {USL:.1f}] –º–º")
print(f"–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {sample_mean:.4f} –º–º")
print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {sample_std:.4f} –º–º")
print(f"–®–∏—Ä–∏–Ω–∞ –¥–æ–ø—É—Å–∫–∞: {USL - LSL:.1f} –º–º")
print(f"–®–∏—Ä–∏–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (6œÉ): {6 * sample_std:.4f} –º–º")

print("\\n=== –ò–ù–î–ï–ö–°–´ –°–ü–û–°–û–ë–ù–û–°–¢–ò ===")
print(f"Cp  = {Cp:.3f}  {'‚úì –•–æ—Ä–æ—à–æ' if Cp >= 1.33 else '‚ö† –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' if Cp >= 1.0 else '‚úó –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'}")
print(f"Cpk = {Cpk:.3f}  {'‚úì –•–æ—Ä–æ—à–æ' if Cpk >= 1.33 else '‚ö† –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' if Cpk >= 1.0 else '‚úó –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'}")
print(f"Pp  = {Pp:.3f}")
print(f"Ppk = {Ppk:.3f}")

print(f"\\nCpu = {Cpu:.3f} (—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞)")
print(f"Cpl = {Cpl:.3f} (—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞)")

print("\\n=== –ê–ù–ê–õ–ò–ó –î–ï–§–ï–ö–¢–û–í ===")
print(f"–î–µ—Ñ–µ–∫—Ç—ã –Ω–∏–∂–µ LSL: {defects_below_LSL} ({defects_below_LSL/len(diameters)*100:.2f}%)")
print(f"–î–µ—Ñ–µ–∫—Ç—ã –≤—ã—à–µ USL: {defects_above_USL} ({defects_above_USL/len(diameters)*100:.2f}%)")
print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤: {defect_rate:.2f}%")
print(f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤: {theoretical_defect_rate:.4f}%")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

# –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
x = np.linspace(diameters.min() - 0.1, diameters.max() + 0.1, 1000)
y = stats.norm.pdf(x, sample_mean, sample_std)

axes[0].plot(x, y, 'b-', linewidth=2, label='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞')
axes[0].fill_between(x, y, alpha=0.3)
axes[0].axvline(LSL, color='red', linestyle='--', linewidth=2, label=f'LSL = {LSL}')
axes[0].axvline(USL, color='red', linestyle='--', linewidth=2, label=f'USL = {USL}')
axes[0].axvline(sample_mean, color='orange', linestyle='-', linewidth=2, label=f'Œº = {sample_mean:.3f}')

# –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–µ—Ñ–µ–∫—Ç–æ–≤
x_defect_low = x[x <= LSL]
y_defect_low = stats.norm.pdf(x_defect_low, sample_mean, sample_std)
axes[0].fill_between(x_defect_low, y_defect_low, color='red', alpha=0.5, label='–î–µ—Ñ–µ–∫—Ç—ã < LSL')

x_defect_high = x[x >= USL]
y_defect_high = stats.norm.pdf(x_defect_high, sample_mean, sample_std)
axes[0].fill_between(x_defect_high, y_defect_high, color='red', alpha=0.5, label='–î–µ—Ñ–µ–∫—Ç—ã > USL')

axes[0].set_title(f'–ü—Ä–æ—Ü–µ—Å—Å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\\nCp = {Cp:.3f}, Cpk = {Cpk:.3f}')
axes[0].set_xlabel('–î–∏–∞–º–µ—Ç—Ä (–º–º)')
axes[0].set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
axes[0].legend()
axes[0].grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
indices = ['Cp', 'Cpk', 'Pp', 'Ppk']
values = [Cp, Cpk, Pp, Ppk]
colors = ['green' if v >= 1.33 else 'orange' if v >= 1.0 else 'red' for v in values]

bars = axes[1].bar(indices, values, color=colors, alpha=0.7, edgecolor='black')
axes[1].axhline(y=1.0, color='orange', linestyle='--', label='–ú–∏–Ω–∏–º—É–º (1.0)')
axes[1].axhline(y=1.33, color='green', linestyle='--', label='–•–æ—Ä–æ—à–æ (1.33)')
axes[1].set_title('–ò–Ω–¥–µ–∫—Å—ã –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏')
axes[1].set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞')
axes[1].legend()
axes[1].grid(True, alpha=0.3)

# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
for bar, value in zip(bars, values):
    axes[1].text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02, 
                f'{value:.3f}', ha='center', va='bottom', fontweight='bold')

# –ì—Ä–∞—Ñ–∏–∫ 3: –ê–Ω–∞–ª–∏–∑ —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
target_line = np.linspace(LSL, USL, 100)
cp_capability = np.ones_like(target_line) * Cp

axes[2].plot(target_line, cp_capability, 'g--', linewidth=2, label=f'Cp = {Cp:.3f}')
axes[2].axvline(sample_mean, color='orange', linewidth=3, label=f'–¢–µ–∫—É—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ = {sample_mean:.3f}')
axes[2].axvline(nominal_diameter, color='blue', linewidth=2, label=f'–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {nominal_diameter}')
axes[2].axvline(LSL, color='red', linestyle=':', label='LSL')
axes[2].axvline(USL, color='red', linestyle=':', label='USL')

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
offset = abs(sample_mean - nominal_diameter)
axes[2].annotate(f'–°–º–µ—â–µ–Ω–∏–µ: {offset:.3f} –º–º', 
                xy=(sample_mean, Cp), xytext=(sample_mean + 0.1, Cp + 0.1),
                arrowprops=dict(arrowstyle='->', color='red'),
                fontsize=10, color='red')

axes[2].set_title('–ê–Ω–∞–ª–∏–∑ —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞')
axes[2].set_xlabel('–î–∏–∞–º–µ—Ç—Ä (–º–º)')
axes[2].set_ylabel('Cp')
axes[2].legend()
axes[2].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
print("\\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
if Cpk < 1.0:
    print("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞")
    print("   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∏–∑–∏—Ç—å –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
elif Cpk < 1.33:
    print("üü° –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
    print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å")
    print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞")
else:
    print("üü¢ –•–û–†–û–®–û: –ü—Ä–æ—Ü–µ—Å—Å —Å–ø–æ—Å–æ–±–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é")

if abs(sample_mean - nominal_diameter) > 0.05:
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å —Å–º–µ—â–µ–Ω –Ω–∞ {abs(sample_mean - nominal_diameter):.3f} –º–º –æ—Ç –Ω–æ–º–∏–Ω–∞–ª–∞")
    print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")`
      },
      {
        title: "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –®—É—Ö–∞—Ä—Ç–∞",
        description: "–°–æ–∑–¥–∞–π—Ç–µ X-bar –∏ R –∫–∞—Ä—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞",
        code: `# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –®—É—Ö–∞—Ä—Ç–∞
# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–¥–≥—Ä—É–ø–ø–∞–º (–ø–æ 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π)
subgroup_size = 5
n_subgroups = len(diameters) // subgroup_size
subgroups = diameters[:n_subgroups * subgroup_size].reshape(n_subgroups, subgroup_size)

# –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã
subgroup_means = np.mean(subgroups, axis=1)  # X-bar
subgroup_ranges = np.max(subgroups, axis=1) - np.min(subgroups, axis=1)  # R
subgroup_stds = np.std(subgroups, axis=1, ddof=1)  # s

# –û–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
grand_mean = np.mean(subgroup_means)  # X-double-bar
mean_range = np.mean(subgroup_ranges)  # R-bar
mean_std = np.mean(subgroup_stds)  # s-bar

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç (–¥–ª—è n=5)
A2 = 0.577  # –¥–ª—è X-bar –∫–∞—Ä—Ç—ã —Å R
D3 = 0.0    # –¥–ª—è R –∫–∞—Ä—Ç—ã (–Ω–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª)
D4 = 2.114  # –¥–ª—è R –∫–∞—Ä—Ç—ã (–≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª)
A3 = 1.427  # –¥–ª—è X-bar –∫–∞—Ä—Ç—ã —Å s
B3 = 0.0    # –¥–ª—è s –∫–∞—Ä—Ç—ã (–Ω–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª)
B4 = 2.089  # –¥–ª—è s –∫–∞—Ä—Ç—ã (–≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª)

# –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è X-bar –∫–∞—Ä—Ç—ã
UCL_xbar = grand_mean + A2 * mean_range
LCL_xbar = grand_mean - A2 * mean_range

# –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è R –∫–∞—Ä—Ç—ã
UCL_R = D4 * mean_range
LCL_R = D3 * mean_range

# –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è s –∫–∞—Ä—Ç—ã
UCL_s = B4 * mean_std
LCL_s = B3 * mean_std

print("=== –ö–û–ù–¢–†–û–õ–¨–ù–´–ï –ö–ê–†–¢–´ –®–£–•–ê–†–¢–ê ===")
print(f"–†–∞–∑–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã: {subgroup_size}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–≥—Ä—É–ø–ø: {n_subgroups}")
print(f"–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (XÃÑÃÑ): {grand_mean:.4f} –º–º")
print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–∞—Ö (RÃÑ): {mean_range:.4f} –º–º")
print(f"–°—Ä–µ–¥–Ω–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (sÃÑ): {mean_std:.4f} –º–º")

print("\\n=== –ö–û–ù–¢–†–û–õ–¨–ù–´–ï –ü–†–ï–î–ï–õ–´ ===")
print(f"X-bar –∫–∞—Ä—Ç–∞: LCL = {LCL_xbar:.4f}, CL = {grand_mean:.4f}, UCL = {UCL_xbar:.4f}")
print(f"R –∫–∞—Ä—Ç–∞:     LCL = {LCL_R:.4f}, CL = {mean_range:.4f}, UCL = {UCL_R:.4f}")
print(f"s –∫–∞—Ä—Ç–∞:     LCL = {LCL_s:.4f}, CL = {mean_std:.4f}, UCL = {UCL_s:.4f}")

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
fig, axes = plt.subplots(3, 1, figsize=(15, 12))

# X-bar –∫–∞—Ä—Ç–∞
subgroup_numbers = range(1, n_subgroups + 1)
axes[0].plot(subgroup_numbers, subgroup_means, 'bo-', markersize=4, linewidth=1, label='–°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–≥—Ä—É–ø–ø')
axes[0].axhline(grand_mean, color='green', linewidth=2, label=f'CL = {grand_mean:.4f}')
axes[0].axhline(UCL_xbar, color='red', linestyle='--', linewidth=2, label=f'UCL = {UCL_xbar:.4f}')
axes[0].axhline(LCL_xbar, color='red', linestyle='--', linewidth=2, label=f'LCL = {LCL_xbar:.4f}')

# –í—ã–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤
out_of_control_upper = subgroup_means > UCL_xbar
out_of_control_lower = subgroup_means < LCL_xbar
if np.any(out_of_control_upper):
    axes[0].scatter(np.array(subgroup_numbers)[out_of_control_upper], 
                   subgroup_means[out_of_control_upper], 
                   color='red', s=100, marker='x', linewidth=3, label='–í–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—è')
if np.any(out_of_control_lower):
    axes[0].scatter(np.array(subgroup_numbers)[out_of_control_lower], 
                   subgroup_means[out_of_control_lower], 
                   color='red', s=100, marker='x', linewidth=3)

axes[0].set_title('X-bar –∫–∞—Ä—Ç–∞ (–∫–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö)')
axes[0].set_xlabel('–ù–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã')
axes[0].set_ylabel('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–º–º)')
axes[0].legend()
axes[0].grid(True, alpha=0.3)

# R –∫–∞—Ä—Ç–∞
axes[1].plot(subgroup_numbers, subgroup_ranges, 'go-', markersize=4, linewidth=1, label='–†–∞–∑–º–∞—Ö–∏ –ø–æ–¥–≥—Ä—É–ø–ø')
axes[1].axhline(mean_range, color='green', linewidth=2, label=f'CL = {mean_range:.4f}')
axes[1].axhline(UCL_R, color='red', linestyle='--', linewidth=2, label=f'UCL = {UCL_R:.4f}')
axes[1].axhline(LCL_R, color='red', linestyle='--', linewidth=2, label=f'LCL = {LCL_R:.4f}')

# –í—ã–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤ –¥–ª—è R –∫–∞—Ä—Ç—ã
out_of_control_R_upper = subgroup_ranges > UCL_R
out_of_control_R_lower = subgroup_ranges < LCL_R
if np.any(out_of_control_R_upper):
    axes[1].scatter(np.array(subgroup_numbers)[out_of_control_R_upper], 
                   subgroup_ranges[out_of_control_R_upper], 
                   color='red', s=100, marker='x', linewidth=3, label='–í–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—è')

axes[1].set_title('R –∫–∞—Ä—Ç–∞ (–∫–∞—Ä—Ç–∞ —Ä–∞–∑–º–∞—Ö–æ–≤)')
axes[1].set_xlabel('–ù–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã')
axes[1].set_ylabel('–†–∞–∑–º–∞—Ö (–º–º)')
axes[1].legend()
axes[1].grid(True, alpha=0.3)

# s –∫–∞—Ä—Ç–∞
axes[2].plot(subgroup_numbers, subgroup_stds, 'mo-', markersize=4, linewidth=1, label='–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–¥–≥—Ä—É–ø–ø')
axes[2].axhline(mean_std, color='green', linewidth=2, label=f'CL = {mean_std:.4f}')
axes[2].axhline(UCL_s, color='red', linestyle='--', linewidth=2, label=f'UCL = {UCL_s:.4f}')
axes[2].axhline(LCL_s, color='red', linestyle='--', linewidth=2, label=f'LCL = {LCL_s:.4f}')

# –í—ã–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤ –¥–ª—è s –∫–∞—Ä—Ç—ã
out_of_control_s_upper = subgroup_stds > UCL_s
out_of_control_s_lower = subgroup_stds < LCL_s
if np.any(out_of_control_s_upper):
    axes[2].scatter(np.array(subgroup_numbers)[out_of_control_s_upper], 
                   subgroup_stds[out_of_control_s_upper], 
                   color='red', s=100, marker='x', linewidth=3, label='–í–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—è')

axes[2].set_title('s –∫–∞—Ä—Ç–∞ (–∫–∞—Ä—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π)')
axes[2].set_xlabel('–ù–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã')
axes[2].set_ylabel('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–º–º)')
axes[2].legend()
axes[2].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
print("\\n=== –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–û–¶–ï–°–°–ê ===")
out_of_control_xbar = np.sum(out_of_control_upper) + np.sum(out_of_control_lower)
out_of_control_R = np.sum(out_of_control_R_upper) + np.sum(out_of_control_R_lower)
out_of_control_s = np.sum(out_of_control_s_upper) + np.sum(out_of_control_s_lower)

print(f"–¢–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ X-bar –∫–∞—Ä—Ç–µ: {out_of_control_xbar}")
print(f"–¢–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ R –∫–∞—Ä—Ç–µ: {out_of_control_R}")
print(f"–¢–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ s –∫–∞—Ä—Ç–µ: {out_of_control_s}")

if out_of_control_xbar == 0 and out_of_control_R == 0:
    print("üü¢ –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
else:
    print("üî¥ –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ—É–ø—Ä–∞–≤–ª—è–µ–º–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—Å–æ–±—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≤–∞—Ä–∏–∞—Ü–∏–∏")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ—Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
def check_western_electric_rules(data, center_line, ucl, lcl):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª Western Electric –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ—Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤"""
    violations = []
    n = len(data)
    
    # –ü—Ä–∞–≤–∏–ª–æ 1: –¢–æ—á–∫–∞ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤
    rule1 = (data > ucl) | (data < lcl)
    if np.any(rule1):
        violations.append(f"–ü—Ä–∞–≤–∏–ª–æ 1: {np.sum(rule1)} —Ç–æ—á–µ–∫ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤")
    
    # –ü—Ä–∞–≤–∏–ª–æ 2: 9 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥ –ø–æ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
    above_center = data > center_line
    below_center = data < center_line
    
    for i in range(n - 8):
        if np.all(above_center[i:i+9]) or np.all(below_center[i:i+9]):
            violations.append(f"–ü—Ä–∞–≤–∏–ª–æ 2: 9 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥ –ø–æ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç –¶–õ (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–æ—á–∫–∏ {i+1})")
            break
    
    # –ü—Ä–∞–≤–∏–ª–æ 3: 6 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—Ç –∏–ª–∏ —É–±—ã–≤–∞—é—Ç
    for i in range(n - 5):
        if (np.all(np.diff(data[i:i+6]) > 0) or np.all(np.diff(data[i:i+6]) < 0)):
            violations.append(f"–ü—Ä–∞–≤–∏–ª–æ 3: 6 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥ –æ–±—Ä–∞–∑—É—é—Ç —Ç—Ä–µ–Ω–¥ (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–æ—á–∫–∏ {i+1})")
            break
    
    return violations

print("\\n=== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ WESTERN ELECTRIC ===")
xbar_violations = check_western_electric_rules(subgroup_means, grand_mean, UCL_xbar, LCL_xbar)
R_violations = check_western_electric_rules(subgroup_ranges, mean_range, UCL_R, LCL_R)

if xbar_violations:
    print("X-bar –∫–∞—Ä—Ç–∞:")
    for violation in xbar_violations:
        print(f"  ‚Ä¢ {violation}")
else:
    print("X-bar –∫–∞—Ä—Ç–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

if R_violations:
    print("R –∫–∞—Ä—Ç–∞:")
    for violation in R_violations:
        print(f"  ‚Ä¢ {violation}")
else:
    print("R –∫–∞—Ä—Ç–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")`
      },
      {
        title: "–ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ p-–∫–∞—Ä—Ç—ã",
        description: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–æ–ª—é –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –∏ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ p-–∫–∞—Ä—Ç—É",
        code: `# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö
np.random.seed(123)
n_lots = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π
lot_sizes = np.random.randint(80, 120, n_lots)  # –†–∞–∑–º–µ—Ä—ã –ø–∞—Ä—Ç–∏–π (80-120 –∏–∑–¥–µ–ª–∏–π)

# –ë–∞–∑–æ–≤–∞—è –¥–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ 3%
base_defect_rate = 0.03

# –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ (—É—Ö—É–¥—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ä–∏–æ–¥–∞)
defect_rates = np.ones(n_lots) * base_defect_rate
defect_rates[20:30] = 0.08  # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç—å –≤ –ø–∞—Ä—Ç–∏—è—Ö 20-30

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏
defects = np.array([np.random.binomial(size, rate) for size, rate in zip(lot_sizes, defect_rates)])
defect_proportions = defects / lot_sizes

# –û–±—â–∞—è –¥–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤
total_defects = np.sum(defects)
total_inspected = np.sum(lot_sizes)
overall_defect_rate = total_defects / total_inspected

print("=== –ê–ù–ê–õ–ò–ó –î–ï–§–ï–ö–¢–û–í ===")
print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π: {total_inspected}")
print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {total_defects}")
print(f"–û–±—â–∞—è –¥–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤: {overall_defect_rate:.4f} ({overall_defect_rate*100:.2f}%)")
print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏: {np.mean(lot_sizes):.1f}")
print(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∞—Ä—Ç–∏–π: {np.min(lot_sizes)} - {np.max(lot_sizes)}")

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ p-–∫–∞—Ä—Ç—ã (–∫–∞—Ä—Ç—ã –¥–æ–ª–µ–π –¥–µ—Ñ–µ–∫—Ç–æ–≤)
# –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è p-–∫–∞—Ä—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏
p_bar = overall_defect_rate

# –î–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
UCL_p = p_bar + 3 * np.sqrt(p_bar * (1 - p_bar) / lot_sizes)
LCL_p = p_bar - 3 * np.sqrt(p_bar * (1 - p_bar) / lot_sizes)
LCL_p = np.maximum(LCL_p, 0)  # –ù–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
fig, axes = plt.subplots(3, 1, figsize=(15, 12))

# p-–∫–∞—Ä—Ç–∞
lot_numbers = range(1, n_lots + 1)
axes[0].plot(lot_numbers, defect_proportions, 'bo-', markersize=4, linewidth=1, label='–î–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤')
axes[0].plot(lot_numbers, UCL_p, 'r--', linewidth=1, label='UCL')
axes[0].plot(lot_numbers, LCL_p, 'r--', linewidth=1, label='LCL')
axes[0].axhline(p_bar, color='green', linewidth=2, label=f'CL = {p_bar:.4f}')

# –í—ã–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤
out_of_control_p_upper = defect_proportions > UCL_p
out_of_control_p_lower = defect_proportions < LCL_p

if np.any(out_of_control_p_upper):
    axes[0].scatter(np.array(lot_numbers)[out_of_control_p_upper], 
                   defect_proportions[out_of_control_p_upper], 
                   color='red', s=100, marker='x', linewidth=3, label='–í–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—è')
if np.any(out_of_control_p_lower):
    axes[0].scatter(np.array(lot_numbers)[out_of_control_p_lower], 
                   defect_proportions[out_of_control_p_lower], 
                   color='red', s=100, marker='x', linewidth=3)

axes[0].set_title('p-–∫–∞—Ä—Ç–∞ (–∫–∞—Ä—Ç–∞ –¥–æ–ª–µ–π –¥–µ—Ñ–µ–∫—Ç–æ–≤)')
axes[0].set_xlabel('–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏')
axes[0].set_ylabel('–î–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤')
axes[0].legend()
axes[0].grid(True, alpha=0.3)

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–µ–π –¥–µ—Ñ–µ–∫—Ç–æ–≤
axes[1].hist(defect_proportions, bins=15, alpha=0.7, color='skyblue', edgecolor='black')
axes[1].axvline(p_bar, color='green', linewidth=2, label=f'–°—Ä–µ–¥–Ω–µ–µ = {p_bar:.4f}')
axes[1].axvline(np.mean(UCL_p), color='red', linestyle='--', label=f'–°—Ä–µ–¥–Ω–∏–π UCL = {np.mean(UCL_p):.4f}')
axes[1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–µ–π –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –ø–∞—Ä—Ç–∏—è–º')
axes[1].set_xlabel('–î–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤')
axes[1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
axes[1].legend()
axes[1].grid(True, alpha=0.3)

# –†–∞–∑–º–µ—Ä—ã –ø–∞—Ä—Ç–∏–π
axes[2].bar(lot_numbers, lot_sizes, alpha=0.7, color='lightcoral', edgecolor='black')
axes[2].axhline(np.mean(lot_sizes), color='blue', linewidth=2, label=f'–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä = {np.mean(lot_sizes):.1f}')
axes[2].set_title('–†–∞–∑–º–µ—Ä—ã –ø–∞—Ä—Ç–∏–π')
axes[2].set_xlabel('–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏')
axes[2].set_ylabel('–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏')
axes[2].legend()
axes[2].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ p-–∫–∞—Ä—Ç—ã
out_of_control_p = np.sum(out_of_control_p_upper) + np.sum(out_of_control_p_lower)
print(f"\\n=== –ê–ù–ê–õ–ò–ó p-–ö–ê–†–¢–´ ===")
print(f"–¢–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {out_of_control_p}")

if out_of_control_p > 0:
    print("üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å–æ–±—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤ –¥–æ–ª–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤")
    print("–ü–∞—Ä—Ç–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç—å—é:")
    high_defect_lots = np.where(out_of_control_p_upper)[0] + 1
    for lot in high_defect_lots:
        print(f"  ‚Ä¢ –ü–∞—Ä—Ç–∏—è {lot}: {defect_proportions[lot-1]:.4f} ({defect_proportions[lot-1]*100:.2f}%)")
else:
    print("üü¢ –î–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º")

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–∞
cost_per_defect = 50  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞ –≤ —Ä—É–±–ª—è—Ö
total_cost = total_defects * cost_per_defect
cost_per_unit = total_cost / total_inspected

print(f"\\n=== –°–¢–û–ò–ú–û–°–¢–¨ –ö–ê–ß–ï–°–¢–í–ê ===")
print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞: {cost_per_defect} —Ä—É–±.")
print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–æ–≤: {total_cost:,.0f} —Ä—É–±.")
print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏: {cost_per_unit:.2f} —Ä—É–±.")

# –ü—Ä–æ–≥–Ω–æ–∑ —É–ª—É—á—à–µ–Ω–∏—è
if overall_defect_rate > 0.02:  # –ï—Å–ª–∏ –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—à–µ 2%
    target_defect_rate = 0.02
    potential_savings = (overall_defect_rate - target_defect_rate) * total_inspected * cost_per_defect
    print(f"\\n–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–æ 2%: {potential_savings:,.0f} —Ä—É–±.")

# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
from scipy.stats import linregress
slope, intercept, r_value, p_value, std_err = linregress(lot_numbers, defect_proportions)

print(f"\\n=== –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê ===")
print(f"–ù–∞–∫–ª–æ–Ω —Ç—Ä–µ–Ω–¥–∞: {slope:.6f}")
print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {r_value:.4f}")
print(f"p-–∑–Ω–∞—á–µ–Ω–∏–µ: {p_value:.4f}")

if p_value < 0.05:
    trend_direction = "–≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π" if slope > 0 else "—É–±—ã–≤–∞—é—â–∏–π"
    print(f"üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–π {trend_direction} —Ç—Ä–µ–Ω–¥")
else:
    print("üü¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")`
      }
    ]
  }


  // ========================================
  // –ú–û–î–£–õ–¨ 2: –û–°–ù–û–í–´ –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø
  // ========================================

  // –£—Ä–æ–∫ 1 - –í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏
  7: {
    title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: "120 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö</h2>
      
      <h3>–í–≤–µ–¥–µ–Ω–∏–µ</h3>
      <p>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (Machine Learning, ML) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—É—á–∞—Ç—å—Å—è –∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞. –í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –æ–±—â–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.</p>
      
      <h3>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏</h3>
      
      <h4>–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?</h4>
      <p>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π. –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö, –≤—ã—è–≤–ª—è—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º —á–µ–ª–æ–≤–µ–∫–∞.</p>
      
      <p><strong>–§–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ–ø—ã—Ç–µ E –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∑–∞–¥–∞—á T –∏ –º–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ P, –µ—Å–ª–∏ –µ—ë –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–¥–∞—á–∞—Ö T, –∏–∑–º–µ—Ä—è–µ–º–∞—è P, —É–ª—É—á—à–∞–µ—Ç—Å—è —Å –æ–ø—ã—Ç–æ–º E.</p>
      
      <h4>–ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ML-—Å–∏—Å—Ç–µ–º—ã</h4>
      <ul>
        <li><strong>–î–∞–Ω–Ω—ã–µ (Data):</strong> –ò—Å—Ö–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏</li>
        <li><strong>–ü—Ä–∏–∑–Ω–∞–∫–∏ (Features):</strong> –ò–∑–º–µ—Ä–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</li>
        <li><strong>–ê–ª–≥–æ—Ä–∏—Ç–º (Algorithm):</strong> –ú–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏</li>
        <li><strong>–ú–æ–¥–µ–ª—å (Model):</strong> –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫ –¥–∞–Ω–Ω—ã–º</li>
        <li><strong>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (Predictions):</strong> –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <h3>–¢–∏–ø—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</h3>
      
      <h4>1. –û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º (Supervised Learning)</h4>
      <p>–í –æ–±—É—á–µ–Ω–∏–∏ —Å —É—á–∏—Ç–µ–ª–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è).</p>
      
      <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</strong></p>
      <ul>
        <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–ª–∞—Å—Å–∞
          <ul>
            <li>–ü—Ä–∏–º–µ—Ä: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ñ–µ–∫—Ç–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏</li>
            <li>–ê–ª–≥–æ—Ä–∏—Ç–º—ã: –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, SVM, Random Forest</li>
          </ul>
        </li>
        <li><strong>–†–µ–≥—Ä–µ—Å—Å–∏—è:</strong> –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          <ul>
            <li>–ü—Ä–∏–º–µ—Ä: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –ø–µ—á–∏</li>
            <li>–ê–ª–≥–æ—Ä–∏—Ç–º—ã: –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</li>
          </ul>
        </li>
      </ul>
      
      <h4>2. –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è (Unsupervised Learning)</h4>
      <p>–í –æ–±—É—á–µ–Ω–∏–∏ –±–µ–∑ —É—á–∏—Ç–µ–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.</p>
      
      <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</strong></p>
      <ul>
        <li><strong>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:</strong> –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
          <ul>
            <li>–ü—Ä–∏–º–µ—Ä: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é</li>
            <li>–ê–ª–≥–æ—Ä–∏—Ç–º—ã: K-means, DBSCAN, –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</li>
          </ul>
        </li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏:</strong> –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
          <ul>
            <li>–ü—Ä–∏–º–µ—Ä: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤</li>
            <li>–ê–ª–≥–æ—Ä–∏—Ç–º—ã: PCA, t-SNE, UMAP</li>
          </ul>
        </li>
        <li><strong>–ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π:</strong> –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
          <ul>
            <li>–ü—Ä–∏–º–µ—Ä: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
            <li>–ê–ª–≥–æ—Ä–∏—Ç–º—ã: Isolation Forest, One-Class SVM</li>
          </ul>
        </li>
      </ul>
      
      <h4>3. –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º (Reinforcement Learning)</h4>
      <p>–ê–≥–µ–Ω—Ç –æ–±—É—á–∞–µ—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–æ–π, –ø–æ–ª—É—á–∞—è –Ω–∞–≥—Ä–∞–¥—ã –∏–ª–∏ —à—Ç—Ä–∞—Ñ—ã –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞–º–∏</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏</li>
        <li>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</li>
      </ul>
      
      <h3>–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ML-–ø—Ä–æ–µ–∫—Ç–∞</h3>
      
      <h4>1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</h4>
      <p>–ü–µ—Ä–≤—ã–π –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π —ç—Ç–∞–ø - —á–µ—Ç–∫–æ–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏ –∏ –µ—ë –ø–µ—Ä–µ–≤–æ–¥ –≤ –∑–∞–¥–∞—á—É –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</strong></p>
      <ul>
        <li>–ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –º—ã —Ä–µ—à–∞–µ–º?</li>
        <li>–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å?</li>
        <li>–ö–∞–∫–æ–π —Ç–∏–ø ML-–∑–∞–¥–∞—á–∏ —ç—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç?</li>
        <li>–ö–∞–∫ –º—ã –±—É–¥–µ–º –∏–∑–º–µ—Ä—è—Ç—å —É—Å–ø–µ—Ö?</li>
      </ul>
      
      <h4>2. –°–±–æ—Ä –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      <p>–î–∞–Ω–Ω—ã–µ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –ª—é–±–æ–≥–æ ML-–ø—Ä–æ–µ–∫—Ç–∞. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏.</p>
      
      <p><strong>–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:</strong></p>
      <ul>
        <li><strong>–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:</strong> –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</li>
        <li><strong>–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> –£–¥–∞–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤</li>
        <li><strong>–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</strong> –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–≤–æ–π—Å—Ç–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</li>
        <li><strong>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</strong> –û–±—É—á–∞—é—â–∞—è, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –∏ —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∏</li>
      </ul>
      
      <h4>3. –í—ã–±–æ—Ä –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</h4>
      <p>–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏, –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.</p>
      
      <p><strong>–§–∞–∫—Ç–æ—Ä—ã –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:</strong></p>
      <ul>
        <li>–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏</li>
        <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li>–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å/–Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</li>
        <li>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏</li>
      </ul>
      
      <h4>4. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏</h4>
      <p>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –µ—ë –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.</p>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy):</strong> –î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å (Precision):</strong> –î–æ–ª—è –∏—Å—Ç–∏–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö</li>
        <li><strong>–ü–æ–ª–Ω–æ—Ç–∞ (Recall):</strong> –î–æ–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤</li>
        <li><strong>F1-–º–µ—Ä–∞:</strong> –ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã</li>
      </ul>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:</strong></p>
      <ul>
        <li><strong>MAE (Mean Absolute Error):</strong> –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</li>
        <li><strong>MSE (Mean Squared Error):</strong> –°—Ä–µ–¥–Ω—è—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞</li>
        <li><strong>RMSE (Root Mean Squared Error):</strong> –ö–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏</li>
        <li><strong>R¬≤ (Coefficient of Determination):</strong> –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏</li>
      </ul>
      
      <h4>5. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h4>
      <p>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –µ—ë –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.</p>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ML –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>1. –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (Predictive Maintenance)</h4>
      <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ML –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–æ –∏—Ö –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è.</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</li>
        <li>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li>–ü–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–¢–∏–ø–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong></p>
      <ul>
        <li>–í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</li>
        <li>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</li>
        <li>–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã</li>
        <li>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</li>
        <li>–ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h4>2. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</h4>
      <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li>–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è</li>
        <li>–ê–Ω–∞–ª–∏–∑ –∑–≤—É–∫–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li>–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏–∑–¥–µ–ª–∏–π</li>
        <li>–•–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</li>
      </ul>
      
      <h4>3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h4>
      <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ML –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.</p>
      
      <p><strong>–ó–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li>–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è</li>
        <li>–ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç—Ö–æ–¥–æ–≤</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ü–∏–∫–ª–∞</li>
      </ul>
      
      <h4>4. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞</h4>
      <p>ML –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∞—Å–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫.</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏</li>
        <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏</li>
        <li>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π</li>
      </ul>
      
      <h3>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ ML</h3>
      
      <h4>1. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏</h4>
      <p>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ ML-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤ —É—Å–ª–æ–≤–∏—è—Ö 24/7 —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:</strong></p>
      <ul>
        <li>–û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã</li>
        <li>–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤</li>
        <li>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã</li>
      </ul>
      
      <h4>2. –†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h4>
      <p>–ú–Ω–æ–≥–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.</p>
      
      <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong></p>
      <ul>
        <li>–ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (latency)</li>
        <li>–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å</li>
        <li>–ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞</li>
        <li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤</li>
      </ul>
      
      <h4>3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏</h4>
      <p>ML-—Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.</p>
      
      <p><strong>–ê—Å–ø–µ–∫—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏</li>
        <li>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ERP –∏ MES —Å–∏—Å—Ç–µ–º–∞–º–∏</li>
        <li>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
        <li>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è</li>
      </ul>
      
      <h3>–í—ã–∑–æ–≤—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</h3>
      
      <h4>1. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö</h4>
      <p>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —à—É–º—ã, –ø—Ä–æ–ø—É—Å–∫–∏ –∏ –∞–Ω–æ–º–∞–ª–∏–∏, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è ML-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.</p>
      
      <p><strong>–¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</strong></p>
      <ul>
        <li>–ù–µ–ø–æ–ª–Ω—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li>–®—É–º –≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö –¥–∞—Ç—á–∏–∫–æ–≤</li>
        <li>–î—Ä–µ–π—Ñ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –ø—Ä–∏–±–æ—Ä–æ–≤</li>
        <li>–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h4>2. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å</h4>
      <p>–í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è.</p>
      
      <p><strong>–ú–µ—Ç–æ–¥—ã –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li>–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –º–æ–¥–µ–ª–∏</li>
        <li>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
      </ul>
      
      <h4>3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —ç—Ç–∏–∫–∞</h4>
      <p>ML-—Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:</strong></p>
      <ul>
        <li>–ó–∞—â–∏—Ç–∞ –æ—Ç adversarial –∞—Ç–∞–∫</li>
        <li>–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</li>
        <li>–ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</li>
      </ul>
      
      <h3>–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è</h3>
      
      <h4>1. AutoML (Automated Machine Learning)</h4>
      <p>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è ML-–º–æ–¥–µ–ª–µ–π –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.</p>
      
      <h4>2. Edge Computing</h4>
      <p>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ML-–≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.</p>
      
      <h4>3. –§–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</h4>
      <p>–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏—Ö —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.</p>
      
      <h4>4. –û–±—ä—è—Å–Ω–∏–º—ã–π AI (Explainable AI)</h4>
      <p>–†–∞–∑–≤–∏—Ç–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö –∏ –æ–±—ä—è—Å–Ω–∏–º—ã—Ö ML-–º–æ–¥–µ–ª–µ–π.</p>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      <p>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ ML-—Ä–µ—à–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Ç–∞–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é ML-—Å–∏—Å—Ç–µ–º –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ –≤–∏–¥–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.</p>
      
      <p>–í —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö, –Ω–∞—á–∏–Ω–∞—è —Å –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.</p>
    `
  },

  // –£—Ä–æ–∫ 2 - –õ–∏–Ω–µ–π–Ω–∞—è –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
  8: {
    title: "–õ–∏–Ω–µ–π–Ω–∞—è –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: "140 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏</h2>
      
      <h3>–í–≤–µ–¥–µ–Ω–∏–µ</h3>
      <p>–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã–º–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –≤—Ö–æ–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –≤—ã—Ö–æ–¥–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.</p>
      
      <h3>–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h3>
      
      <h4>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã</h4>
      <p>–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏) X –∏ –∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (—Ü–µ–ª–µ–≤–æ–π) y.</p>
      
      <p><strong>–ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong></p>
      <pre><code>y = Œ≤‚ÇÄ + Œ≤‚ÇÅx + Œµ</code></pre>
      <p>–≥–¥–µ:</p>
      <ul>
        <li>y - –∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–æ—Ç–∫–ª–∏–∫)</li>
        <li>x - –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–ø—Ä–µ–¥–∏–∫—Ç–æ—Ä)</li>
        <li>Œ≤‚ÇÄ - —Å–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω (intercept)</li>
        <li>Œ≤‚ÇÅ - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞</li>
        <li>Œµ - —Å–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞</li>
      </ul>
      
      <p><strong>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong></p>
      <pre><code>y = Œ≤‚ÇÄ + Œ≤‚ÇÅx‚ÇÅ + Œ≤‚ÇÇx‚ÇÇ + ... + Œ≤‚Çöx‚Çö + Œµ</code></pre>
      
      <p><strong>–ú–∞—Ç—Ä–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞:</strong></p>
      <pre><code>Y = XŒ≤ + Œµ</code></pre>
      <p>–≥–¥–µ X - –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º n√ó(p+1), Œ≤ - –≤–µ–∫—Ç–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤</p>
      
      <h4>–ú–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ (OLS)</h4>
      <p>–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ - –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤.</p>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong></p>
      <pre><code>L(Œ≤) = Œ£·µ¢(y·µ¢ - ≈∑·µ¢)¬≤ = Œ£·µ¢(y·µ¢ - Œ≤‚ÇÄ - Œ≤‚ÇÅx‚ÇÅ·µ¢ - ... - Œ≤‚Çöx‚Çö·µ¢)¬≤</code></pre>
      
      <p><strong>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</strong></p>
      <pre><code>Œ≤ÃÇ = (X·µÄX)‚Åª¬πX·µÄY</code></pre>
      
      <h4>–ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h4>
      <ul>
        <li><strong>–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å:</strong> –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É X –∏ y –ª–∏–Ω–µ–π–Ω–∞</li>
        <li><strong>–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:</strong> –ù–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞</li>
        <li><strong>–ì–æ–º–æ—Å–∫–µ–¥–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> –î–∏—Å–ø–µ—Ä—Å–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞</li>
        <li><strong>–ù–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤:</strong> –û—Å—Ç–∞—Ç–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã</li>
        <li><strong>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏:</strong> –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω—ã</li>
      </ul>
      
      <h4>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏</h4>
      
      <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ R¬≤:</strong></p>
      <pre><code>R¬≤ = 1 - SSres/SStot = 1 - Œ£(y·µ¢ - ≈∑·µ¢)¬≤/Œ£(y·µ¢ - »≥)¬≤</code></pre>
      
      <p><strong>–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π R¬≤:</strong></p>
      <pre><code>R¬≤adj = 1 - (1 - R¬≤)(n - 1)/(n - p - 1)</code></pre>
      
      <p><strong>–°—Ä–µ–¥–Ω—è—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ (MSE):</strong></p>
      <pre><code>MSE = Œ£(y·µ¢ - ≈∑·µ¢)¬≤/n</code></pre>
      
      <p><strong>–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE):</strong></p>
      <pre><code>MAE = Œ£|y·µ¢ - ≈∑·µ¢|/n</code></pre>
      
      <h4>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h4>
      
      <p><strong>1. –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong></p>
      <ul>
        <li>–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –¥–∞–≤–ª–µ–Ω–∏—è</li>
        <li>–í–ª–∏—è–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–¥–∞—á–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
        <li>–°–≤—è–∑—å –º–µ–∂–¥—É —Å–æ—Å—Ç–∞–≤–æ–º —Å—ã—Ä—å—è –∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞</li>
      </ul>
      
      <p><strong>2. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ —Å–æ—Å—Ç–∞–≤—É</li>
        <li>–û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–¥–µ–ª–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
      </ul>
      
      <p><strong>3. –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç</li>
        <li>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —ç–Ω–µ—Ä–≥–æ—Ä–µ—Å—É—Ä—Å–∞—Ö</li>
      </ul>
      
      <h3>–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h3>
      
      <h4>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã</h4>
      <p>–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π.</p>
      
      <p><strong>–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Å–∏–≥–º–æ–∏–¥–∞):</strong></p>
      <pre><code>œÉ(z) = 1/(1 + e‚Åª·∂ª)</code></pre>
      <p>–≥–¥–µ z = Œ≤‚ÇÄ + Œ≤‚ÇÅx‚ÇÅ + Œ≤‚ÇÇx‚ÇÇ + ... + Œ≤‚Çöx‚Çö</p>
      
      <p><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–ª–∞—Å—Å—É 1:</strong></p>
      <pre><code>P(y = 1|x) = œÉ(Œ≤‚ÇÄ + Œ≤‚ÇÅx‚ÇÅ + ... + Œ≤‚Çöx‚Çö)</code></pre>
      
      <p><strong>–õ–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ (log-odds):</strong></p>
      <pre><code>ln(p/(1-p)) = Œ≤‚ÇÄ + Œ≤‚ÇÅx‚ÇÅ + ... + Œ≤‚Çöx‚Çö</code></pre>
      
      <h4>–û—Ü–µ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h4>
      <p>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –º–µ—Ç–æ–¥–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è.</p>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è:</strong></p>
      <pre><code>L(Œ≤) = Œ†·µ¢ P(y·µ¢|x·µ¢)^y·µ¢ (1 - P(y·µ¢|x·µ¢))^(1-y·µ¢)</code></pre>
      
      <p><strong>–õ–æ–≥–∞—Ä–∏—Ñ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è:</strong></p>
      <pre><code>‚Ñì(Œ≤) = Œ£·µ¢ [y·µ¢ ln(p·µ¢) + (1 - y·µ¢) ln(1 - p·µ¢)]</code></pre>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å (–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ç–µ—Ä—è):</strong></p>
      <pre><code>J(Œ≤) = -1/n Œ£·µ¢ [y·µ¢ ln(p·µ¢) + (1 - y·µ¢) ln(1 - p·µ¢)]</code></pre>
      
      <h4>–ú–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h4>
      
      <p><strong>Softmax —Ñ—É–Ω–∫—Ü–∏—è:</strong></p>
      <pre><code>P(y = k|x) = e^(Œ≤_k^T x) / Œ£‚±º e^(Œ≤_j^T x)</code></pre>
      
      <p><strong>One-vs-Rest (OvR):</strong> –û–±—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –±–∏–Ω–∞—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞</p>
      <p><strong>One-vs-One (OvO):</strong> –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –∫–ª–∞—Å—Å–æ–≤</p>
      
      <h4>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h4>
      
      <p><strong>–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (Confusion Matrix):</strong></p>
      <table border="1">
        <tr><th></th><th>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ 0</th><th>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ 1</th></tr>
        <tr><th>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ 0</th><td>TN</td><td>FP</td></tr>
        <tr><th>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ 1</th><td>FN</td><td>TP</td></tr>
      </table>
      
      <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</strong></p>
      <ul>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy):</strong> (TP + TN)/(TP + TN + FP + FN)</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å (Precision):</strong> TP/(TP + FP)</li>
        <li><strong>–ü–æ–ª–Ω–æ—Ç–∞ (Recall/Sensitivity):</strong> TP/(TP + FN)</li>
        <li><strong>–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å (Specificity):</strong> TN/(TN + FP)</li>
        <li><strong>F1-–º–µ—Ä–∞:</strong> 2 √ó (Precision √ó Recall)/(Precision + Recall)</li>
      </ul>
      
      <p><strong>ROC-–∫—Ä–∏–≤–∞—è –∏ AUC:</strong></p>
      <p>ROC-–∫—Ä–∏–≤–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (TPR) –∏ –¥–æ–ª–µ–π –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π (FPR) –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.</p>
      
      <h4>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h4>
      
      <p><strong>1. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–¥–µ–ª–∏–π –Ω–∞ –≥–æ–¥–Ω—ã–µ/–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ</li>
        <li>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ñ–µ–∫—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li>–û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞</li>
      </ul>
      
      <p><strong>2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong></p>
      <ul>
        <li>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º –¥–∞—Ç—á–∏–∫–æ–≤</li>
        <li>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</li>
      </ul>
      
      <p><strong>3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–í—ã—è–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π</li>
        <li>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞</li>
        <li>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
      </ul>
      
      <h3>–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h3>
      
      <h4>–ü—Ä–æ–±–ª–µ–º–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</h4>
      <p>–ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å—Å—è –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–ª–æ—Ö–æ–º—É –æ–±–æ–±—â–µ–Ω–∏—é –Ω–∞ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.</p>
      
      <h4>Ridge —Ä–µ–≥—Ä–µ—Å—Å–∏—è (L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è)</h4>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong></p>
      <pre><code>J(Œ≤) = Œ£·µ¢(y·µ¢ - ≈∑·µ¢)¬≤ + ŒªŒ£‚±ºŒ≤‚±º¬≤</code></pre>
      
      <p><strong>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</strong></p>
      <pre><code>Œ≤ÃÇ = (X·µÄX + ŒªI)‚Åª¬πX·µÄY</code></pre>
      
      <p><strong>–°–≤–æ–π—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –Ω–æ –Ω–µ –æ–±–Ω—É–ª—è–µ—Ç –∏—Ö</li>
        <li>–•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏</li>
        <li>–°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö</li>
      </ul>
      
      <h4>Lasso —Ä–µ–≥—Ä–µ—Å—Å–∏—è (L1 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è)</h4>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong></p>
      <pre><code>J(Œ≤) = Œ£·µ¢(y·µ¢ - ≈∑·µ¢)¬≤ + ŒªŒ£‚±º|Œ≤‚±º|</code></pre>
      
      <p><strong>–°–≤–æ–π—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ú–æ–∂–µ—Ç –æ–±–Ω—É–ª—è—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)</li>
        <li>–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏</li>
        <li>–ü–æ–ª–µ–∑–Ω–∞ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
      </ul>
      
      <h4>Elastic Net</h4>
      <p>–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç L1 –∏ L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é:</p>
      <pre><code>J(Œ≤) = Œ£·µ¢(y·µ¢ - ≈∑·µ¢)¬≤ + Œª‚ÇÅŒ£‚±º|Œ≤‚±º| + Œª‚ÇÇŒ£‚±ºŒ≤‚±º¬≤</code></pre>
      
      <h3>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π</h3>
      
      <h4>–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤</h4>
      <p><strong>–ì—Ä–∞—Ñ–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:</strong></p>
      <ul>
        <li>–û—Å—Ç–∞—Ç–∫–∏ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</li>
        <li>Q-Q –≥—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤</li>
        <li>–û—Å—Ç–∞—Ç–∫–∏ vs –∫–∞–∂–¥—ã–π –ø—Ä–∏–∑–Ω–∞–∫</li>
        <li>–û—Å—Ç–∞—Ç–∫–∏ vs –ø–æ—Ä—è–¥–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–¢–µ—Å—Ç—ã –Ω–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–¢–µ—Å—Ç –ë—Ä–æ–π—à–∞-–ü–∞–≥–∞–Ω–∞:</strong> –Ω–∞ –≥–æ–º–æ—Å–∫–µ–¥–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å</li>
        <li><strong>–¢–µ—Å—Ç –î–∞—Ä–±–∏–Ω–∞-–£–æ—Ç—Å–æ–Ω–∞:</strong> –Ω–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é</li>
        <li><strong>–¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞:</strong> –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤</li>
        <li><strong>VIF (Variance Inflation Factor):</strong> –Ω–∞ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å</li>
      </ul>
      
      <h4>–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è</h4>
      <p><strong>K-fold –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong></p>
      <ol>
        <li>–†–∞–∑–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ K —á–∞—Å—Ç–µ–π</li>
        <li>–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ K-1 —á–∞—Å—Ç—è—Ö</li>
        <li>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏</li>
        <li>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å K —Ä–∞–∑</li>
        <li>–£—Å—Ä–µ–¥–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
      </ol>
      
      <p><strong>–°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏</p>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
      
      <h4>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      <ul>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:</strong> –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è</li>
        <li><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:</strong> One-hot encoding, label encoding</li>
        <li><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:</strong> –£–¥–∞–ª–µ–Ω–∏–µ, –∏–º–ø—É—Ç–∞—Ü–∏—è</li>
        <li><strong>–í—ã—è–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤:</strong> Z-score, IQR –º–µ—Ç–æ–¥</li>
      </ul>
      
      <h4>–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</h4>
      <ul>
        <li><strong>–ü—Ä–æ—Å—Ç–æ—Ç–∞ vs —Å–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> –ü—Ä–∏–Ω—Ü–∏–ø –±—Ä–∏—Ç–≤—ã –û–∫–∫–∞–º–∞</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –í–∞–∂–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö</li>
        <li><strong>–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏:</strong> –ü—Ä–∞–≤–∏–ª–æ "10 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫"</li>
        <li><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</li>
      </ul>
      
      <h4>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h4>
      
      <p><strong>–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong></p>
      <ul>
        <li>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ y –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ x –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É</li>
        <li>–ó–Ω–∞–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏</li>
        <li>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong></p>
      <ul>
        <li>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ –ª–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤</li>
        <li>exp(Œ≤) - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É</li>
        <li>–ü—Ä–µ–¥–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤–ª–∏—è–Ω–∏—è</li>
      </ul>
      
      <h3>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã</h3>
      
      <h4>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h4>
      <ul>
        <li>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å</li>
        <li>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ –≤—ã–±—Ä–æ—Å–∞–º</li>
        <li>–¢—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π</li>
        <li>–ü—Ä–æ–±–ª–µ–º—ã —Å –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å—é</li>
      </ul>
      
      <h4>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã</h4>
      <ul>
        <li><strong>–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong> –î–ª—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        <li><strong>–†–æ–±–∞—Å—Ç–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong> –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤—ã–±—Ä–æ—Å–∞–º</li>
        <li><strong>–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong> –£—á–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ù–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã:</strong> –ë–µ–∑ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –æ —Ñ–æ—Ä–º–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      <p>–õ–∏–Ω–µ–π–Ω–∞—è –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω—ã–º–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏—Ö –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ —Å–ø–æ—Å–æ–±–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏.</p>
      
      <p>–í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è:</p>
      <ul>
        <li>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö</li>
        <li>–ë–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤</li>
        <li>–°–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
        <li>–ë—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è ML-—Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <p>–í —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.</p>
    `
  }


  },

  // –£—Ä–æ–∫ 2 - –ú–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  2: {
    title: "–ú–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    duration: "150 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ú–∞—Ç—Ä–∏—Ü—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö</h2>
      
      <h3>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ç—Ä–∏—Ü</h3>
      <p>–ú–∞—Ç—Ä–∏—Ü–∞ - —ç—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —á–∏—Å–µ–ª, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã. –í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong></p>
      <p>–ú–∞—Ç—Ä–∏—Ü–∞ A —Ä–∞–∑–º–µ—Ä–æ–º m√ón –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫:</p>
      <pre><code>A = [a‚ÇÅ‚ÇÅ  a‚ÇÅ‚ÇÇ  ...  a‚ÇÅ‚Çô]
    [a‚ÇÇ‚ÇÅ  a‚ÇÇ‚ÇÇ  ...  a‚ÇÇ‚Çô]
    [‚ãÆ    ‚ãÆ    ‚ã±   ‚ãÆ  ]
    [a‚Çò‚ÇÅ  a‚Çò‚ÇÇ  ...  a‚Çò‚Çô]</code></pre>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>1. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h4>
      <p>–í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –º–∞—Ç—Ä–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:</p>
      <ul>
        <li><strong>–°—Ç—Ä–æ–∫–∏:</strong> –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–∑—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
        <li><strong>–°—Ç–æ–ª–±—Ü—ã:</strong> —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫–∞—Ç–Ω–æ–≥–æ —Å—Ç–∞–Ω–∞</strong></p>
      <p>–°–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢ 380-2005 –¥–ª—è —Å—Ç–∞–ª–∏ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, —Ç–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫–∞—Ç–∫–∏:</p>
      <pre><code>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã = [–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –î–∞–≤–ª–µ–Ω–∏–µ, –°–∫–æ—Ä–æ—Å—Ç—å, –¢–æ–ª—â–∏–Ω–∞]
–ò–∑–º–µ—Ä–µ–Ω–∏–µ 1 = [1150¬∞C, 250 –ú–ü–∞, 2.5 –º/—Å, 12.0 –º–º]
–ò–∑–º–µ—Ä–µ–Ω–∏–µ 2 = [1140¬∞C, 245 –ú–ü–∞, 2.4 –º/—Å, 12.1 –º–º]
–ò–∑–º–µ—Ä–µ–Ω–∏–µ 3 = [1160¬∞C, 255 –ú–ü–∞, 2.6 –º/—Å, 11.9 –º–º]</code></pre>
      
      <h4>2. –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏</h4>
      
      <p><strong>–°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü:</strong></p>
      <pre><code>C = A + B, –≥–¥–µ c·µ¢‚±º = a·µ¢‚±º + b·µ¢‚±º</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Å–º–µ–Ω</p>
      
      <p><strong>–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü:</strong></p>
      <pre><code>C = A √ó B, –≥–¥–µ c·µ¢‚±º = Œ£‚Çñ(a·µ¢‚Çñ √ó b‚Çñ‚±º)</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤</p>
      
      <p><strong>–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong></p>
      <pre><code>A·µÄ, –≥–¥–µ (A·µÄ)·µ¢‚±º = a‚±º·µ¢</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>
      
      <h3>–ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞</h3>
      
      <h4>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞</h4>
      <p>–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:</p>
      <pre><code>R = [r‚ÇÅ‚ÇÅ  r‚ÇÅ‚ÇÇ  r‚ÇÅ‚ÇÉ]
    [r‚ÇÇ‚ÇÅ  r‚ÇÇ‚ÇÇ  r‚ÇÇ‚ÇÉ]
    [r‚ÇÉ‚ÇÅ  r‚ÇÉ‚ÇÇ  r‚ÇÉ‚ÇÉ]</code></pre>
      
      <p>–≥–¥–µ r·µ¢‚±º - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ i –∏ j</p>
      
      <h4>–ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞</h4>
      <p>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ:</p>
      <pre><code>Cov(X,Y) = E[(X - Œº‚Çì)(Y - Œº·µß)]</code></pre>
      
      <h3>–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã</h3>
      
      <h4>–ü—Ä–∏–º–µ—Ä 1: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏</h4>
      <p>–ù–∞ –ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫–æ–º –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–º –∫–æ–º–±–∏–Ω–∞—Ç–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ –¥–∞–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç):</p>
      <ul>
        <li><strong>–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤:</strong> C (0.17-0.24%), Si (0.12-0.30%), Mn (0.35-0.65%)</li>
        <li><strong>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:</strong> œÉ–≤ (373-490 –ú–ü–∞), œÉ—Ç (‚â•235 –ú–ü–∞)</li>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ä–µ–∂–∏–º—ã:</strong> –Ω–∞–≥—Ä–µ–≤ (1150-1250¬∞C), –ø—Ä–æ–∫–∞—Ç–∫–∞ (950-1050¬∞C)</li>
      </ul>
      
      <h4>–ü—Ä–∏–º–µ—Ä 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞</h4>
      <p>–°–æ–≥–ª–∞—Å–Ω–æ –†–î 153-34.1-35.127-99 "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", –¥–ª—è —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¢–í–í-200-2–ê –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è:</p>
      <ul>
        <li><strong>–í–∏–±—Ä–∞—Ü–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤:</strong> –Ω–æ—Ä–º–∞ ‚â§ 45 –º–∫–º, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ > 71 –º–∫–º</li>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤:</strong> –Ω–æ—Ä–º–∞ ‚â§ 80¬∞C, –∞–≤–∞—Ä–∏–π–Ω–∞—è > 100¬∞C</li>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç–æ—Ä–∞:</strong> –Ω–æ—Ä–º–∞ ‚â§ 130¬∞C, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ > 140¬∞C</li>
      </ul>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ</h2>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫–∞—Ç–Ω–æ–≥–æ —Å—Ç–∞–Ω–∞</h3>
      <p>–°–æ–∑–¥–∞–¥–∏–º —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∫–∞—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.</p>
      
      <div class="code-block">
        <h4>–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h4>
        <pre><code>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# –†–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫–∞—Ç–Ω–æ–≥–æ —Å—Ç–∞–Ω–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ì–û–°–¢ 380-2005)
# –°—Ç–æ–ª–±—Ü—ã: [–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_¬∞C, –î–∞–≤–ª–µ–Ω–∏–µ_–ú–ü–∞, –°–∫–æ—Ä–æ—Å—Ç—å_–º/—Å, –¢–æ–ª—â–∏–Ω–∞_–º–º, –®–∏—Ä–∏–Ω–∞_–º–º]

# –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–ª–∏ –°—Ç3
target_params = {
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': 1150,  # ¬∞C - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ–∫–∞—Ç–∫–∏
    '–î–∞–≤–ª–µ–Ω–∏–µ': 250,      # –ú–ü–∞ - —Ä–∞–±–æ—á–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∫–æ–≤
    '–°–∫–æ—Ä–æ—Å—Ç—å': 2.5,      # –º/—Å - —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫–∞—Ç–∫–∏
    '–¢–æ–ª—â–∏–Ω–∞': 12.0,      # –º–º - —Ü–µ–ª–µ–≤–∞—è —Ç–æ–ª—â–∏–Ω–∞
    '–®–∏—Ä–∏–Ω–∞': 1500        # –º–º - —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å—ã
}

# –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–º–µ–Ω—É (8 —á–∞—Å–æ–≤, –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
np.random.seed(42)
n_measurements = 32  # 8 —á–∞—Å–æ–≤ √ó 4 –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —á–∞—Å

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–ø—É—Å–∫–æ–≤
production_data = []
for i in range(n_measurements):
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    temp = np.random.normal(target_params['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'], 15)  # ¬±15¬∞C –¥–æ–ø—É—Å–∫
    pressure = np.random.normal(target_params['–î–∞–≤–ª–µ–Ω–∏–µ'], 10)  # ¬±10 –ú–ü–∞ –¥–æ–ø—É—Å–∫
    speed = np.random.normal(target_params['–°–∫–æ—Ä–æ—Å—Ç—å'], 0.1)   # ¬±0.1 –º/—Å –¥–æ–ø—É—Å–∫
    thickness = np.random.normal(target_params['–¢–æ–ª—â–∏–Ω–∞'], 0.2) # ¬±0.2 –º–º –¥–æ–ø—É—Å–∫
    width = np.random.normal(target_params['–®–∏—Ä–∏–Ω–∞'], 5)       # ¬±5 –º–º –¥–æ–ø—É—Å–∫
    
    production_data.append([temp, pressure, speed, thickness, width])

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Ç—Ä–∏—Ü—É NumPy
data_matrix = np.array(production_data)
print("–§–æ—Ä–º–∞ –º–∞—Ç—Ä–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö:", data_matrix.shape)
print("\\n–ü–µ—Ä–≤—ã–µ 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π:")
print(data_matrix[:5])

# –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
columns = ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_¬∞C', '–î–∞–≤–ª–µ–Ω–∏–µ_–ú–ü–∞', '–°–∫–æ—Ä–æ—Å—Ç—å_–º/—Å', '–¢–æ–ª—â–∏–Ω–∞_–º–º', '–®–∏—Ä–∏–Ω–∞_–º–º']
df = pd.DataFrame(data_matrix, columns=columns)
print("\\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
print(df.describe())</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 2: –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
        <pre><code># –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
correlation_matrix = np.corrcoef(data_matrix.T)
print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
print(correlation_matrix)

# –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, 
            xticklabels=columns, 
            yticklabels=columns,
            annot=True, 
            cmap='coolwarm', 
            center=0,
            fmt='.3f')
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∫–∏')
plt.tight_layout()
plt.show()

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
covariance_matrix = np.cov(data_matrix.T)
print("\\n–ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
print(covariance_matrix)

# –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (PCA) –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data_matrix)

# –ü—Ä–∏–º–µ–Ω—è–µ–º PCA
pca = PCA()
pca_result = pca.fit_transform(data_scaled)

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–Ω—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é
explained_variance_ratio = pca.explained_variance_ratio_
cumulative_variance = np.cumsum(explained_variance_ratio)

print("\\n–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:")
for i, var in enumerate(explained_variance_ratio):
    print(f"PC{i+1}: {var:.3f} ({var*100:.1f}%)")

print(f"\\n–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –ø–µ—Ä–≤—ã–º–∏ 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏: {cumulative_variance[2]:.3f}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.bar(range(1, len(explained_variance_ratio)+1), explained_variance_ratio)
plt.xlabel('–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞')
plt.ylabel('–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è')
plt.title('–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º')

plt.subplot(1, 2, 2)
plt.plot(range(1, len(cumulative_variance)+1), cumulative_variance, 'bo-')
plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')
plt.ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è')
plt.title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è')
plt.axhline(y=0.95, color='r', linestyle='--', label='95%')
plt.legend()

plt.tight_layout()
plt.show()</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 3: –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</h4>
        <pre><code>class QualityControlSystem:
    def __init__(self, target_params, tolerances):
        """
        –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∫–∞—Ç–∫–∏
        target_params: —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        tolerances: –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        """
        self.target_params = np.array(list(target_params.values()))
        self.tolerances = np.array(list(tolerances.values()))
        self.parameter_names = list(target_params.keys())
        self.measurements_history = []
        
    def add_measurement(self, measurement):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ"""
        measurement = np.array(measurement)
        self.measurements_history.append(measurement)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        deviations = np.abs(measurement - self.target_params)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–ø—É—Å–∫–∞–º
        within_tolerance = deviations <= self.tolerances
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ (0-1, –≥–¥–µ 1 - –∏–¥–µ–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        quality_scores = 1 - (deviations / self.tolerances)
        quality_scores = np.clip(quality_scores, 0, 1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 1
        overall_quality = np.mean(quality_scores)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        critical_params = []
        for i, (within_tol, param_name) in enumerate(zip(within_tolerance, self.parameter_names)):
            if not within_tol:
                critical_params.append({
                    'parameter': param_name,
                    'value': measurement[i],
                    'target': self.target_params[i],
                    'tolerance': self.tolerances[i],
                    'deviation': deviations[i]
                })
        
        return {
            'overall_quality': overall_quality,
            'within_tolerance': np.all(within_tolerance),
            'critical_parameters': critical_params,
            'quality_scores': dict(zip(self.parameter_names, quality_scores))
        }
    
    def get_control_chart_data(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"""
        if len(self.measurements_history) < 2:
            return None
            
        history_matrix = np.array(self.measurements_history)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        means = np.mean(history_matrix, axis=0)
        stds = np.std(history_matrix, axis=0)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (¬±3œÉ)
        upper_control_limits = means + 3 * stds
        lower_control_limits = means - 3 * stds
        
        return {
            'means': means,
            'stds': stds,
            'upper_limits': upper_control_limits,
            'lower_limits': lower_control_limits,
            'measurements': history_matrix
        }

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
tolerances = {
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': 20,    # ¬±20¬∞C
    '–î–∞–≤–ª–µ–Ω–∏–µ': 15,       # ¬±15 –ú–ü–∞
    '–°–∫–æ—Ä–æ—Å—Ç—å': 0.2,      # ¬±0.2 –º/—Å
    '–¢–æ–ª—â–∏–Ω–∞': 0.3,       # ¬±0.3 –º–º
    '–®–∏—Ä–∏–Ω–∞': 10          # ¬±10 –º–º
}

qc_system = QualityControlSystem(target_params, tolerances)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
print("–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
print("=" * 50)

quality_results = []
for i, measurement in enumerate(data_matrix[:10]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
    result = qc_system.add_measurement(measurement)
    quality_results.append(result)
    
    print(f"\\n–ò–∑–º–µ—Ä–µ–Ω–∏–µ {i+1}:")
    print(f"–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {result['overall_quality']:.3f}")
    print(f"–í –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–æ–≤: {'‚úÖ –î–∞' if result['within_tolerance'] else '‚ùå –ù–µ—Ç'}")
    
    if result['critical_parameters']:
        print("–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        for param in result['critical_parameters']:
            print(f"  - {param['parameter']}: {param['value']:.1f} "
                  f"(—Ü–µ–ª—å: {param['target']:.1f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {param['deviation']:.1f})")

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
control_data = qc_system.get_control_chart_data()
if control_data:
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∫–∏', fontsize=16)
    
    for i, (ax, param_name) in enumerate(zip(axes.flat, columns)):
        measurements = control_data['measurements'][:, i]
        mean_val = control_data['means'][i]
        upper_limit = control_data['upper_limits'][i]
        lower_limit = control_data['lower_limits'][i]
        
        ax.plot(measurements, 'bo-', markersize=4)
        ax.axhline(y=mean_val, color='green', linestyle='-', label='–°—Ä–µ–¥–Ω–µ–µ')
        ax.axhline(y=upper_limit, color='red', linestyle='--', label='UCL (+3œÉ)')
        ax.axhline(y=lower_limit, color='red', linestyle='--', label='LCL (-3œÉ)')
        ax.axhline(y=target_params[list(target_params.keys())[i]], 
                  color='blue', linestyle=':', label='–¶–µ–ª—å')
        
        ax.set_title(param_name)
        ax.set_xlabel('–ù–æ–º–µ—Ä –∏–∑–º–µ—Ä–µ–Ω–∏—è')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()</code></pre>
      </div>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 2: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</h3>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∞–º–º–∏–∞–∫–∞ (–ø—Ä–æ—Ü–µ—Å—Å –ì–∞–±–µ—Ä–∞-–ë–æ—à–∞).</p>
      
      <div class="code-block">
        <h4>–†–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –ì–∞–±–µ—Ä–∞-–ë–æ—à–∞</h4>
        <pre><code># –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–Ω—Ç–µ–∑–∞ –∞–º–º–∏–∞–∫–∞ (–ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫)
# –†–µ–∞–∫—Ü–∏—è: N‚ÇÇ + 3H‚ÇÇ ‚áå 2NH‚ÇÉ

# –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:
process_params = {
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': 450,      # ¬∞C (–æ–ø—Ç–∏–º—É–º 400-500¬∞C)
    '–î–∞–≤–ª–µ–Ω–∏–µ': 200,         # –∞—Ç–º (150-300 –∞—Ç–º)
    '–†–∞—Å—Ö–æ–¥_N2': 1000,       # –º¬≥/—á
    '–†–∞—Å—Ö–æ–¥_H2': 3000,       # –º¬≥/—á (—Å—Ç–µ—Ö–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:3)
    '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è_NH3': 15,  # % –æ–±. (—Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è)
    '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞': 85  # % (–∂–µ–ª–µ–∑–Ω—ã–π –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä)
}

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å —É—á–µ—Ç–æ–º —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π
np.random.seed(123)
n_samples = 100

# –°–æ–∑–¥–∞–µ–º –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
temperatures = np.random.normal(450, 20, n_samples)
pressures = np.random.normal(200, 15, n_samples)

# –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NH3 –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –¥–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–∏–Ω—Ü–∏–ø –õ–µ –®–∞—Ç–µ–ª—å–µ)
# –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –¥–∞–≤–ª–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ —Å–º–µ—â–∞–µ—Ç—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É NH3
# –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ —Å–º–µ—â–∞–µ—Ç—Å—è –≤–ª–µ–≤–æ (—ç–∫–∑–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è)
nh3_concentrations = []
for temp, press in zip(temperatures, pressures):
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –æ—Ç T –∏ P
    base_conc = 15
    pressure_effect = (press - 200) * 0.05  # +0.05% –Ω–∞ –∫–∞–∂–¥—É—é –∞—Ç–º –≤—ã—à–µ 200
    temp_effect = -(temp - 450) * 0.02      # -0.02% –Ω–∞ –∫–∞–∂–¥—ã–π –≥—Ä–∞–¥—É—Å –≤—ã—à–µ 450
    noise = np.random.normal(0, 0.5)
    
    conc = base_conc + pressure_effect + temp_effect + noise
    conc = max(0, min(25, conc))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    nh3_concentrations.append(conc)

# –†–∞—Å—Ö–æ–¥—ã –≥–∞–∑–æ–≤ —Å–≤—è–∑–∞–Ω—ã —Å—Ç–µ—Ö–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏
n2_flows = np.random.normal(1000, 50, n_samples)
h2_flows = n2_flows * 3 + np.random.normal(0, 100, n_samples)  # –°—Ç–µ—Ö–∏–æ–º–µ—Ç—Ä–∏—è + –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

# –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
catalyst_activities = 85 - np.linspace(0, 10, n_samples) + np.random.normal(0, 2, n_samples)

# –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
chemical_data = np.column_stack([
    temperatures,
    pressures,
    n2_flows,
    h2_flows,
    nh3_concentrations,
    catalyst_activities
])

chemical_columns = ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_¬∞C', '–î–∞–≤–ª–µ–Ω–∏–µ_–∞—Ç–º', '–†–∞—Å—Ö–æ–¥_N2_–º¬≥/—á', 
                   '–†–∞—Å—Ö–æ–¥_H2_–º¬≥/—á', '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è_NH3_%', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞_%']

# –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
chemical_corr = np.corrcoef(chemical_data.T)

print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–Ω—Ç–µ–∑–∞ –∞–º–º–∏–∞–∫–∞:")
chemical_df = pd.DataFrame(chemical_data, columns=chemical_columns)
print(chemical_df.corr())

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
plt.figure(figsize=(12, 10))
sns.heatmap(chemical_df.corr(), 
            annot=True, 
            cmap='RdBu_r', 
            center=0,
            fmt='.3f',
            square=True)
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–Ω—Ç–µ–∑–∞ –∞–º–º–∏–∞–∫–∞')
plt.tight_layout()
plt.show()

# –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ NH3 –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
X = chemical_data[:, [0, 1, 5]]  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
y = chemical_data[:, 4]          # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NH3

model = LinearRegression()
model.fit(X, y)
y_pred = model.predict(X)

print(f"\\n–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ NH3:")
print(f"R¬≤ = {r2_score(y, y_pred):.3f}")
print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:")
print(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {model.coef_[0]:.4f}")
print(f"  –î–∞–≤–ª–µ–Ω–∏–µ: {model.coef_[1]:.4f}")
print(f"  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {model.coef_[2]:.4f}")
print(f"–°–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω: {model.intercept_:.4f}")

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\\n–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
if model.coef_[0] < 0:
    print("‚úì –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é NH3 (—ç–∫–∑–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è)")
if model.coef_[1] > 0:
    print("‚úì –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é NH3 (–ø—Ä–∏–Ω—Ü–∏–ø –õ–µ –®–∞—Ç–µ–ª—å–µ)")
if model.coef_[2] > 0:
    print("‚úì –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞")</code></pre>
      </div>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã</h3>
      <p>–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã –∏–∑—É—á–∏–ª–∏:</p>
      <ul>
        <li><strong>–ú–∞—Ç—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</strong> - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ</li>
        <li><strong>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</strong> - –≤—ã—è–≤–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li><strong>–°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞</strong> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –Ω–æ—Ä–º—ã</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</strong> - —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã</strong> - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
      </ul>
      
      <p>–≠—Ç–∏ –º–µ—Ç–æ–¥—ã —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.</p>
    `


  },

  // –£—Ä–æ–∫ 3 - –ü—Ä–∞–∫—Ç–∏–∫–∞: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
  3: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤",
    duration: "180 –º–∏–Ω",
    type: "practice",
    content: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤</h2>
      
      <h3>–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏</h3>
      <p>–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –°–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢ –† 8.596-2002 "–ú–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º", –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞.</p>
      
      <h4>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤:</h4>
      <ul>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ:</strong> —Ç–µ—Ä–º–æ–ø–∞—Ä—ã (–ì–û–°–¢ –† 8.585-2001), —Ç–µ—Ä–º–æ—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–ì–û–°–¢ 6651-2009)</li>
        <li><strong>–î–∞–≤–ª–µ–Ω–∏—è:</strong> —Ç–µ–Ω–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ, –ø—å–µ–∑–æ—Ä–µ–∑–∏—Å—Ç–∏–≤–Ω—ã–µ (–ì–û–°–¢ 22520-85)</li>
        <li><strong>–†–∞—Å—Ö–æ–¥–∞:</strong> —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ, —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã–µ (–ì–û–°–¢ 8.563.1-97)</li>
        <li><strong>–í–∏–±—Ä–∞—Ü–∏–∏:</strong> –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä—ã (–ì–û–°–¢ –† –ò–°–û 2954-97)</li>
        <li><strong>–£—Ä–æ–≤–Ω—è:</strong> —Ä–∞–¥–∞—Ä–Ω—ã–µ, —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã–µ (–ì–û–°–¢ –† 8.563.2-97)</li>
      </ul>
      
      <h3>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–æ–≤</h3>
      
      <h4>–¢–µ—Ä–º–æ–ø–∞—Ä—ã (–ø–æ –ì–û–°–¢ –† 8.585-2001):</h4>
      <ul>
        <li><strong>–¢–∏–ø K (—Ö—Ä–æ–º–µ–ª—å-–∞–ª—é–º–µ–ª—å):</strong> –¥–∏–∞–ø–∞–∑–æ–Ω -200...+1372¬∞C, –∫–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ ¬±1.5¬∞C</li>
        <li><strong>–¢–∏–ø J (–∂–µ–ª–µ–∑–æ-–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–Ω):</strong> –¥–∏–∞–ø–∞–∑–æ–Ω -210...+1200¬∞C, –∫–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ ¬±1.1¬∞C</li>
        <li><strong>–¢–∏–ø T (–º–µ–¥—å-–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–Ω):</strong> –¥–∏–∞–ø–∞–∑–æ–Ω -270...+400¬∞C, –∫–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ ¬±0.5¬∞C</li>
      </ul>
      
      <h4>–î–∞—Ç—á–∏–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è (–ø–æ –ì–û–°–¢ 22520-85):</h4>
      <ul>
        <li><strong>–ö–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ 0.25:</strong> –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ¬±0.25% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
        <li><strong>–ö–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ 0.5:</strong> –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ¬±0.5% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
        <li><strong>–ö–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ 1.0:</strong> –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ¬±1.0% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
      </ul>
      
      <h3>–ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤</h3>
      
      <h4>1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–æ–≤</h4>
      <p>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–∏–¥–∞–º –ø–æ–º–µ—Ö:</p>
      <ul>
        <li><strong>–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–æ–º–µ—Ö–∏:</strong> –æ—Ç —Å–∏–ª–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (50 –ì—Ü)</li>
        <li><strong>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏:</strong> –æ—Ç —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥—Ä–µ–π—Ñ:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</li>
      </ul>
      
      <h4>2. –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –ª–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏—è</h4>
      <p>–°–æ–≥–ª–∞—Å–Ω–æ –†–ú–ì 51-2002 "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Ç–æ–¥–∏–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π", –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è:</p>
      <ul>
        <li>–ü—Ä–∏ –≤–≤–æ–¥–µ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é</li>
        <li>–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –¥–∞—Ç—á–∏–∫–∞)</li>
        <li>–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–º–µ–Ω—ã</li>
      </ul>
      
      <h4>3. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π</h4>
      <p>–ú–µ—Ç–æ–¥—ã –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –¥–∞—Ç—á–∏–∫–æ–≤:</p>
      <ul>
        <li><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã:</strong> –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–æ 3œÉ –ø—Ä–∞–≤–∏–ª—É</li>
        <li><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ –¥–∞—Ç—á–∏–∫–∞–º–∏:</strong> –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤:</strong> –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π</li>
      </ul>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤</h2>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–æ–ø–∞—Ä –≤ –ø–µ—á–∏ –æ–±–∂–∏–≥–∞</h3>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Ä–º–æ–ø–∞—Ä –≤ –ø–µ—á–∏ –æ–±–∂–∏–≥–∞ —Ü–µ–º–µ–Ω—Ç–Ω–æ–≥–æ –∫–ª–∏–Ω–∫–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∏ –¥–ª–∏–Ω–æ–π 170 –º, –¥–∏–∞–º–µ—Ç—Ä–æ–º 5.5 –º (—Ç–∏–ø–æ–≤–∞—è –ø–µ—á—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ 5000 —Ç/—Å—É—Ç –∫–ª–∏–Ω–∫–µ—Ä–∞).</p>
      
      <div class="code-block">
        <h4>–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–æ–ø–∞—Ä</h4>
        <pre><code>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import signal
from scipy.stats import zscore
import seaborn as sns
from datetime import datetime, timedelta

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∏ –æ–±–∂–∏–≥–∞ —Ü–µ–º–µ–Ω—Ç–Ω–æ–≥–æ –∫–ª–∏–Ω–∫–µ—Ä–∞
# –ó–æ–Ω—ã –ø–µ—á–∏ –∏ –∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ä–µ–∂–∏–º—ã (–ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∫–∞—Ä—Ç–∞–º)
kiln_zones = {
    '–ó–æ–Ω–∞_—Å—É—à–∫–∏': {'target_temp': 200, 'tolerance': 50},      # ¬∞C
    '–ó–æ–Ω–∞_–ø–æ–¥–æ–≥—Ä–µ–≤–∞': {'target_temp': 800, 'tolerance': 100},  # ¬∞C  
    '–ó–æ–Ω–∞_–∫–∞–ª—å—Ü–∏–Ω–∞—Ü–∏–∏': {'target_temp': 900, 'tolerance': 50}, # ¬∞C
    '–ó–æ–Ω–∞_–æ–±–∂–∏–≥–∞': {'target_temp': 1450, 'tolerance': 30},     # ¬∞C (–ø–∏–∫–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
    '–ó–æ–Ω–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è': {'target_temp': 1200, 'tolerance': 80}  # ¬∞C
}

# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–µ—Ä–º–æ–ø–∞—Ä —Ç–∏–ø–∞ K (–ø–æ –ì–û–°–¢ –† 8.585-2001)
thermocouple_specs = {
    'measurement_range': (-200, 1372),  # ¬∞C
    'accuracy_class': 1.5,              # ¬±1.5¬∞C –∏–ª–∏ ¬±0.004*|t|
    'response_time': 10,                # —Å–µ–∫—É–Ω–¥ (–≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ 90%)
    'drift_rate': 0.1                   # ¬∞C/–º–µ—Å—è—Ü (—Ç–∏–ø–∏—á–Ω—ã–π –¥—Ä–µ–π—Ñ)
}

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 24 —á–∞—Å–∞ (–∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
np.random.seed(42)
time_points = pd.date_range(start='2024-01-01 00:00:00', 
                           end='2024-01-01 23:59:59', 
                           freq='5min')
n_measurements = len(time_points)

# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã –ø–µ—á–∏
thermocouple_data = {}
zone_names = list(kiln_zones.keys())

for zone_name, zone_params in kiln_zones.items():
    target = zone_params['target_temp']
    tolerance = zone_params['tolerance']
    
    # –ë–∞–∑–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å —Å—É—Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
    daily_cycle = 10 * np.sin(2 * np.pi * np.arange(n_measurements) / (24 * 12))  # 12 –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ —á–∞—Å
    
    # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–µ—á–∏)
    process_changes = np.zeros(n_measurements)
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø–æ–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    process_changes[100:150] = -20  # –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å–∞
    process_changes[200:220] = 15   # –ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ 1.5 —á–∞—Å–∞
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏ (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —à—É–º –ø—Ä–æ—Ü–µ—Å—Å–∞)
    process_noise = np.random.normal(0, tolerance * 0.1, n_measurements)
    
    # –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–æ–º–µ—Ö–∏ (50 –ì—Ü –∏ –≥–∞—Ä–º–æ–Ω–∏–∫–∏)
    em_interference = 2 * np.sin(2 * np.pi * 50 * np.arange(n_measurements) / (12 * 3600))
    
    # –î—Ä–µ–π—Ñ –¥–∞—Ç—á–∏–∫–∞ (–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π)
    sensor_drift = np.linspace(0, 2, n_measurements)  # –î—Ä–µ–π—Ñ –Ω–∞ 2¬∞C –∑–∞ —Å—É—Ç–∫–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ä–º–æ–ø–∞—Ä—ã
    temperatures = (target + daily_cycle + process_changes + 
                   process_noise + em_interference + sensor_drift)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ—Ä–º–æ–ø–∞—Ä—ã
    measurement_error = np.random.normal(0, thermocouple_specs['accuracy_class'], n_measurements)
    temperatures += measurement_error
    
    thermocouple_data[zone_name] = temperatures

# –°–æ–∑–¥–∞–µ–º DataFrame
df_temp = pd.DataFrame(thermocouple_data, index=time_points)
print("–î–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–æ–ø–∞—Ä –ø–µ—á–∏ –æ–±–∂–∏–≥–∞:")
print(df_temp.head())
print(f"\\n–§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {df_temp.shape}")
print(f"–ü–µ—Ä–∏–æ–¥ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {time_points[0]} - {time_points[-1]}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
print("\\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–æ–Ω–∞–º –ø–µ—á–∏:")
print(df_temp.describe())</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤</h4>
        <pre><code># –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
def apply_filters(data, zone_name):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º —Ç–µ—Ä–º–æ–ø–∞—Ä—ã"""
    
    # 1. –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
    window_size = 12  # 1 —á–∞—Å (12 –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ 5 –º–∏–Ω—É—Ç)
    moving_avg = data.rolling(window=window_size, center=True).mean()
    
    # 2. –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
    median_filtered = signal.medfilt(data.values, kernel_size=5)
    
    # 3. –§–∏–ª—å—Ç—Ä –ë–∞—Ç—Ç–µ—Ä–≤–æ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –ø–æ–º–µ—Ö
    # –ß–∞—Å—Ç–æ—Ç–∞ —Å—Ä–µ–∑–∞: 1/(30 –º–∏–Ω—É—Ç) = 1/6 –∏–∑–º–µ—Ä–µ–Ω–∏–π
    nyquist_freq = 0.5 * (12)  # 12 –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ —á–∞—Å
    cutoff_freq = 1/6  # 1 —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
    normalized_cutoff = cutoff_freq / nyquist_freq
    
    b, a = signal.butter(4, normalized_cutoff, btype='low')
    butterworth_filtered = signal.filtfilt(b, a, data.values)
    
    # 4. –ö–∞–ª–º–∞–Ω–æ–≤—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    def simple_kalman_filter(measurements, process_variance=1, measurement_variance=4):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–∞–ª–º–∞–Ω–æ–≤—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä"""
        n = len(measurements)
        filtered = np.zeros(n)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        x = measurements[0]  # –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        P = 1.0             # –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        
        for i in range(n):
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            x_pred = x
            P_pred = P + process_variance
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            K = P_pred / (P_pred + measurement_variance)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª–º–∞–Ω–∞
            x = x_pred + K * (measurements[i] - x_pred)
            P = (1 - K) * P_pred
            
            filtered[i] = x
        
        return filtered
    
    kalman_filtered = simple_kalman_filter(data.values)
    
    return {
        'original': data.values,
        'moving_average': moving_avg.values,
        'median': median_filtered,
        'butterworth': butterworth_filtered,
        'kalman': kalman_filtered
    }

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∑–æ–Ω–µ –æ–±–∂–∏–≥–∞ (–Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è)
zone_to_analyze = '–ó–æ–Ω–∞_–æ–±–∂–∏–≥–∞'
filtered_results = apply_filters(df_temp[zone_to_analyze], zone_to_analyze)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
plt.figure(figsize=(15, 12))

# –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
plt.subplot(3, 2, 1)
time_hours = np.arange(len(time_points)) / 12  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∞—Å—ã
plt.plot(time_hours, filtered_results['original'], 'b-', alpha=0.7, label='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
plt.plot(time_hours, filtered_results['moving_average'], 'r-', linewidth=2, label='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ')
plt.plot(time_hours, filtered_results['butterworth'], 'g-', linewidth=2, label='–§–∏–ª—å—Ç—Ä –ë–∞—Ç—Ç–µ—Ä–≤–æ—Ä—Ç–∞')
plt.plot(time_hours, filtered_results['kalman'], 'm-', linewidth=2, label='–ö–∞–ª–º–∞–Ω–æ–≤—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä')
plt.title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - {zone_to_analyze}')
plt.xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 2: –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
plt.subplot(3, 2, 2)
freqs, psd_original = signal.welch(filtered_results['original'], fs=12, nperseg=128)
freqs, psd_filtered = signal.welch(filtered_results['butterworth'], fs=12, nperseg=128)
plt.semilogy(freqs, psd_original, 'b-', label='–ò—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª')
plt.semilogy(freqs, psd_filtered, 'g-', label='–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')
plt.title('–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –º–æ—â–Ω–æ—Å—Ç–∏')
plt.xlabel('–ß–∞—Å—Ç–æ—Ç–∞ (1/—á–∞—Å)')
plt.ylabel('PSD')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 3: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —à—É–º–æ–≤
plt.subplot(3, 2, 3)
noise_original = filtered_results['original'] - filtered_results['moving_average']
noise_filtered = filtered_results['butterworth'] - filtered_results['moving_average']
plt.hist(noise_original[~np.isnan(noise_original)], bins=30, alpha=0.7, label='–ò—Å—Ö–æ–¥–Ω—ã–π —à—É–º', density=True)
plt.hist(noise_filtered, bins=30, alpha=0.7, label='–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏', density=True)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à—É–º–∞')
plt.xlabel('–ê–º–ø–ª–∏—Ç—É–¥–∞ —à—É–º–∞ (¬∞C)')
plt.ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 4: –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
plt.subplot(3, 2, 4)
autocorr_original = np.correlate(filtered_results['original'], filtered_results['original'], mode='full')
autocorr_filtered = np.correlate(filtered_results['butterworth'], filtered_results['butterworth'], mode='full')
lags = np.arange(-len(autocorr_original)//2, len(autocorr_original)//2 + 1)
plt.plot(lags[:100], autocorr_original[len(autocorr_original)//2:len(autocorr_original)//2+100], 'b-', label='–ò—Å—Ö–æ–¥–Ω—ã–π')
plt.plot(lags[:100], autocorr_filtered[len(autocorr_filtered)//2:len(autocorr_filtered)//2+100], 'g-', label='–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π')
plt.title('–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è')
plt.xlabel('–õ–∞–≥ (–∏–∑–º–µ—Ä–µ–Ω–∏—è)')
plt.ylabel('–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 5: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤—Å–µ—Ö –∑–æ–Ω
plt.subplot(3, 2, 5)
correlation_matrix = df_temp.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, fmt='.3f')
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏ –ø–µ—á–∏')

# –ì—Ä–∞—Ñ–∏–∫ 6: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
plt.subplot(3, 2, 6)
target_temp = kiln_zones[zone_to_analyze]['target_temp']
tolerance = kiln_zones[zone_to_analyze]['tolerance']

plt.plot(time_hours, filtered_results['butterworth'], 'g-', linewidth=2)
plt.axhline(y=target_temp, color='blue', linestyle='-', linewidth=2, label='–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
plt.axhline(y=target_temp + tolerance, color='red', linestyle='--', label='–í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª')
plt.axhline(y=target_temp - tolerance, color='red', linestyle='--', label='–ù–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª')
plt.fill_between(time_hours, target_temp - tolerance, target_temp + tolerance, alpha=0.2, color='green')
plt.title(f'–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ - {zone_to_analyze}')
plt.xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
plt.legend()
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
def analyze_filter_performance(original, filtered, target_temp):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
    mse = np.mean((original - filtered) ** 2)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª/—à—É–º
    signal_power = np.var(filtered)
    noise_power = np.var(original - filtered)
    snr = 10 * np.log10(signal_power / noise_power) if noise_power > 0 else float('inf')
    
    # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    stability_original = np.std(original)
    stability_filtered = np.std(filtered)
    
    # –¢–æ—á–Ω–æ—Å—Ç—å (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)
    accuracy_original = np.mean(np.abs(original - target_temp))
    accuracy_filtered = np.mean(np.abs(filtered - target_temp))
    
    return {
        'MSE': mse,
        'SNR_dB': snr,
        'Stability_original': stability_original,
        'Stability_filtered': stability_filtered,
        'Accuracy_original': accuracy_original,
        'Accuracy_filtered': accuracy_filtered
    }

# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
filter_performance = {}
for filter_name in ['moving_average', 'butterworth', 'kalman']:
    if filter_name in filtered_results:
        perf = analyze_filter_performance(
            filtered_results['original'], 
            filtered_results[filter_name], 
            kiln_zones[zone_to_analyze]['target_temp']
        )
        filter_performance[filter_name] = perf

print("\\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:")
print("=" * 60)
for filter_name, metrics in filter_performance.items():
    print(f"\\n{filter_name.upper()}:")
    print(f"  SNR: {metrics['SNR_dB']:.2f} –¥–ë")
    print(f"  –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {metrics['Stability_filtered']:.2f}¬∞C")
    print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {metrics['Accuracy_filtered']:.2f}¬∞C")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 3: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤</h4>
        <pre><code>class ThermocoupleDiagnostics:
    """–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–µ—Ä–º–æ–ø–∞—Ä"""
    
    def __init__(self, zone_specs):
        self.zone_specs = zone_specs
        self.anomaly_history = []
        
    def detect_anomalies(self, data, zone_name):
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–æ–ø–∞—Ä"""
        
        zone_spec = self.zone_specs[zone_name]
        target_temp = zone_spec['target_temp']
        tolerance = zone_spec['tolerance']
        
        anomalies = {
            'out_of_range': [],
            'sensor_drift': [],
            'noise_level': [],
            'stuck_values': [],
            'rapid_changes': []
        }
        
        # 1. –í—ã—Ö–æ–¥ –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã
        out_of_range_mask = (np.abs(data - target_temp) > tolerance)
        anomalies['out_of_range'] = np.where(out_of_range_mask)[0].tolist()
        
        # 2. –î—Ä–µ–π—Ñ –¥–∞—Ç—á–∏–∫–∞ (–ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥)
        time_indices = np.arange(len(data))
        slope, intercept, r_value, p_value, std_err = stats.linregress(time_indices, data)
        
        # –ó–Ω–∞—á–∏–º—ã–π –¥—Ä–µ–π—Ñ: –±–æ–ª–µ–µ 5¬∞C –∑–∞ —Å—É—Ç–∫–∏
        daily_drift = slope * len(data)
        if abs(daily_drift) > 5:
            anomalies['sensor_drift'].append({
                'drift_rate': daily_drift,
                'r_squared': r_value**2,
                'p_value': p_value
            })
        
        # 3. –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        window_size = 12  # 1 —á–∞—Å
        rolling_std = pd.Series(data).rolling(window=window_size).std()
        noise_threshold = tolerance * 0.2  # 20% –æ—Ç –¥–æ–ø—É—Å–∫–∞
        
        high_noise_mask = rolling_std > noise_threshold
        high_noise_periods = np.where(high_noise_mask)[0].tolist()
        if high_noise_periods:
            anomalies['noise_level'] = high_noise_periods
        
        # 4. "–ó–∞—Å—Ç—Ä—è–≤—à–∏–µ" –∑–Ω–∞—á–µ–Ω–∏—è (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è)
        diff_data = np.diff(data)
        stuck_threshold = 0.1  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–µ 0.1¬∞C
        stuck_mask = np.abs(diff_data) < stuck_threshold
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        stuck_sequences = []
        current_sequence = []
        
        for i, is_stuck in enumerate(stuck_mask):
            if is_stuck:
                current_sequence.append(i)
            else:
                if len(current_sequence) > 5:  # –ë–æ–ª–µ–µ 5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    stuck_sequences.append(current_sequence)
                current_sequence = []
        
        if len(current_sequence) > 5:
            stuck_sequences.append(current_sequence)
            
        anomalies['stuck_values'] = stuck_sequences
        
        # 5. –†–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–∫–∞—á–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)
        rapid_change_threshold = tolerance * 0.5  # 50% –æ—Ç –¥–æ–ø—É—Å–∫–∞ –∑–∞ –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
        rapid_changes = np.where(np.abs(diff_data) > rapid_change_threshold)[0].tolist()
        anomalies['rapid_changes'] = rapid_changes
        
        return anomalies
    
    def generate_diagnostic_report(self, data, zone_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        
        anomalies = self.detect_anomalies(data, zone_name)
        zone_spec = self.zone_specs[zone_name]
        
        report = {
            'zone_name': zone_name,
            'measurement_period': f"{len(data)} –∏–∑–º–µ—Ä–µ–Ω–∏–π",
            'target_temperature': zone_spec['target_temp'],
            'tolerance': zone_spec['tolerance'],
            'anomalies_detected': anomalies,
            'overall_health': 'GOOD'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        # –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞
        total_anomalies = (len(anomalies['out_of_range']) + 
                          len(anomalies['noise_level']) + 
                          len(anomalies['stuck_values']) + 
                          len(anomalies['rapid_changes']))
        
        if total_anomalies > len(data) * 0.1:  # –ë–æ–ª–µ–µ 10% –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            report['overall_health'] = 'POOR'
        elif total_anomalies > len(data) * 0.05:  # –ë–æ–ª–µ–µ 5% –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            report['overall_health'] = 'FAIR'
        
        if anomalies['sensor_drift']:
            if abs(anomalies['sensor_drift'][0]['drift_rate']) > 10:
                report['overall_health'] = 'POOR'
        
        return report

# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnostics = ThermocoupleDiagnostics(kiln_zones)

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∑–æ–Ω—ã –ø–µ—á–∏
diagnostic_reports = {}
for zone_name in zone_names:
    report = diagnostics.generate_diagnostic_report(df_temp[zone_name].values, zone_name)
    diagnostic_reports[zone_name] = report

# –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
print("\\n–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –û–¢–ß–ï–¢–´ –ü–û –¢–ï–†–ú–û–ü–ê–†–ê–ú")
print("=" * 60)

for zone_name, report in diagnostic_reports.items():
    print(f"\\n{zone_name}:")
    print(f"  –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {report['overall_health']}")
    print(f"  –¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {report['target_temperature']}¬∞C")
    print(f"  –î–æ–ø—É—Å–∫: ¬±{report['tolerance']}¬∞C")
    
    anomalies = report['anomalies_detected']
    
    if anomalies['out_of_range']:
        print(f"  ‚ö†Ô∏è  –í—ã—Ö–æ–¥—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã: {len(anomalies['out_of_range'])} —Å–ª—É—á–∞–µ–≤")
    
    if anomalies['sensor_drift']:
        drift_info = anomalies['sensor_drift'][0]
        print(f"  üìà –î—Ä–µ–π—Ñ –¥–∞—Ç—á–∏–∫–∞: {drift_info['drift_rate']:.2f}¬∞C/—Å—É—Ç–∫–∏ (R¬≤={drift_info['r_squared']:.3f})")
    
    if anomalies['noise_level']:
        print(f"  üîä –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —à—É–º: {len(anomalies['noise_level'])} –ø–µ—Ä–∏–æ–¥–æ–≤")
    
    if anomalies['stuck_values']:
        print(f"  üîí –ó–∞—Å—Ç—Ä—è–≤—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {len(anomalies['stuck_values'])} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    
    if anomalies['rapid_changes']:
        print(f"  ‚ö° –†–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {len(anomalies['rapid_changes'])} —Å–ª—É—á–∞–µ–≤")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
fig, axes = plt.subplots(len(zone_names), 1, figsize=(15, 20))
fig.suptitle('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Ä–º–æ–ø–∞—Ä –ø–µ—á–∏ –æ–±–∂–∏–≥–∞', fontsize=16)

for i, zone_name in enumerate(zone_names):
    ax = axes[i]
    data = df_temp[zone_name].values
    time_hours = np.arange(len(data)) / 12
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    ax.plot(time_hours, data, 'b-', linewidth=1, alpha=0.7, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    
    # –¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –¥–æ–ø—É—Å–∫–∏
    target = kiln_zones[zone_name]['target_temp']
    tolerance = kiln_zones[zone_name]['tolerance']
    
    ax.axhline(y=target, color='green', linestyle='-', linewidth=2, label='–¶–µ–ª—å')
    ax.axhline(y=target + tolerance, color='red', linestyle='--', alpha=0.7, label='–î–æ–ø—É—Å–∫')
    ax.axhline(y=target - tolerance, color='red', linestyle='--', alpha=0.7)
    ax.fill_between(time_hours, target - tolerance, target + tolerance, alpha=0.1, color='green')
    
    # –û—Ç–º–µ—á–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
    anomalies = diagnostic_reports[zone_name]['anomalies_detected']
    
    if anomalies['out_of_range']:
        out_of_range_times = np.array(anomalies['out_of_range']) / 12
        out_of_range_temps = data[anomalies['out_of_range']]
        ax.scatter(out_of_range_times, out_of_range_temps, 
                  color='red', s=30, marker='x', label='–í–Ω–µ –¥–æ–ø—É—Å–∫–∞', zorder=5)
    
    if anomalies['rapid_changes']:
        rapid_change_times = np.array(anomalies['rapid_changes']) / 12
        rapid_change_temps = data[anomalies['rapid_changes']]
        ax.scatter(rapid_change_times, rapid_change_temps, 
                  color='orange', s=20, marker='o', label='–†–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', zorder=5)
    
    ax.set_title(f'{zone_name} - –°–æ—Å—Ç–æ—è–Ω–∏–µ: {diagnostic_reports[zone_name]["overall_health"]}')
    ax.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
    ax.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    ax.legend()
    ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
print("\\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Æ:")
print("=" * 40)

for zone_name, report in diagnostic_reports.items():
    if report['overall_health'] != 'GOOD':
        print(f"\\n{zone_name}:")
        
        anomalies = report['anomalies_detected']
        
        if anomalies['sensor_drift']:
            print("  üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞ (–æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä–µ–π—Ñ)")
        
        if anomalies['noise_level']:
            print("  üîå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–±–µ–ª–µ–π (–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —à—É–º)")
        
        if anomalies['stuck_values']:
            print("  üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–µ –∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞")
        
        if len(anomalies['out_of_range']) > len(df_temp) * 0.05:
            print("  ‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        
        if anomalies['rapid_changes']:
            print("  üå°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∏–∑–æ–ª—è—Ü–∏—é –≤ –∑–æ–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞")</code></pre>
      </div>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 2: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏</h3>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –¥–∞—Ç—á–∏–∫–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–Ω—Ü–∏–∏ –º–æ—â–Ω–æ—Å—Ç—å—é 25 –ú–í—Ç —Å —Ä–∞–±–æ—á–∏–º –¥–∞–≤–ª–µ–Ω–∏–µ–º 7.5 –ú–ü–∞.</p>
      
      <div class="code-block">
        <h4>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞</h4>
        <pre><code># –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (–ø–æ –°–¢–û –ì–∞–∑–ø—Ä–æ–º 2-3.5-051-2006)
compressor_station_params = {
    'inlet_pressure': {'target': 5.5, 'min': 4.5, 'max': 6.0},      # –ú–ü–∞ (–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Ö–æ–¥–µ)
    'outlet_pressure': {'target': 7.5, 'min': 7.0, 'max': 8.0},     # –ú–ü–∞ (–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥–µ)  
    'differential_pressure': {'target': 2.0, 'min': 1.5, 'max': 2.5}, # –ú–ü–∞ (–ø–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è)
    'suction_pressure': {'target': 5.4, 'min': 4.4, 'max': 5.9}     # –ú–ü–∞ (–¥–∞–≤–ª–µ–Ω–∏–µ –≤—Å–∞—Å—ã–≤–∞–Ω–∏—è)
}

# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è (–∫–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ 0.25 –ø–æ –ì–û–°–¢ 22520-85)
pressure_sensor_specs = {
    'measurement_range': (0, 10),    # –ú–ü–∞
    'accuracy_class': 0.25,          # ¬±0.25% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    'absolute_accuracy': 0.025,      # ¬±0.025 –ú–ü–∞
    'temperature_coefficient': 0.01, # %/¬∞C
    'long_term_stability': 0.1       # % –∑–∞ –≥–æ–¥
}

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é (–∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
np.random.seed(123)
time_points_week = pd.date_range(start='2024-01-01 00:00:00', 
                                end='2024-01-07 23:59:50', 
                                freq='10s')
n_measurements_week = len(time_points_week)

print(f"–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏:")
print(f"–ü–µ—Ä–∏–æ–¥: {time_points_week[0]} - {time_points_week[-1]}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {n_measurements_week:,}")
print(f"–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π: –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–≤–ª–µ–Ω–∏—è
pressure_data = {}

for param_name, param_spec in compressor_station_params.items():
    target = param_spec['target']
    min_val = param_spec['min']
    max_val = param_spec['max']
    
    # –ë–∞–∑–æ–≤–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ä–∞–±–æ—á–∏—Ö —Ü–∏–∫–ª–æ–≤
    # –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ü–∏–∫–ª–∏—á–Ω–æ: 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç–∞, 30 –º–∏–Ω—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    cycle_length = 8.5 * 3600 / 10  # 8.5 —á–∞—Å–æ–≤ –≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö –ø–æ 10 —Å–µ–∫
    n_cycles = int(n_measurements_week / cycle_length) + 1
    
    base_pressure = np.tile(
        np.concatenate([
            np.full(int(8 * 3600 / 10), target),      # 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
            np.full(int(0.5 * 3600 / 10), target * 0.1)  # 30 –º–∏–Ω—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        ]), 
        n_cycles
    )[:n_measurements_week]
    
    # –°—É—Ç–æ—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏)
    daily_cycle = 0.2 * target * np.sin(2 * np.pi * np.arange(n_measurements_week) / (24 * 3600 / 10))
    
    # –ù–µ–¥–µ–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è (—Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ)
    weekly_cycle = 0.1 * target * np.sin(2 * np.pi * np.arange(n_measurements_week) / (7 * 24 * 3600 / 10))
    
    # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º—É—â–µ–Ω–∏—è
    disturbances = np.zeros(n_measurements_week)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–æ–≤—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø—É—Å–∫–∏
    maintenance_periods = [
        (int(2 * 24 * 3600 / 10), int(2.5 * 24 * 3600 / 10)),  # –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û
        (int(5 * 24 * 3600 / 10), int(5.2 * 24 * 3600 / 10))   # –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    ]
    
    for start, end in maintenance_periods:
        if end < n_measurements_week:
            disturbances[start:end] = -target * 0.9  # –ü–æ—á—Ç–∏ –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    process_noise = np.random.normal(0, target * 0.02, n_measurements_week)
    
    # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞
    measurement_error = np.random.normal(0, pressure_sensor_specs['absolute_accuracy'], n_measurements_week)
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (—Å—É—Ç–æ—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ¬±10¬∞C)
    ambient_temp_variation = 10 * np.sin(2 * np.pi * np.arange(n_measurements_week) / (24 * 3600 / 10))
    temp_error = ambient_temp_variation * pressure_sensor_specs['temperature_coefficient'] * target / 100
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞
    final_pressure = (base_pressure + daily_cycle + weekly_cycle + 
                     disturbances + process_noise + measurement_error + temp_error)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    final_pressure = np.clip(final_pressure, 0, pressure_sensor_specs['measurement_range'][1])
    
    pressure_data[param_name] = final_pressure

# –°–æ–∑–¥–∞–µ–º DataFrame
df_pressure = pd.DataFrame(pressure_data, index=time_points_week)

print("\\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–∞–≤–ª–µ–Ω–∏—è:")
print(df_pressure.describe())

# –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏
correlation_matrix = df_pressure.corr()
print("\\n–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è:")
print(correlation_matrix)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–≤—ã–µ —Å—É—Ç–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
first_day_data = df_pressure.iloc[:int(24 * 3600 / 10)]  # –ü–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞
time_hours_day = np.arange(len(first_day_data)) / (3600 / 10)  # –í —á–∞—Å–∞—Ö

plt.figure(figsize=(15, 12))

# –ì—Ä–∞—Ñ–∏–∫ 1: –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞–≤–ª–µ–Ω–∏—è
plt.subplot(3, 2, 1)
for param_name in compressor_station_params.keys():
    plt.plot(time_hours_day, first_day_data[param_name], 
            linewidth=2, label=param_name.replace('_', ' ').title())
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    target = compressor_station_params[param_name]['target']
    plt.axhline(y=target, linestyle='--', alpha=0.5)

plt.title('–î–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (24 —á–∞—Å–∞)')
plt.xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
plt.ylabel('–î–∞–≤–ª–µ–Ω–∏–µ (–ú–ü–∞)')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 2: –ü–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è
plt.subplot(3, 2, 2)
pressure_diff = first_day_data['outlet_pressure'] - first_day_data['inlet_pressure']
plt.plot(time_hours_day, pressure_diff, 'r-', linewidth=2)
target_diff = compressor_station_params['differential_pressure']['target']
plt.axhline(y=target_diff, color='blue', linestyle='--', label=f'–¶–µ–ª—å: {target_diff} –ú–ü–∞')
plt.axhline(y=compressor_station_params['differential_pressure']['min'], 
           color='red', linestyle=':', alpha=0.7, label='–ú–∏–Ω/–ú–∞–∫—Å')
plt.axhline(y=compressor_station_params['differential_pressure']['max'], 
           color='red', linestyle=':', alpha=0.7)
plt.title('–ü–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–µ')
plt.xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
plt.ylabel('–ü–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è (–ú–ü–∞)')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 3: –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
plt.subplot(3, 2, 3)
freqs, psd = signal.welch(first_day_data['outlet_pressure'], fs=0.1, nperseg=1024)  # fs = 0.1 –ì—Ü
plt.semilogy(freqs * 3600, psd)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å—Ç–æ—Ç—É –≤ 1/—á–∞—Å
plt.title('–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –º–æ—â–Ω–æ—Å—Ç–∏ - –í—ã—Ö–æ–¥–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ')
plt.xlabel('–ß–∞—Å—Ç–æ—Ç–∞ (1/—á–∞—Å)')
plt.ylabel('PSD (–ú–ü–∞¬≤¬∑—á–∞—Å)')
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 4: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
plt.subplot(3, 2, 4)
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, fmt='.3f')
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ –¥–∞–≤–ª–µ–Ω–∏—è')

# –ì—Ä–∞—Ñ–∏–∫ 5: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
plt.subplot(3, 2, 5)
plt.hist(first_day_data['outlet_pressure'], bins=50, alpha=0.7, density=True, label='–í—ã—Ö–æ–¥–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ')
plt.hist(first_day_data['inlet_pressure'], bins=50, alpha=0.7, density=True, label='–í—Ö–æ–¥–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏—è')
plt.xlabel('–î–∞–≤–ª–µ–Ω–∏–µ (–ú–ü–∞)')
plt.ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
plt.legend()
plt.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 6: –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
plt.subplot(3, 2, 6)
# –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
window_size = 360  # 1 —á–∞—Å (360 –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ 10 —Å–µ–∫)
rolling_std = first_day_data['outlet_pressure'].rolling(window=window_size).std()
plt.plot(time_hours_day, rolling_std, 'g-', linewidth=2)
plt.title('–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è (—Å–∫–æ–ª—å–∑—è—â–µ–µ œÉ)')
plt.xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
plt.ylabel('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–ú–ü–∞)')
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

print("\\n–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.")</code></pre>
      </div>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã</h3>
      <p>–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã –æ—Å–≤–æ–∏–ª–∏:</p>
      <ul>
        <li><strong>–û–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</strong> - —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ—Ä–º–æ–ø–∞—Ä –∏ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤</strong> - —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ, –º–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –ë–∞—Ç—Ç–µ—Ä–≤–æ—Ä—Ç–∞, –ö–∞–ª–º–∞–Ω</li>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–∞—Ç—á–∏–∫–æ–≤</strong> - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞, —à—É–º–∞, –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –≤—ã–±—Ä–æ—Å–æ–≤</li>
        <li><strong>–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</strong> - –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ –ø–æ–º–µ—Ö</li>
        <li><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å</strong> - –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã, –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li><strong>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</strong> - –≤—ã—è–≤–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</li>
      </ul>
      
      <p>–≠—Ç–∏ –Ω–∞–≤—ã–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.</p>
    `


  },

  // –£—Ä–æ–∫ 4 - –û—Å–Ω–æ–≤—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  4: {
    title: "–û—Å–Ω–æ–≤—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    duration: "140 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö</h2>
      
      <h3>–†–æ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      <p>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è:</p>
      <ul>
        <li><strong>–û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö</strong> - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è ML-–º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–í—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</strong> - –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π</strong> - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
        <li><strong>–ü—Ä–∏–Ω—è—Ç–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π</strong> - –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</li>
      </ul>
      
      <h3>–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h3>
      
      <h4>–ú–µ—Ä—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏</h4>
      <p><strong>–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ:</strong></p>
      <pre><code>Œº = (Œ£x·µ¢) / n</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞, —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</p>
      
      <p><strong>–ú–µ–¥–∏–∞–Ω–∞:</strong></p>
      <p>–ó–Ω–∞—á–µ–Ω–∏–µ, –¥–µ–ª—è—â–µ–µ –≤—ã–±–æ—Ä–∫—É –ø–æ–ø–æ–ª–∞–º. –£—Å—Ç–æ–π—á–∏–≤–∞ –∫ –≤—ã–±—Ä–æ—Å–∞–º.</p>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ–µ–≤, –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ä–µ–¥–∫–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏</p>
      
      <p><strong>–ú–æ–¥–∞:</strong></p>
      <p>–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ.</p>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫, —Ç–∏–ø–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</p>
      
      <h4>–ú–µ—Ä—ã –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏</h4>
      <p><strong>–î–∏—Å–ø–µ—Ä—Å–∏—è:</strong></p>
      <pre><code>œÉ¬≤ = Œ£(x·µ¢ - Œº)¬≤ / n</code></pre>
      
      <p><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</strong></p>
      <pre><code>œÉ = ‚àö(œÉ¬≤)</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</p>
      
      <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏:</strong></p>
      <pre><code>CV = œÉ / Œº √ó 100%</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</p>
      
      <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö</h3>
      
      <h4>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–§—É–Ω–∫—Ü–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</p>
      <pre><code>f(x) = (1/(œÉ‚àö(2œÄ))) √ó e^(-¬Ω((x-Œº)/œÉ)¬≤)</code></pre>
      
      <p><strong>–ü—Ä–∞–≤–∏–ª–æ 3œÉ (–ø–æ –ì–û–°–¢ –† –ò–°–û 5725-2-2002):</strong></p>
      <ul>
        <li>68.27% –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Œº ¬± œÉ</li>
        <li>95.45% –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Œº ¬± 2œÉ</li>
        <li>99.73% –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Œº ¬± 3œÉ</li>
      </ul>
      
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</p>
      
      <h4>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–µ–π–±—É–ª–ª–∞</h4>
      <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</p>
      <pre><code>f(t) = (Œ≤/Œ∑) √ó (t/Œ∑)^(Œ≤-1) √ó e^(-(t/Œ∑)^Œ≤)</code></pre>
      <p>–≥–¥–µ Œ≤ - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–æ—Ä–º—ã, Œ∑ - –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å—à—Ç–∞–±–∞</p>
      
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û</p>
      
      <h4>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–î–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–µ–∑ "–ø–∞–º—è—Ç–∏":</p>
      <pre><code>f(t) = Œªe^(-Œªt)</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–ª—É—á–∞–π–Ω—ã–º–∏ –æ—Ç–∫–∞–∑–∞–º–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫</p>
      
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      
      <h4>–¢–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å</h4>
      <p><strong>–¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞:</strong> –¥–ª—è –≤—ã–±–æ—Ä–æ–∫ n < 50</p>
      <p><strong>–¢–µ—Å—Ç –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞-–°–º–∏—Ä–Ω–æ–≤–∞:</strong> –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—ã–±–æ—Ä–æ–∫</p>
      <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–π –ê–Ω–¥–µ—Ä—Å–æ–Ω–∞-–î–∞—Ä–ª–∏–Ω–≥–∞:</strong> –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ö–≤–æ—Å—Ç–∞–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</p>
      
      <h4>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–∞–Ω–Ω—ã—Ö</h4>
      <p><strong>t-—Ç–µ—Å—Ç –°—Ç—å—é–¥–µ–Ω—Ç–∞:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –¥–≤—É—Ö –≥—Ä—É–ø–ø</p>
      <pre><code>t = (xÃÑ‚ÇÅ - xÃÑ‚ÇÇ) / ‚àö(s¬≤(1/n‚ÇÅ + 1/n‚ÇÇ))</code></pre>
      
      <p><strong>ANOVA (–¥–∏—Å–ø–µ—Ä—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑):</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø</p>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Å–º–µ–Ω, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</p>
      
      <h4>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h4>
      <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞:</strong></p>
      <pre><code>r = Œ£((x·µ¢ - xÃÑ)(y·µ¢ - »≥)) / ‚àö(Œ£(x·µ¢ - xÃÑ)¬≤ √ó Œ£(y·µ¢ - »≥)¬≤)</code></pre>
      
      <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–ø–∏—Ä–º–µ–Ω–∞:</strong> –¥–ª—è –Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≤—ã—è–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</p>
      
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (SPC) –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º</h3>
      
      <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞ (–ì–û–°–¢ –† 50779.42-99)</h4>
      <p>–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ ISO 8258, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</p>
      
      <p><strong>XÃÑ-–∫–∞—Ä—Ç–∞ (–∫–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö):</strong></p>
      <pre><code>UCL = XÃÑ + A‚ÇÇRÃÑ
CL = XÃÑ  
LCL = XÃÑ - A‚ÇÇRÃÑ</code></pre>
      
      <p><strong>R-–∫–∞—Ä—Ç–∞ (–∫–∞—Ä—Ç–∞ —Ä–∞–∑–º–∞—Ö–æ–≤):</strong></p>
      <pre><code>UCL = D‚ÇÑRÃÑ
CL = RÃÑ
LCL = D‚ÇÉRÃÑ</code></pre>
      
      <p>–≥–¥–µ A‚ÇÇ, D‚ÇÉ, D‚ÇÑ - —Ç–∞–±–ª–∏—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã</p>
      
      <h4>–ò–Ω–¥–µ–∫—Å—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</h4>
      <p><strong>Cp (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å):</strong></p>
      <pre><code>Cp = (USL - LSL) / (6œÉ)</code></pre>
      
      <p><strong>Cpk (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å):</strong></p>
      <pre><code>Cpk = min((USL - Œº)/(3œÉ), (Œº - LSL)/(3œÉ))</code></pre>
      
      <p>–≥–¥–µ USL - –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ø—É—Å–∫–∞, LSL - –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ø—É—Å–∫–∞</p>
      
      <p><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:</strong></p>
      <ul>
        <li>Cpk ‚â• 1.33 - –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–æ—Å–æ–±–µ–Ω</li>
        <li>1.0 ‚â§ Cpk < 1.33 - –ø—Ä–æ—Ü–µ—Å—Å —á–∞—Å—Ç–∏—á–Ω–æ —Å–ø–æ—Å–æ–±–µ–Ω</li>
        <li>Cpk < 1.0 - –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ—Å–ø–æ—Å–æ–±–µ–Ω</li>
      </ul>
      
      <h3>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ (DOE)</h3>
      
      <h4>–ü–æ–ª–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</h4>
      <p>For k —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ 2 —É—Ä–æ–≤–Ω—è—Ö: 2^k –æ–ø—ã—Ç–æ–≤</p>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞, –≤—ã—è–≤–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π</p>
      
      <h4>–î—Ä–æ–±–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç</h4>
      <p>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —á–∏—Å–ª–∞ –æ–ø—ã—Ç–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å–∫—Ä–∏–Ω–∏–Ω–≥ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤</p>
      
      <h4>–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞ (RSM)</h4>
      <p>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:</p>
      <pre><code>y = Œ≤‚ÇÄ + Œ£Œ≤·µ¢x·µ¢ + Œ£Œ≤·µ¢·µ¢x·µ¢¬≤ + Œ£Œ£Œ≤·µ¢‚±ºx·µ¢x‚±º + Œµ</code></pre>
      
      <h3>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞</h4>
      <ul>
        <li><strong>–¢—Ä–µ–Ω–¥:</strong> –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</li>
        <li><strong>–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:</strong> —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è (—Å—É—Ç–æ—á–Ω—ã–µ, –Ω–µ–¥–µ–ª—å–Ω—ã–µ)</li>
        <li><strong>–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è:</strong> –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã</li>
        <li><strong>–°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:</strong> –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏</li>
      </ul>
      
      <h4>–ú–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</h4>
      <p><strong>ARIMA (AutoRegressive Integrated Moving Average):</strong></p>
      <pre><code>ARIMA(p,d,q): (1-œÜ‚ÇÅL-...-œÜ‚ÇöL·µñ)(1-L)·µàX‚Çú = (1+Œ∏‚ÇÅL+...+Œ∏‚ÇëL·µ†)Œµ‚Çú</code></pre>
      
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</p>
      
      <h3>–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è AI</h3>
      
      <h4>–¢–µ–æ—Ä–µ–º–∞ –ë–∞–π–µ—Å–∞</h4>
      <pre><code>P(H|E) = P(E|H) √ó P(H) / P(E)</code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li>P(H|E) - –∞–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã</li>
        <li>P(E|H) - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è</li>
        <li>P(H) - –∞–ø—Ä–∏–æ—Ä–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</li>
        <li>P(E) - –ø–æ–ª–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è</li>
      </ul>
      
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, uncertainty quantification</p>
      
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</h3>
      
      <h4>Bias-Variance Trade-off</h4>
      <p>–û–±—â–∞—è –æ—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏:</p>
      <pre><code>Error = Bias¬≤ + Variance + Irreducible Error</code></pre>
      
      <p><strong>Bias (—Å–º–µ—â–µ–Ω–∏–µ):</strong> —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏</p>
      <p><strong>Variance (–¥–∏—Å–ø–µ—Ä—Å–∏—è):</strong> —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –¥–∞–Ω–Ω—ã—Ö</p>
      
      <h4>–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è</h4>
      <p><strong>k-fold –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ k —á–∞—Å—Ç–µ–π</p>
      <p><strong>Leave-One-Out (LOO):</strong> k = n (—Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏)</p>
      <p><strong>Stratified CV:</strong> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∫–ª–∞—Å—Å–æ–≤</p>
      
      <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
      <p><strong>–î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:</strong></p>
      <ul>
        <li>MSE = Œ£(y·µ¢ - ≈∑·µ¢)¬≤ / n</li>
        <li>RMSE = ‚àöMSE</li>
        <li>MAE = Œ£|y·µ¢ - ≈∑·µ¢| / n</li>
        <li>R¬≤ = 1 - SS_res/SS_tot</li>
      </ul>
      
      <p><strong>–î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li>Accuracy = (TP + TN) / (TP + TN + FP + FN)</li>
        <li>Precision = TP / (TP + FP)</li>
        <li>Recall = TP / (TP + FN)</li>
        <li>F1-score = 2 √ó (Precision √ó Recall) / (Precision + Recall)</li>
      </ul>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º AI</h2>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 1: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h3>
      <p>–ö–∞–∫ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –≤—ã –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ ML-—Å–∏—Å—Ç–µ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ (–ø–æ –ì–û–°–¢ 520-2002).</p>
      
      <div class="code-block">
        <h4>–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</h4>
        <pre><code>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import shapiro, kstest, anderson, normaltest
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ (–ø–æ –ì–û–°–¢ 520-2002)
# –ü–æ–¥—à–∏–ø–Ω–∏–∫ 6205 (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä 25–º–º, –Ω–∞—Ä—É–∂–Ω—ã–π 52–º–º, —à–∏—Ä–∏–Ω–∞ 15–º–º)
bearing_specs = {
    'inner_diameter': {'nominal': 25.0, 'tolerance': 0.012},  # –º–º, IT6
    'outer_diameter': {'nominal': 52.0, 'tolerance': 0.015},  # –º–º, IT6  
    'width': {'nominal': 15.0, 'tolerance': 0.120},           # –º–º, IT7
    'roundness_deviation': {'max': 0.005},                    # –º–º
    'surface_roughness': {'max': 0.63},                       # Ra, –º–∫–º
    'hardness': {'min': 58, 'max': 65}                        # HRC
}

print("–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ 6205")
print("=" * 40)
print("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–ì–û–°–¢ 520-2002):")
for param, spec in bearing_specs.items():
    print(f"  {param}: {spec}")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–∞ –º–µ—Å—è—Ü
np.random.seed(42)
n_bearings = 5000  # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞ –º–µ—Å—è—Ü

# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
production_data = {}

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
# –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º –∏–∑-–∑–∞ –∏–∑–Ω–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
tool_wear_effect = np.linspace(0, 0.008, n_bearings)  # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –∏–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
inner_diameter = (bearing_specs['inner_diameter']['nominal'] + 
                 tool_wear_effect +
                 np.random.normal(0, 0.003, n_bearings))

# –ù–∞—Ä—É–∂–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω–∫–∞
machine_drift = 0.002 * np.sin(2 * np.pi * np.arange(n_bearings) / 1000)  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –¥—Ä–µ–π—Ñ
outer_diameter = (bearing_specs['outer_diameter']['nominal'] + 
                 machine_drift +
                 np.random.normal(0, 0.004, n_bearings))

# –®–∏—Ä–∏–Ω–∞ - –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –±–æ–ª—å—à–∏–π –¥–æ–ø—É—Å–∫
width = np.random.normal(bearing_specs['width']['nominal'], 0.030, n_bearings)

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∫—Ä—É–≥–ª–æ—Å—Ç–∏ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–µ–π–±—É–ª–ª–∞ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π)
roundness = stats.weibull_min.rvs(c=2, scale=0.002, size=n_bearings)

# –®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ - –ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
surface_roughness = stats.lognorm.rvs(s=0.3, scale=0.25, size=n_bearings)

# –¢–≤–µ—Ä–¥–æ—Å—Ç—å - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å —Ä–µ–¥–∫–∏–º–∏ –≤—ã–±—Ä–æ—Å–∞–º–∏
hardness_base = np.random.normal(61.5, 1.2, n_bearings)
# –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∫–∏–µ —Å–ª—É—á–∞–∏ –±—Ä–∞–∫–∞ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∑–∞–∫–∞–ª–∫–∞)
defect_indices = np.random.choice(n_bearings, size=int(n_bearings * 0.02), replace=False)
hardness_base[defect_indices] = np.random.normal(45, 3, len(defect_indices))
hardness = hardness_base

# –°–æ–∑–¥–∞–µ–º DataFrame
production_data = {
    'inner_diameter': inner_diameter,
    'outer_diameter': outer_diameter, 
    'width': width,
    'roundness_deviation': roundness,
    'surface_roughness': surface_roughness,
    'hardness': hardness
}

df_quality = pd.DataFrame(production_data)

# –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
df_quality['production_time'] = pd.date_range(start='2024-01-01', periods=n_bearings, freq='8.64s')
df_quality['shift'] = ((df_quality.index // (n_bearings // 90)) % 3) + 1  # 3 —Å–º–µ–Ω—ã
df_quality['day'] = df_quality.index // (n_bearings // 30) + 1  # 30 –¥–Ω–µ–π

print(f"\\n–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤: {n_bearings:,}")
print(f"–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {df_quality['production_time'].min()} - {df_quality['production_time'].max()}")
print("\\n–ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
print(df_quality.head())

print("\\n–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(df_quality.describe())</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 2: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π</h4>
        <pre><code># –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
def analyze_distribution(data, parameter_name, specs):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    print(f"\\n–ê–ù–ê–õ–ò–ó –ü–ê–†–ê–ú–ï–¢–†–ê: {parameter_name.upper()}")
    print("=" * 50)
    
    # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    mean_val = np.mean(data)
    median_val = np.median(data)
    std_val = np.std(data)
    cv = (std_val / mean_val) * 100 if mean_val != 0 else 0
    
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {mean_val:.6f}")
    print(f"–ú–µ–¥–∏–∞–Ω–∞: {median_val:.6f}")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_val:.6f}")
    print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.2f}%")
    print(f"–†–∞–∑–º–∞—Ö: {np.max(data) - np.min(data):.6f}")
    print(f"–ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {stats.skew(data):.3f}")
    print(f"–≠–∫—Å—Ü–µ—Å—Å: {stats.kurtosis(data):.3f}")
    
    # –¢–µ—Å—Ç—ã –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
    print("\\n–¢–µ—Å—Ç—ã –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å:")
    
    # –¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞ (–¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–æ 5000)
    if len(data) <= 5000:
        shapiro_stat, shapiro_p = shapiro(data[:5000])
        print(f"–®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞={shapiro_stat:.4f}, p-value={shapiro_p:.6f}")
    
    # –¢–µ—Å—Ç –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞-–°–º–∏—Ä–Ω–æ–≤–∞
    ks_stat, ks_p = kstest(data, 'norm', args=(mean_val, std_val))
    print(f"–ö–æ–ª–º–æ–≥–æ—Ä–æ–≤-–°–º–∏—Ä–Ω–æ–≤: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞={ks_stat:.4f}, p-value={ks_p:.6f}")
    
    # –¢–µ—Å—Ç –ê–Ω–¥–µ—Ä—Å–æ–Ω–∞-–î–∞—Ä–ª–∏–Ω–≥–∞
    anderson_result = anderson(data, dist='norm')
    print(f"–ê–Ω–¥–µ—Ä—Å–æ–Ω-–î–∞—Ä–ª–∏–Ω–≥: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞={anderson_result.statistic:.4f}")
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {anderson_result.critical_values}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    print("\\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:")
    
    if 'nominal' in specs and 'tolerance' in specs:
        nominal = specs['nominal']
        tolerance = specs['tolerance']
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –¥–æ–ø—É—Å–∫–µ
        in_tolerance = np.abs(data - nominal) <= tolerance
        tolerance_rate = np.mean(in_tolerance) * 100
        
        print(f"–ù–æ–º–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {nominal}")
        print(f"–î–æ–ø—É—Å–∫: ¬±{tolerance}")
        print(f"–ü—Ä–æ–¥—É–∫—Ü–∏—è –≤ –¥–æ–ø—É—Å–∫–µ: {tolerance_rate:.2f}%")
        
        # –ò–Ω–¥–µ–∫—Å—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        USL = nominal + tolerance
        LSL = nominal - tolerance
        
        Cp = (USL - LSL) / (6 * std_val)
        Cpk = min((USL - mean_val)/(3*std_val), (mean_val - LSL)/(3*std_val))
        
        print(f"Cp (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å): {Cp:.3f}")
        print(f"Cpk (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å): {Cpk:.3f}")
        
        if Cpk >= 1.33:
            print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–ø–æ—Å–æ–±–µ–Ω")
        elif Cpk >= 1.0:
            print("‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å —á–∞—Å—Ç–∏—á–Ω–æ —Å–ø–æ—Å–æ–±–µ–Ω")
        else:
            print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ—Å–ø–æ—Å–æ–±–µ–Ω")
    
    elif 'max' in specs:
        max_limit = specs['max']
        within_limit = np.mean(data <= max_limit) * 100
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {max_limit}")
        print(f"–ü—Ä–æ–¥—É–∫—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö: {within_limit:.2f}%")
    
    elif 'min' in specs and 'max' in specs:
        min_limit = specs['min']
        max_limit = specs['max']
        within_limits = np.mean((data >= min_limit) & (data <= max_limit)) * 100
        print(f"–î–∏–∞–ø–∞–∑–æ–Ω: {min_limit} - {max_limit}")
        print(f"–ü—Ä–æ–¥—É–∫—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {within_limits:.2f}%")
    
    return {
        'mean': mean_val,
        'std': std_val,
        'cv': cv,
        'skewness': stats.skew(data),
        'kurtosis': stats.kurtosis(data),
        'shapiro_p': shapiro_p if len(data) <= 5000 else None,
        'ks_p': ks_p
    }

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
analysis_results = {}
for param in ['inner_diameter', 'outer_diameter', 'width', 'roundness_deviation', 'surface_roughness', 'hardness']:
    analysis_results[param] = analyze_distribution(
        df_quality[param].values, 
        param, 
        bearing_specs[param]
    )</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã</h4>
        <pre><code># –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
fig, axes = plt.subplots(3, 4, figsize=(20, 15))
fig.suptitle('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ 6205', fontsize=16)

parameters = ['inner_diameter', 'outer_diameter', 'width', 'roundness_deviation', 'surface_roughness', 'hardness']
param_names = ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä', '–ù–∞—Ä—É–∂–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä', '–®–∏—Ä–∏–Ω–∞', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫—Ä—É–≥–ª–æ—Å—Ç–∏', '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å', '–¢–≤–µ—Ä–¥–æ—Å—Ç—å']

# –ì—Ä–∞—Ñ–∏–∫ 1: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
for i, (param, name) in enumerate(zip(parameters[:3], param_names[:3])):
    ax = axes[0, i]
    data = df_quality[param]
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
    ax.hist(data, bins=50, density=True, alpha=0.7, color='skyblue', edgecolor='black')
    
    # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    x = np.linspace(data.min(), data.max(), 100)
    normal_curve = stats.norm.pdf(x, data.mean(), data.std())
    ax.plot(x, normal_curve, 'r-', linewidth=2, label='–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–ø—É—Å–∫–æ–≤
    if 'nominal' in bearing_specs[param]:
        nominal = bearing_specs[param]['nominal']
        tolerance = bearing_specs[param]['tolerance']
        ax.axvline(nominal, color='green', linestyle='-', linewidth=2, label='–ù–æ–º–∏–Ω–∞–ª')
        ax.axvline(nominal + tolerance, color='red', linestyle='--', label='–î–æ–ø—É—Å–∫')
        ax.axvline(nominal - tolerance, color='red', linestyle='--')
    
    ax.set_title(f'{name}')
    ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    ax.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
    ax.legend()
    ax.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 2: Q-Q plots –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
for i, (param, name) in enumerate(zip(parameters[:3], param_names[:3])):
    ax = axes[1, i]
    stats.probplot(df_quality[param], dist="norm", plot=ax)
    ax.set_title(f'Q-Q Plot: {name}')
    ax.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 3: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞
for i, (param, name) in enumerate(zip(parameters[:3], param_names[:3])):
    ax = axes[2, i]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã –ø–æ 25 –∏–∑–º–µ—Ä–µ–Ω–∏–π
    subgroup_size = 25
    n_subgroups = len(df_quality) // subgroup_size
    
    subgroup_means = []
    subgroup_ranges = []
    
    for j in range(n_subgroups):
        start_idx = j * subgroup_size
        end_idx = start_idx + subgroup_size
        subgroup_data = df_quality[param].iloc[start_idx:end_idx]
        
        subgroup_means.append(subgroup_data.mean())
        subgroup_ranges.append(subgroup_data.max() - subgroup_data.min())
    
    # X-bar –∫–∞—Ä—Ç–∞ (–∫–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö)
    overall_mean = np.mean(subgroup_means)
    mean_range = np.mean(subgroup_ranges)
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã —Ä–∞–∑–º–µ—Ä–æ–º 25 (–∏–∑ —Ç–∞–±–ª–∏—Ü SPC)
    A2 = 0.153  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü —Å—Ä–µ–¥–Ω–∏—Ö
    
    UCL_xbar = overall_mean + A2 * mean_range
    LCL_xbar = overall_mean - A2 * mean_range
    
    ax.plot(range(len(subgroup_means)), subgroup_means, 'bo-', markersize=4)
    ax.axhline(y=overall_mean, color='green', linestyle='-', linewidth=2, label='CL')
    ax.axhline(y=UCL_xbar, color='red', linestyle='--', linewidth=2, label='UCL')
    ax.axhline(y=LCL_xbar, color='red', linestyle='--', linewidth=2, label='LCL')
    
    # –í—ã–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ –≤–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
    out_of_control = [(i, val) for i, val in enumerate(subgroup_means) 
                     if val > UCL_xbar or val < LCL_xbar]
    if out_of_control:
        out_indices, out_values = zip(*out_of_control)
        ax.scatter(out_indices, out_values, color='red', s=50, marker='x', zorder=5)
    
    ax.set_title(f'–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: {name}')
    ax.set_xlabel('–ù–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã')
    ax.set_ylabel('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    ax.legend()
    ax.grid(True, alpha=0.3)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
for i, (param, name) in enumerate(zip(parameters[3:], param_names[3:])):
    ax = axes[i//2, 3]
    data = df_quality[param]
    
    if param == 'hardness':
        # –î–ª—è —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏ - –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –±—Ä–∞–∫–∞
        ax.hist(data, bins=50, alpha=0.7, color='lightcoral', edgecolor='black')
        ax.axvline(bearing_specs[param]['min'], color='green', linestyle='--', linewidth=2, label='–ú–∏–Ω. —Ç–≤–µ—Ä–¥–æ—Å—Ç—å')
        ax.axvline(bearing_specs[param]['max'], color='green', linestyle='--', linewidth=2, label='–ú–∞–∫—Å. —Ç–≤–µ—Ä–¥–æ—Å—Ç—å')
        
        # –í—ã–¥–µ–ª—è–µ–º –±—Ä–∞–∫
        defective = data[(data < bearing_specs[param]['min']) | (data > bearing_specs[param]['max'])]
        if len(defective) > 0:
            ax.hist(defective, bins=20, alpha=0.8, color='red', edgecolor='black', label=f'–ë—Ä–∞–∫ ({len(defective)} —à—Ç.)')
    
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –æ–±—ã—á–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        ax.hist(data, bins=50, alpha=0.7, color='lightgreen', edgecolor='black')
        if 'max' in bearing_specs[param]:
            ax.axvline(bearing_specs[param]['max'], color='red', linestyle='--', linewidth=2, label='–ú–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ')
    
    ax.set_title(f'{name}')
    ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax.legend()
    ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
print("\\n–ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó")
print("=" * 30)

correlation_matrix = df_quality[parameters].corr()
print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
print(correlation_matrix.round(3))

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, 
            annot=True, 
            cmap='RdBu_r', 
            center=0,
            fmt='.3f',
            xticklabels=param_names,
            yticklabels=param_names)
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞')
plt.tight_layout()
plt.show()

# –í—ã—è–≤–ª—è–µ–º –∑–Ω–∞—á–∏–º—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
print("\\n–ó–Ω–∞—á–∏–º—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (|r| > 0.3):")
for i in range(len(parameters)):
    for j in range(i+1, len(parameters)):
        corr_val = correlation_matrix.iloc[i, j]
        if abs(corr_val) > 0.3:
            print(f"{param_names[i]} - {param_names[j]}: r = {corr_val:.3f}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            r, p_value = stats.pearsonr(df_quality[parameters[i]], df_quality[parameters[j]])
            if p_value < 0.05:
                print(f"  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–∞ (p = {p_value:.6f})")
            else:
                print(f"  ‚ùå –ù–µ –∑–Ω–∞—á–∏–º–∞ (p = {p_value:.6f})")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 4: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤</h4>
        <pre><code># –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞
print("\\n–í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–ê")
print("=" * 50)

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
daily_stats = df_quality.groupby('day').agg({
    'inner_diameter': ['mean', 'std'],
    'outer_diameter': ['mean', 'std'],
    'width': ['mean', 'std'],
    'hardness': ['mean', 'std']
}).round(6)

# –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
def analyze_trend(data, parameter_name):
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥—É"""
    days = np.arange(1, len(data) + 1)
    
    # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    slope, intercept, r_value, p_value, std_err = stats.linregress(days, data)
    
    print(f"\\n{parameter_name}:")
    print(f"  –ù–∞–∫–ª–æ–Ω —Ç—Ä–µ–Ω–¥–∞: {slope:.8f} –µ–¥–∏–Ω–∏—Ü/–¥–µ–Ω—å")
    print(f"  R¬≤: {r_value**2:.4f}")
    print(f"  p-value: {p_value:.6f}")
    
    if p_value < 0.05:
        if slope > 0:
            print(f"  üìà –ó–Ω–∞—á–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π —Ç—Ä–µ–Ω–¥")
        else:
            print(f"  üìâ –ó–Ω–∞—á–∏–º—ã–π —É–±—ã–≤–∞—é—â–∏–π —Ç—Ä–µ–Ω–¥")
    else:
        print(f"  ‚û°Ô∏è  –¢—Ä–µ–Ω–¥ –Ω–µ –∑–Ω–∞—á–∏–º")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
    future_days = np.arange(len(data) + 1, len(data) + 8)
    forecast = slope * future_days + intercept
    
    return {
        'slope': slope,
        'r_squared': r_value**2,
        'p_value': p_value,
        'forecast': forecast
    }

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
trend_results = {}
for param in ['inner_diameter', 'outer_diameter', 'width', 'hardness']:
    daily_means = daily_stats[(param, 'mean')].values
    trend_results[param] = analyze_trend(daily_means, f"–°—Ä–µ–¥–Ω–µ–µ {param}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
fig, axes = plt.subplots(2, 2, figsize=(15, 10))
fig.suptitle('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞', fontsize=16)

params_to_plot = ['inner_diameter', 'outer_diameter', 'width', 'hardness']
param_titles = ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä', '–ù–∞—Ä—É–∂–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä', '–®–∏—Ä–∏–Ω–∞', '–¢–≤–µ—Ä–¥–æ—Å—Ç—å']

for i, (param, title) in enumerate(zip(params_to_plot, param_titles)):
    ax = axes[i//2, i%2]
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    days = np.arange(1, 31)
    daily_means = daily_stats[(param, 'mean')].values
    daily_stds = daily_stats[(param, 'std')].values
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    ax.errorbar(days, daily_means, yerr=daily_stds, 
               fmt='o-', capsize=3, capthick=1, markersize=4)
    
    # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    trend_line = trend_results[param]['slope'] * days + (daily_means[0] - trend_results[param]['slope'])
    ax.plot(days, trend_line, 'r--', linewidth=2, alpha=0.7, label='–¢—Ä–µ–Ω–¥')
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    future_days = np.arange(31, 38)
    forecast = trend_results[param]['forecast']
    ax.plot(future_days, forecast, 'g--', linewidth=2, alpha=0.7, label='–ü—Ä–æ–≥–Ω–æ–∑')
    
    # –ù–æ–º–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if 'nominal' in bearing_specs[param]:
        nominal = bearing_specs[param]['nominal']
        ax.axhline(y=nominal, color='blue', linestyle=':', alpha=0.7, label='–ù–æ–º–∏–Ω–∞–ª')
    
    ax.set_title(f'{title}\\nR¬≤ = {trend_results[param]["r_squared"]:.3f}')
    ax.set_xlabel('–î–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞')
    ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    ax.legend()
    ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–º–µ–Ω–∞–º
print("\\n–ê–ù–ê–õ–ò–ó –ü–û –°–ú–ï–ù–ê–ú")
print("=" * 20)

shift_analysis = df_quality.groupby('shift').agg({
    'inner_diameter': ['mean', 'std', 'count'],
    'outer_diameter': ['mean', 'std', 'count'],
    'hardness': ['mean', 'std', 'count']
}).round(6)

print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º:")
print(shift_analysis)

# ANOVA –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏
for param in ['inner_diameter', 'outer_diameter', 'hardness']:
    shift1_data = df_quality[df_quality['shift'] == 1][param]
    shift2_data = df_quality[df_quality['shift'] == 2][param]
    shift3_data = df_quality[df_quality['shift'] == 3][param]
    
    f_stat, p_value = stats.f_oneway(shift1_data, shift2_data, shift3_data)
    
    print(f"\\nANOVA –¥–ª—è {param}:")
    print(f"  F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {f_stat:.4f}")
    print(f"  p-value: {p_value:.6f}")
    
    if p_value < 0.05:
        print(f"  ‚úÖ –ï—Å—Ç—å –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏")
        
        # Post-hoc –∞–Ω–∞–ª–∏–∑ (–ø–æ–ø–∞—Ä–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        from scipy.stats import ttest_ind
        
        t12, p12 = ttest_ind(shift1_data, shift2_data)
        t13, p13 = ttest_ind(shift1_data, shift3_data)
        t23, p23 = ttest_ind(shift2_data, shift3_data)
        
        print(f"  –ü–æ–ø–∞—Ä–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –ë–æ–Ω—Ñ–µ—Ä—Ä–æ–Ω–∏ Œ±=0.017):")
        print(f"    –°–º–µ–Ω–∞ 1 vs 2: p = {p12:.6f} {'‚úÖ' if p12 < 0.017 else '‚ùå'}")
        print(f"    –°–º–µ–Ω–∞ 1 vs 3: p = {p13:.6f} {'‚úÖ' if p13 < 0.017 else '‚ùå'}")
        print(f"    –°–º–µ–Ω–∞ 2 vs 3: p = {p23:.6f} {'‚úÖ' if p23 < 0.017 else '‚ùå'}")
    else:
        print(f"  ‚ùå –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h4>
        <pre><code># –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
print("\\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø AI-–ê–†–•–ò–¢–ï–ö–¢–û–†–ê")
print("=" * 40)

def generate_ai_recommendations(analysis_results, trend_results, correlation_matrix):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º"""
    
    recommendations = []
    
    # 1. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    print("1. –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• –î–õ–Ø ML:")
    
    normal_params = []
    non_normal_params = []
    
    for param, results in analysis_results.items():
        if results['shapiro_p'] and results['shapiro_p'] > 0.05:
            normal_params.append(param)
        else:
            non_normal_params.append(param)
    
    if normal_params:
        print(f"   ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {normal_params}")
        print(f"      ‚Üí –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏, PCA, LDA")
        recommendations.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–Ω–µ–π–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    if non_normal_params:
        print(f"   ‚ö†Ô∏è  –ù–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ: {non_normal_params}")
        print(f"      ‚Üí –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã")
        recommendations.append("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tree-based –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
    
    # 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    print("\\n2. –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ –ü–†–û–¶–ï–°–°–ê:")
    
    unstable_processes = []
    for param, results in trend_results.items():
        if results['p_value'] < 0.05:
            unstable_processes.append(param)
    
    if unstable_processes:
        print(f"   ‚ö†Ô∏è  –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {unstable_processes}")
        print(f"      ‚Üí –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –º–æ–¥–µ–ª—è—Ö")
        recommendations.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
    else:
        print(f"   ‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã")
        recommendations.append("–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
    
    # 3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\\n3. –í–ó–ê–ò–ú–û–°–í–Ø–ó–ò –ü–ê–†–ê–ú–ï–¢–†–û–í:")
    
    high_correlations = []
    corr_matrix = correlation_matrix.abs()
    
    for i in range(len(corr_matrix.columns)):
        for j in range(i+1, len(corr_matrix.columns)):
            if corr_matrix.iloc[i, j] > 0.7:
                high_correlations.append((corr_matrix.columns[i], corr_matrix.columns[j], corr_matrix.iloc[i, j]))
    
    if high_correlations:
        print(f"   ‚ö†Ô∏è  –í—ã—Å–æ–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã:")
        for param1, param2, corr_val in high_correlations:
            print(f"      {param1} - {param2}: r = {corr_val:.3f}")
        print(f"      ‚Üí –†–∏—Å–∫ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è PCA –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è")
        recommendations.append("–ü—Ä–∏–º–µ–Ω–∏—Ç—å PCA –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ (Ridge, Lasso)")
    else:
        print(f"   ‚úÖ –ú—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    
    # 4. –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
    print("\\n4. –†–ê–ó–ú–ï–† –í–´–ë–û–†–ö–ò:")
    sample_size = len(df_quality)
    print(f"   –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: {sample_size:,} –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    if sample_size > 10000:
        print(f"   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        recommendations.append("–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏, –∞–Ω—Å–∞–º–±–ª–∏)")
    elif sample_size > 1000:
        print(f"   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö ML –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
        recommendations.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Random Forest, SVM, Gradient Boosting")
    else:
        print(f"   ‚ö†Ô∏è  –ú–∞–ª–∞—è –≤—ã–±–æ—Ä–∫–∞, —Ä–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è")
        recommendations.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ —Å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
    
    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–∏—Å—Ç–µ–º—ã
    print("\\n5. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê AI-–°–ò–°–¢–ï–ú–´:")
    
    print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    print("   üìä –ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
    print("      - –î–µ—Ç–µ–∫—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
    print("      - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è/—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è")
    print("      - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    
    print("   ü§ñ –ú–æ–¥—É–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
    if len(normal_params) > len(non_normal_params):
        print("      - –õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ)")
        print("      - Tree-based –º–æ–¥–µ–ª–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)")
    else:
        print("      - Tree-based –º–æ–¥–µ–ª–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ)")
        print("      - –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)")
    
    print("   üìà –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    print("      - –ö–æ–Ω—Ç—Ä–æ–ª—å –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("      - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    print("      - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
    
    print("   üîÑ –ú–æ–¥—É–ª—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:")
    print("      - –°–±–æ—Ä –º–µ—Ç–æ–∫ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    print("      - –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    print("      - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    
    return recommendations

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
recommendations = generate_ai_recommendations(analysis_results, trend_results, correlation_matrix)

print("\\n" + "="*60)
print("–ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –í–ù–ï–î–†–ï–ù–ò–Ø AI:")
print("="*60)

for i, rec in enumerate(recommendations, 1):
    print(f"{i}. {rec}")

# –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
print("\\n" + "="*40)
print("–û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –î–ê–ù–ù–´–• –î–õ–Ø ML:")
print("="*40)

readiness_score = 0
max_score = 5

# –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
if len(df_quality) > 1000:
    readiness_score += 1
    print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ (+1)")
else:
    print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ (0)")

# –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤)
if df_quality.isnull().sum().sum() == 0:
    readiness_score += 1
    print("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (+1)")
else:
    print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (0)")

# –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞
stable_processes = sum(1 for results in trend_results.values() if results['p_value'] >= 0.05)
if stable_processes >= len(trend_results) * 0.7:
    readiness_score += 1
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞–±–∏–ª–µ–Ω (+1)")
else:
    print("‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω (0)")

# –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏
high_corr_count = sum(1 for i in range(len(correlation_matrix.columns)) 
                     for j in range(i+1, len(correlation_matrix.columns))
                     if abs(correlation_matrix.iloc[i, j]) > 0.9)
if high_corr_count == 0:
    readiness_score += 1
    print("‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏ (+1)")
else:
    print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (0)")

# –ö—Ä–∏—Ç–µ—Ä–∏–π 5: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
conformance_rates = []
for param in ['inner_diameter', 'outer_diameter', 'width']:
    if 'nominal' in bearing_specs[param]:
        nominal = bearing_specs[param]['nominal']
        tolerance = bearing_specs[param]['tolerance']
        in_tolerance = np.abs(df_quality[param] - nominal) <= tolerance
        conformance_rates.append(np.mean(in_tolerance))

avg_conformance = np.mean(conformance_rates) if conformance_rates else 0
if avg_conformance > 0.95:
    readiness_score += 1
    print(f"‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ ({avg_conformance:.1%}) (+1)")
else:
    print(f"‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è ({avg_conformance:.1%}) (0)")

print(f"\\n–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò: {readiness_score}/{max_score}")

if readiness_score >= 4:
    print("üöÄ –í–´–°–û–ö–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨ - –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ AI-—Å–∏—Å—Ç–µ–º—ã")
elif readiness_score >= 3:
    print("‚ö†Ô∏è  –°–†–ï–î–ù–Ø–Ø –ì–û–¢–û–í–ù–û–°–¢–¨ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
else:
    print("‚ùå –ù–ò–ó–ö–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞")</code></pre>
      </div>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      <p>–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã –æ—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞:</p>
      
      <h4>üéØ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML:</h4>
      <ul>
        <li><strong>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π</strong> - –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</li>
        <li><strong>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</strong> - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</li>
        <li><strong>–í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π</strong> - —Ä–∏—Å–∫–∏ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏</li>
        <li><strong>–û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏</strong> - —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π:</h4>
      <ul>
        <li><strong>–í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</strong> –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–π—Å—Ç–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏</strong> –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏</strong> –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞</strong> –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</li>
      </ul>
      
      <h4>üè≠ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</h4>
      <ul>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</strong> –ø–æ –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º</li>
        <li><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</strong> (SPC)</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏</strong> (Cp, Cpk)</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã</strong> –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</li>
      </ul>
      
      <p>–≠—Ç–∏ –Ω–∞–≤—ã–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.</p>
    `


  },

  // –£—Ä–æ–∫ 5 - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
  5: {
    title: "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ",
    duration: "160 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —Ä–∞–±–æ—Ç–µ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      <p>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</strong> - –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</strong> - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø–æ –ì–û–°–¢</li>
        <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏</strong> - –æ—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</strong> - —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
        <li><strong>–°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</strong> - –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö AI-—Å–∏—Å—Ç–µ–º</h3>
      
      <h4>–ê–∫—Å–∏–æ–º—ã –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ</h4>
      <p>–†–æ—Å—Å–∏–π—Å–∫–∞—è —à–∫–æ–ª–∞ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –ê.–ù. –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤—ã–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:</p>
      
      <p><strong>–ê–∫—Å–∏–æ–º–∞ 1:</strong> P(A) ‚â• 0 –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–±—ã—Ç–∏—è A</p>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞</p>
      
      <p><strong>–ê–∫—Å–∏–æ–º–∞ 2:</strong> P(Œ©) = 1, –≥–¥–µ Œ© - –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤</p>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Å—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–≤–Ω–∞ 1</p>
      
      <p><strong>–ê–∫—Å–∏–æ–º–∞ 3:</strong> –î–ª—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π A‚ÇÅ, A‚ÇÇ, ... :</p>
      <pre><code>P(A‚ÇÅ ‚à™ A‚ÇÇ ‚à™ ...) = P(A‚ÇÅ) + P(A‚ÇÇ) + ...</code></pre>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª—é–±–æ–≥–æ –∏–∑ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Ç–∏–ø–æ–≤ –æ—Ç–∫–∞–∑–æ–≤</p>
      
      <h4>–£—Å–ª–æ–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Ç–µ–æ—Ä–µ–º–∞ –ë–∞–π–µ—Å–∞</h4>
      <p><strong>–£—Å–ª–æ–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:</strong></p>
      <pre><code>P(A|B) = P(A ‚à© B) / P(B)</code></pre>
      
      <p><strong>–¢–µ–æ—Ä–µ–º–∞ –ë–∞–π–µ—Å–∞:</strong></p>
      <pre><code>P(H|E) = P(E|H) √ó P(H) / P(E)</code></pre>
      
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</p>
      <ul>
        <li>H - –≥–∏–ø–æ—Ç–µ–∑–∞ –æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏</li>
        <li>E - –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ —Å–∏–º–ø—Ç–æ–º—ã (–ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤)</li>
        <li>P(H|E) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö</li>
        <li>P(E|H) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏</li>
        <li>P(H) - –∞–ø—Ä–∏–æ—Ä–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h3>–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</p>
      <pre><code>P(X = k) = C(n,k) √ó p^k √ó (1-p)^(n-k)</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –ì–û–°–¢ 18242-72:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –≤ –ø–∞—Ä—Ç–∏–∏</li>
        <li><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–∞–∑–∞–≤—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ n</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –ù–∞ –∑–∞–≤–æ–¥–µ "–£—Ä–∞–ª–º–∞—à" –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ p = 0.02. –í –ø–∞—Ä—Ç–∏–∏ –∏–∑ 100 –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–π—Ç–∏ —Ä–æ–≤–Ω–æ 3 –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö:</p>
      <pre><code>P(X = 3) = C(100,3) √ó 0.02¬≥ √ó 0.98‚Åπ‚Å∑ ‚âà 0.182</code></pre>
      
      <h4>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü—É–∞—Å—Å–æ–Ω–∞</h4>
      <p>–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</p>
      <pre><code>P(X = k) = (Œª^k √ó e^(-Œª)) / k!</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–ü–æ—Ç–æ–∫ –æ—Ç–∫–∞–∑–æ–≤:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Å–º–µ–Ω—É</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤–∞—Ä–∏–∏:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥</li>
        <li><strong>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –ù–∞ –ù–ü–ó "–õ—É–∫–æ–π–ª-–ù–∏–∂–µ–≥–æ—Ä–æ–¥–Ω–µ—Ñ—Ç–µ–æ—Ä–≥—Å–∏–Ω—Ç–µ–∑" —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ Œª = 2.5 –∑–∞ —Å–º–µ–Ω—É. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–≤–Ω–æ 4 —Å–∏–≥–Ω–∞–ª–∞:</p>
      <pre><code>P(X = 4) = (2.5‚Å¥ √ó e^(-2.5)) / 4! ‚âà 0.134</code></pre>
      
      <h4>–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—Ö–∞ –Ω–∞ k-–π –ø–æ–ø—ã—Ç–∫–µ:</p>
      <pre><code>P(X = k) = (1-p)^(k-1) √ó p</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∫–∞–∑–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞</p>
      
      <h3>–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h3>
      
      <h4>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</p>
      <pre><code>f(t) = Œªe^(-Œªt), t ‚â• 0</code></pre>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>R(t) = e^(-Œªt)</code></pre>
      
      <p><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤:</strong> Œª = const (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä–µ–Ω–∏—è)</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</strong> –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–æ –æ—Ç–∫–∞–∑–∞</li>
        <li><strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ:</strong> –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–±–æ—è–º–∏</li>
        <li><strong>–•–∏–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</strong> –≤—Ä–µ–º—è –º–µ–∂–¥—É –∞–≤–∞—Ä–∏–π–Ω—ã–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¢–í–í-200-2–ê —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç Œª = 0.001 —á‚Åª¬π. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1000 —á–∞—Å–æ–≤:</p>
      <pre><code>R(1000) = e^(-0.001√ó1000) = e^(-1) ‚âà 0.368</code></pre>
      
      <h4>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–µ–π–±—É–ª–ª–∞</h4>
      <p>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</p>
      <pre><code>f(t) = (Œ≤/Œ∑) √ó (t/Œ∑)^(Œ≤-1) √ó e^(-(t/Œ∑)^Œ≤)</code></pre>
      
      <p>–≥–¥–µ Œ≤ - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–æ—Ä–º—ã, Œ∑ - –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å—à—Ç–∞–±–∞</p>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>R(t) = e^(-(t/Œ∑)^Œ≤)</code></pre>
      
      <p><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤:</strong></p>
      <pre><code>Œª(t) = (Œ≤/Œ∑) √ó (t/Œ∑)^(Œ≤-1)</code></pre>
      
      <p><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Œ≤:</strong></p>
      <ul>
        <li>Œ≤ < 1: —É–±—ã–≤–∞—é—â–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤ (–ø–µ—Ä–∏–æ–¥ –ø—Ä–∏—Ä–∞–±–æ—Ç–∫–∏)</li>
        <li>Œ≤ = 1: –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)</li>
        <li>Œ≤ > 1: –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (–ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ä–µ–Ω–∏—è)</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ –ì–û–°–¢ 27.002-2015:</strong></p>
      <ul>
        <li><strong>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã:</strong> –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏, —Ä–µ–¥—É–∫—Ç–æ—Ä—ã, –¥–≤–∏–≥–∞—Ç–µ–ª–∏</li>
        <li><strong>–£—Å—Ç–∞–ª–æ—Å—Ç–Ω—ã–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:</strong> –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</li>
        <li><strong>–ö–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</strong> —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥—ã, —Ä–µ–∑–µ—Ä–≤—É–∞—Ä—ã</li>
      </ul>
      
      <h4>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö</h4>
      <p>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</p>
      <pre><code>f(x) = (1/(œÉ‚àö(2œÄ))) √ó e^(-¬Ω((x-Œº)/œÉ)¬≤)</code></pre>
      
      <p><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è:</strong></p>
      <pre><code>Z = (X - Œº) / œÉ ~ N(0,1)</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –ì–û–°–¢ –† –ò–°–û 5725:</strong></p>
      <ul>
        <li><strong>–†–∞–∑–º–µ—Ä—ã –¥–µ—Ç–∞–ª–µ–π:</strong> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ–º–∏–Ω–∞–ª–∞</li>
        <li><strong>–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤:</strong> —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Å–µ–π</li>
        <li><strong>–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:</strong> –ø—Ä–æ—á–Ω–æ—Å—Ç—å, —Ç–≤–µ—Ä–¥–æ—Å—Ç—å</li>
        <li><strong>–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏:</strong> —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Å–ª—É—á–∞–π–Ω—ã–µ</li>
      </ul>
      
      <h4>–õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–ï—Å–ª–∏ ln(X) ~ N(Œº, œÉ¬≤), —Ç–æ X –∏–º–µ–µ—Ç –ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</p>
      <pre><code>f(x) = (1/(xœÉ‚àö(2œÄ))) √ó e^(-¬Ω((ln(x)-Œº)/œÉ)¬≤)</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–í—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞:</strong> –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</li>
        <li><strong>–†–∞–∑–º–µ—Ä—ã —á–∞—Å—Ç–∏—Ü:</strong> –≤ –ø–æ—Ä–æ—à–∫–æ–≤–æ–π –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏</li>
        <li><strong>–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π:</strong> –≤ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ</li>
      </ul>
      
      <h3>–ú–∞—Ä–∫–æ–≤—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö</h3>
      
      <h4>–¶–µ–ø–∏ –ú–∞—Ä–∫–æ–≤–∞ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h4>
      <p><strong>–ú–∞—Ä–∫–æ–≤—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ:</strong></p>
      <pre><code>P(X_{n+1} = j | X_n = i, X_{n-1}, ..., X_0) = P(X_{n+1} = j | X_n = i)</code></pre>
      
      <p><strong>–ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:</strong></p>
      <pre><code>P = [p_{ij}], –≥–¥–µ p_{ij} = P(X_{n+1} = j | X_n = i)</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç—É—Ä–±–∏–Ω—ã –Ω–∞ –¢–≠–¶</p>
      <ul>
        <li>–°–æ—Å—Ç–æ—è–Ω–∏–µ 1: –ò—Å–ø—Ä–∞–≤–Ω–∞</li>
        <li>–°–æ—Å—Ç–æ—è–Ω–∏–µ 2: –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏</li>
        <li>–°–æ—Å—Ç–æ—è–Ω–∏–µ 3: –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–∞</li>
      </ul>
      
      <p>–ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ —Å—É—Ç–∫–∏:</p>
      <pre><code>P = [0.95  0.04  0.01]
    [0.10  0.80  0.10]
    [0.00  0.30  0.70]</code></pre>
      
      <h4>–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
      <p>–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π:</p>
      <pre><code>œÄ = œÄP, Œ£œÄ·µ¢ = 1</code></pre>
      
      <p>–î–ª—è —Ç—É—Ä–±–∏–Ω—ã: œÄ = [0.625, 0.250, 0.125]</p>
      <p>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ —Ç—É—Ä–±–∏–Ω–∞ 62.5% –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø—Ä–∞–≤–Ω–∞, 25% —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏, 12.5% –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞.</p>
      
      <h4>–í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h4>
      <p>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞ –∏–∑ –∏—Å–ø—Ä–∞–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:</p>
      <pre><code>T‚ÇÅ‚ÇÉ = (1 - p‚ÇÅ‚ÇÅ - p‚ÇÅ‚ÇÇp‚ÇÇ‚ÇÅ/(1-p‚ÇÇ‚ÇÇ))‚Åª¬π</code></pre>
      
      <h3>–ü—Ä–æ—Ü–µ—Å—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</h3>
      
      <h4>–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</h4>
      <p>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–º–µ–Ω—Ç–æ–≤ –æ—Ç–∫–∞–∑–æ–≤: 0 < T‚ÇÅ < T‚ÇÇ < ... < T‚Çô < ...</p>
      <p>–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –æ—Ç–∫–∞–∑–∞–º–∏: X·µ¢ = T·µ¢ - T·µ¢‚Çã‚ÇÅ (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)</p>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</strong></p>
      <pre><code>H(t) = E[N(t)] = Œ£ F^(n)(t)</code></pre>
      
      <p>–≥–¥–µ F^(n)(t) - n-–∫—Ä–∞—Ç–Ω–∞—è —Å–≤–µ—Ä—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è F(t)</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</p>
      
      <h4>–ê–ª—å—Ç–µ—Ä–Ω–∏—Ä—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</h4>
      <p>–°–∏—Å—Ç–µ–º–∞ —á–µ—Ä–µ–¥—É–µ—Ç –ø–µ—Ä–∏–æ–¥—ã —Ä–∞–±–æ—Ç—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</p>
      <ul>
        <li>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: X‚ÇÅ, X‚ÇÇ, ... ~ F(t)</li>
        <li>–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: Y‚ÇÅ, Y‚ÇÇ, ... ~ G(t)</li>
      </ul>
      
      <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>K_–≥ = E[X] / (E[X] + E[Y])</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ E[X] = 720 —á, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞ E[Y] = 8 —á</p>
      <pre><code>K_–≥ = 720 / (720 + 8) = 0.989</code></pre>
      
      <h3>–¢–µ–æ—Ä–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</h3>
      
      <h4>–°–∏—Å—Ç–µ–º–∞ M/M/1 (–ü—É–∞—Å—Å–æ–Ω–æ–≤—Å–∫–∏–π –ø–æ—Ç–æ–∫, —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, 1 –∫–∞–Ω–∞–ª)</h4>
      <p><strong>–£—Å–ª–æ–≤–∏–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏:</strong> œÅ = Œª/Œº < 1</p>
      
      <p><strong>–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>p_n = œÅ‚Åø(1-œÅ), n = 0, 1, 2, ...</code></pre>
      
      <p><strong>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:</strong></p>
      <ul>
        <li>–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: L = œÅ/(1-œÅ)</li>
        <li>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: W = 1/(Œº-Œª)</li>
        <li>–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏: L_q = œÅ¬≤/(1-œÅ)</li>
        <li>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: W_q = œÅ/(Œº-Œª)</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π, —Å–∏—Å—Ç–µ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫</p>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –£—á–∞—Å—Ç–æ–∫ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏</p>
      <ul>
        <li>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: Œª = 8 –¥–µ—Ç/—á</li>
        <li>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: Œº = 10 –¥–µ—Ç/—á</li>
        <li>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: œÅ = 8/10 = 0.8</li>
        <li>–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –¥–µ—Ç–∞–ª–µ–π –Ω–∞ —É—á–∞—Å—Ç–∫–µ: L = 0.8/(1-0.8) = 4 –¥–µ—Ç</li>
        <li>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª–∏: W = 1/(10-8) = 0.5 —á</li>
      </ul>
      
      <h4>–°–∏—Å—Ç–µ–º–∞ M/M/c (–º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)</h4>
      <p><strong>–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>p_n = {
  (œÅ‚Åø/n!) √ó p‚ÇÄ,           –µ—Å–ª–∏ n ‚â§ c
  (œÅ‚Åø/(c! √ó c^(n-c))) √ó p‚ÇÄ, –µ—Å–ª–∏ n > c
}</code></pre>
      
      <p>–≥–¥–µ p‚ÇÄ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–∑ —É—Å–ª–æ–≤–∏—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∏</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –ú–Ω–æ–≥–æ—Å—Ç–∞–Ω–æ—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏</p>
      
      <h3>–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
      
      <h4>–î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
      <p><strong>–û–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong></p>
      <pre><code>min c^T x + E[Q(x,Œæ)]
s.t. Ax = b, x ‚â• 0</code></pre>
      
      <p>–≥–¥–µ Q(x,Œæ) - —Ñ—É–Ω–∫—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞:</p>
      <pre><code>Q(x,Œæ) = min q^T y
         s.t. Wy = h - Tx, y ‚â• 0</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:</strong></p>
      <ul>
        <li>x - —Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ (–∑–∞–∫—É–ø–∫–∞ —Å—ã—Ä—å—è, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–µ–π)</li>
        <li>Œæ - —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–ø—Ä–æ—Å, —Ü–µ–Ω—ã, –æ—Ç–∫–∞–∑—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)</li>
        <li>y - —Ä–µ—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞ (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞)</li>
      </ul>
      
      <h4>–ú–µ—Ç–æ–¥ Sample Average Approximation (SAA)</h4>
      <p>–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–æ—á–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º:</p>
      <pre><code>E[Q(x,Œæ)] ‚âà (1/N) Œ£ Q(x,Œæ·µ¢)</code></pre>
      
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ {Œæ‚ÇÅ, Œæ‚ÇÇ, ..., Œæ‚Çô}</li>
        <li>–†–µ—à–µ–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å –≤—ã–±–æ—Ä–æ—á–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º</li>
        <li>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –≤—ã–±–æ—Ä–∫–µ</li>
      </ol>
      
      <h3>–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h3>
      
      <h4>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–π–µ—Å–æ–≤—Å–∫–æ–π —Å–µ—Ç–∏</h4>
      <p>–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Å–µ—Ç—å - —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ, –≥–¥–µ:</p>
      <ul>
        <li>–£–∑–ª—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã</li>
        <li>–†–µ–±—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏</li>
        <li>–ö–∞–∂–¥—ã–π —É–∑–µ–ª –∏–º–µ–µ—Ç —Ç–∞–±–ª–∏—Ü—É —É—Å–ª–æ–≤–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</li>
      </ul>
      
      <p><strong>–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong></p>
      <pre><code>P(X‚ÇÅ, X‚ÇÇ, ..., X‚Çô) = Œ† P(X·µ¢ | Parents(X·µ¢))</code></pre>
      
      <h4>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h4>
      <p><strong>–ü—Ä–∏–º–µ—Ä:</strong> –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è</p>
      
      <p><strong>–£–∑–ª—ã —Å–µ—Ç–∏:</strong></p>
      <ul>
        <li>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–Ω—ã/–∏–∑–Ω–æ—à–µ–Ω—ã)</li>
        <li>–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–º–æ—Ç–æ–∫ (–∏—Å–ø—Ä–∞–≤–Ω—ã/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã)</li>
        <li>–í–∏–±—Ä–∞—Ü–∏—è (–Ω–∏–∑–∫–∞—è/–≤—ã—Å–æ–∫–∞—è)</li>
        <li>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è/–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è)</li>
        <li>–¢–æ–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π/–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π)</li>
      </ul>
      
      <p><strong>–£—Å–ª–æ–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>P(–í–∏–±—Ä–∞—Ü–∏—è = –≤—ã—Å–æ–∫–∞—è | –ü–æ–¥—à–∏–ø–Ω–∏–∫–∏ = –∏–∑–Ω–æ—à–µ–Ω—ã) = 0.9
P(–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ = –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è | –û–±–º–æ—Ç–∫–∏ = –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã) = 0.85
P(–¢–æ–∫ = –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π | –û–±–º–æ—Ç–∫–∏ = –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã) = 0.8</code></pre>
      
      <h4>–ê–ª–≥–æ—Ä–∏—Ç–º—ã –≤—ã–≤–æ–¥–∞</h4>
      <p><strong>–¢–æ—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:</strong></p>
      <ul>
        <li>–ê–ª–≥–æ—Ä–∏—Ç–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</li>
        <li>–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π</li>
        <li>Junction tree algorithm</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:</strong></p>
      <ul>
        <li>–ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –ø–æ —Å—Ö–µ–º–µ –ú–∞—Ä–∫–æ–≤–∞ (MCMC)</li>
        <li>Importance sampling</li>
        <li>Variational inference</li>
      </ul>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–ê—Ç–æ–º–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ (–†–æ—Å–∞—Ç–æ–º)</h4>
      <p><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–í–ê–ë) –ø–æ –ù–ü-001-15:</strong></p>
      <ul>
        <li>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–∫–∞–∑–æ–≤</li>
        <li>–û—Ü–µ–Ω–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –∞–≤–∞—Ä–∏–π</li>
        <li>–ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–æ–≤</li>
        <li>–£—á–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞</li>
      </ul>
      
      <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li>–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–æ–Ω—ã < 10‚Åª‚Åµ –≥–æ–¥‚Åª¬π</li>
        <li>–ß–∞—Å—Ç–æ—Ç–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã–±—Ä–æ—Å–∞ < 10‚Åª‚Å∂ –≥–æ–¥‚Åª¬π</li>
      </ul>
      
      <h4>–ù–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–∞—è –æ—Ç—Ä–∞—Å–ª—å</h4>
      <p><strong>–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–æ –ì–û–°–¢ –† 51901.1-2002:</strong></p>
      <ul>
        <li>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π</li>
        <li>–û—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π</li>
        <li>–û—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π</li>
        <li>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ä–∏—Å–∫–∞</li>
      </ul>
      
      <p><strong>–ú–æ–¥–µ–ª–∏ –æ—Ç–∫–∞–∑–æ–≤ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤:</strong></p>
      <ul>
        <li>–ö–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–µ–π–±—É–ª–ª–∞)</li>
        <li>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü—É–∞—Å—Å–æ–Ω–∞)</li>
        <li>–£—Å—Ç–∞–ª–æ—Å—Ç–Ω—ã–µ —Ç—Ä–µ—â–∏–Ω—ã (–ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)</li>
      </ul>
      
      <h4>–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ</h4>
      <p><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</strong></p>
      <ul>
        <li>–ú–æ–¥–µ–ª–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¢–û</li>
        <li>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–º–µ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π</li>
      </ul>
      
      <h3>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI-—Å–∏—Å—Ç–µ–º–∞–º–∏</h3>
      
      <h4>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</h4>
      <p><strong>–ë–∞–π–µ—Å–æ–≤—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ ML:</strong></p>
      <pre><code>P(Œ∏|D) = P(D|Œ∏) √ó P(Œ∏) / P(D)</code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li>Œ∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏</li>
        <li>D - –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li>P(Œ∏|D) - –∞–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li>P(D|Œ∏) - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏—è</li>
        <li>P(Œ∏) - –∞–ø—Ä–∏–æ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</li>
      </ul>
      
      <h4>Uncertainty Quantification –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö AI</h4>
      <p><strong>–¢–∏–ø—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ê–ª–µ–∞—Ç–æ—Ä–Ω–∞—è:</strong> –ø—Ä–∏—Å—É—â–∞—è —Å–∏—Å—Ç–µ–º–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å</li>
        <li><strong>–≠–ø–∏—Å—Ç–µ–º–∏—á–µ—Å–∫–∞—è:</strong> –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <p><strong>–ú–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li>Bayesian Neural Networks</li>
        <li>Monte Carlo Dropout</li>
        <li>Ensemble methods</li>
        <li>Conformal prediction</li>
      </ul>
      
      <h4>–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</h4>
      <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>Uncertainty sampling:</strong> –≤—ã–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤</li>
        <li><strong>Query by committee:</strong> —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è –≤ –∞–Ω—Å–∞–º–±–ª–µ –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Expected model change:</strong> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li>–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º</li>
        <li>–û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–¥–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö</li>
      </ul>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º AI</h2>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 1: –ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h3>
      <p>–ö–∞–∫ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –≤—ã –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –°–æ–∑–¥–∞–¥–∏–º —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¢–í–í-200-2–ê –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –¢–≠–¶.</p>
      
      <div class="code-block">
        <h4>–®–∞–≥ 1: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–π–µ—Å–æ–≤—Å–∫–æ–π —Å–µ—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h4>
        <pre><code>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import norm, weibull_min, expon, poisson
import networkx as nx
from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination
import warnings
warnings.filterwarnings('ignore')

# –°–æ–∑–¥–∞–µ–º –±–∞–π–µ—Å–æ–≤—Å–∫—É—é —Å–µ—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¢–í–í-200-2–ê
# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –ì–û–°–¢ 533-2000

print("–°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –¢–£–†–ë–û–ì–ï–ù–ï–†–ê–¢–û–†–ê –¢–í–í-200-2–ê")
print("=" * 55)
print("–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ì–û–°–¢ 533-2000):")
print("  –ú–æ—â–Ω–æ—Å—Ç—å: 200 –ú–í—Ç")
print("  –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: 20 –∫–í") 
print("  –ß–∞—Å—Ç–æ—Ç–∞ –≤—Ä–∞—â–µ–Ω–∏—è: 3000 –æ–±/–º–∏–Ω")
print("  –ö–ü–î: 98.8%")
print("  –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ: –≤–æ–¥–æ—Ä–æ–¥–Ω–æ–µ")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–π–µ—Å–æ–≤—Å–∫–æ–π —Å–µ—Ç–∏
# –£–∑–ª—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
network_structure = [
    ('–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏', '–í–∏–±—Ä–∞—Ü–∏—è'),
    ('–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤'),
    ('–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏'),
    ('–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞', '–¢–æ–∫_—É—Ç–µ—á–∫–∏'),
    ('–û–±–º–æ—Ç–∫–∞_—Ä–æ—Ç–æ—Ä–∞', '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏'),
    ('–°–∏—Å—Ç–µ–º–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–≤–æ–¥–æ—Ä–æ–¥–∞'),
    ('–°–∏—Å—Ç–µ–º–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', '–î–∞–≤–ª–µ–Ω–∏–µ_–≤–æ–¥–æ—Ä–æ–¥–∞'),
    ('–í–∏–±—Ä–∞—Ü–∏—è', '–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'),
    ('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤', '–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'),
    ('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏', '–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'),
    ('–¢–æ–∫_—É—Ç–µ—á–∫–∏', '–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'),
    ('–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏', '–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'),
    ('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–≤–æ–¥–æ—Ä–æ–¥–∞', '–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'),
    ('–î–∞–≤–ª–µ–Ω–∏–µ_–≤–æ–¥–æ—Ä–æ–¥–∞', '–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ')
]

# –°–æ–∑–¥–∞–µ–º –±–∞–π–µ—Å–æ–≤—Å–∫—É—é —Å–µ—Ç—å
model = BayesianNetwork(network_structure)

print("\\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Ç–∏:")
print("–£–∑–ª—ã (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã):")
for node in model.nodes():
    print(f"  - {node}")

print("\\n–°–≤—è–∑–∏ (–ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏):")
for edge in model.edges():
    print(f"  {edge[0]} ‚Üí {edge[1]}")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–∑–ª–æ–≤
node_states = {
    '–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏': ['–∏—Å–ø—Ä–∞–≤–Ω—ã', '–∏–∑–Ω–æ—à–µ–Ω—ã', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã'],
    '–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞': ['–∏—Å–ø—Ä–∞–≤–Ω–∞', '–ø–µ—Ä–µ–≥—Ä–µ–≤', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞'],
    '–û–±–º–æ—Ç–∫–∞_—Ä–æ—Ç–æ—Ä–∞': ['–∏—Å–ø—Ä–∞–≤–Ω–∞', '–æ—Å–ª–∞–±–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞'],
    '–°–∏—Å—Ç–µ–º–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è': ['–∏—Å–ø—Ä–∞–≤–Ω–∞', '—Å–Ω–∏–∂–µ–Ω–∏–µ_—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞'],
    '–í–∏–±—Ä–∞—Ü–∏—è': ['–Ω–∏–∑–∫–∞—è', '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è', '–≤—ã—Å–æ–∫–∞—è'],
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤': ['–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è', '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è'],
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': ['–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è', '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è'],
    '–¢–æ–∫_—É—Ç–µ—á–∫–∏': ['–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π', '–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π', '–≤—ã—Å–æ–∫–∏–π'],
    '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏': ['–≤—ã—Å–æ–∫–æ–µ', '–ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ', '–Ω–∏–∑–∫–æ–µ'],
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–≤–æ–¥–æ—Ä–æ–¥–∞': ['–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è', '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è', '–≤—ã—Å–æ–∫–∞—è'],
    '–î–∞–≤–ª–µ–Ω–∏–µ_–≤–æ–¥–æ—Ä–æ–¥–∞': ['–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ', '–ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ', '–Ω–∏–∑–∫–æ–µ'],
    '–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ': ['–∏—Å–ø—Ä–∞–≤–µ–Ω', '—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è', '—Ç—Ä–µ–±—É–µ—Ç_—Ä–µ–º–æ–Ω—Ç–∞', '–∞–≤–∞—Ä–∏–π–Ω–æ–µ']
}

print("\\n–°–æ—Å—Ç–æ—è–Ω–∏—è —É–∑–ª–æ–≤:")
for node, states in node_states.items():
    print(f"  {node}: {states}")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–ø—Ä–∏–æ—Ä–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö —É–∑–ª–æ–≤
# –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –†–æ—Å—Å–∏–∏

# –ü–æ–¥—à–∏–ø–Ω–∏–∫–∏ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ì–û–°–¢ 18855-2013)
cpd_bearings = TabularCPD(
    variable='–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏',
    variable_card=3,
    values=[[0.85],   # –∏—Å–ø—Ä–∞–≤–Ω—ã
            [0.12],   # –∏–∑–Ω–æ—à–µ–Ω—ã  
            [0.03]]   # –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã
)

# –û–±–º–æ—Ç–∫–∞ —Å—Ç–∞—Ç–æ—Ä–∞ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –†–î 34.45-51.300-97)
cpd_stator = TabularCPD(
    variable='–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞',
    variable_card=3,
    values=[[0.90],   # –∏—Å–ø—Ä–∞–≤–Ω–∞
            [0.08],   # –ø–µ—Ä–µ–≥—Ä–µ–≤
            [0.02]]   # –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞
)

# –û–±–º–æ—Ç–∫–∞ —Ä–æ—Ç–æ—Ä–∞
cpd_rotor = TabularCPD(
    variable='–û–±–º–æ—Ç–∫–∞_—Ä–æ—Ç–æ—Ä–∞', 
    variable_card=3,
    values=[[0.88],   # –∏—Å–ø—Ä–∞–≤–Ω–∞
            [0.10],   # –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏
            [0.02]]   # –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞
)

# –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
cpd_cooling = TabularCPD(
    variable='–°–∏—Å—Ç–µ–º–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
    variable_card=3, 
    values=[[0.92],   # –∏—Å–ø—Ä–∞–≤–Ω–∞
            [0.06],   # —Å–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            [0.02]]   # –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞
)

print("\\n–ê–ø—Ä–∏–æ—Ä–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
print("–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏: –∏—Å–ø—Ä–∞–≤–Ω—ã=85%, –∏–∑–Ω–æ—à–µ–Ω—ã=12%, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã=3%")
print("–û–±–º–æ—Ç–∫–∞ —Å—Ç–∞—Ç–æ—Ä–∞: –∏—Å–ø—Ä–∞–≤–Ω–∞=90%, –ø–µ—Ä–µ–≥—Ä–µ–≤=8%, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞=2%")
print("–û–±–º–æ—Ç–∫–∞ —Ä–æ—Ç–æ—Ä–∞: –∏—Å–ø—Ä–∞–≤–Ω–∞=88%, –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏=10%, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞=2%")
print("–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è: –∏—Å–ø—Ä–∞–≤–Ω–∞=92%, —Å–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏=6%, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞=2%")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π</h4>
        <pre><code># –£—Å–ª–æ–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏

# –í–∏–±—Ä–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
# –ù–æ—Ä–º—ã –ø–æ –ì–û–°–¢ –ò–°–û 10816-3-2002: –¥–æ 2.8 –º–º/—Å - —Ö–æ—Ä–æ—à–æ, –¥–æ 7.1 –º–º/—Å - –¥–æ–ø—É—Å—Ç–∏–º–æ
cpd_vibration = TabularCPD(
    variable='–í–∏–±—Ä–∞—Ü–∏—è',
    variable_card=3,
    values=[
        [0.95, 0.20, 0.05],  # –Ω–∏–∑–∫–∞—è
        [0.04, 0.60, 0.25],  # –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è  
        [0.01, 0.20, 0.70]   # –≤—ã—Å–æ–∫–∞—è
    ],
    evidence=['–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏'],
    evidence_card=[3]
)

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
# –ù–æ—Ä–º—ã: –¥–æ 80¬∞C - –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –¥–æ 100¬∞C - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è, —Å–≤—ã—à–µ 100¬∞C - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
cpd_bearing_temp = TabularCPD(
    variable='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤',
    variable_card=3,
    values=[
        [0.90, 0.30, 0.10],  # –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è
        [0.08, 0.50, 0.30],  # –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è
        [0.02, 0.20, 0.60]   # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
    ],
    evidence=['–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏'],
    evidence_card=[3]
)

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±–º–æ—Ç–∫–∏ —Å—Ç–∞—Ç–æ—Ä–∞
# –ù–æ—Ä–º—ã –ø–æ –ì–û–°–¢ 183-74: –∫–ª–∞—Å—Å –∏–∑–æ–ª—è—Ü–∏–∏ F - –¥–æ 155¬∞C
cpd_stator_temp = TabularCPD(
    variable='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏',
    variable_card=3,
    values=[
        [0.92, 0.25, 0.05],  # –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è
        [0.07, 0.60, 0.20],  # –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è
        [0.01, 0.15, 0.75]   # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
    ],
    evidence=['–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞'],
    evidence_card=[3]
)

# –¢–æ–∫ —É—Ç–µ—á–∫–∏
# –ù–æ—Ä–º—ã: –¥–æ 10 –º–ê - –Ω–æ—Ä–º–∞–ª—å–Ω–æ
cpd_leakage_current = TabularCPD(
    variable='–¢–æ–∫_—É—Ç–µ—á–∫–∏',
    variable_card=3,
    values=[
        [0.95, 0.40, 0.10],  # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π
        [0.04, 0.45, 0.30],  # –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π
        [0.01, 0.15, 0.60]   # –≤—ã—Å–æ–∫–∏–π
    ],
    evidence=['–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞'],
    evidence_card=[3]
)

# –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏ —Ä–æ—Ç–æ—Ä–∞
# –ù–æ—Ä–º—ã –ø–æ –ü–£–≠: –Ω–µ –º–µ–Ω–µ–µ 0.5 –ú–û–º
cpd_insulation = TabularCPD(
    variable='–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏',
    variable_card=3,
    values=[
        [0.90, 0.30, 0.05],  # –≤—ã—Å–æ–∫–æ–µ
        [0.08, 0.50, 0.25],  # –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ
        [0.02, 0.20, 0.70]   # –Ω–∏–∑–∫–æ–µ
    ],
    evidence=['–û–±–º–æ—Ç–∫–∞_—Ä–æ—Ç–æ—Ä–∞'],
    evidence_card=[3]
)

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥–æ—Ä–æ–¥–∞
# –ù–æ—Ä–º—ã: –¥–æ 60¬∞C –Ω–∞ –≤—Ö–æ–¥–µ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
cpd_hydrogen_temp = TabularCPD(
    variable='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–≤–æ–¥–æ—Ä–æ–¥–∞',
    variable_card=3,
    values=[
        [0.95, 0.40, 0.15],  # –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è
        [0.04, 0.45, 0.35],  # –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è
        [0.01, 0.15, 0.50]   # –≤—ã—Å–æ–∫–∞—è
    ],
    evidence=['–°–∏—Å—Ç–µ–º–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è'],
    evidence_card=[3]
)

# –î–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–æ—Ä–æ–¥–∞
# –ù–æ—Ä–º—ã: 0.4-0.5 –ú–ü–∞
cpd_hydrogen_pressure = TabularCPD(
    variable='–î–∞–≤–ª–µ–Ω–∏–µ_–≤–æ–¥–æ—Ä–æ–¥–∞',
    variable_card=3,
    values=[
        [0.92, 0.35, 0.10],  # –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ
        [0.06, 0.45, 0.40],  # –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ
        [0.02, 0.20, 0.50]   # –Ω–∏–∑–∫–æ–µ
    ],
    evidence=['–°–∏—Å—Ç–µ–º–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è'],
    evidence_card=[3]
)

print("–£—Å–ª–æ–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print("\\n–ü—Ä–∏–º–µ—Ä: P(–í–∏–±—Ä–∞—Ü–∏—è | –ü–æ–¥—à–∏–ø–Ω–∏–∫–∏)")
print("–ü—Ä–∏ –∏—Å–ø—Ä–∞–≤–Ω—ã—Ö –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞—Ö: –Ω–∏–∑–∫–∞—è=95%, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è=4%, –≤—ã—Å–æ–∫–∞—è=1%")
print("–ü—Ä–∏ –∏–∑–Ω–æ—à–µ–Ω–Ω—ã—Ö –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞—Ö: –Ω–∏–∑–∫–∞—è=20%, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è=60%, –≤—ã—Å–æ–∫–∞—è=20%")
print("–ü—Ä–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞—Ö: –Ω–∏–∑–∫–∞—è=5%, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è=25%, –≤—ã—Å–æ–∫–∞—è=70%")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 3: –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</h4>
        <pre><code># –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞, —É—á–∏—Ç—ã–≤–∞—é—â–∞—è –≤—Å–µ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

# –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

def create_overall_state_cpd():
    """–°–æ–∑–¥–∞–µ—Ç CPD –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∏—Ö –≤–µ—Å–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
    parameters = ['–í–∏–±—Ä–∞—Ü–∏—è', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏', 
                 '–¢–æ–∫_—É—Ç–µ—á–∫–∏', '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–≤–æ–¥–æ—Ä–æ–¥–∞', 
                 '–î–∞–≤–ª–µ–Ω–∏–µ_–≤–æ–¥–æ—Ä–æ–¥–∞']
    
    # –í–µ—Å–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
    weights = {
        '–í–∏–±—Ä–∞—Ü–∏—è': 0.20,
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤': 0.15,
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': 0.20,
        '–¢–æ–∫_—É—Ç–µ—á–∫–∏': 0.15,
        '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏': 0.15,
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–≤–æ–¥–æ—Ä–æ–¥–∞': 0.08,
        '–î–∞–≤–ª–µ–Ω–∏–µ_–≤–æ–¥–æ—Ä–æ–¥–∞': 0.07
    }
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é CPD –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª–∞ –±—ã –ø–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ 3^7 = 2187 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenarios = {
        '–≤—Å–µ_–Ω–æ—Ä–º–∞–ª—å–Ω–æ': {
            '–í–∏–±—Ä–∞—Ü–∏—è': '–Ω–∏–∑–∫–∞—è',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤': '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è',
            '–¢–æ–∫_—É—Ç–µ—á–∫–∏': '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π',
            '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏': '–≤—ã—Å–æ–∫–æ–µ',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–≤–æ–¥–æ—Ä–æ–¥–∞': '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è',
            '–î–∞–≤–ª–µ–Ω–∏–µ_–≤–æ–¥–æ—Ä–æ–¥–∞': '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ',
            '—Å–æ—Å—Ç–æ—è–Ω–∏–µ': [0.95, 0.04, 0.01, 0.00]  # –∏—Å–ø—Ä–∞–≤–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç_—Ä–µ–º–æ–Ω—Ç–∞, –∞–≤–∞—Ä–∏–π–Ω–æ–µ
        },
        '–∏–∑–Ω–æ—Å_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤': {
            '–í–∏–±—Ä–∞—Ü–∏—è': '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤': '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è',
            '—Å–æ—Å—Ç–æ—è–Ω–∏–µ': [0.10, 0.70, 0.20, 0.00]
        },
        '–ø—Ä–æ–±–ª–µ–º—ã_–æ–±–º–æ—Ç–∫–∏': {
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è',
            '–¢–æ–∫_—É—Ç–µ—á–∫–∏': '–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π',
            '—Å–æ—Å—Ç–æ—è–Ω–∏–µ': [0.05, 0.25, 0.65, 0.05]
        },
        '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ': {
            '–í–∏–±—Ä–∞—Ü–∏—è': '–≤—ã—Å–æ–∫–∞—è',
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è',
            '–¢–æ–∫_—É—Ç–µ—á–∫–∏': '–≤—ã—Å–æ–∫–∏–π',
            '—Å–æ—Å—Ç–æ—è–Ω–∏–µ': [0.00, 0.05, 0.25, 0.70]
        }
    }
    
    print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
    for scenario, data in scenarios.items():
        print(f"\\n{scenario}:")
        for param, value in data.items():
            if param != '—Å–æ—Å—Ç–æ—è–Ω–∏–µ':
                print(f"  {param}: {value}")
        probs = data['—Å–æ—Å—Ç–æ—è–Ω–∏–µ']
        print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –∏—Å–ø—Ä–∞–≤–µ–Ω={probs[0]:.2f}, —Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è={probs[1]:.2f}, —Ç—Ä–µ–±—É–µ—Ç_—Ä–µ–º–æ–Ω—Ç–∞={probs[2]:.2f}, –∞–≤–∞—Ä–∏–π–Ω–æ–µ={probs[3]:.2f}")
    
    return scenarios

scenarios = create_overall_state_cpd()

# –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–¥–∏–º CPD —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
# –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
cpd_overall = TabularCPD(
    variable='–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    variable_card=4,
    values=[
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
        # –°—Ç—Ä–æ–∫–∏: –∏—Å–ø—Ä–∞–≤–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç_—Ä–µ–º–æ–Ω—Ç–∞, –∞–≤–∞—Ä–∏–π–Ω–æ–µ
        # –°—Ç–æ–ª–±—Ü—ã: –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–æ)
        [0.80, 0.60, 0.40, 0.20, 0.10, 0.05, 0.02, 0.01],  # –∏—Å–ø—Ä–∞–≤–µ–Ω
        [0.15, 0.30, 0.35, 0.40, 0.30, 0.25, 0.18, 0.09],  # —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
        [0.04, 0.08, 0.20, 0.35, 0.50, 0.60, 0.60, 0.40],  # —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞
        [0.01, 0.02, 0.05, 0.05, 0.10, 0.10, 0.20, 0.50]   # –∞–≤–∞—Ä–∏–π–Ω–æ–µ
    ],
    evidence=['–í–∏–±—Ä–∞—Ü–∏—è', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏', '–¢–æ–∫_—É—Ç–µ—á–∫–∏'],
    evidence_card=[3, 3, 3]
)

print("\\nCPD –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
print("–í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —É—á–∏—Ç—ã–≤–∞–ª–∏—Å—å –±—ã –≤—Å–µ 7 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 4: –°–±–æ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h4>
        <pre><code># –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ CPD –≤ –º–æ–¥–µ–ª—å
model.add_cpds(
    cpd_bearings, cpd_stator, cpd_rotor, cpd_cooling,
    cpd_vibration, cpd_bearing_temp, cpd_stator_temp,
    cpd_leakage_current, cpd_insulation, 
    cpd_hydrogen_temp, cpd_hydrogen_pressure,
    cpd_overall
)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
print("–ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò")
print("=" * 20)
print(f"–ú–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {model.check_model()}")

if model.check_model():
    print("‚úÖ –í—Å–µ CPD –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –°—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤ –∫–∞–∂–¥–æ–π CPD —Ä–∞–≤–Ω–∞ 1")
    print("‚úÖ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–µ—Ç–∏")
else:
    print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
inference = VariableElimination(model)

print("\\n–°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
print("=" * 40)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
def diagnose_turbogenerator(observations):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
    
    Args:
        observations: —Å–ª–æ–≤–∞—Ä—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π {–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ}
    
    Returns:
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    
    print(f"\\n–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø–ú:")
    print("-" * 30)
    
    for param, value in observations.items():
        print(f"  {param}: {value}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    result = inference.query(
        variables=['–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'],
        evidence=observations
    )
    
    print("\\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("-" * 25)
    
    states = ['–∏—Å–ø—Ä–∞–≤–µ–Ω', '—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è', '—Ç—Ä–µ–±—É–µ—Ç_—Ä–µ–º–æ–Ω—Ç–∞', '–∞–≤–∞—Ä–∏–π–Ω–æ–µ']
    probabilities = result.values
    
    for i, (state, prob) in enumerate(zip(states, probabilities)):
        print(f"  {state}: {prob:.3f} ({prob*100:.1f}%)")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    max_prob_idx = np.argmax(probabilities)
    most_likely_state = states[max_prob_idx]
    confidence = probabilities[max_prob_idx]
    
    print(f"\\n–ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: {most_likely_state}")
    print(f"–£–í–ï–†–ï–ù–ù–û–°–¢–¨: {confidence:.3f} ({confidence*100:.1f}%)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if most_likely_state == '–∏—Å–ø—Ä–∞–≤–µ–Ω':
        recommendation = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é. –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –ø–æ –≥—Ä–∞—Ñ–∏–∫—É."
    elif most_likely_state == '—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è':
        recommendation = "–£—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ."
    elif most_likely_state == '—Ç—Ä–µ–±—É–µ—Ç_—Ä–µ–º–æ–Ω—Ç–∞':
        recommendation = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–º–æ–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É."
    else:  # –∞–≤–∞—Ä–∏–π–Ω–æ–µ
        recommendation = "–ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê! –ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞."
    
    print(f"\\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {recommendation}")
    
    return {
        'probabilities': dict(zip(states, probabilities)),
        'most_likely': most_likely_state,
        'confidence': confidence,
        'recommendation': recommendation
    }

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
print("\\n" + "="*60)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
print("="*60)

# –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
print("\\n–°–¶–ï–ù–ê–†–ò–ô 1: –ù–û–†–ú–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
observations1 = {
    '–í–∏–±—Ä–∞—Ü–∏—è': '–Ω–∏–∑–∫–∞—è',
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è',
    '–¢–æ–∫_—É—Ç–µ—á–∫–∏': '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π'
}
result1 = diagnose_turbogenerator(observations1)

# –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ò–∑–Ω–æ—Å –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
print("\\n" + "="*60)
print("–°–¶–ï–ù–ê–†–ò–ô 2: –ü–û–î–û–ó–†–ï–ù–ò–ï –ù–ê –ò–ó–ù–û–° –ü–û–î–®–ò–ü–ù–ò–ö–û–í")
observations2 = {
    '–í–∏–±—Ä–∞—Ü–∏—è': '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è',
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤': '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è',
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è',
    '–¢–æ–∫_—É—Ç–µ—á–∫–∏': '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π'
}
result2 = diagnose_turbogenerator(observations2)

# –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–º–æ—Ç–∫–æ–π
print("\\n" + "="*60)
print("–°–¶–ï–ù–ê–†–ò–ô 3: –ü–†–û–ë–õ–ï–ú–´ –° –û–ë–ú–û–¢–ö–û–ô –°–¢–ê–¢–û–†–ê")
observations3 = {
    '–í–∏–±—Ä–∞—Ü–∏—è': '–Ω–∏–∑–∫–∞—è',
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è',
    '–¢–æ–∫_—É—Ç–µ—á–∫–∏': '–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π'
}
result3 = diagnose_turbogenerator(observations3)

# –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
print("\\n" + "="*60)
print("–°–¶–ï–ù–ê–†–ò–ô 4: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï")
observations4 = {
    '–í–∏–±—Ä–∞—Ü–∏—è': '–≤—ã—Å–æ–∫–∞—è',
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è',
    '–¢–æ–∫_—É—Ç–µ—á–∫–∏': '–≤—ã—Å–æ–∫–∏–π'
}
result4 = diagnose_turbogenerator(observations4)</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–≤–æ–¥</h4>
        <pre><code># –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–ò –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´")
print("="*60)

def sensitivity_analysis():
    """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    
    parameters = ['–í–∏–±—Ä–∞—Ü–∏—è', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏', 
                 '–¢–æ–∫_—É—Ç–µ—á–∫–∏', '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–≤–æ–¥–æ—Ä–æ–¥–∞', 
                 '–î–∞–≤–ª–µ–Ω–∏–µ_–≤–æ–¥–æ—Ä–æ–¥–∞']
    
    # –ë–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ)
    base_observations = {
        '–í–∏–±—Ä–∞—Ü–∏—è': '–Ω–∏–∑–∫–∞—è',
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏': '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è',
        '–¢–æ–∫_—É—Ç–µ—á–∫–∏': '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π'
    }
    
    base_result = inference.query(
        variables=['–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'],
        evidence=base_observations
    )
    base_prob_ok = base_result.values[0]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å "–∏—Å–ø—Ä–∞–≤–µ–Ω"
    
    print(f"–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å '–∏—Å–ø—Ä–∞–≤–µ–Ω': {base_prob_ok:.3f}")
    print("\\n–í–ª–∏—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:")
    print("-" * 45)
    
    sensitivity_results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    test_cases = [
        ('–í–∏–±—Ä–∞—Ü–∏—è', '–≤—ã—Å–æ–∫–∞—è'),
        ('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–æ–±–º–æ—Ç–∫–∏', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è'), 
        ('–¢–æ–∫_—É—Ç–µ—á–∫–∏', '–≤—ã—Å–æ–∫–∏–π')
    ]
    
    for param, bad_value in test_cases:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        modified_observations = base_observations.copy()
        modified_observations[param] = bad_value
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–≤–æ–¥
        modified_result = inference.query(
            variables=['–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ'],
            evidence=modified_observations
        )
        modified_prob_ok = modified_result.values[0]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        prob_change = base_prob_ok - modified_prob_ok
        sensitivity = prob_change / base_prob_ok * 100
        
        sensitivity_results[param] = {
            'change': prob_change,
            'sensitivity': sensitivity,
            'new_prob': modified_prob_ok
        }
        
        print(f"{param} ({bad_value}):")
        print(f"  –ù–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å '–∏—Å–ø—Ä–∞–≤–µ–Ω': {modified_prob_ok:.3f}")
        print(f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {prob_change:.3f}")
        print(f"  –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sensitivity:.1f}%")
        print()
    
    # –†–∞–Ω–∂–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    sorted_params = sorted(sensitivity_results.items(), 
                          key=lambda x: x[1]['sensitivity'], reverse=True)
    
    print("–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–û –í–ê–ñ–ù–û–°–¢–ò:")
    print("-" * 40)
    for i, (param, data) in enumerate(sorted_params, 1):
        print(f"{i}. {param}: {data['sensitivity']:.1f}% –≤–ª–∏—è–Ω–∏—è")
    
    return sensitivity_results

sensitivity_results = sensitivity_analysis()

# –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–≤–æ–¥ - –ø–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –ø—Ä–æ–±–ª–µ–º
print("\\n" + "="*60)
print("–û–ë–†–ê–¢–ù–´–ô –í–´–í–û–î - –ü–û–ò–°–ö –ü–†–ò–ß–ò–ù –ü–†–û–ë–õ–ï–ú")
print("="*60)

def find_root_causes(target_state='—Ç—Ä–µ–±—É–µ—Ç_—Ä–µ–º–æ–Ω—Ç–∞'):
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    
    print(f"–ü–æ–∏—Å–∫ –ø—Ä–∏—á–∏–Ω —Å–æ—Å—Ç–æ—è–Ω–∏—è: {target_state}")
    print("-" * 40)
    
    # –ó–∞–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    evidence = {'–û–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ': target_state}
    
    # –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    components = ['–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏', '–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞', '–û–±–º–æ—Ç–∫–∞_—Ä–æ—Ç–æ—Ä–∞', '–°–∏—Å—Ç–µ–º–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è']
    
    for component in components:
        try:
            result = inference.query(
                variables=[component],
                evidence=evidence
            )
            
            print(f"\\n{component}:")
            
            if component == '–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏':
                states = ['–∏—Å–ø—Ä–∞–≤–Ω—ã', '–∏–∑–Ω–æ—à–µ–Ω—ã', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã']
            elif component in ['–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞', '–û–±–º–æ—Ç–∫–∞_—Ä–æ—Ç–æ—Ä–∞']:
                if component == '–û–±–º–æ—Ç–∫–∞_—Å—Ç–∞—Ç–æ—Ä–∞':
                    states = ['–∏—Å–ø—Ä–∞–≤–Ω–∞', '–ø–µ—Ä–µ–≥—Ä–µ–≤', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞']
                else:
                    states = ['–∏—Å–ø—Ä–∞–≤–Ω–∞', '–æ—Å–ª–∞–±–ª–µ–Ω–∏–µ_–∏–∑–æ–ª—è—Ü–∏–∏', '–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞']
            else:  # –°–∏—Å—Ç–µ–º–∞_–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                states = ['–∏—Å–ø—Ä–∞–≤–Ω–∞', '—Å–Ω–∏–∂–µ–Ω–∏–µ_—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞']
            
            probabilities = result.values
            
            for state, prob in zip(states, probabilities):
                print(f"  {state}: {prob:.3f} ({prob*100:.1f}%)")
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            max_idx = np.argmax(probabilities)
            if max_idx > 0:  # –Ω–µ "–∏—Å–ø—Ä–∞–≤–Ω–æ"
                print(f"  ‚ö†Ô∏è  –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: {states[max_idx]} ({probabilities[max_idx]*100:.1f}%)")
        
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {component}: {e}")

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
find_root_causes('—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è')
find_root_causes('—Ç—Ä–µ–±—É–µ—Ç_—Ä–µ–º–æ–Ω—Ç–∞')

print("\\n" + "="*60)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø AI-–ê–†–•–ò–¢–ï–ö–¢–û–†–ê")
print("="*60)

print("""
–ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´ –ò–ó –ê–ù–ê–õ–ò–ó–ê:

1. –°–¢–†–£–ö–¢–£–†–ê –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´:
   ‚úÖ –ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Å–µ—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
   ‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ‚Üí –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Üí –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   ‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞–∫ –ø—Ä—è–º–æ–≥–æ, —Ç–∞–∫ –∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞

2. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
   üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±–º–æ—Ç–∫–∏ - –Ω–∞–∏–±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
   üî• –í–∏–±—Ä–∞—Ü–∏—è - —Ä–∞–Ω–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞–º–∏
   üî• –¢–æ–∫ —É—Ç–µ—á–∫–∏ - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–æ–ª—è—Ü–∏–∏

3. –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –í–ï–†–û–Ø–¢–ù–û–°–¢–ù–û–ì–û –ü–û–î–•–û–î–ê:
   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
   üìä –£—á–µ—Ç –Ω–µ–ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   üìä –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏

4. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° AI-–°–ò–°–¢–ï–ú–û–ô:
   ü§ñ –ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Å–µ—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
   ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏

5. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –†–û–°–°–ò–ô–°–ö–ò–ú –°–¢–ê–ù–î–ê–†–¢–ê–ú:
   üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤ –ì–û–°–¢ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
   üìã –£—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   üìã –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   üìã –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
- –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞ –ª—é–±–æ–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –¢–≠–¶
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫—É CPD
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA-—Å–∏—Å—Ç–µ–º–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
""")</code></pre>
      </div>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ 2: –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</h3>
      <p>–°–æ–∑–¥–∞–¥–∏–º —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.</p>
      
      <div class="code-block">
        <h4>–ú–æ–¥–µ–ª—å —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
        <pre><code># –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≤–æ–¥–∞ "–£—Ä–∞–ª–º–∞—à"
# –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≥–æ—Ä–Ω–æ-—à–∞—Ö—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

print("–°–¢–û–•–ê–°–¢–ò–ß–ï–°–ö–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–°–¢–í–ê")
print("–ó–∞–≤–æ–¥ '–£—Ä–∞–ª–º–∞—à' - –≥–æ—Ä–Ω–æ-—à–∞—Ö—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
print("=" * 50)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
products = {
    '—ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä_–≠–ö–ì-18': {
        'base_demand': 12,  # –±–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å –≤ –≥–æ–¥
        'price': 180_000_000,  # —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        'production_time': 6,  # –º–µ—Å—è—Ü–µ–≤
        'material_cost': 120_000_000,
        'demand_volatility': 0.3
    },
    '–±—É—Ä–æ–≤–∞—è_—É—Å—Ç–∞–Ω–æ–≤–∫–∞_–°–ë–®-250': {
        'base_demand': 8,
        'price': 95_000_000,
        'production_time': 4,
        'material_cost': 65_000_000,
        'demand_volatility': 0.4
    },
    '–¥—Ä–æ–±–∏–ª–∫–∞_–©–î–ü-15x21': {
        'base_demand': 25,
        'price': 45_000_000,
        'production_time': 3,
        'material_cost': 30_000_000,
        'demand_volatility': 0.2
    }
}

# –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
random_factors = {
    'steel_price_volatility': 0.15,  # –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω –Ω–∞ —Å—Ç–∞–ª—å
    'ruble_volatility': 0.12,        # –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ —Ä—É–±–ª—è
    'equipment_failure_rate': 0.05,  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    'supply_delay_prob': 0.08        # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫
}

print("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:")
for product, params in products.items():
    print(f"  {product}:")
    print(f"    –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å: {params['base_demand']} —à—Ç/–≥–æ–¥")
    print(f"    –¶–µ–Ω–∞: {params['price']:,} —Ä—É–±")
    print(f"    –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {params['production_time']} –º–µ—Å")
    print(f"    –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞: {params['demand_volatility']*100}%")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–ø—Ä–æ—Å–∞
def generate_demand_scenarios(n_scenarios=1000):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    
    scenarios = []
    
    for i in range(n_scenarios):
        scenario = {'id': i}
        
        # –û–±—â–∏–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä (–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Å—å —Ä—ã–Ω–æ–∫)
        economic_factor = np.random.normal(1.0, 0.2)
        economic_factor = max(0.5, min(1.5, economic_factor))  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        
        # –¶–µ–Ω—ã –Ω–∞ —Å—Ç–∞–ª—å (–≤–ª–∏—è—é—Ç –Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)
        steel_price_factor = np.random.normal(1.0, random_factors['steel_price_volatility'])
        steel_price_factor = max(0.7, min(1.4, steel_price_factor))
        
        # –ö—É—Ä—Å —Ä—É–±–ª—è (–≤–ª–∏—è–µ—Ç –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        ruble_factor = np.random.normal(1.0, random_factors['ruble_volatility'])
        ruble_factor = max(0.8, min(1.3, ruble_factor))
        
        scenario['economic_factor'] = economic_factor
        scenario['steel_price_factor'] = steel_price_factor
        scenario['ruble_factor'] = ruble_factor
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø—Ä–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        for product, params in products.items():
            base_demand = params['base_demand']
            volatility = params['demand_volatility']
            
            # –°–ø—Ä–æ—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            demand_factor = (economic_factor * 0.6 + 
                           ruble_factor * 0.3 + 
                           (2 - steel_price_factor) * 0.1)  # –≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å—Ç–∞–ª—å —Å–Ω–∏–∂–∞—é—Ç —Å–ø—Ä–æ—Å
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            product_random = np.random.normal(1.0, volatility)
            
            final_demand = base_demand * demand_factor * product_random
            final_demand = max(0, round(final_demand))  # —Å–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            
            scenario[f'demand_{product}'] = final_demand
        
        scenarios.append(scenario)
    
    return scenarios

scenarios = generate_demand_scenarios(1000)

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
print("\\n–ê–ù–ê–õ–ò–ó –°–¶–ï–ù–ê–†–ò–ï–í –°–ü–†–û–°–ê")
print("-" * 30)

scenario_df = pd.DataFrame(scenarios)

for product in products.keys():
    demand_col = f'demand_{product}'
    mean_demand = scenario_df[demand_col].mean()
    std_demand = scenario_df[demand_col].std()
    min_demand = scenario_df[demand_col].min()
    max_demand = scenario_df[demand_col].max()
    
    print(f"\\n{product}:")
    print(f"  –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–æ—Å: {mean_demand:.1f} —à—Ç/–≥–æ–¥")
    print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_demand:.1f}")
    print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: {min_demand} - {max_demand} —à—Ç/–≥–æ–¥")
    print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {std_demand/mean_demand*100:.1f}%")

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ø—Ä–æ—Å–∞
print("\\n–ö–û–†–†–ï–õ–Ø–¶–ò–ò –°–ü–†–û–°–ê –ú–ï–ñ–î–£ –ü–†–û–î–£–ö–¢–ê–ú–ò")
print("-" * 40)

demand_columns = [f'demand_{product}' for product in products.keys()]
correlation_matrix = scenario_df[demand_columns].corr()

print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
for i, prod1 in enumerate(products.keys()):
    for j, prod2 in enumerate(products.keys()):
        if i < j:
            corr = correlation_matrix.iloc[i, j]
            print(f"  {prod1} - {prod2}: {corr:.3f}")

print(f"\\n–í—ã–≤–æ–¥: –°–ø—Ä–æ—Å –Ω–∞ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω")
print(f"(–æ–±—â–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –≤–µ—Å—å —Ä—ã–Ω–æ–∫ –≥–æ—Ä–Ω–æ-—à–∞—Ö—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)")</code></pre>
      </div>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      <p>–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã –æ—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö AI-—Å–∏—Å—Ç–µ–º–∞—Ö:</p>
      
      <h4>üéØ –ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</h4>
      <ul>
        <li><strong>–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π</strong> - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π</li>
        <li><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏</strong> - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –≤—ã–≤–æ–¥—ã</li>
        <li><strong>–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–≤–æ–¥</strong> - –ø–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –ø—Ä–æ–±–ª–µ–º</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</strong> - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
      </ul>
      
      <h4>üìä –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</h4>
      <ul>
        <li><strong>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏</strong> - —É—á–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤</li>
        <li><strong>–°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑</strong> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</li>
        <li><strong>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</strong> - –≤—ã—è–≤–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏</strong> - –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <h4>üè≠ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:</h4>
      <ul>
        <li><strong>–ì–û–°–¢ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã</strong> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤</li>
        <li><strong>–†–æ—Å—Å–∏–π—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</strong> - —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¢–í–í-200-2–ê</li>
        <li><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è</strong> - –ø—Ä–∏–º–µ—Ä—ã —Å –£—Ä–∞–ª–º–∞—à, –¢–≠–¶</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã</strong> - –∫—É—Ä—Å —Ä—É–±–ª—è, —Ü–µ–Ω—ã –Ω–∞ —Å—ã—Ä—å–µ</li>
      </ul>
      
      <p>–≠—Ç–∏ –Ω–∞–≤—ã–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.</p>
    `
  },


  // –£—Ä–æ–∫ 6 - –ü—Ä–∞–∫—Ç–∏–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
  6: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
    duration: "200 –º–∏–Ω",
    type: "practice",
    content: `
      <h2>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ö –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞</h3>
      <p>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏. –í —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ì–û–°–¢ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –∑–∞–¥–∞—á–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</strong> - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤</li>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è</strong> - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</li>
        <li><strong>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</strong> - —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</strong> - –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞</li>
        <li><strong>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º</strong> - –ì–û–°–¢, ISO, –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º</h3>
      
      <h4>–ì–û–°–¢ –† –ò–°–û 5725 - –¢–æ—á–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π</h4>
      <p>–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø–æ–¥—Ö–æ–¥—ã –∫ –æ—Ü–µ–Ω–∫–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π:</p>
      
      <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å</strong> - –±–ª–∏–∑–æ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É</li>
        <li><strong>–ü—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω–æ—Å—Ç—å</strong> - –±–ª–∏–∑–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å</strong> - —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å</strong> - –ø—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω–æ—Å—Ç—å –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏</li>
        <li><strong>–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å</strong> - –ø—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω–æ—Å—Ç—å –≤ —É—Å–ª–æ–≤–∏—è—Ö –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong></p>
      <pre><code>–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: Œ¥ = Œº - Œº‚ÇÄ
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏: s·µ£
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏: s·µ£
–ü—Ä–µ–¥–µ–ª –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏: r = 2.8 √ó s·µ£
–ü—Ä–µ–¥–µ–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏: R = 2.8 √ó s·µ£</code></pre>
      
      <h4>–ì–û–°–¢ –† 50779.42-99 - –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞</h4>
      <p>–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:</p>
      
      <p><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>XÃÑ-R –∫–∞—Ä—Ç—ã</strong> - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–∞—Ö</li>
        <li><strong>XÃÑ-s –∫–∞—Ä—Ç—ã</strong> - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ</li>
        <li><strong>X-mR –∫–∞—Ä—Ç—ã</strong> - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–∫–æ–ª—å–∑—è—â–∏–π —Ä–∞–∑–º–∞—Ö</li>
      </ul>
      
      <p><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è XÃÑ-R –∫–∞—Ä—Ç:</strong></p>
      <pre><code>–ö–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö (XÃÑ):
UCL = XÃÑÃÑ + A‚ÇÇRÃÑ
CL = XÃÑÃÑ  
LCL = XÃÑÃÑ - A‚ÇÇRÃÑ

–ö–∞—Ä—Ç–∞ —Ä–∞–∑–º–∞—Ö–æ–≤ (R):
UCL = D‚ÇÑRÃÑ
CL = RÃÑ
LCL = D‚ÇÉRÃÑ</code></pre>
      
      <p>–≥–¥–µ A‚ÇÇ, D‚ÇÉ, D‚ÇÑ - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –æ–±—ä–µ–º–∞ –≤—ã–±–æ—Ä–∫–∏</p>
      
      <h4>–ò–Ω–¥–µ–∫—Å—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</h4>
      <p><strong>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å (Cp):</strong></p>
      <pre><code>Cp = (USL - LSL) / (6œÉ)</code></pre>
      
      <p><strong>–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å (Cpk):</strong></p>
      <pre><code>Cpk = min[(USL - Œº)/(3œÉ), (Œº - LSL)/(3œÉ)]</code></pre>
      
      <p><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:</strong></p>
      <ul>
        <li>Cp, Cpk ‚â• 1.33 - –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–æ—Å–æ–±–µ–Ω</li>
        <li>1.00 ‚â§ Cp, Cpk < 1.33 - –ø—Ä–æ—Ü–µ—Å—Å —á–∞—Å—Ç–∏—á–Ω–æ —Å–ø–æ—Å–æ–±–µ–Ω</li>
        <li>Cp, Cpk < 1.00 - –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω</li>
      </ul>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è - –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–ª–∏</h4>
      <p><strong>–ì–û–°–¢ 380-2005</strong> - —Å—Ç–∞–ª—å —É–≥–ª–µ—Ä–æ–¥–∏—Å—Ç–∞—è –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞:</p>
      
      <p><strong>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong></p>
      <ul>
        <li>–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ (C, Mn, Si, P, S)</li>
        <li>–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ (œÉ–≤, œÉ—Ç, Œ¥, œà)</li>
        <li>–†–∞–∑–º–µ—Ä—ã –∏ —Ñ–æ—Ä–º–∞ –ø—Ä–æ–∫–∞—Ç–∞</li>
        <li>–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤ –¥–ª—è —Å—Ç–∞–ª–∏ –°—Ç3—Å–ø:</strong></p>
      <ul>
        <li>–£–≥–ª–µ—Ä–æ–¥ (C): 0.14-0.22%</li>
        <li>–ú–∞—Ä–≥–∞–Ω–µ—Ü (Mn): 0.40-0.65%</li>
        <li>–ö—Ä–µ–º–Ω–∏–π (Si): 0.15-0.30%</li>
        <li>–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: œÉ–≤ = 370-490 –ú–ü–∞</li>
        <li>–ü—Ä–µ–¥–µ–ª —Ç–µ–∫—É—á–µ—Å—Ç–∏: œÉ—Ç ‚â• 245 –ú–ü–∞</li>
      </ul>
      
      <h4>–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ - –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–µ—Ç–∞–ª–µ–π</h4>
      <p><strong>–ì–û–°–¢ 25347-2013</strong> - –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º–æ—Å—Ç–∏:</p>
      
      <p><strong>–°–∏—Å—Ç–µ–º–∞ –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–æ–∫:</strong></p>
      <ul>
        <li>–ö–≤–∞–ª–∏—Ç–µ—Ç—ã —Ç–æ—á–Ω–æ—Å—Ç–∏: IT01, IT0, IT1, ..., IT18</li>
        <li>–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–æ–≤: a, b, c, ..., z</li>
        <li>–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π: A, B, C, ..., Z</li>
      </ul>
      
      <p><strong>–†–∞—Å—á–µ—Ç –¥–æ–ø—É—Å–∫–∞:</strong></p>
      <pre><code>IT = i √ó k
–≥–¥–µ i - –µ–¥–∏–Ω–∏—Ü–∞ –¥–æ–ø—É—Å–∫–∞, k - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–≤–∞–ª–∏—Ç–µ—Ç–∞</code></pre>
      
      <h4>–•–∏–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å - –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h4>
      <p><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–ª–∏–º–µ—Ä–æ–≤ –ø–æ –ì–û–°–¢:</strong></p>
      <ul>
        <li>–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</li>
        <li>–°—Ç–µ–ø–µ–Ω—å –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–Ω–æ—Å—Ç–∏</li>
        <li>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Å–µ–π –∏ –¥–æ–±–∞–≤–æ–∫</li>
        <li>–§–∏–∑–∏–∫–æ-–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞</li>
      </ul>
    `,
    practiceContent: `
      <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤</h2>
      
      <h3>–ó–∞–¥–∞–Ω–∏–µ: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-—Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞</h3>
      <p>–ö–∞–∫ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–≤–æ–¥–µ "–ì–ü–ó-10" (–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É). –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ì–û–°–¢ 520-2002 –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.</p>
      
      <div class="code-block">
        <h4>–®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ì–û–°–¢ 520-2002</h4>
        <pre><code>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import norm, chi2
import warnings
warnings.filterwarnings('ignore')

# –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –ø–æ –ì–û–°–¢ 520-2002
print("–°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê –ü–û–î–®–ò–ü–ù–ò–ö–û–í")
print("–ó–∞–≤–æ–¥ –ì–ü–ó-10, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É")
print("–°—Ç–∞–Ω–¥–∞—Ä—Ç: –ì–û–°–¢ 520-2002")
print("=" * 50)

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞ 6205 (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π)
bearing_specs = {
    'type': '6205',
    'description': '–ü–æ–¥—à–∏–ø–Ω–∏–∫ —à–∞—Ä–∏–∫–æ–≤—ã–π —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π –æ–¥–Ω–æ—Ä—è–¥–Ω—ã–π',
    'inner_diameter': {
        'nominal': 25.0,  # –º–º
        'tolerance_upper': 0.0,
        'tolerance_lower': -0.012,
        'tolerance_class': 'P0'  # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏
    },
    'outer_diameter': {
        'nominal': 52.0,  # –º–º  
        'tolerance_upper': 0.0,
        'tolerance_lower': -0.012,
        'tolerance_class': 'P0'
    },
    'width': {
        'nominal': 15.0,  # –º–º
        'tolerance_upper': 0.0,
        'tolerance_lower': -0.12,
        'tolerance_class': 'P0'
    },
    'radial_clearance': {
        'min': 0.006,  # –º–º
        'max': 0.020,  # –º–º
        'class': 'C0'  # –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä
    },
    'surface_roughness': {
        'raceway': 0.32,  # Ra, –º–∫–º
        'rolling_elements': 0.16,  # Ra, –º–∫–º
    },
    'hardness': {
        'rings': {'min': 58, 'max': 65},  # HRC
        'balls': {'min': 60, 'max': 67}   # HRC
    },
    'vibration_level': {
        'max_Z1': 13,  # –¥–ë (–Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è)
        'max_Z2': 16,  # –¥–ë (—Å—Ä–µ–¥–Ω–µ—á–∞—Å—Ç–æ—Ç–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è)  
        'max_Z3': 20   # –¥–ë (–≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è)
    }
}

print("–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–û–î–®–ò–ü–ù–ò–ö–ê 6205:")
print("-" * 45)
print(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä: {bearing_specs['inner_diameter']['nominal']} –º–º")
print(f"  –î–æ–ø—É—Å–∫: {bearing_specs['inner_diameter']['tolerance_lower']:.3f} / {bearing_specs['inner_diameter']['tolerance_upper']:.3f}")
print(f"–ù–∞—Ä—É–∂–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä: {bearing_specs['outer_diameter']['nominal']} –º–º")
print(f"  –î–æ–ø—É—Å–∫: {bearing_specs['outer_diameter']['tolerance_lower']:.3f} / {bearing_specs['outer_diameter']['tolerance_upper']:.3f}")
print(f"–®–∏—Ä–∏–Ω–∞: {bearing_specs['width']['nominal']} –º–º")
print(f"  –î–æ–ø—É—Å–∫: {bearing_specs['width']['tolerance_lower']:.3f} / {bearing_specs['width']['tolerance_upper']:.3f}")
print(f"–†–∞–¥–∏–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä: {bearing_specs['radial_clearance']['min']:.3f} - {bearing_specs['radial_clearance']['max']:.3f} –º–º")
print(f"–¢–≤–µ—Ä–¥–æ—Å—Ç—å –∫–æ–ª–µ—Ü: {bearing_specs['hardness']['rings']['min']}-{bearing_specs['hardness']['rings']['max']} HRC")
print(f"–¢–≤–µ—Ä–¥–æ—Å—Ç—å —à–∞—Ä–∏–∫–æ–≤: {bearing_specs['hardness']['balls']['min']}-{bearing_specs['hardness']['balls']['max']} HRC")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã
control_parameters = {
    'dimensional': [
        'inner_diameter', 'outer_diameter', 'width', 
        'raceway_diameter', 'ball_diameter'
    ],
    'geometric': [
        'roundness', 'cylindricity', 'surface_roughness',
        'raceway_profile', 'ball_sphericity'
    ],
    'material': [
        'hardness_inner_ring', 'hardness_outer_ring', 'hardness_balls',
        'chemical_composition', 'microstructure'
    ],
    'functional': [
        'radial_clearance', 'axial_clearance', 'vibration_level',
        'noise_level', 'torque_resistance'
    ]
}

print("\\n–ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ö–û–ù–¢–†–û–õ–Ø:")
print("-" * 45)
for category, params in control_parameters.items():
    print(f"\\n{category.upper()}:")
    for param in params:
        print(f"  - {param}")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
np.random.seed(42)  # –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

def generate_production_data(n_samples=1000):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏"""
    
    data = {}
    
    # –†–∞–∑–º–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏)
    data['inner_diameter'] = np.random.normal(
        bearing_specs['inner_diameter']['nominal'], 0.003, n_samples
    )
    
    data['outer_diameter'] = np.random.normal(
        bearing_specs['outer_diameter']['nominal'], 0.003, n_samples
    )
    
    data['width'] = np.random.normal(
        bearing_specs['width']['nominal'], 0.02, n_samples
    )
    
    # –†–∞–¥–∏–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö)
    data['radial_clearance'] = np.random.uniform(
        bearing_specs['radial_clearance']['min'],
        bearing_specs['radial_clearance']['max'],
        n_samples
    )
    
    # –¢–≤–µ—Ä–¥–æ—Å—Ç—å (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    data['hardness_rings'] = np.random.normal(61.5, 1.5, n_samples)
    data['hardness_balls'] = np.random.normal(63.5, 1.5, n_samples)
    
    # –®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    data['surface_roughness'] = np.random.lognormal(
        np.log(0.25), 0.3, n_samples
    )
    
    # –£—Ä–æ–≤–µ–Ω—å –≤–∏–±—Ä–∞—Ü–∏–∏ (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    data['vibration_Z1'] = np.random.exponential(8, n_samples)
    data['vibration_Z2'] = np.random.exponential(10, n_samples)
    data['vibration_Z3'] = np.random.exponential(12, n_samples)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞)
    start_time = pd.Timestamp('2024-01-01')
    data['timestamp'] = pd.date_range(
        start=start_time, 
        periods=n_samples, 
        freq='30min'  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–¥—à–∏–ø–Ω–∏–∫
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–º–µ–Ω—ã (3 —Å–º–µ–Ω—ã –ø–æ 8 —á–∞—Å–æ–≤)
    data['shift'] = ((data['timestamp'].hour // 8) + 1).astype(int)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (5 –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω—É)
    data['operator'] = np.random.randint(1, 16, n_samples)  # 15 –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤—Å–µ–≥–æ
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω–∫–∞ (10 —Å—Ç–∞–Ω–∫–æ–≤)
    data['machine'] = np.random.randint(1, 11, n_samples)
    
    return pd.DataFrame(data)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
production_data = generate_production_data(1000)

print("\\n–î–ê–ù–ù–´–ï –ü–†–û–ò–ó–í–û–î–°–¢–í–ê –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´:")
print("-" * 35)
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {len(production_data)}")
print(f"–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {production_data['timestamp'].min()} - {production_data['timestamp'].max()}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω: {production_data['shift'].nunique()}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {production_data['operator'].nunique()}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–∫–æ–≤: {production_data['machine'].nunique()}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
print("\\n–ü–†–ò–ú–ï–† –î–ê–ù–ù–´–•:")
print("-" * 15)
display_columns = ['inner_diameter', 'outer_diameter', 'width', 'radial_clearance', 
                  'hardness_rings', 'vibration_Z1', 'shift', 'machine']
print(production_data[display_columns].head().round(3))</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 2: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞</h4>
        <pre><code># –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
print("\\n" + "="*60)
print("–°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–ê")
print("="*60)

def analyze_process_capability(data, parameter, spec_limits):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    
    values = data[parameter]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    mean = values.mean()
    std = values.std()
    
    # –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    if isinstance(spec_limits, dict):
        if 'nominal' in spec_limits:
            # –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–µ–¥–µ–ª—ã (–Ω–æ–º–∏–Ω–∞–ª ¬± –¥–æ–ø—É—Å–∫)
            nominal = spec_limits['nominal']
            upper_tol = spec_limits.get('tolerance_upper', 0)
            lower_tol = spec_limits.get('tolerance_lower', 0)
            USL = nominal + upper_tol
            LSL = nominal + lower_tol
        else:
            # –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–µ–¥–µ–ª—ã
            USL = spec_limits.get('max', np.inf)
            LSL = spec_limits.get('min', -np.inf)
    else:
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–µ–ª—ã [min, max]
        LSL, USL = spec_limits
    
    # –ò–Ω–¥–µ–∫—Å—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if USL != np.inf and LSL != -np.inf:
        Cp = (USL - LSL) / (6 * std)
        Cpu = (USL - mean) / (3 * std)
        Cpl = (mean - LSL) / (3 * std)
        Cpk = min(Cpu, Cpl)
    else:
        Cp = np.nan
        if USL != np.inf:
            Cpu = (USL - mean) / (3 * std)
            Cpk = Cpu
        elif LSL != -np.inf:
            Cpl = (mean - LSL) / (3 * std)
            Cpk = Cpl
        else:
            Cpk = np.nan
    
    # –î–æ–ª—è –±—Ä–∞–∫–∞
    if USL != np.inf and LSL != -np.inf:
        defect_rate = (values < LSL).sum() + (values > USL).sum()
    elif USL != np.inf:
        defect_rate = (values > USL).sum()
    elif LSL != -np.inf:
        defect_rate = (values < LSL).sum()
    else:
        defect_rate = 0
    
    defect_percentage = defect_rate / len(values) * 100
    
    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –¥–æ–ª—è –±—Ä–∞–∫–∞ (–ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏)
    if USL != np.inf and LSL != -np.inf:
        predicted_defects = (1 - stats.norm.cdf(USL, mean, std) + 
                           stats.norm.cdf(LSL, mean, std)) * 100
    elif USL != np.inf:
        predicted_defects = (1 - stats.norm.cdf(USL, mean, std)) * 100
    elif LSL != -np.inf:
        predicted_defects = stats.norm.cdf(LSL, mean, std) * 100
    else:
        predicted_defects = 0
    
    results = {
        'parameter': parameter,
        'mean': mean,
        'std': std,
        'LSL': LSL if LSL != -np.inf else None,
        'USL': USL if USL != np.inf else None,
        'Cp': Cp,
        'Cpk': Cpk,
        'actual_defects': defect_percentage,
        'predicted_defects': predicted_defects,
        'sample_size': len(values)
    }
    
    return results

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
parameters_to_analyze = {
    'inner_diameter': bearing_specs['inner_diameter'],
    'outer_diameter': bearing_specs['outer_diameter'], 
    'width': bearing_specs['width'],
    'radial_clearance': bearing_specs['radial_clearance'],
    'hardness_rings': bearing_specs['hardness']['rings'],
    'surface_roughness': {'max': 0.32},
    'vibration_Z1': {'max': 13}
}

capability_results = []

for param, spec in parameters_to_analyze.items():
    if param in production_data.columns:
        result = analyze_process_capability(production_data, param, spec)
        capability_results.append(result)
        
        print(f"\\n{param.upper().replace('_', ' ')}:")
        print("-" * 30)
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {result['mean']:.4f}")
        print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {result['std']:.4f}")
        if result['LSL'] is not None:
            print(f"  –ù–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª (LSL): {result['LSL']:.4f}")
        if result['USL'] is not None:
            print(f"  –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª (USL): {result['USL']:.4f}")
        if not np.isnan(result['Cp']):
            print(f"  Cp (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å): {result['Cp']:.3f}")
        if not np.isnan(result['Cpk']):
            print(f"  Cpk (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å): {result['Cpk']:.3f}")
        print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±—Ä–∞–∫: {result['actual_defects']:.2f}%")
        print(f"  –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±—Ä–∞–∫: {result['predicted_defects']:.2f}%")
        
        # –û—Ü–µ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if not np.isnan(result['Cpk']):
            if result['Cpk'] >= 1.33:
                assessment = "‚úÖ –ü–†–û–¶–ï–°–° –°–ü–û–°–û–ë–ï–ù"
            elif result['Cpk'] >= 1.0:
                assessment = "‚ö†Ô∏è  –ü–†–û–¶–ï–°–° –ß–ê–°–¢–ò–ß–ù–û –°–ü–û–°–û–ë–ï–ù"
            else:
                assessment = "‚ùå –ü–†–û–¶–ï–°–° –ù–ï –°–ü–û–°–û–ë–ï–ù"
            print(f"  –û—Ü–µ–Ω–∫–∞: {assessment}")

# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
capability_df = pd.DataFrame(capability_results)
capability_df = capability_df.round(3)

print("\\n" + "="*60)
print("–°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –°–ü–û–°–û–ë–ù–û–°–¢–ò –ü–†–û–¶–ï–°–°–ê")
print("="*60)

print("\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ö–æ—Ä–æ—à–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é (Cpk ‚â• 1.33):")
good_processes = capability_df[capability_df['Cpk'] >= 1.33]
for _, row in good_processes.iterrows():
    print(f"  ‚úÖ {row['parameter']}: Cpk = {row['Cpk']:.3f}")

print("\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è (1.0 ‚â§ Cpk < 1.33):")
attention_processes = capability_df[(capability_df['Cpk'] >= 1.0) & (capability_df['Cpk'] < 1.33)]
for _, row in attention_processes.iterrows():
    print(f"  ‚ö†Ô∏è  {row['parameter']}: Cpk = {row['Cpk']:.3f}")

print("\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è (Cpk < 1.0):")
poor_processes = capability_df[capability_df['Cpk'] < 1.0]
for _, row in poor_processes.iterrows():
    print(f"  ‚ùå {row['parameter']}: Cpk = {row['Cpk']:.3f}")

# –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
overall_cpk = capability_df['Cpk'].mean()
print(f"\\n–û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–¶–ï–°–°–ê:")
print(f"–°—Ä–µ–¥–Ω–∏–π Cpk: {overall_cpk:.3f}")

if overall_cpk >= 1.33:
    print("üéâ –û–¢–õ–ò–ß–ù–û–ï –ö–ê–ß–ï–°–¢–í–û –ü–†–û–ò–ó–í–û–î–°–¢–í–ê")
elif overall_cpk >= 1.0:
    print("üëç –•–û–†–û–®–ï–ï –ö–ê–ß–ï–°–¢–í–û, –ï–°–¢–¨ –†–ï–ó–ï–†–í–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø")
else:
    print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –°–ï–†–¨–ï–ó–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–ê")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 3: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞</h4>
        <pre><code># –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –®—É—Ö–∞—Ä—Ç–∞ –ø–æ –ì–û–°–¢ –† 50779.42-99
print("\\n" + "="*60)
print("–ö–û–ù–¢–†–û–õ–¨–ù–´–ï –ö–ê–†–¢–´ –®–£–•–ê–†–¢–ê")
print("–°—Ç–∞–Ω–¥–∞—Ä—Ç: –ì–û–°–¢ –† 50779.42-99")
print("="*60)

def create_control_charts(data, parameter, subgroup_size=5):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã XÃÑ-R –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    
    values = data[parameter].values
    n_subgroups = len(values) // subgroup_size
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—ã
    subgroups = values[:n_subgroups * subgroup_size].reshape(n_subgroups, subgroup_size)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏ —Ä–∞–∑–º–∞—Ö–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã
    subgroup_means = np.mean(subgroups, axis=1)
    subgroup_ranges = np.ptp(subgroups, axis=1)  # —Ä–∞–∑–º–∞—Ö = max - min
    
    # –û–±—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    grand_mean = np.mean(subgroup_means)
    mean_range = np.mean(subgroup_ranges)
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü (–ø–æ –ì–û–°–¢ –† 50779.42-99)
    control_chart_constants = {
        2: {'A2': 1.880, 'D3': 0, 'D4': 3.267},
        3: {'A2': 1.023, 'D3': 0, 'D4': 2.574},
        4: {'A2': 0.729, 'D3': 0, 'D4': 2.282},
        5: {'A2': 0.577, 'D3': 0, 'D4': 2.114},
        6: {'A2': 0.483, 'D3': 0, 'D4': 2.004},
        7: {'A2': 0.419, 'D3': 0.076, 'D4': 1.924},
        8: {'A2': 0.373, 'D3': 0.136, 'D4': 1.864},
        9: {'A2': 0.337, 'D3': 0.184, 'D4': 1.816},
        10: {'A2': 0.308, 'D3': 0.223, 'D4': 1.777}
    }
    
    constants = control_chart_constants[subgroup_size]
    A2, D3, D4 = constants['A2'], constants['D3'], constants['D4']
    
    # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞—Ä—Ç—ã —Å—Ä–µ–¥–Ω–∏—Ö (XÃÑ)
    ucl_xbar = grand_mean + A2 * mean_range
    lcl_xbar = grand_mean - A2 * mean_range
    
    # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞—Ä—Ç—ã —Ä–∞–∑–º–∞—Ö–æ–≤ (R)
    ucl_r = D4 * mean_range
    lcl_r = D3 * mean_range
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    xbar_out_of_control = ((subgroup_means > ucl_xbar) | (subgroup_means < lcl_xbar)).sum()
    r_out_of_control = ((subgroup_ranges > ucl_r) | (subgroup_ranges < lcl_r)).sum()
    
    results = {
        'parameter': parameter,
        'subgroup_size': subgroup_size,
        'n_subgroups': n_subgroups,
        'grand_mean': grand_mean,
        'mean_range': mean_range,
        'subgroup_means': subgroup_means,
        'subgroup_ranges': subgroup_ranges,
        'xbar_ucl': ucl_xbar,
        'xbar_lcl': lcl_xbar,
        'r_ucl': ucl_r,
        'r_lcl': lcl_r,
        'xbar_violations': xbar_out_of_control,
        'r_violations': r_out_of_control
    }
    
    return results

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
key_parameters = ['inner_diameter', 'outer_diameter', 'radial_clearance']

control_chart_results = {}

for param in key_parameters:
    if param in production_data.columns:
        result = create_control_charts(production_data, param, subgroup_size=5)
        control_chart_results[param] = result
        
        print(f"\\n–ö–û–ù–¢–†–û–õ–¨–ù–´–ï –ö–ê–†–¢–´ –î–õ–Ø {param.upper().replace('_', ' ')}:")
        print("-" * 50)
        print(f"–†–∞–∑–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã: {result['subgroup_size']}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–≥—Ä—É–ø–ø: {result['n_subgroups']}")
        print(f"\\n–ö–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö (XÃÑ):")
        print(f"  –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (XÃÑÃÑ): {result['grand_mean']:.4f}")
        print(f"  –í–µ—Ä—Ö–Ω—è—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: {result['xbar_ucl']:.4f}")
        print(f"  –ù–∏–∂–Ω—è—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: {result['xbar_lcl']:.4f}")
        print(f"  –ù–∞—Ä—É—à–µ–Ω–∏–π: {result['xbar_violations']}")
        
        print(f"\\n–ö–∞—Ä—Ç–∞ —Ä–∞–∑–º–∞—Ö–æ–≤ (R):")
        print(f"  –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (RÃÑ): {result['mean_range']:.4f}")
        print(f"  –í–µ—Ä—Ö–Ω—è—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: {result['r_ucl']:.4f}")
        print(f"  –ù–∏–∂–Ω—è—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: {result['r_lcl']:.4f}")
        print(f"  –ù–∞—Ä—É—à–µ–Ω–∏–π: {result['r_violations']}")
        
        # –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç–∏
        total_violations = result['xbar_violations'] + result['r_violations']
        if total_violations == 0:
            print("  ‚úÖ –ü–†–û–¶–ï–°–° –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò –£–ü–†–ê–í–õ–Ø–ï–ú")
        elif total_violations <= 2:
            print("  ‚ö†Ô∏è  –ü–†–û–¶–ï–°–° –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø (–µ–¥–∏–Ω–∏—á–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è)")
        else:
            print("  ‚ùå –ü–†–û–¶–ï–°–° –ù–ï –£–ü–†–ê–í–õ–Ø–ï–ú (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è)")

# –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –ò –ü–ê–¢–¢–ï–†–ù–û–í")
print("="*60)

def detect_patterns(values, control_limits):
    """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö"""
    
    ucl, lcl = control_limits
    center = (ucl + lcl) / 2
    
    patterns = {
        'trend_up': 0,      # 6 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—Ç
        'trend_down': 0,    # 6 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥ —É–±—ã–≤–∞—é—Ç
        'shift_up': 0,      # 8 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥ –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
        'shift_down': 0,    # 8 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥ –Ω–∏–∂–µ —Ü–µ–Ω—Ç—Ä–∞
        'alternating': 0,   # 14 —Ç–æ—á–µ–∫ –ø–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ –≤—ã—à–µ/–Ω–∏–∂–µ —Ü–µ–Ω—Ç—Ä–∞
        'near_limits': 0    # 2 –∏–∑ 3 —Ç–æ—á–µ–∫ –≤ –∑–æ–Ω–µ A (–±–ª–∏–∑–∫–æ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º)
    }
    
    # –ó–æ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    zone_a_upper = center + 2/3 * (ucl - center)
    zone_a_lower = center - 2/3 * (center - lcl)
    
    n = len(values)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ (6 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥)
    for i in range(n - 5):
        if all(values[i+j] < values[i+j+1] for j in range(5)):
            patterns['trend_up'] += 1
        if all(values[i+j] > values[i+j+1] for j in range(5)):
            patterns['trend_down'] += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–¥–≤–∏–≥–æ–≤ (8 —Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥)
    for i in range(n - 7):
        if all(values[i+j] > center for j in range(8)):
            patterns['shift_up'] += 1
        if all(values[i+j] < center for j in range(8)):
            patterns['shift_down'] += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º (2 –∏–∑ 3 —Ç–æ—á–µ–∫ –≤ –∑–æ–Ω–µ A)
    for i in range(n - 2):
        points_in_zone_a = sum(1 for j in range(3) 
                              if values[i+j] > zone_a_upper or values[i+j] < zone_a_lower)
        if points_in_zone_a >= 2:
            patterns['near_limits'] += 1
    
    return patterns

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
for param, result in control_chart_results.items():
    print(f"\\n–ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø {param.upper().replace('_', ' ')}:")
    print("-" * 40)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã —Å—Ä–µ–¥–Ω–∏—Ö
    xbar_patterns = detect_patterns(
        result['subgroup_means'], 
        (result['xbar_ucl'], result['xbar_lcl'])
    )
    
    print("–ö–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö (XÃÑ):")
    for pattern, count in xbar_patterns.items():
        if count > 0:
            print(f"  {pattern}: {count} —Å–ª—É—á–∞–µ–≤")
    
    if sum(xbar_patterns.values()) == 0:
        print("  ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç—ã —Ä–∞–∑–º–∞—Ö–æ–≤
    r_patterns = detect_patterns(
        result['subgroup_ranges'],
        (result['r_ucl'], result['r_lcl'])
    )
    
    print("–ö–∞—Ä—Ç–∞ —Ä–∞–∑–º–∞—Ö–æ–≤ (R):")
    for pattern, count in r_patterns.items():
        if count > 0:
            print(f"  {pattern}: {count} —Å–ª—É—á–∞–µ–≤")
    
    if sum(r_patterns.values()) == 0:
        print("  ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤</h4>
        <pre><code># –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–Æ–©–ò–• –§–ê–ö–¢–û–†–û–í")
print("="*60)

def analyze_factor_effects(data, parameter, factors):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    
    results = {}
    
    for factor in factors:
        if factor in data.columns:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–∫—Ç–æ—Ä—É
            groups = data.groupby(factor)[parameter]
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
            group_stats = groups.agg(['mean', 'std', 'count']).round(4)
            
            # ANOVA –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–∏–π
            group_values = [group.values for name, group in groups]
            f_stat, p_value = stats.f_oneway(*group_values)
            
            # –†–∞–∑–º–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ (eta-squared)
            ss_between = sum(len(group) * (group.mean() - data[parameter].mean())**2 
                           for group in group_values)
            ss_total = sum((data[parameter] - data[parameter].mean())**2)
            eta_squared = ss_between / ss_total
            
            results[factor] = {
                'group_stats': group_stats,
                'f_statistic': f_stat,
                'p_value': p_value,
                'eta_squared': eta_squared,
                'significant': p_value < 0.05
            }
    
    return results

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
factors_to_analyze = ['shift', 'operator', 'machine']
parameters_for_factor_analysis = ['inner_diameter', 'outer_diameter', 'surface_roughness']

for param in parameters_for_factor_analysis:
    if param in production_data.columns:
        print(f"\\n–ê–ù–ê–õ–ò–ó –§–ê–ö–¢–û–†–û–í –î–õ–Ø {param.upper().replace('_', ' ')}:")
        print("-" * 50)
        
        factor_results = analyze_factor_effects(production_data, param, factors_to_analyze)
        
        for factor, result in factor_results.items():
            print(f"\\n{factor.upper()}:")
            print(f"  F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {result['f_statistic']:.3f}")
            print(f"  p-–∑–Ω–∞—á–µ–Ω–∏–µ: {result['p_value']:.6f}")
            print(f"  –†–∞–∑–º–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ (Œ∑¬≤): {result['eta_squared']:.4f}")
            
            if result['significant']:
                print("  ‚úÖ –ó–ù–ê–ß–ò–ú–û–ï –í–õ–ò–Ø–ù–ò–ï")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
                print("  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º:")
                for group_name, stats in result['group_stats'].iterrows():
                    print(f"    {factor} {group_name}: Œº={stats['mean']:.4f}, œÉ={stats['std']:.4f}, n={stats['count']}")
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –∏ —Ö—É–¥—à—É—é –≥—Ä—É–ø–ø—ã
                best_group = result['group_stats']['mean'].idxmin() if 'diameter' in param else result['group_stats']['mean'].idxmin()
                worst_group = result['group_stats']['mean'].idxmax() if 'diameter' in param else result['group_stats']['mean'].idxmax()
                
                print(f"    üèÜ –õ—É—á—à–∏–π {factor}: {best_group}")
                print(f"    ‚ö†Ô∏è  –•—É–¥—à–∏–π {factor}: {worst_group}")
            else:
                print("  ‚ùå –í–ª–∏—è–Ω–∏–µ –Ω–µ –∑–Ω–∞—á–∏–º–æ")

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
print("\\n" + "="*60)
print("–ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ê–†–ê–ú–ï–¢–†–û–í –ö–ê–ß–ï–°–¢–í–ê")
print("="*60)

quality_parameters = ['inner_diameter', 'outer_diameter', 'width', 'radial_clearance', 
                     'hardness_rings', 'surface_roughness', 'vibration_Z1']

# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
correlation_matrix = production_data[quality_parameters].corr()

print("\\n–ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–ê–Ø –ú–ê–¢–†–ò–¶–ê:")
print("-" * 25)

# –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–∏–º—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
significant_correlations = []
for i in range(len(quality_parameters)):
    for j in range(i+1, len(quality_parameters)):
        param1 = quality_parameters[i]
        param2 = quality_parameters[j]
        corr = correlation_matrix.loc[param1, param2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        n = len(production_data)
        t_stat = corr * np.sqrt((n-2)/(1-corr**2))
        p_value = 2 * (1 - stats.t.cdf(abs(t_stat), n-2))
        
        if abs(corr) > 0.1 and p_value < 0.05:  # –∑–Ω–∞—á–∏–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            significant_correlations.append({
                'param1': param1,
                'param2': param2,
                'correlation': corr,
                'p_value': p_value
            })

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
significant_correlations.sort(key=lambda x: abs(x['correlation']), reverse=True)

print("–ó–Ω–∞—á–∏–º—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (|r| > 0.1, p < 0.05):")
for corr_data in significant_correlations:
    param1 = corr_data['param1'].replace('_', ' ')
    param2 = corr_data['param2'].replace('_', ' ')
    r = corr_data['correlation']
    p = corr_data['p_value']
    
    direction = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if r > 0 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
    strength = "—Å–∏–ª—å–Ω–∞—è" if abs(r) > 0.7 else "—É–º–µ—Ä–µ–Ω–Ω–∞—è" if abs(r) > 0.3 else "—Å–ª–∞–±–∞—è"
    
    print(f"  {param1} ‚Üî {param2}: r={r:.3f} ({strength} {direction}, p={p:.4f})")

if not significant_correlations:
    print("  –ó–Ω–∞—á–∏–º—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ - —Ç—Ä–µ–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
print("\\n" + "="*60)
print("–í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó –ü–†–û–¶–ï–°–°–ê")
print("="*60)

def analyze_time_trends(data, parameter):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
    data_with_hour = data.copy()
    data_with_hour['hour'] = data_with_hour['timestamp'].dt.hour
    
    hourly_stats = data_with_hour.groupby('hour')[parameter].agg(['mean', 'std']).reset_index()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–Ω–¥–∞ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º)
    time_correlation = stats.pearsonr(hourly_stats['hour'], hourly_stats['mean'])
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–º–µ–Ω–∞–º
    shift_stats = data_with_hour.groupby('shift')[parameter].agg(['mean', 'std', 'count'])
    
    # ANOVA –ø–æ —Å–º–µ–Ω–∞–º
    shift_groups = [group[parameter].values for name, group in data_with_hour.groupby('shift')]
    f_stat, p_value = stats.f_oneway(*shift_groups)
    
    return {
        'hourly_stats': hourly_stats,
        'time_correlation': time_correlation,
        'shift_stats': shift_stats,
        'shift_anova': {'f_stat': f_stat, 'p_value': p_value}
    }

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
for param in ['inner_diameter', 'surface_roughness']:
    if param in production_data.columns:
        print(f"\\n–í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó –î–õ–Ø {param.upper().replace('_', ' ')}:")
        print("-" * 45)
        
        trend_results = analyze_time_trends(production_data, param)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–¥
        corr, p_val = trend_results['time_correlation']
        print(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º: r={corr:.3f}, p={p_val:.4f}")
        
        if abs(corr) > 0.3 and p_val < 0.05:
            trend_direction = "–≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π" if corr > 0 else "—É–±—ã–≤–∞—é—â–∏–π"
            print(f"  ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω {trend_direction} —Ç—Ä–µ–Ω–¥")
        else:
            print("  ‚ùå –ó–Ω–∞—á–∏–º—ã–π —Ç—Ä–µ–Ω–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        
        # –†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏
        shift_anova = trend_results['shift_anova']
        print(f"\\n–†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏:")
        print(f"  F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {shift_anova['f_stat']:.3f}")
        print(f"  p-–∑–Ω–∞—á–µ–Ω–∏–µ: {shift_anova['p_value']:.4f}")
        
        if shift_anova['p_value'] < 0.05:
            print("  ‚úÖ –ó–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏")
            
            shift_stats = trend_results['shift_stats']
            print("  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–º–µ–Ω–∞–º:")
            for shift, stats in shift_stats.iterrows():
                print(f"    –°–º–µ–Ω–∞ {shift}: Œº={stats['mean']:.4f}, œÉ={stats['std']:.4f}")
        else:
            print("  ‚ùå –†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏ –Ω–µ –∑–Ω–∞—á–∏–º—ã")</code></pre>
      </div>
      
      <div class="code-block">
        <h4>–®–∞–≥ 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã</h4>
        <pre><code># –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
print("\\n" + "="*80)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø AI-–°–ò–°–¢–ï–ú–´ –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê")
print("="*80)

def generate_quality_recommendations(capability_results, control_chart_results, factor_results):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    recommendations = {
        'critical_parameters': [],
        'process_improvements': [],
        'monitoring_priorities': [],
        'ai_system_features': [],
        'compliance_actions': []
    }
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for result in capability_results:
        if result['Cpk'] < 1.0:
            recommendations['critical_parameters'].append({
                'parameter': result['parameter'],
                'cpk': result['Cpk'],
                'action': '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞',
                'priority': '–í—ã—Å–æ–∫–∏–π'
            })
        elif result['Cpk'] < 1.33:
            recommendations['critical_parameters'].append({
                'parameter': result['parameter'],
                'cpk': result['Cpk'],
                'action': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
                'priority': '–°—Ä–µ–¥–Ω–∏–π'
            })
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞
    if any(result['Cpk'] < 1.33 for result in capability_results):
        recommendations['process_improvements'].extend([
            '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            '–û–±—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –º–µ—Ç–æ–¥–∞–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞',
            '–ê–Ω–∞–ª–∏–∑ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤–∞—Ä–∏–∞—Ü–∏–∏',
            '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏'
        ])
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    high_priority_params = [r['parameter'] for r in capability_results if r['Cpk'] < 1.33]
    if high_priority_params:
        recommendations['monitoring_priorities'] = high_priority_params
    
    # –§—É–Ω–∫—Ü–∏–∏ AI-—Å–∏—Å—Ç–µ–º—ã
    recommendations['ai_system_features'].extend([
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
        '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤',
        '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤',
        '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö',
        '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ (MES/ERP)',
        '–ú–æ–±–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤'
    ])
    
    # –î–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
    recommendations['compliance_actions'].extend([
        '–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ –ì–û–°–¢ 520-2002',
        '–í–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤',
        '–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞',
        '–†–µ–≥—É–ª—è—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞',
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ ISO 9001'
    ])
    
    return recommendations

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
recommendations = generate_quality_recommendations(
    capability_results, 
    control_chart_results, 
    {}  # factor_results –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
)

print("\\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
print("-" * 30)
if recommendations['critical_parameters']:
    for param_info in recommendations['critical_parameters']:
        param = param_info['parameter'].replace('_', ' ').title()
        cpk = param_info['cpk']
        action = param_info['action']
        priority = param_info['priority']
        print(f"  üìä {param}")
        print(f"     Cpk: {cpk:.3f}")
        print(f"     –î–µ–π—Å—Ç–≤–∏–µ: {action}")
        print(f"     –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
        print()
else:
    print("  ‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–µ—é—Ç –ø—Ä–∏–µ–º–ª–µ–º—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞")

print("\\nüîß –£–õ–£–ß–®–ï–ù–ò–Ø –ü–†–û–¶–ï–°–°–ê:")
print("-" * 25)
for i, improvement in enumerate(recommendations['process_improvements'], 1):
    print(f"  {i}. {improvement}")

print("\\nüìä –ü–†–ò–û–†–ò–¢–ï–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
print("-" * 30)
if recommendations['monitoring_priorities']:
    for i, param in enumerate(recommendations['monitoring_priorities'], 1):
        param_name = param.replace('_', ' ').title()
        print(f"  {i}. {param_name}")
else:
    print("  ‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º")

print("\\nü§ñ –§–£–ù–ö–¶–ò–ò AI-–°–ò–°–¢–ï–ú–´:")
print("-" * 25)
for i, feature in enumerate(recommendations['ai_system_features'], 1):
    print(f"  {i}. {feature}")

print("\\nüìã –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–¢–ê–ù–î–ê–†–¢–ê–ú:")
print("-" * 30)
for i, action in enumerate(recommendations['compliance_actions'], 1):
    print(f"  {i}. {action}")

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ AI-—Å–∏—Å—Ç–µ–º—ã
print("\\n" + "="*80)
print("–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê AI-–°–ò–°–¢–ï–ú–´ –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê")
print("="*80)

ai_system_architecture = {
    'data_collection': {
        'sensors': [
            '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ-–∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã (–ö–ò–ú)',
            '–õ–∞–∑–µ—Ä–Ω—ã–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤',
            '–î–∞—Ç—á–∏–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ —à—É–º–∞',
            '–¢–≤–µ—Ä–¥–æ–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ',
            '–ü—Ä–æ—Ñ–∏–ª–æ–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏'
        ],
        'protocols': ['Modbus TCP/IP', 'OPC UA', 'Ethernet/IP', 'MQTT'],
        'frequency': '–ö–∞–∂–¥–æ–µ –∏–∑–¥–µ–ª–∏–µ + –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞'
    },
    'data_processing': {
        'preprocessing': [
            '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –∞–Ω–æ–º–∞–ª–∏–π',
            '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
            '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π',
            '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤'
        ],
        'feature_engineering': [
            '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å—Ä–µ–¥–Ω–µ–µ, –¥–∏—Å–ø–µ—Ä—Å–∏—è, –∞—Å–∏–º–º–µ—Ç—Ä–∏—è)',
            '–°–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –∏ —Ç—Ä–µ–Ω–¥—ã',
            '–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (FFT)',
            '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏'
        ]
    },
    'ml_models': {
        'classification': [
            'Random Forest –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤',
            'SVM –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π',
            'Neural Networks –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'
        ],
        'regression': [
            'Linear Regression –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞',
            'LSTM –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤',
            'Gaussian Process –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏'
        ],
        'clustering': [
            'K-means –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤',
            'DBSCAN –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π'
        ]
    },
    'decision_support': {
        'statistical_control': [
            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã',
            '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω',
            '–†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞'
        ],
        'predictive_analytics': [
            '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏',
            '–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞'
        ]
    },
    'integration': {
        'mes_erp': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
        'scada': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'quality_management': '–°–≤—è–∑—å —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞',
        'mobile_apps': '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤'
    }
}

print("\\nüì° –°–ë–û–† –î–ê–ù–ù–´–•:")
print("-" * 20)
print("–î–∞—Ç—á–∏–∫–∏ –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã:")
for sensor in ai_system_architecture['data_collection']['sensors']:
    print(f"  ‚Ä¢ {sensor}")

print("\\n–ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏:")
for protocol in ai_system_architecture['data_collection']['protocols']:
    print(f"  ‚Ä¢ {protocol}")

print("\\nüîÑ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•:")
print("-" * 25)
print("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:")
for step in ai_system_architecture['data_processing']['preprocessing']:
    print(f"  ‚Ä¢ {step}")

print("\\n–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
for feature in ai_system_architecture['data_processing']['feature_engineering']:
    print(f"  ‚Ä¢ {feature}")

print("\\nüß† –ú–û–î–ï–õ–ò –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø:")
print("-" * 35)
print("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:")
for model in ai_system_architecture['ml_models']['classification']:
    print(f"  ‚Ä¢ {model}")

print("\\n–†–µ–≥—Ä–µ—Å—Å–∏—è:")
for model in ai_system_architecture['ml_models']['regression']:
    print(f"  ‚Ä¢ {model}")

print("\\nüìä –ü–û–î–î–ï–†–ñ–ö–ê –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–ô:")
print("-" * 40)
print("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
for feature in ai_system_architecture['decision_support']['statistical_control']:
    print(f"  ‚Ä¢ {feature}")

print("\\n–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:")
for feature in ai_system_architecture['decision_support']['predictive_analytics']:
    print(f"  ‚Ä¢ {feature}")

print("\\nüîó –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–ò–°–¢–ï–ú–ê–ú–ò:")
print("-" * 35)
for system, description in ai_system_architecture['integration'].items():
    print(f"  ‚Ä¢ {system.upper()}: {description}")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*80)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï AI-–°–ò–°–¢–ï–ú–´")
print("="*80)

economic_analysis = {
    'current_state': {
        'manual_inspection_cost': 150,  # —Ä—É–±/—á–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        'operators_per_shift': 3,
        'shifts_per_day': 3,
        'working_days_per_year': 250,
        'defect_rate': 2.5,  # %
        'cost_per_defective_bearing': 1500,  # —Ä—É–±
        'production_volume': 50000  # –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –≤ –≥–æ–¥
    },
    'ai_system_benefits': {
        'defect_reduction': 60,  # % —Å–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞
        'inspection_automation': 70,  # % –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
        'early_detection_savings': 30,  # % —ç–∫–æ–Ω–æ–º–∏–∏ –æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        'process_optimization': 15   # % —É–ª—É—á—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    },
    'implementation_costs': {
        'hardware': 2500000,  # —Ä—É–± (–¥–∞—Ç—á–∏–∫–∏, —Å–µ—Ä–≤–µ—Ä—ã, —Å–µ—Ç—å)
        'software': 1500000,  # —Ä—É–± (–ª–∏—Ü–µ–Ω–∑–∏–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
        'integration': 800000,  # —Ä—É–± (–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
        'training': 300000,   # —Ä—É–± (–æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞)
        'annual_maintenance': 400000  # —Ä—É–±/–≥–æ–¥
    }
}

# –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç
current_costs = economic_analysis['current_state']
annual_labor_cost = (current_costs['manual_inspection_cost'] * 
                    current_costs['operators_per_shift'] * 
                    current_costs['shifts_per_day'] * 
                    current_costs['working_days_per_year'])

annual_defect_cost = (current_costs['defect_rate'] / 100 * 
                     current_costs['production_volume'] * 
                     current_costs['cost_per_defective_bearing'])

total_current_annual_cost = annual_labor_cost + annual_defect_cost

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –æ—Ç AI-—Å–∏—Å—Ç–µ–º—ã
benefits = economic_analysis['ai_system_benefits']
labor_savings = annual_labor_cost * (benefits['inspection_automation'] / 100)
defect_savings = annual_defect_cost * (benefits['defect_reduction'] / 100)
early_detection_savings = annual_defect_cost * (benefits['early_detection_savings'] / 100)

total_annual_savings = labor_savings + defect_savings + early_detection_savings

# –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ
costs = economic_analysis['implementation_costs']
initial_investment = (costs['hardware'] + costs['software'] + 
                     costs['integration'] + costs['training'])

# ROI –∏ —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
net_annual_benefit = total_annual_savings - costs['annual_maintenance']
payback_period = initial_investment / net_annual_benefit
roi_5_years = ((net_annual_benefit * 5 - initial_investment) / initial_investment) * 100

print("\\nüí∞ –¢–ï–ö–£–©–ò–ï –ó–ê–¢–†–ê–¢–´ (–≤ –≥–æ–¥):")
print("-" * 30)
print(f"–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä—É—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å: {annual_labor_cost:,.0f} —Ä—É–±")
print(f"–ü–æ—Ç–µ—Ä–∏ –æ—Ç –±—Ä–∞–∫–∞: {annual_defect_cost:,.0f} —Ä—É–±")
print(f"–ò–¢–û–ì–û: {total_current_annual_cost:,.0f} —Ä—É–±")

print("\\nüí° –≠–ö–û–ù–û–ú–ò–Ø –û–¢ AI-–°–ò–°–¢–ï–ú–´ (–≤ –≥–æ–¥):")
print("-" * 40)
print(f"–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ: {labor_savings:,.0f} —Ä—É–±")
print(f"–°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –æ—Ç –±—Ä–∞–∫–∞: {defect_savings:,.0f} —Ä—É–±")
print(f"–†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º: {early_detection_savings:,.0f} —Ä—É–±")
print(f"–ò–¢–û–ì–û —ç–∫–æ–Ω–æ–º–∏—è: {total_annual_savings:,.0f} —Ä—É–±")

print("\\nüí∏ –ó–ê–¢–†–ê–¢–´ –ù–ê –í–ù–ï–î–†–ï–ù–ò–ï:")
print("-" * 25)
print(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {costs['hardware']:,.0f} —Ä—É–±")
print(f"–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ: {costs['software']:,.0f} —Ä—É–±")
print(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {costs['integration']:,.0f} —Ä—É–±")
print(f"–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {costs['training']:,.0f} —Ä—É–±")
print(f"–ò–¢–û–ì–û –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {initial_investment:,.0f} —Ä—É–±")
print(f"–ï–∂–µ–≥–æ–¥–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {costs['annual_maintenance']:,.0f} —Ä—É–±")

print("\\nüìà –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:")
print("-" * 35)
print(f"–ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_period:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 5 –ª–µ—Ç: {roi_5_years:.0f}%")

if payback_period <= 3:
    print("‚úÖ –ü–†–û–ï–ö–¢ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò –ü–†–ò–í–õ–ï–ö–ê–¢–ï–õ–ï–ù")
elif payback_period <= 5:
    print("‚ö†Ô∏è  –ü–†–û–ï–ö–¢ –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
else:
    print("‚ùå –ü–†–û–ï–ö–¢ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò –ù–ï –û–ü–†–ê–í–î–ê–ù")

print("\\n" + "="*80)
print("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–õ–Ø AI-–ê–†–•–ò–¢–ï–ö–¢–û–†–ê")
print("="*80)

print("""
üéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:

1. –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:
   ‚úÖ –û—Å–≤–æ–µ–Ω—ã –º–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (Cp, Cpk)
   ‚úÖ –ò–∑—É—á–µ–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞ –ø–æ –ì–û–°–¢
   ‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞

2. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –†–û–°–°–ò–ô–°–ö–ò–ú –°–¢–ê–ù–î–ê–†–¢–ê–ú:
   üìã –ì–û–°–¢ 520-2002 - –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏ –∫–∞—á–µ–Ω–∏—è
   üìã –ì–û–°–¢ –† –ò–°–û 5725 - —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π
   üìã –ì–û–°–¢ –† 50779.42-99 - –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
   üìã –ì–û–°–¢ 25347-2013 - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–æ–∫

3. –ü–†–û–ï–ö–¢–ò–†–û–í–ê–ù–ò–ï AI-–°–ò–°–¢–ï–ú–´:
   ü§ñ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
   ü§ñ –ú–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
   ü§ñ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π

4. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:
   üí∞ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: 2.4 –≥–æ–¥–∞
   üí∞ ROI –∑–∞ 5 –ª–µ—Ç: 208%
   üí∞ –ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: 2.1 –º–ª–Ω —Ä—É–±

5. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–í–´–ö–ò AI-–ê–†–•–ò–¢–ï–ö–¢–û–†–ê:
   üéì –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   üéì –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
   üéì –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
   üéì –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ AI-–ø—Ä–æ–µ–∫—Ç–æ–≤
   üéì –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

–ì–û–¢–û–í–ù–û–°–¢–¨ –ö –§–ò–ù–ê–õ–¨–ù–û–ú–£ –ü–†–û–ï–ö–¢–£:
–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–Ω–µ–¥—Ä–∏—Ç—å
–ø–æ–ª–Ω—É—é AI-—Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º,
–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
""")

print("\\nüöÄ –ú–û–î–£–õ–¨ 1 '–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–°–ù–û–í–´ AI' –ó–ê–í–ï–†–®–ï–ù!")
print("–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–µ–¥—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞.")</code></pre>
      </div>
      
      <h3>–ò—Ç–æ–≥–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è</h3>
      <p>–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤—ã –æ—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞:</p>
      
      <h4>üéØ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:</h4>
      <ul>
        <li><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</strong> - —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Cp/Cpk</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –®—É—Ö–∞—Ä—Ç–∞</strong> - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ –ì–û–°–¢</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤</strong> - ANOVA, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑</strong> - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
        <li><strong>–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</strong> - –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <h4>üìã –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:</h4>
      <ul>
        <li><strong>–ì–û–°–¢ 520-2002</strong> - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞–º</li>
        <li><strong>–ì–û–°–¢ –† –ò–°–û 5725</strong> - –º–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
        <li><strong>–ì–û–°–¢ –† 50779.42-99</strong> - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏</li>
        <li><strong>–ì–û–°–¢ 25347-2013</strong> - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–æ–∫</li>
      </ul>
      
      <h4>üíº –ë–∏–∑–Ω–µ—Å-–Ω–∞–≤—ã–∫–∏:</h4>
      <ul>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</strong> - —Ä–∞—Å—á–µ—Ç ROI –∏ —Å—Ä–æ–∫–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏</li>
        <li><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</strong> - —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ AI-—Å–∏—Å—Ç–µ–º–µ</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º</strong> - —Å–≤—è–∑—å —Å MES/ERP —Å–∏—Å—Ç–µ–º–∞–º–∏</li>
        <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º</strong> - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ISO 9001</li>
      </ul>
      
      <p>–≠—Ç–∏ –Ω–∞–≤—ã–∫–∏ —è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –º–æ–¥—É–ª—è—Ö –∫—É—Ä—Å–∞ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.</p>
    `
  },

  // –ú–æ–¥—É–ª—å 2: –û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
  7: {
    title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: "180 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏</h3>
      <p>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, –∫–æ–≥–¥–∞ –∏ –∫–∞–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç:</p>
      <ul>
        <li><strong>–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏:</strong> –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ä–µ–≥—Ä–µ—Å—Å–∏—è –∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</li>
        <li><strong>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å, —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, —à—É–º</li>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</strong> batch vs real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏:</strong> SCADA, MES, ERP</li>
      </ul>
      
      <h3>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</h3>
      <p>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (ML) - —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –æ–±—É—á–∞—Ç—å—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.</p>
      
      <h4>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã ML:</h4>
      <ol>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–û–±–æ–±—â–µ–Ω–∏–µ:</strong> —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:</strong> –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ —Ä–∞—Å—Ç–µ—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö</li>
      </ol>
      
      <h3>–¢–∏–ø—ã –∑–∞–¥–∞—á –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</h3>
      
      <h4>1. –û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º (Supervised Learning)</h4>
      <p>–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –∏–∑–≤–µ—Å—Ç–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.</p>
      
      <h5>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h5>
      <p>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∫–ª–∞—Å—Å–∞ –æ–±—ä–µ–∫—Ç–∞.</p>
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> "–≥–æ–¥–µ–Ω/–±—Ä–∞–∫" –ø–æ –ì–û–°–¢ 520-2002 (–ø–æ–¥—à–∏–ø–Ω–∏–∫–∏)</li>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> "–Ω–æ—Ä–º–∞/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ/–∞–≤–∞—Ä–∏—è" –ø–æ –ì–û–°–¢ –ò–°–û 10816-3</li>
        <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> —Ç–∏–ø—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤ –ø–æ –ì–û–°–¢ 23055-78</li>
      </ul>
      
      <h5>–†–µ–≥—Ä–µ—Å—Å–∏—è</h5>
      <p>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.</p>
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:</strong> –∫–í—Ç¬∑—á –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å</li>
        <li><strong>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–∫–∞–∑–∞:</strong> –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å –≤ —á–∞—Å–∞—Ö</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞</li>
      </ul>
      
      <h4>2. –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è (Unsupervised Learning)</h4>
      <p>–ê–ª–≥–æ—Ä–∏—Ç–º –∏—â–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.</p>
      
      <h5>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</h5>
      <p>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.</p>
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã:</strong> –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ç—É—Ä–±–∏–Ω—ã</li>
        <li><strong>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∏–∑–Ω–æ—Å–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π:</strong> –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Ç–∏–ø–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–±–æ—Ç—ã</li>
      </ul>
      
      <h5>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏</h5>
      <p>–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö</p>
      
      <h4>3. –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º (Reinforcement Learning)</h4>
      <p>–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ä–µ–¥–æ–π, –ø–æ–ª—É—á–∞—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.</p>
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞–º–∏:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–≤–∏–∂–µ–Ω–∏—è</li>
        <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–æ–≤</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h3>–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ML-–ø—Ä–æ–µ–∫—Ç–∞</h3>
      
      <h4>1. –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏</h4>
      <ul>
        <li>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–ª–µ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</li>
        <li>–í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—Ö–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å, –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—à–∏–±–æ–∫)</li>
        <li>–û—Ü–µ–Ω–∫–∞ ROI –∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞</li>
      </ul>
      
      <h4>2. –°–±–æ—Ä –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      <ul>
        <li><strong>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</strong> SCADA, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞, –¥–∞—Ç—á–∏–∫–∏ IoT</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:</strong> –ø–æ–ª–Ω–æ—Ç–∞, —Ç–æ—á–Ω–æ—Å—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å</li>
        <li><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> –æ—á–∏—Å—Ç–∫–∞, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, feature engineering</li>
      </ul>
      
      <h4>3. –í—ã–±–æ—Ä –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</h4>
      <ul>
        <li>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</li>
        <li>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li>–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</li>
      </ul>
      
      <h4>4. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h4>
      <ul>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> API, batch-–æ–±—Ä–∞–±–æ—Ç–∫–∞, real-time inference</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> drift detection, performance tracking</li>
        <li><strong>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† 59277-2020 "–°–∏—Å—Ç–µ–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"</h4>
      <p>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ AI-—Å–∏—Å—Ç–µ–º–∞–º –≤ –†–æ—Å—Å–∏–∏:</p>
      <ul>
        <li><strong>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</strong> –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π AI</li>
        <li><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å–±–æ—è–º –∏ –∞—Ç–∞–∫–∞–º</li>
        <li><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> –∑–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (152-–§–ó)</li>
        <li><strong>–≠—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> –Ω–µ–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å</li>
      </ul>
      
      <h4>–û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–ê—Ç–æ–º–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞:</strong> –ù–ü-001-15 (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)</li>
        <li><strong>–ê–≤–∏–∞—Ü–∏—è:</strong> –ê–ü-25 (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≤–∏–æ–Ω–∏–∫–∏)</li>
        <li><strong>–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</strong> –ì–û–°–¢ 32192-2013 (—Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ML-—Å–∏—Å—Ç–µ–º</h3>
      
      <h4>1. Batch Processing (–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</p>
      <p><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> Apache Spark, Hadoop, Python pandas</p>
      
      <h4>2. Real-time Processing (–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏</p>
      <p><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> Apache Kafka, Redis, TensorFlow Serving</p>
      
      <h4>3. Edge Computing (–ì—Ä–∞–Ω–∏—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ä–æ–±–æ—Ç—ã, —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã</p>
      <p><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> TensorFlow Lite, ONNX Runtime, NVIDIA Jetson</p>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ML-–ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
      
      <h4>–¢–∏–ø–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:</h4>
      <ul>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞:</strong> 2-5% —ç–∫–æ–Ω–æ–º–∏–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</strong> 10-20% —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:</strong> 5-15% —ç–∫–æ–Ω–æ–º–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏</li>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ OEE:</strong> 3-8% —É–≤–µ–ª–∏—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h4>–†–∞—Å—á–µ—Ç ROI –¥–ª—è ML-–ø—Ä–æ–µ–∫—Ç–∞:</h4>
      <pre><code>ROI = (–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç - –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç) / –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç √ó 100%</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∑–∞–≤–æ–¥–∞:</strong></p>
      <ul>
        <li>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ ML-–ø—Ä–æ–µ–∫—Ç: 5 –º–ª–Ω —Ä—É–±.</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –Ω–∞ 3%: 15 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏: 8 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>ROI = (23 - 5) / 5 √ó 100% = 360%</li>
        <li>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: 5 / 23 = 0.22 –≥–æ–¥–∞ (2.6 –º–µ—Å—è—Ü–∞)</li>
      </ul>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h3>
      
      <h4>–ó–∞–¥–∞—á–∞</h4>
      <p>–í—ã - AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –Ω–∞ –∑–∞–≤–æ–¥–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã.</p>
      
      <h4>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
      <p>–£ –≤–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥:</p>
      <ul>
        <li><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ—Å—Ç—å, –≤–∏–±—Ä–∞—Ü–∏—è</li>
        <li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—è:</strong> —Ä–∞–∑–º–µ—Ä—ã, —Ç–≤–µ—Ä–¥–æ—Å—Ç—å, —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å</li>
        <li><strong>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –û–¢–ö:</strong> "–≥–æ–¥–µ–Ω", "–±—Ä–∞–∫", "—É—Å–ª–æ–≤–Ω–æ –≥–æ–¥–µ–Ω"</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–æ–º–∫–∞—Ö:</strong> –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–æ –æ—Ç–∫–∞–∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h4>–ó–∞–¥–∞–Ω–∏—è</h4>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h5>
      <p>–°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø—Ä–æ—Ü–µ—Å—Å–∞.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 2: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–∫–∞–∑–∞</h5>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 3: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã</h5>
      <p>–í—ã–¥–µ–ª–∏—Ç–µ —Ç–∏–ø–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 4: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</h5>
      <p>–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ML-—Å–∏—Å—Ç–µ–º—ã —Å —É—á–µ—Ç–æ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.</p>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans
from sklearn.metrics import classification_report, mean_squared_error
import warnings
warnings.filterwarnings('ignore')

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
np.random.seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
n_samples = 1000

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ–∫–∞—Ç–∫–∏ (¬∞C) - –ø–æ –ì–û–°–¢ 380-2005
temperature = np.random.normal(1150, 50, n_samples)

# –î–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫–∞—Ç–∫–∏ (–ú–ü–∞) 
pressure = np.random.normal(250, 25, n_samples)

# –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫–∞—Ç–∫–∏ (–º/–º–∏–Ω)
speed = np.random.normal(15, 2, n_samples)

# –í–∏–±—Ä–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–º–∫–º) - –ø–æ –ì–û–°–¢ –ò–°–û 10816-3
vibration = np.random.normal(30, 10, n_samples)

# –°–æ–∑–¥–∞–µ–º DataFrame
data = pd.DataFrame({
    'temperature': temperature,
    'pressure': pressure, 
    'speed': speed,
    'vibration': vibration
})

# –ó–∞–¥–∞–Ω–∏–µ 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
print("=== –ó–ê–î–ê–ù–ò–ï 1: –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ö–ê–ß–ï–°–¢–í–ê ===")

# –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# –õ–æ–≥–∏–∫–∞: —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
quality_score = (
    (np.abs(temperature - 1150) < 30) * 0.3 +  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ—Ä–º–µ
    (np.abs(pressure - 250) < 20) * 0.3 +      # –î–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ  
    (speed > 12) * 0.2 +                       # –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è
    (vibration < 40) * 0.2                     # –í–∏–±—Ä–∞—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã
)

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ì–û–°–¢: –≥–æ–¥–µ–Ω/—É—Å–ª–æ–≤–Ω–æ –≥–æ–¥–µ–Ω/–±—Ä–∞–∫
quality = []
for score in quality_score:
    if score >= 0.8:
        quality.append('–≥–æ–¥–µ–Ω')
    elif score >= 0.5:
        quality.append('—É—Å–ª–æ–≤–Ω–æ –≥–æ–¥–µ–Ω')
    else:
        quality.append('–±—Ä–∞–∫')

data['quality'] = quality

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
X = data[['temperature', 'pressure', 'speed', 'vibration']]
y = data['quality']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Random Forest –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
y_pred = rf_classifier.predict(X_test)
print("–û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:")
print(classification_report(y_test, y_pred))

# –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_importance = pd.DataFrame({
    'feature': X.columns,
    'importance': rf_classifier.feature_importances_
}).sort_values('importance', ascending=False)

print("\\n–í–∞–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞:")
for _, row in feature_importance.iterrows():
    print(f"{row['feature']}: {row['importance']:.3f}")

print("\\n" + "="*50)

# –ó–∞–¥–∞–Ω–∏–µ 2: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–∫–∞–∑–∞
print("=== –ó–ê–î–ê–ù–ò–ï 2: –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ò –î–û –û–¢–ö–ê–ó–ê ===")

# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –¥–æ –æ—Ç–∫–∞–∑–∞ (—á–∞—Å—ã)
# –õ–æ–≥–∏–∫–∞: –≤—ã—Å–æ–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–æ–∫—Ä–∞—â–∞—é—Ç —Ä–µ—Å—É—Ä—Å
base_lifetime = 8760  # –ë–∞–∑–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å 1 –≥–æ–¥ –≤ —á–∞—Å–∞—Ö

lifetime_factors = (
    1.0 - (vibration - 30) / 100 * 0.5 +      # –í–ª–∏—è–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏
    1.0 - np.abs(temperature - 1150) / 200 * 0.3 +  # –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    1.0 - np.abs(pressure - 250) / 100 * 0.2        # –í–ª–∏—è–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
lifetime = base_lifetime * lifetime_factors * np.random.normal(1, 0.1, n_samples)
lifetime = np.clip(lifetime, 1000, 15000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏

data['lifetime_hours'] = lifetime

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
X_lifetime = data[['temperature', 'pressure', 'speed', 'vibration']]
y_lifetime = data['lifetime_hours']

X_train_lt, X_test_lt, y_train_lt, y_test_lt = train_test_split(
    X_lifetime, y_lifetime, test_size=0.3, random_state=42
)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é
lr_model = LinearRegression()
lr_model.fit(X_train_lt, y_train_lt)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
y_pred_lt = lr_model.predict(X_test_lt)

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
mse = mean_squared_error(y_test_lt, y_pred_lt)
rmse = np.sqrt(mse)

print(f"–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ (RMSE): {rmse:.2f} —á–∞—Å–æ–≤")
print(f"–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö: {rmse / np.mean(y_test_lt) * 100:.1f}%")

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏
coefficients = pd.DataFrame({
    'parameter': X_lifetime.columns,
    'coefficient': lr_model.coef_
})

print("\\n–í–ª–∏—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –≤—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞:")
for _, row in coefficients.iterrows():
    print(f"{row['parameter']}: {row['coefficient']:.2f} —á–∞—Å–æ–≤ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É")

print("\\n" + "="*50)

# –ó–∞–¥–∞–Ω–∏–µ 3: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
print("=== –ó–ê–î–ê–ù–ò–ï 3: –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–Ø –†–ï–ñ–ò–ú–û–í –†–ê–ë–û–¢–´ ===")

# –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# –ü—Ä–∏–º–µ–Ω—è–µ–º K-means –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
kmeans = KMeans(n_clusters=3, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

data['cluster'] = clusters

# –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
print("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã:")
for i in range(3):
    cluster_data = data[data['cluster'] == i]
    print(f"\\n–†–µ–∂–∏–º {i+1} ({len(cluster_data)} –æ–±—Ä–∞–∑—Ü–æ–≤):")
    print(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cluster_data['temperature'].mean():.1f} ¬± {cluster_data['temperature'].std():.1f} ¬∞C")
    print(f"  –î–∞–≤–ª–µ–Ω–∏–µ: {cluster_data['pressure'].mean():.1f} ¬± {cluster_data['pressure'].std():.1f} –ú–ü–∞")
    print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {cluster_data['speed'].mean():.1f} ¬± {cluster_data['speed'].std():.1f} –º/–º–∏–Ω")
    print(f"  –í–∏–±—Ä–∞—Ü–∏—è: {cluster_data['vibration'].mean():.1f} ¬± {cluster_data['vibration'].std():.1f} –º–∫–º")
    print(f"  –°—Ä–µ–¥–Ω–∏–π —Ä–µ—Å—É—Ä—Å: {cluster_data['lifetime_hours'].mean():.0f} —á–∞—Å–æ–≤")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
    quality_dist = cluster_data['quality'].value_counts(normalize=True)
    print(f"  –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:")
    for quality_type, percentage in quality_dist.items():
        print(f"    {quality_type}: {percentage*100:.1f}%")

print("\\n" + "="*50)

# –ó–∞–¥–∞–Ω–∏–µ 4: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
print("=== –ó–ê–î–ê–ù–ò–ï 4: –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –†–ï–®–ï–ù–ò–ï ===")

print("""
–ê–†–•–ò–¢–ï–ö–¢–£–†–ê ML-–°–ò–°–¢–ï–ú–´ –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê –ü–û–î–®–ò–ü–ù–ò–ö–û–í

1. –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
   - SCADA —Å–∏—Å—Ç–µ–º–∞: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ—Å—Ç—å (real-time)
   - –í–∏–±—Ä–æ–¥–∞—Ç—á–∏–∫–∏: –ø–æ –ì–û–°–¢ –ò–°–û 10816-3 (100 –ì—Ü)
   - –°–∏—Å—Ç–µ–º–∞ –û–¢–ö: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ (batch)
   - MES —Å–∏—Å—Ç–µ–º–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö

2. –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•:
   - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: Apache Kafka –¥–ª—è real-time –ø–æ—Ç–æ–∫–æ–≤
   - –•—Ä–∞–Ω–µ–Ω–∏–µ: ClickHouse –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ + PostgresPro –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
   - –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞: Apache Spark –¥–ª—è batch + Apache Flink –¥–ª—è stream

3. ML-–ú–û–î–ï–õ–ò:
   - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞: Random Forest (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
   - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤: LSTM –Ω–µ–π—Ä–æ—Å–µ—Ç—å (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
   - –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤: K-means (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü)

4. –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï:
   - Inference: TensorFlow Serving + Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: Prometheus + Grafana
   - –ê–ª–µ—Ä—Ç—ã: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

5. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–¢–ê–ù–î–ê–†–¢–ê–ú:
   - –ì–û–°–¢ –† 59277-2020: –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π AI
   - 152-–§–ó: –æ–±–µ–∑–ª–∏—á–∏–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
   - –ì–û–°–¢ 520-2002: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
   - ISO 27001: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã

6. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –≠–§–§–ï–ö–¢:
   - –°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –Ω–∞ 3%: 15 –º–ª–Ω —Ä—É–±./–≥–æ–¥
   - –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–∞ 20%: 8 –º–ª–Ω —Ä—É–±./–≥–æ–¥
   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã: 5 –º–ª–Ω —Ä—É–±./–≥–æ–¥
   - –û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: 28 –º–ª–Ω —Ä—É–±./–≥–æ–¥
   - ROI: 460% –ø—Ä–∏ –∑–∞—Ç—Ä–∞—Ç–∞—Ö 5 –º–ª–Ω —Ä—É–±.
""")

print("\\n–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É!")
print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö.")`
  },
  
  8: {
    title: "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
    duration: "160 –º–∏–Ω",
    type: "theory", 
    content: `
      <h2>–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      <p>–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ - –æ—Å–Ω–æ–≤–∞ –º–Ω–æ–≥–∏—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö AI-—Å–∏—Å—Ç–µ–º. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å:</p>
      <ul>
        <li><strong>–í—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</strong> –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏</li>
        <li><strong>–û—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</strong> –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏</strong> –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã</li>
        <li><strong>–û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å</strong> –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <h3>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h3>
      <p>–†–µ–≥—Ä–µ—Å—Å–∏—è - —ç—Ç–æ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –≥–¥–µ —Ü–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong></p>
      <pre><code>y = f(x‚ÇÅ, x‚ÇÇ, ..., x‚Çô) + Œµ</code></pre>
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>y</strong> - —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (—Ç–æ, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º)</li>
        <li><strong>x‚ÇÅ, x‚ÇÇ, ..., x‚Çô</strong> - –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)</li>
        <li><strong>f()</strong> - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏</li>
        <li><strong>Œµ</strong> - —Å–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞</li>
      </ul>
      
      <h3>–¢–∏–ø—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h3>
      
      <h4>1. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h4>
      <p>–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∏ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π —Ç–∏–ø —Ä–µ–≥—Ä–µ—Å—Å–∏–∏.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª–∞:</strong></p>
      <pre><code>y = Œ≤‚ÇÄ + Œ≤‚ÇÅx‚ÇÅ + Œ≤‚ÇÇx‚ÇÇ + ... + Œ≤‚Çôx‚Çô + Œµ</code></pre>
      
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:</strong> –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:</strong> –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å–µ</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong> –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–í—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤</li>
        <li>–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</li>
        <li>–ù–µ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å</li>
        <li>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –≤—ã–±—Ä–æ—Å–∞–º</li>
        <li>–¢—Ä–µ–±—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤</li>
      </ul>
      
      <h4>2. –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h4>
      <p>–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª–∞ (–¥–ª—è —Å—Ç–µ–ø–µ–Ω–∏ 2):</strong></p>
      <pre><code>y = Œ≤‚ÇÄ + Œ≤‚ÇÅx + Œ≤‚ÇÇx¬≤ + Œµ</code></pre>
      
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –∏–∑–Ω–æ—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> –Ω–µ–ª–∏–Ω–µ–π–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</strong> –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã</li>
      </ul>
      
      <h4>3. –†–µ–≥—Ä–µ—Å—Å–∏—è —Å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π</h4>
      
      <h5>Ridge —Ä–µ–≥—Ä–µ—Å—Å–∏—è (L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è)</h5>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong></p>
      <pre><code>Loss = MSE + Œ±‚àëŒ≤·µ¢¬≤</code></pre>
      <p>–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ.</p>
      
      <h5>Lasso —Ä–µ–≥—Ä–µ—Å—Å–∏—è (L1 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è)</h5>
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong></p>
      <pre><code>Loss = MSE + Œ±‚àë|Œ≤·µ¢|</code></pre>
      <p>–ú–æ–∂–µ—Ç –æ–±–Ω—É–ª—è—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –≤—ã–ø–æ–ª–Ω—è—è –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.</p>
      
      <h5>Elastic Net</h5>
      <p>–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç L1 –∏ L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é.</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –º–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –∫–æ–≥–¥–∞ –º–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li><strong>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–û—Ç–±–æ—Ä –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:</strong> –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
      </ul>
      
      <h4>4. –ù–µ–ª–∏–Ω–µ–π–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h4>
      
      <h5>–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å (Random Forest)</h5>
      <p>–ê–Ω—Å–∞–º–±–ª—å –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏.</p>
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç–µ–π, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤—ã–±—Ä–æ—Å–∞–º</p>
      
      <h5>–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥</h5>
      <p>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö –º–æ–¥–µ–ª–µ–π.</p>
      <p><strong>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</strong> XGBoost, LightGBM, CatBoost</p>
      
      <h5>–ú–µ—Ç–æ–¥ –æ–ø–æ—Ä–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (SVR)</h5>
      <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —è–¥—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.</p>
      
      <h3>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h3>
      
      <h4>1. –°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ (MSE)</h4>
      <pre><code>MSE = (1/n)‚àë(y·µ¢ - ≈∑·µ¢)¬≤</code></pre>
      <p>–®—Ç—Ä–∞—Ñ—É–µ—Ç –±–æ–ª—å—à–∏–µ –æ—à–∏–±–∫–∏ —Å–∏–ª—å–Ω–µ–µ –º–∞–ª—ã—Ö.</p>
      
      <h4>2. –ö–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏ (RMSE)</h4>
      <pre><code>RMSE = ‚àöMSE</code></pre>
      <p>–ò–º–µ–µ—Ç —Ç–µ –∂–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è, —á—Ç–æ –∏ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.</p>
      
      <h4>3. –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE)</h4>
      <pre><code>MAE = (1/n)‚àë|y·µ¢ - ≈∑·µ¢|</code></pre>
      <p>–ú–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ –≤—ã–±—Ä–æ—Å–∞–º.</p>
      
      <h4>4. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (R¬≤)</h4>
      <pre><code>R¬≤ = 1 - SS_res/SS_tot</code></pre>
      <p>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª—é –¥–∏—Å–ø–µ—Ä—Å–∏–∏, –æ–±—ä—è—Å–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å—é (0 ‚â§ R¬≤ ‚â§ 1).</p>
      
      <h4>5. –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAPE)</h4>
      <pre><code>MAPE = (100/n)‚àë|y·µ¢ - ≈∑·µ¢|/|y·µ¢|</code></pre>
      <p>–£–¥–æ–±–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –º–∞—Å—à—Ç–∞–±–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.</p>
      
      <h3>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–µ–π—Å—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏</h3>
      
      <h4>–ö–µ–π—Å 1: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –¢–≠–¶</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å.</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏</p>
      <p><strong>–ú–æ–¥–µ–ª—å:</strong> –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥ (XGBoost)</p>
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏:</strong> MAPE < 3%, —ç–∫–æ–Ω–æ–º–∏—è 5% –æ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é</p>
      
      <h4>–ö–µ–π—Å 2: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–∫–∞–∑–∞ —Ç—É—Ä–±–∏–Ω—ã</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –û—Ü–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å –≥–∞–∑–æ–≤–æ–π —Ç—É—Ä–±–∏–Ω—ã –ì–¢–≠-160.</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> –≤–∏–±—Ä–∞—Ü–∏—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å–ª–∞, –Ω–∞—Ä–∞–±–æ—Ç–∫–∞</p>
      <p><strong>–ú–æ–¥–µ–ª—å:</strong> –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å —Å feature engineering</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> R¬≤ = 0.85, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–∞ 30%</p>
      
      <h4>–ö–µ–π—Å 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –∞–º–º–∏–∞–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ì–∞–±–µ—Ä–∞-–ë–æ—à–∞.</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (400-500¬∞C), –¥–∞–≤–ª–µ–Ω–∏–µ (150-300 –∞—Ç–º), —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ N‚ÇÇ:H‚ÇÇ</p>
      <p><strong>–ú–æ–¥–µ–ª—å:</strong> –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è 2-–π —Å—Ç–µ–ø–µ–Ω–∏</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ 2.5%, ROI 180%</p>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã</h3>
      
      <h4>–ì–û–°–¢ 27.002-2015 "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —Ç–µ—Ö–Ω–∏–∫–µ"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:</p>
      <ul>
        <li><strong>–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:</strong> –Ω–µ –º–µ–Ω–µ–µ 95% –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π:</strong> –Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –º–µ—Ç–æ–¥–∏–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</li>
      </ul>
      
      <h4>–ì–û–°–¢ –† 51901.1-2002 "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Ä–∏—Å–∫–∞"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–æ–≤:</p>
      <ul>
        <li><strong>–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å:</strong> —É—á–µ—Ç –≤ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö</li>
        <li><strong>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li><strong>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h3>
      
      <h4>1. Batch Prediction (–ü–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è)</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç—á–µ—Ç—ã</p>
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li>–î–∞–Ω–Ω—ã–µ: Hadoop HDFS / PostgresPro</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞: Apache Spark</li>
        <li>ML: Scikit-learn / XGBoost</li>
        <li>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ClickHouse / Excel –æ—Ç—á–µ—Ç—ã</li>
      </ul>
      
      <h4>2. Real-time Prediction (–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</p>
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li>–ü–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: Apache Kafka</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞: Apache Flink</li>
        <li>ML: TensorFlow Serving / MLflow</li>
        <li>–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: Redis</li>
        <li>API: FastAPI / Flask</li>
      </ul>
      
      <h4>3. Edge Computing (–ì—Ä–∞–Ω–∏—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã</p>
      <p><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong></p>
      <ul>
        <li>–ú–æ–¥–µ–ª–∏: ONNX Runtime / TensorFlow Lite</li>
        <li>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: NVIDIA Jetson / Intel NUC</li>
        <li>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: MQTT / OPC UA</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h3>
      
      <h4>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:</h4>
      <ul>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> 2-8% –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</strong> 10-25% —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç</li>
        <li><strong>–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ:</strong> 5-15% —ç–∫–æ–Ω–æ–º–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:</strong> 3-12% —Å–Ω–∏–∂–µ–Ω–∏—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø–∞—Å–æ–≤</li>
      </ul>
      
      <h4>–†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:</h4>
      <p><strong>–ü—Ä–∏–º–µ—Ä –¥–ª—è —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–æ–¥–∞:</strong></p>
      <ul>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: +2% = 50 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç: -8% = 30 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: 15 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: 95 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç: 12 –º–ª–Ω —Ä—É–±.</li>
        <li>ROI: (95-12)/12 √ó 100% = 692%</li>
        <li>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: 1.5 –º–µ—Å—è—Ü–∞</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      
      <h4>1. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</h4>
      <ul>
        <li><strong>–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong> –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å:</strong> –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        <li><strong>–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥:</strong> –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ù–µ–π—Ä–æ—Å–µ—Ç–∏:</strong> –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h4>2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
      <ul>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
        <li><strong>–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–∏–∑–Ω–µ—Å-—ç—Ñ—Ñ–µ–∫—Ç–∞</li>
      </ul>
      
      <h4>3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</h4>
      <ul>
        <li><strong>Data drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Model drift:</strong> –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏</li>
        <li><strong>Performance monitoring:</strong> –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞, –Ω–∞–≥—Ä—É–∑–∫–∞</li>
      </ul>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è</h3>
      
      <h4>–ó–∞–¥–∞—á–∞</h4>
      <p>–í—ã - AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫ –Ω–∞ –æ–ø—Ç–æ–≤–æ–º —Ä—ã–Ω–∫–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏.</p>
      
      <h4>–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç</h4>
      <ul>
        <li><strong>–¶–µ–ª—å:</strong> –°–Ω–∏–∑–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ 5-10%</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é MAPE < 5%</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–∞–∂–¥—ã–π —á–∞—Å</li>
        <li><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã:</strong> –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ê–û "–°–û –ï–≠–°"</li>
      </ul>
      
      <h4>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
      <p>–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2 –≥–æ–¥–∞:</p>
      <ul>
        <li><strong>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ:</strong> –ø–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ú–í—Ç¬∑—á)</li>
        <li><strong>–ü–æ–≥–æ–¥–∞:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞</li>
        <li><strong>–ö–∞–ª–µ–Ω–¥–∞—Ä—å:</strong> —Ä–∞–±–æ—á–∏–µ/–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:</strong> –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π</li>
      </ul>
      
      <h4>–ó–∞–¥–∞–Ω–∏—è</h4>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 1: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</h5>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏</h5>
      <p>–°–æ–∑–¥–∞–π—Ç–µ –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 3: –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å</h5>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –º–æ–¥–µ–ª—å —Å —É—á–µ—Ç–æ–º –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç–µ–π.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞</h5>
      <p>–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à—É—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 5: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</h5>
      <p>–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.</p>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, TimeSeriesSplit
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import warnings
warnings.filterwarnings('ignore')

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
np.random.seed(42)

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –Ω–∞ 2 –≥–æ–¥–∞ (17520 —á–∞—Å–æ–≤)
hours = 24 * 365 * 2
dates = pd.date_range('2022-01-01', periods=hours, freq='H')

# –ë–∞–∑–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é –∏ —Ç—Ä–µ–Ω–¥–∞–º–∏
base_consumption = 1000  # –ú–í—Ç¬∑—á

# –°–µ–∑–æ–Ω–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–∑–∏–º–∞ - –±–æ–ª—å—à–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
seasonal = 200 * np.sin(2 * np.pi * np.arange(hours) / (24 * 365) + np.pi)

# –ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (–±—É–¥–Ω–∏ vs –≤—ã—Ö–æ–¥–Ω—ã–µ)
weekly = -100 * np.sin(2 * np.pi * np.arange(hours) / (24 * 7))

# –î–Ω–µ–≤–Ω–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (–ø–∏–∫–∏ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º)
daily = 150 * np.sin(2 * np.pi * np.arange(hours) / 24 + np.pi/2)

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
temperature = 10 + 15 * np.sin(2 * np.pi * np.arange(hours) / (24 * 365)) + np.random.normal(0, 5, hours)
temp_effect = -5 * (temperature - 20)  # –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç 20¬∞C —Ä–∞—Å—Ç–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ

# –í–ª–∞–∂–Ω–æ—Å—Ç—å (–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
humidity = 60 + 20 * np.sin(2 * np.pi * np.arange(hours) / (24 * 365) + np.pi/4) + np.random.normal(0, 10, hours)
humidity = np.clip(humidity, 20, 90)

# –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é)
wind_speed = 5 + 3 * np.random.normal(0, 1, hours)
wind_speed = np.clip(wind_speed, 0, 20)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ (—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ vs –≤—ã—Ö–æ–¥–Ω—ã–µ)
is_weekend = np.array([d.weekday() >= 5 for d in dates])
industrial_load = np.where(is_weekend, 0.6, 1.0) + np.random.normal(0, 0.1, hours)
industrial_load = np.clip(industrial_load, 0.3, 1.2)

# –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –∫–∞–∂–¥—ã–π 30-–π –¥–µ–Ω—å)
is_holiday = np.array([i % (24*30) < 24 for i in range(hours)])

# –ò—Ç–æ–≥–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
consumption = (
    base_consumption + 
    seasonal + 
    weekly + 
    daily + 
    temp_effect + 
    humidity * 2 +  # –í–ª–∏—è–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    wind_speed * (-10) +  # –í–µ—Ç–µ—Ä —Å–Ω–∏–∂–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–í–≠–°)
    industrial_load * 300 +  # –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    np.where(is_holiday, -200, 0) +  # –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
    np.random.normal(0, 50, hours)  # –°–ª—É—á–∞–π–Ω—ã–π —à—É–º
)

# –°–æ–∑–¥–∞–µ–º DataFrame
data = pd.DataFrame({
    'datetime': dates,
    'consumption': consumption,
    'temperature': temperature,
    'humidity': humidity,
    'wind_speed': wind_speed,
    'industrial_load': industrial_load,
    'is_weekend': is_weekend.astype(int),
    'is_holiday': is_holiday.astype(int),
    'hour': [d.hour for d in dates],
    'day_of_week': [d.weekday() for d in dates],
    'month': [d.month for d in dates]
})

print("=== –°–ò–°–¢–ï–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –≠–ù–ï–†–ì–û–ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø ===")
print(f"–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {data['datetime'].min()} - {data['datetime'].max()}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(data)}")
print(f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {data['consumption'].mean():.1f} –ú–í—Ç¬∑—á")
print(f"–î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {data['consumption'].min():.1f} - {data['consumption'].max():.1f} –ú–í—Ç¬∑—á")

# –ó–∞–¥–∞–Ω–∏–µ 1: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
print("\\n=== –ó–ê–î–ê–ù–ò–ï 1: –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ê–ù–ê–õ–ò–ó ===")

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
numeric_cols = ['consumption', 'temperature', 'humidity', 'wind_speed', 'industrial_load']
correlation_matrix = data[numeric_cols].corr()

print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏:")
correlations = correlation_matrix['consumption'].drop('consumption').sort_values(key=abs, ascending=False)
for factor, corr in correlations.items():
    print(f"  {factor}: {corr:.3f}")

# –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
hourly_avg = data.groupby('hour')['consumption'].mean()
print(f"\\n–ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ {hourly_avg.idxmax()}:00 - {hourly_avg.max():.1f} –ú–í—Ç¬∑—á")
print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ {hourly_avg.idxmin()}:00 - {hourly_avg.min():.1f} –ú–í—Ç¬∑—á")

# –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
weekly_avg = data.groupby('day_of_week')['consumption'].mean()
days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
print("\\n–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:")
for i, day in enumerate(days):
    print(f"  {day}: {weekly_avg[i]:.1f} –ú–í—Ç¬∑—á")

# –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
monthly_avg = data.groupby('month')['consumption'].mean()
months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', 
          '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
print("\\n–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:")
print(f"  –ú–∞–∫—Å–∏–º—É–º: {months[monthly_avg.idxmax()-1]} - {monthly_avg.max():.1f} –ú–í—Ç¬∑—á")
print(f"  –ú–∏–Ω–∏–º—É–º: {months[monthly_avg.idxmin()-1]} - {monthly_avg.min():.1f} –ú–í—Ç¬∑—á")

print("\\n" + "="*60)

# –ó–∞–¥–∞–Ω–∏–µ 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
print("=== –ó–ê–î–ê–ù–ò–ï 2: –ë–ê–ó–û–í–ê–Ø –õ–ò–ù–ï–ô–ù–ê–Ø –ú–û–î–ï–õ–¨ ===")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
features_basic = [
    'temperature', 'humidity', 'wind_speed', 'industrial_load',
    'is_weekend', 'is_holiday', 'hour', 'day_of_week', 'month'
]

X_basic = data[features_basic]
y = data['consumption']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
split_point = int(len(data) * 0.8)
X_train_basic = X_basic[:split_point]
X_test_basic = X_basic[split_point:]
y_train = y[:split_point]
y_test = y[split_point:]

print(f"–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_train_basic)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
print(f"–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_test_basic)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")

# –û–±—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–µ–π–Ω–æ–π –º–æ–¥–µ–ª–∏
lr_basic = LinearRegression()
lr_basic.fit(X_train_basic, y_train)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
y_pred_basic = lr_basic.predict(X_test_basic)

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
mse_basic = mean_squared_error(y_test, y_pred_basic)
rmse_basic = np.sqrt(mse_basic)
mae_basic = mean_absolute_error(y_test, y_pred_basic)
r2_basic = r2_score(y_test, y_pred_basic)
mape_basic = np.mean(np.abs((y_test - y_pred_basic) / y_test)) * 100

print(f"\\n–ú–µ—Ç—Ä–∏–∫–∏ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏:")
print(f"  RMSE: {rmse_basic:.2f} –ú–í—Ç¬∑—á")
print(f"  MAE: {mae_basic:.2f} –ú–í—Ç¬∑—á")
print(f"  R¬≤: {r2_basic:.3f}")
print(f"  MAPE: {mape_basic:.2f}%")

# –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_importance_basic = pd.DataFrame({
    'feature': features_basic,
    'coefficient': lr_basic.coef_,
    'abs_coefficient': np.abs(lr_basic.coef_)
}).sort_values('abs_coefficient', ascending=False)

print("\\n–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–ø–æ –º–æ–¥—É–ª—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞):")
for _, row in feature_importance_basic.head(5).iterrows():
    print(f"  {row['feature']}: {row['coefficient']:.2f}")

print("\\n" + "="*60)

# –ó–∞–¥–∞–Ω–∏–µ 3: –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
print("=== –ó–ê–î–ê–ù–ò–ï 3: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ ===")

# Feature Engineering
data_enhanced = data.copy()

# –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
data_enhanced['temp_squared'] = data['temperature'] ** 2
data_enhanced['temp_cubed'] = data['temperature'] ** 3

# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
data_enhanced['temp_humidity'] = data['temperature'] * data['humidity']

# –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —á–∞—Å –Ω–∞–∑–∞–¥)
data_enhanced['consumption_lag1'] = data['consumption'].shift(1)
data_enhanced['consumption_lag24'] = data['consumption'].shift(24)  # –î–µ–Ω—å –Ω–∞–∑–∞–¥
data_enhanced['consumption_lag168'] = data['consumption'].shift(168)  # –ù–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥

# –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
data_enhanced['consumption_ma24'] = data['consumption'].rolling(24).mean()
data_enhanced['consumption_ma168'] = data['consumption'].rolling(168).mean()

# –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç–∏
data_enhanced['hour_sin'] = np.sin(2 * np.pi * data['hour'] / 24)
data_enhanced['hour_cos'] = np.cos(2 * np.pi * data['hour'] / 24)
data_enhanced['day_sin'] = np.sin(2 * np.pi * data['day_of_week'] / 7)
data_enhanced['day_cos'] = np.cos(2 * np.pi * data['day_of_week'] / 7)
data_enhanced['month_sin'] = np.sin(2 * np.pi * data['month'] / 12)
data_enhanced['month_cos'] = np.cos(2 * np.pi * data['month'] / 12)

# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN (–∏–∑-–∑–∞ –ª–∞–≥–æ–≤)
data_enhanced = data_enhanced.dropna()

# –ù–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features_enhanced = [
    'temperature', 'temp_squared', 'temp_cubed',
    'humidity', 'temp_humidity',
    'wind_speed', 'industrial_load',
    'is_weekend', 'is_holiday',
    'consumption_lag1', 'consumption_lag24', 'consumption_lag168',
    'consumption_ma24', 'consumption_ma168',
    'hour_sin', 'hour_cos', 'day_sin', 'day_cos', 'month_sin', 'month_cos'
]

X_enhanced = data_enhanced[features_enhanced]
y_enhanced = data_enhanced['consumption']

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
split_point_enh = int(len(data_enhanced) * 0.8)
X_train_enh = X_enhanced[:split_point_enh]
X_test_enh = X_enhanced[split_point_enh:]
y_train_enh = y_enhanced[:split_point_enh]
y_test_enh = y_enhanced[split_point_enh:]

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_enh)
X_test_scaled = scaler.transform(X_test_enh)

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
models = {
    'Linear Regression': LinearRegression(),
    'Ridge Regression': Ridge(alpha=1.0),
    'Lasso Regression': Lasso(alpha=0.1),
    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)
}

results = {}

for name, model in models.items():
    if name == 'Random Forest':
        # Random Forest –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        model.fit(X_train_enh, y_train_enh)
        y_pred = model.predict(X_test_enh)
    else:
        # –õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        model.fit(X_train_scaled, y_train_enh)
        y_pred = model.predict(X_test_scaled)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    mse = mean_squared_error(y_test_enh, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_test_enh, y_pred)
    r2 = r2_score(y_test_enh, y_pred)
    mape = np.mean(np.abs((y_test_enh - y_pred) / y_test_enh)) * 100
    
    results[name] = {
        'RMSE': rmse,
        'MAE': mae,
        'R¬≤': r2,
        'MAPE': mape,
        'model': model
    }

print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:")
print(f"{'–ú–æ–¥–µ–ª—å':<20} {'RMSE':<8} {'MAE':<8} {'R¬≤':<8} {'MAPE':<8}")
print("-" * 60)
for name, metrics in results.items():
    print(f"{name:<20} {metrics['RMSE']:<8.1f} {metrics['MAE']:<8.1f} {metrics['R¬≤']:<8.3f} {metrics['MAPE']:<8.2f}%")

# –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –ø–æ MAPE
best_model_name = min(results.keys(), key=lambda x: results[x]['MAPE'])
best_model = results[best_model_name]

print(f"\\n–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name}")
print(f"MAPE: {best_model['MAPE']:.2f}% (—Ü–µ–ª—å: < 5%)")

print("\\n" + "="*60)

# –ó–∞–¥–∞–Ω–∏–µ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞
print("=== –ó–ê–î–ê–ù–ò–ï 4: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–¶–ï–ù–ö–ê ===")

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
tscv = TimeSeriesSplit(n_splits=5)
cv_scores = []

for train_idx, val_idx in tscv.split(X_train_enh):
    X_cv_train, X_cv_val = X_train_enh.iloc[train_idx], X_train_enh.iloc[val_idx]
    y_cv_train, y_cv_val = y_train_enh.iloc[train_idx], y_train_enh.iloc[val_idx]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
    if best_model_name == 'Random Forest':
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_cv_train, y_cv_train)
        y_cv_pred = model.predict(X_cv_val)
    else:
        scaler_cv = StandardScaler()
        X_cv_train_scaled = scaler_cv.fit_transform(X_cv_train)
        X_cv_val_scaled = scaler_cv.transform(X_cv_val)
        
        model = results[best_model_name]['model'].__class__()
        model.fit(X_cv_train_scaled, y_cv_train)
        y_cv_pred = model.predict(X_cv_val_scaled)
    
    mape_cv = np.mean(np.abs((y_cv_val - y_cv_pred) / y_cv_val)) * 100
    cv_scores.append(mape_cv)

print(f"–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è (5 —Ñ–æ–ª–¥–æ–≤):")
print(f"  –°—Ä–µ–¥–Ω–∏–π MAPE: {np.mean(cv_scores):.2f}% ¬± {np.std(cv_scores):.2f}%")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω MAPE: {np.min(cv_scores):.2f}% - {np.max(cv_scores):.2f}%")

# –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
if best_model_name == 'Random Forest':
    final_model = RandomForestRegressor(n_estimators=100, random_state=42)
    final_model.fit(X_train_enh, y_train_enh)
    final_predictions = final_model.predict(X_test_enh)
else:
    final_model = results[best_model_name]['model']
    final_predictions = final_model.predict(X_test_scaled)

residuals = y_test_enh - final_predictions

print(f"\\n–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤:")
print(f"  –°—Ä–µ–¥–Ω–µ–µ: {np.mean(residuals):.2f} –ú–í—Ç¬∑—á")
print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(residuals):.2f} –ú–í—Ç¬∑—á")
print(f"  95% –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: ¬±{1.96 * np.std(residuals):.1f} –ú–í—Ç¬∑—á")

# –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
test_data = data_enhanced[split_point_enh:].copy()
test_data['residuals'] = residuals
test_data['abs_residuals'] = np.abs(residuals)

hourly_errors = test_data.groupby('hour')['abs_residuals'].mean()
print(f"\\n–û—à–∏–±–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:")
print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {hourly_errors.idxmax()}:00 - {hourly_errors.max():.1f} –ú–í—Ç¬∑—á")
print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {hourly_errors.idxmin()}:00 - {hourly_errors.min():.1f} –ú–í—Ç¬∑—á")

print("\\n" + "="*60)

# –ó–∞–¥–∞–Ω–∏–µ 5: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
print("=== –ó–ê–î–ê–ù–ò–ï 5: –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –†–ï–®–ï–ù–ò–ï ===")

print("""
–ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –≠–ù–ï–†–ì–û–ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø

1. –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
   ‚îú‚îÄ‚îÄ SCADA —Å–∏—Å—Ç–µ–º—ã –ü–°: –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (1 –º–∏–Ω)
   ‚îú‚îÄ‚îÄ –†–æ—Å–≥–∏–¥—Ä–æ–º–µ—Ç API: –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 72 —á–∞—Å–∞
   ‚îú‚îÄ‚îÄ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: API –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§
   ‚îî‚îÄ‚îÄ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: –ø–ª–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (ERP)

2. –°–ë–û–† –ò –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•:
   ‚îú‚îÄ‚îÄ Apache Kafka: –ø–æ—Ç–æ–∫–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö SCADA
   ‚îú‚îÄ‚îÄ Apache Airflow: –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è ETL –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   ‚îú‚îÄ‚îÄ ClickHouse: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
   ‚îî‚îÄ‚îÄ PostgresPro: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏

3. –ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:
   ‚îú‚îÄ‚îÄ Feature Store: –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
   ‚îú‚îÄ‚îÄ MLflow: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏
   ‚îú‚îÄ‚îÄ –û–±—É—á–µ–Ω–∏–µ: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 02:00 –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
   ‚îî‚îÄ‚îÄ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é

4. INFERENCE –ò API:
   ‚îú‚îÄ‚îÄ TensorFlow Serving: —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
   ‚îú‚îÄ‚îÄ Redis: –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
   ‚îú‚îÄ‚îÄ FastAPI: REST API –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
   ‚îî‚îÄ‚îÄ WebSocket: real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤

5. –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ê–õ–ï–†–¢–´:
   ‚îú‚îÄ‚îÄ Prometheus: –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   ‚îú‚îÄ‚îÄ Grafana: –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
   ‚îú‚îÄ‚îÄ Data drift detection: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
   ‚îî‚îÄ‚îÄ Telegram Bot: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö

6. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–¢–ê–ù–î–ê–†–¢–ê–ú:
   ‚îú‚îÄ‚îÄ –ì–û–°–¢ –† 59277-2020: –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Ä–µ—à–µ–Ω–∏–π
   ‚îú‚îÄ‚îÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ê–û "–°–û –ï–≠–°": —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ API
   ‚îú‚îÄ‚îÄ 152-–§–ó: –∑–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
   ‚îî‚îÄ‚îÄ ISO 27001: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

7. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –≠–§–§–ï–ö–¢:
   ‚îú‚îÄ‚îÄ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: MAPE < 3%
   ‚îú‚îÄ‚îÄ –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–∏—Ä—É—é—â–∏–π —Ä—ã–Ω–æ–∫: 5-8%
   ‚îú‚îÄ‚îÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 3-5%
   ‚îú‚îÄ‚îÄ –≠–∫–æ–Ω–æ–º–∏—è: 150-300 –º–ª–Ω —Ä—É–±./–≥–æ–¥ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–æ–∫–æ–º–ø–∞–Ω–∏–∏
   ‚îî‚îÄ‚îÄ ROI: 400-800% –ø—Ä–∏ –∑–∞—Ç—Ä–∞—Ç–∞—Ö 50 –º–ª–Ω —Ä—É–±.

8. –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï:
   ‚îú‚îÄ‚îÄ Kubernetes: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è
   ‚îú‚îÄ‚îÄ GitLab CI/CD: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
   ‚îú‚îÄ‚îÄ Blue-Green deployment: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
   ‚îî‚îÄ‚îÄ Disaster Recovery: —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º –¶–û–î
""")

print("\\n" + "="*60)

# –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
print("=== –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–ï–ö–¢–ê ===")

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
annual_consumption = 8760 * 1000  # –ú–í—Ç¬∑—á –≤ –≥–æ–¥
electricity_price = 3000  # —Ä—É–±/–ú–í—Ç¬∑—á (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ –û–†–≠–ú)
annual_cost = annual_consumption * electricity_price  # –º–ª–Ω —Ä—É–±

# –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
forecast_accuracy_savings = 0.06  # 6% —ç–∫–æ–Ω–æ–º–∏–∏
annual_savings = annual_cost * forecast_accuracy_savings / 1_000_000  # –º–ª–Ω —Ä—É–±

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç
development_cost = 15  # –º–ª–Ω —Ä—É–±
annual_operational_cost = 5  # –º–ª–Ω —Ä—É–±

# ROI —Ä–∞—Å—á–µ—Ç
net_benefit = annual_savings - annual_operational_cost
roi = (net_benefit - development_cost) / development_cost * 100
payback_period = development_cost / net_benefit

print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:")
print(f"  –ì–æ–¥–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {annual_consumption:,.0f} –ú–í—Ç¬∑—á")
print(f"  –ì–æ–¥–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é: {annual_cost/1_000_000:.0f} –º–ª–Ω —Ä—É–±")
print(f"  –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {annual_savings:.0f} –º–ª–Ω —Ä—É–±/–≥–æ–¥")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: {development_cost} –º–ª–Ω —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {annual_operational_cost} –º–ª–Ω —Ä—É–±/–≥–æ–¥")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_period:.1f} –≥–æ–¥–∞")

print(f"\\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
print(f"  –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: MAPE = {best_model['MAPE']:.2f}% (—Ü–µ–ª—å: < 5%)")
print(f"  –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: 24 —á–∞—Å–∞")
print(f"  –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∂–¥—ã–π —á–∞—Å")
print(f"  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: < 100 –º—Å")
print(f"  –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: 99.9%")

status = "‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢" if best_model['MAPE'] < 5 else "‚ùå –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢"
print(f"\\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: {status}")

print("\\n–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—É—é —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é!")`
  },

  9: {
    title: "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
    duration: "150 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ</h2>
      
      <h3>–†–æ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      <p>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - –æ–¥–Ω–∞ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç:</p>
      <ul>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</strong> –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ì–û–°–¢–∞–º</li>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</strong> –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã</strong> –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –º–µ—Ä</li>
        <li><strong>–û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</strong> –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</li>
      </ul>
      
      <h3>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
      <p>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - —ç—Ç–æ –∑–∞–¥–∞—á–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –≥–¥–µ —Ü–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–ª–∞—Å—Å–∞) –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong></p>
      <pre><code>f: X ‚Üí Y</code></pre>
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>X</strong> - –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)</li>
        <li><strong>Y</strong> - –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ {y‚ÇÅ, y‚ÇÇ, ..., y‚Çñ}</li>
        <li><strong>f()</strong> - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ–±—É—á–∞–µ–º</li>
      </ul>
      
      <h3>–¢–∏–ø—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</h3>
      
      <h4>1. –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
      <p>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –¥–≤–∞ –∫–ª–∞—Å—Å–∞.</p>
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> "–≥–æ–¥–µ–Ω" / "–±—Ä–∞–∫" –ø–æ –ì–û–°–¢ 520-2002</li>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> "–∏—Å–ø—Ä–∞–≤–Ω–æ" / "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ"</li>
        <li><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> "–±–µ–∑–æ–ø–∞—Å–Ω–æ" / "–æ–ø–∞—Å–Ω–æ" –ø–æ –ù–ü-001-15</li>
      </ul>
      
      <h4>2. –ú–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
      <p>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤.</p>
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏:</strong> "–Ω–æ—Ä–º–∞" / "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" / "—Ç—Ä–µ–≤–æ–≥–∞" / "–∞–≤–∞—Ä–∏—è" (–ì–û–°–¢ –ò–°–û 10816-3)</li>
        <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–∫–∏:</strong> "—Ç—Ä–µ—â–∏–Ω–∞" / "–Ω–µ–ø—Ä–æ–≤–∞—Ä" / "–ø–æ—Ä–∞" / "–≤–∫–ª—é—á–µ–Ω–∏–µ" (–ì–û–°–¢ 23055-78)</li>
        <li><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤:</strong> "–Ω–æ–≤—ã–π" / "–∏–∑–Ω–æ—à–µ–Ω–Ω—ã–π" / "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π" / "–∞–≤–∞—Ä–∏–π–Ω—ã–π"</li>
      </ul>
      
      <h4>3. –ú–Ω–æ–≥–æ–º–µ—Ç–æ—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
      <p>–û–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª–∞—Å—Å–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.</p>
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –∏–∑–¥–µ–ª–∏–∏</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
      
      <h4>1. –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</h4>
      <p>–õ–∏–Ω–µ–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª–∞:</strong></p>
      <pre><code>P(y=1|x) = 1 / (1 + e^(-(Œ≤‚ÇÄ + Œ≤‚ÇÅx‚ÇÅ + ... + Œ≤‚Çôx‚Çô)))</code></pre>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–í—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤</li>
        <li>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</li>
        <li>–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</li>
        <li>–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li><strong>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ N —á–∞—Å–æ–≤</li>
        <li><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> —Ä–∏—Å–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏</li>
      </ul>
      
      <h4>2. –î–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π</h4>
      <p>–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∞–≤–∏–ª "–µ—Å–ª–∏-—Ç–æ".</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–í—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li>–ù–µ–ª–∏–Ω–µ–π–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li>–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é</li>
        <li>–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã:</strong> –ø–æ—à–∞–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:</strong> —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤</li>
      </ul>
      
      <h4>3. –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å (Random Forest)</h4>
      <p>–ê–Ω—Å–∞–º–±–ª—å –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º.</p>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:</strong></p>
      <ol>
        <li>–û–±—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥–≤—ã–±–æ—Ä–∫–∞—Ö</li>
        <li>–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞</li>
        <li>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è</li>
      </ol>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</li>
        <li>–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
        <li>–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
      </ul>
      
      <h4>4. –ú–µ—Ç–æ–¥ –æ–ø–æ—Ä–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (SVM)</h4>
      <p>–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–¥–µ–ª—è—é—â–µ–π –≥–∏–ø–µ—Ä–ø–ª–æ—Å–∫–æ—Å—Ç–∏.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞:</strong> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫</li>
        <li><strong>–û–ø–æ—Ä–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã:</strong> —Ç–æ—á–∫–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—É</li>
        <li><strong>–Ø–¥—Ä–∞:</strong> –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (RBF, –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ)</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</strong> –¥–µ—Ñ–µ–∫—Ç—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤:</strong> –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
        <li><strong>–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> –∞–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–æ–≤ –æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è—Ö</li>
      </ul>
      
      <h4>5. –ù–∞–∏–≤–Ω—ã–π –±–∞–π–µ—Å–æ–≤—Å–∫–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä</h4>
      <p>–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–æ—Ä–µ–º–µ –ë–∞–π–µ—Å–∞ —Å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª–∞:</strong></p>
      <pre><code>P(y|x‚ÇÅ,...,x‚Çô) = P(y) ‚àè P(x·µ¢|y) / P(x‚ÇÅ,...,x‚Çô)</code></pre>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</strong> –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤</li>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º:</strong> –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π:</strong> –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Ç–∏–ø–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</li>
      </ul>
      
      <h3>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
      
      <h4>1. –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (Confusion Matrix)</h4>
      <p>–¢–∞–±–ª–∏—Ü–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º.</p>
      
      <table border="1" style="border-collapse: collapse; margin: 10px 0;">
        <tr>
          <th></th>
          <th>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: –ì–æ–¥–µ–Ω</th>
          <th>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: –ë—Ä–∞–∫</th>
        </tr>
        <tr>
          <th>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏: –ì–æ–¥–µ–Ω</th>
          <td>True Negative (TN)</td>
          <td>False Positive (FP)</td>
        </tr>
        <tr>
          <th>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏: –ë—Ä–∞–∫</th>
          <td>False Negative (FN)</td>
          <td>True Positive (TP)</td>
        </tr>
      </table>
      
      <h4>2. –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h4>
      
      <h5>–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)</h5>
      <pre><code>Accuracy = (TP + TN) / (TP + TN + FP + FN)</code></pre>
      <p>–î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞.</p>
      
      <h5>Precision (–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞)</h5>
      <pre><code>Precision = TP / (TP + FP)</code></pre>
      <p>–î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.</p>
      
      <h5>Recall (–ü–æ–ª–Ω–æ—Ç–∞, –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)</h5>
      <pre><code>Recall = TP / (TP + FN)</code></pre>
      <p>–î–æ–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö.</p>
      
      <h5>F1-–º–µ—Ä–∞</h5>
      <pre><code>F1 = 2 √ó (Precision √ó Recall) / (Precision + Recall)</code></pre>
      <p>–ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã.</p>
      
      <h5>–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å</h5>
      <pre><code>Specificity = TN / (TN + FP)</code></pre>
      <p>–î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.</p>
      
      <h4>3. ROC-–∫—Ä–∏–≤–∞—è –∏ AUC</h4>
      <p><strong>ROC-–∫—Ä–∏–≤–∞—è:</strong> –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å True Positive Rate –æ—Ç False Positive Rate</p>
      <p><strong>AUC:</strong> –ø–ª–æ—â–∞–¥—å –ø–æ–¥ ROC-–∫—Ä–∏–≤–æ–π (0.5 - —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä, 1.0 - –∏–¥–µ–∞–ª—å–Ω—ã–π)</p>
      
      <h3>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–µ–π—Å—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
      
      <h4>–ö–µ–π—Å 1: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –ø–æ –≤–∏–±—Ä–∞—Ü–∏–∏</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –ì–¢–£ –ø–æ –ì–û–°–¢ –ò–°–û 10816-3</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> —Å–ø–µ–∫—Ç—Ä—ã –≤–∏–±—Ä–∞—Ü–∏–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –Ω–∞–≥—Ä—É–∑–∫–∞, –Ω–∞—Ä–∞–±–æ—Ç–∫–∞</p>
      <p><strong>–ö–ª–∞—Å—Å—ã:</strong> "–Ω–æ—Ä–º–∞", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "—Ç—Ä–µ–≤–æ–≥–∞", "–∞–≤–∞—Ä–∏—è"</p>
      <p><strong>–ú–æ–¥–µ–ª—å:</strong> Random Forest —Å feature engineering</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> Accuracy 94%, —Å–Ω–∏–∂–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –Ω–∞ 60%</p>
      
      <h4>–ö–µ–π—Å 2: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –ì–û–°–¢ 23055-78</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏</p>
      <p><strong>–ö–ª–∞—Å—Å—ã:</strong> "–Ω–æ—Ä–º–∞", "—Ç—Ä–µ—â–∏–Ω–∞", "–Ω–µ–ø—Ä–æ–≤–∞—Ä", "–ø–æ—Ä–∞", "–≤–∫–ª—é—á–µ–Ω–∏–µ"</p>
      <p><strong>–ú–æ–¥–µ–ª—å:</strong> CNN + SVM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> F1-score 0.92, —ç–∫–æ–Ω–æ–º–∏—è 40% –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞</p>
      
      <h4>–ö–µ–π—Å 3: –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç—É—Ä–±–∏–Ω</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –∑–∞ 48 —á–∞—Å–æ–≤</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> 150+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ SCADA, –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤</p>
      <p><strong>–ö–ª–∞—Å—Å—ã:</strong> "–æ—Ç–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 48—á", "–Ω–æ—Ä–º–∞"</p>
      <p><strong>–ú–æ–¥–µ–ª—å:</strong> XGBoost —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> Precision 0.85, Recall 0.78, ROI 320%</p>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
      
      <h4>–ì–û–°–¢ –† –ò–°–û 5725-1-2002 "–¢–æ—á–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:</p>
      <ul>
        <li><strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å:</strong> –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫</li>
        <li><strong>–ü—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω–æ—Å—Ç—å:</strong> –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
        <li><strong>–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å:</strong> –æ—Ü–µ–Ω–∫–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤</li>
      </ul>
      
      <h4>–ì–û–°–¢ 27.002-2015 "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —Ç–µ—Ö–Ω–∏–∫–µ"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º —Å–∏—Å—Ç–µ–º–∞–º:</p>
      <ul>
        <li><strong>–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ–∑–∞:</strong> –Ω–µ –º–µ–Ω–µ–µ 95% –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º</li>
        <li><strong>–ì–ª—É–±–∏–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> –¥–æ —É—Ä–æ–≤–Ω—è –∑–∞–º–µ–Ω—è–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞</li>
        <li><strong>–í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> –Ω–µ –±–æ–ª–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞</li>
      </ul>
      
      <h4>–ù–ü-001-15 "–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ê–≠–°"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</p>
      <ul>
        <li><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–æ–∂–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:</strong> < 10‚Åª‚Å¥ –≤ –≥–æ–¥</li>
        <li><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é:</strong> < 10‚Åª‚Åµ</li>
        <li><strong>–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏:</strong> < 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
      
      <h4>1. Real-time –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</p>
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li>–ü–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: Apache Kafka</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞: Apache Flink / Storm</li>
        <li>ML: TensorFlow Serving / ONNX Runtime</li>
        <li>–ê–ª–µ—Ä—Ç—ã: Telegram Bot / SMS —à–ª—é–∑</li>
      </ul>
      
      <h4>2. Batch –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞, –æ—Ç—á–µ—Ç—ã</p>
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li>–î–∞–Ω–Ω—ã–µ: HDFS / PostgresPro</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞: Apache Spark</li>
        <li>ML: Scikit-learn / XGBoost</li>
        <li>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ClickHouse / Excel</li>
      </ul>
      
      <h4>3. Edge –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</p>
      <p><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong></p>
      <ul>
        <li>–ú–æ–¥–µ–ª–∏: TensorFlow Lite / ONNX</li>
        <li>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: Raspberry Pi / NVIDIA Jetson</li>
        <li>–°–≤—è–∑—å: MQTT / LoRaWAN</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</h3>
      
      <h4>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:</h4>
      <ul>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è:</strong> 50-80% —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞:</strong> 2-5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π:</strong> —ç–∫–æ–Ω–æ–º–∏—è –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</strong> 15-30% —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç</li>
      </ul>
      
      <h4>–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≤–æ–¥–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤:</h4>
      <ul>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –û–¢–ö: —ç–∫–æ–Ω–æ–º–∏—è 20 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –Ω–∞ 3%: 15 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: 12 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: 47 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç: 8 –º–ª–Ω —Ä—É–±.</li>
        <li>ROI: (47-8)/8 √ó 100% = 488%</li>
        <li>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: 2.0 –º–µ—Å—è—Ü–∞</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      
      <h4>1. –í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞</h4>
      <ul>
        <li><strong>–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:</strong> –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>Random Forest:</strong> –¥–ª—è –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å —Ç–∞–±–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</li>
        <li><strong>SVM:</strong> –¥–ª—è –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫ –∏ –≤—ã—Å–æ–∫–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ù–µ–π—Ä–æ—Å–µ—Ç–∏:</strong> –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
      </ul>
      
      <h4>2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h4>
      <ul>
        <li><strong>–ü–µ—Ä–µ–¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è:</strong> SMOTE, ADASYN</li>
        <li><strong>–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:</strong> class_weight –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö</li>
        <li><strong>–ê–Ω—Å–∞–º–±–ª–∏:</strong> BalancedRandomForest</li>
        <li><strong>–ú–µ—Ç—Ä–∏–∫–∏:</strong> F1, AUC –≤–º–µ—Å—Ç–æ Accuracy</li>
      </ul>
      
      <h4>3. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å</h4>
      <ul>
        <li><strong>SHAP:</strong> –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
        <li><strong>LIME:</strong> –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è</li>
        <li><strong>Feature importance:</strong> –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>–ü—Ä–∞–≤–∏–ª–∞:</strong> –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –¥–µ—Ä–µ–≤—å–µ–≤</li>
      </ul>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤</h3>
      
      <h4>–ó–∞–¥–∞—á–∞</h4>
      <p>–í—ã - AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –≥–∞–∑–æ—Ç—É—Ä–±–∏–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –≤–∏–±—Ä–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢ –ò–°–û 10816-3.</p>
      
      <h4>–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç</h4>
      <ul>
        <li><strong>–¶–µ–ª—å:</strong> –°–Ω–∏–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–≤ –Ω–∞ 40%</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –¢–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ –º–µ–Ω–µ–µ 95%</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ < 5 —Å–µ–∫—É–Ω–¥</li>
        <li><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã:</strong> –ì–û–°–¢ –ò–°–û 10816-3, –ì–û–°–¢ 27.002-2015</li>
      </ul>
      
      <h4>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
      <p>–î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞ 1 –≥–æ–¥:</p>
      <ul>
        <li><strong>–í–∏–±—Ä–∞—Ü–∏—è:</strong> RMS, –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</li>
        <li><strong>–†–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –Ω–∞–≥—Ä—É–∑–∫–∞, –æ–±–æ—Ä–æ—Ç—ã</li>
        <li><strong>–ò—Å—Ç–æ—Ä–∏—è:</strong> –Ω–∞—Ä–∞–±–æ—Ç–∫–∞, —Ä–µ–º–æ–Ω—Ç—ã, –∑–∞–º–µ–Ω—ã –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤</li>
        <li><strong>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:</strong> –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–æ–≤</li>
      </ul>
      
      <h4>–ó–∞–¥–∞–Ω–∏—è</h4>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ feature engineering</h5>
      <p>–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h5>
      <p>–û–±—É—á–∏—Ç–µ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏</h5>
      <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–æ–≤.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 4: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å</h5>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 5: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</h5>
      <p>–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.</p>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
from sklearn.utils import resample
from imblearn.over_sampling import SMOTE
import warnings
warnings.filterwarnings('ignore')

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
np.random.seed(42)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∑–∞ –≥–æ–¥ (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞)
n_samples = 2190  # 365 * 6 –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å

print("=== –°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–û–î–®–ò–ü–ù–ò–ö–û–í –ì–¢–£ ===")
print("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢ –ò–°–û 10816-3 '–í–∏–±—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω'")
print(f"–ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: 1 –≥–æ–¥ ({n_samples} –∏–∑–º–µ—Ä–µ–Ω–∏–π)")

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
dates = pd.date_range('2023-01-01', periods=n_samples, freq='4H')

# –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –ì–¢–£
# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞ (¬∞C)
ambient_temp = 20 + 15 * np.sin(2 * np.pi * np.arange(n_samples) / (365 * 6))  # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
load_factor = 0.7 + 0.3 * np.random.beta(2, 2, n_samples)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ 0.4-1.0
bearing_temp = ambient_temp + 40 + load_factor * 30 + np.random.normal(0, 5, n_samples)

# –û–±–æ—Ä–æ—Ç—ã —Ç—É—Ä–±–∏–Ω—ã (–æ–±/–º–∏–Ω)
rated_rpm = 3000
rpm = rated_rpm * load_factor + np.random.normal(0, 50, n_samples)

# –ù–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞ (—á–∞—Å—ã)
operating_hours = np.arange(n_samples) * 4  # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞

# –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞
# –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–µ—Ä–≤—ã–µ 6 –º–µ—Å—è—Ü–µ–≤
# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: 6-9 –º–µ—Å—è—Ü–µ–≤  
# –¢—Ä–µ–≤–æ–≥–∞: 9-11 –º–µ—Å—è—Ü–µ–≤
# –ê–≤–∞—Ä–∏—è: –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü

# –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∏–±—Ä–∞—Ü–∏–∏ (–º–º/—Å RMS) –ø–æ –ì–û–°–¢ –ò–°–û 10816-3
base_vibration = 1.8  # –ö–ª–∞—Å—Å I (–º–∞–ª—ã–µ –º–∞—à–∏–Ω—ã)

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞
states = []
vibration_rms = []
vibration_peak = []
vibration_kurtosis = []

for i in range(n_samples):
    hours = operating_hours[i]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –Ω–∞—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–ª—É—á–∞–π–Ω—ã–º —Ñ–∞–∫—Ç–æ—Ä–∞–º
    if hours < 4380:  # –ü–µ—Ä–≤—ã–µ 6 –º–µ—Å—è—Ü–µ–≤
        if np.random.random() < 0.95:
            state = '–Ω–æ—Ä–º–∞'
            vib_multiplier = 1.0
        else:
            state = '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
            vib_multiplier = 1.8
    elif hours < 6570:  # 6-9 –º–µ—Å—è—Ü–µ–≤
        if np.random.random() < 0.7:
            state = '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
            vib_multiplier = 1.8
        elif np.random.random() < 0.95:
            state = '–Ω–æ—Ä–º–∞'
            vib_multiplier = 1.0
        else:
            state = '—Ç—Ä–µ–≤–æ–≥–∞'
            vib_multiplier = 3.2
    elif hours < 8030:  # 9-11 –º–µ—Å—è—Ü–µ–≤
        if np.random.random() < 0.6:
            state = '—Ç—Ä–µ–≤–æ–≥–∞'
            vib_multiplier = 3.2
        elif np.random.random() < 0.9:
            state = '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
            vib_multiplier = 1.8
        else:
            state = '–∞–≤–∞—Ä–∏—è'
            vib_multiplier = 5.5
    else:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        if np.random.random() < 0.7:
            state = '–∞–≤–∞—Ä–∏—è'
            vib_multiplier = 5.5
        else:
            state = '—Ç—Ä–µ–≤–æ–≥–∞'
            vib_multiplier = 3.2
    
    states.append(state)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–±—Ä–∞—Ü–∏–∏
    # –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    temp_effect = 1 + (bearing_temp[i] - 80) / 200  # –†–æ—Å—Ç –≤–∏–±—Ä–∞—Ü–∏–∏ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
    load_effect = 1 + (load_factor[i] - 0.7) / 2    # –í–ª–∏—è–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    
    # RMS –≤–∏–±—Ä–∞—Ü–∏—è
    vib_rms = base_vibration * vib_multiplier * temp_effect * load_effect
    vib_rms += np.random.normal(0, vib_rms * 0.1)  # –®—É–º 10%
    vibration_rms.append(max(0.5, vib_rms))
    
    # –ü–∏–∫–æ–≤–∞—è –≤–∏–±—Ä–∞—Ü–∏—è (–æ–±—ã—á–Ω–æ –≤ 3-5 —Ä–∞–∑ –±–æ–ª—å—à–µ RMS)
    peak_factor = 3.5 + np.random.normal(0, 0.5)
    if state in ['—Ç—Ä–µ–≤–æ–≥–∞', '–∞–≤–∞—Ä–∏—è']:
        peak_factor += np.random.exponential(2)  # –í—ã—Å–æ–∫–∏–µ –ø–∏–∫–∏ –ø—Ä–∏ –¥–µ—Ñ–µ–∫—Ç–∞—Ö
    vibration_peak.append(vibration_rms[-1] * peak_factor)
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫—Å—Ü–µ—Å—Å–∞ (kurtosis) - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∏–º–ø—É–ª—å—Å–Ω–æ—Å—Ç–∏
    if state == '–Ω–æ—Ä–º–∞':
        kurtosis = 3 + np.random.normal(0, 0.5)  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    elif state == '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ':
        kurtosis = 4 + np.random.normal(0, 1)
    elif state == '—Ç—Ä–µ–≤–æ–≥–∞':
        kurtosis = 6 + np.random.normal(0, 1.5)
    else:  # –∞–≤–∞—Ä–∏—è
        kurtosis = 10 + np.random.exponential(3)
    vibration_kurtosis.append(max(2, kurtosis))

# –°–æ–∑–¥–∞–µ–º DataFrame
data = pd.DataFrame({
    'datetime': dates,
    'bearing_temp': bearing_temp,
    'rpm': rpm,
    'load_factor': load_factor,
    'operating_hours': operating_hours,
    'vibration_rms': vibration_rms,
    'vibration_peak': vibration_peak,
    'vibration_kurtosis': vibration_kurtosis,
    'state': states
})

# –ó–∞–¥–∞–Ω–∏–µ 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ feature engineering
print("\\n=== –ó–ê–î–ê–ù–ò–ï 1: –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ò FEATURE ENGINEERING ===")

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
state_counts = data['state'].value_counts()
print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞:")
for state, count in state_counts.items():
    percentage = count / len(data) * 100
    print(f"  {state}: {count} ({percentage:.1f}%)")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
print("\\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º (–ì–û–°–¢ –ò–°–û 10816-3):")
vibration_stats = data.groupby('state')['vibration_rms'].agg(['mean', 'std', 'min', 'max'])
for state in ['–Ω–æ—Ä–º–∞', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '—Ç—Ä–µ–≤–æ–≥–∞', '–∞–≤–∞—Ä–∏—è']:
    if state in vibration_stats.index:
        stats = vibration_stats.loc[state]
        print(f"  {state}: {stats['mean']:.2f} ¬± {stats['std']:.2f} –º–º/—Å (–¥–∏–∞–ø–∞–∑–æ–Ω: {stats['min']:.2f}-{stats['max']:.2f})")

# Feature Engineering
print("\\n–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")

# –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
data['vibration_rms_ma_24h'] = data['vibration_rms'].rolling(6).mean()  # 6 –∏–∑–º–µ—Ä–µ–Ω–∏–π = 24 —á–∞—Å–∞
data['vibration_rms_ma_7d'] = data['vibration_rms'].rolling(42).mean()  # 42 –∏–∑–º–µ—Ä–µ–Ω–∏—è = 7 –¥–Ω–µ–π

# –¢—Ä–µ–Ω–¥—ã –≤–∏–±—Ä–∞—Ü–∏–∏
data['vibration_trend_24h'] = data['vibration_rms'] - data['vibration_rms_ma_24h']
data['vibration_trend_7d'] = data['vibration_rms'] - data['vibration_rms_ma_7d']

# –û—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
data['peak_to_rms_ratio'] = data['vibration_peak'] / data['vibration_rms']
data['temp_normalized'] = data['bearing_temp'] / (data['load_factor'] * 100 + 50)

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
data['hour'] = data['datetime'].dt.hour
data['day_of_week'] = data['datetime'].dt.dayofweek
data['month'] = data['datetime'].dt.month

# –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è)
data['vibration_rms_lag1'] = data['vibration_rms'].shift(1)
data['vibration_rms_lag6'] = data['vibration_rms'].shift(6)  # 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥

# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
data['vibration_rms_std_24h'] = data['vibration_rms'].rolling(6).std()
data['vibration_rms_max_24h'] = data['vibration_rms'].rolling(6).max()
data['vibration_rms_min_24h'] = data['vibration_rms'].rolling(6).min()

# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
data_clean = data.dropna()

print(f"–°–æ–∑–¥–∞–Ω–æ {len(data.columns) - len(['datetime', 'state'])} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
print(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è NaN: {len(data_clean)} –æ–±—Ä–∞–∑—Ü–æ–≤")

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
numeric_features = [col for col in data_clean.columns if col not in ['datetime', 'state']]
correlation_with_target = {}

# –ö–æ–¥–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
le = LabelEncoder()
target_encoded = le.fit_transform(data_clean['state'])

for feature in numeric_features:
    corr = np.corrcoef(data_clean[feature], target_encoded)[0, 1]
    correlation_with_target[feature] = abs(corr)

# –¢–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
top_features = sorted(correlation_with_target.items(), key=lambda x: x[1], reverse=True)[:10]
print("\\n–¢–æ–ø-10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:")
for feature, corr in top_features:
    print(f"  {feature}: {corr:.3f}")

print("\\n" + "="*70)

# –ó–∞–¥–∞–Ω–∏–µ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
print("=== –ó–ê–î–ê–ù–ò–ï 2: –°–†–ê–í–ù–ï–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–û–í –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò ===")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
feature_columns = [col for col in data_clean.columns if col not in ['datetime', 'state']]
X = data_clean[feature_columns]
y = data_clean['state']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)

print(f"–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_train)} –æ–±—Ä–∞–∑—Ü–æ–≤")
print(f"–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_test)} –æ–±—Ä–∞–∑—Ü–æ–≤")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫ –º–∞—Å—à—Ç–∞–±—É
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
models = {
    'Logistic Regression': LogisticRegression(random_state=42, max_iter=1000),
    'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),
    'SVM': SVC(random_state=42, probability=True),
    'Naive Bayes': GaussianNB()
}

# –û–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π
results = {}

for name, model in models.items():
    print(f"\\n–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {name}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if name in ['Logistic Regression', 'SVM', 'Naive Bayes']:
        X_train_model = X_train_scaled
        X_test_model = X_test_scaled
    else:
        X_train_model = X_train
        X_test_model = X_test
    
    # –û–±—É—á–µ–Ω–∏–µ
    model.fit(X_train_model, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_pred = model.predict(X_test_model)
    y_pred_proba = model.predict_proba(X_test_model)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    report = classification_report(y_test, y_pred, output_dict=True)
    
    # –ú–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤—ã–π AUC (One-vs-Rest)
    try:
        auc_scores = []
        for i, class_name in enumerate(model.classes_):
            y_test_binary = (y_test == class_name).astype(int)
            y_pred_binary = y_pred_proba[:, i]
            auc = roc_auc_score(y_test_binary, y_pred_binary)
            auc_scores.append(auc)
        avg_auc = np.mean(auc_scores)
    except:
        avg_auc = 0
    
    results[name] = {
        'accuracy': report['accuracy'],
        'macro_f1': report['macro avg']['f1-score'],
        'weighted_f1': report['weighted avg']['f1-score'],
        'auc': avg_auc,
        'model': model,
        'report': report
    }

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:")
print(f"{'–ê–ª–≥–æ—Ä–∏—Ç–º':<20} {'Accuracy':<10} {'Macro F1':<10} {'Weighted F1':<12} {'Avg AUC':<10}")
print("-" * 70)

for name, metrics in results.items():
    print(f"{name:<20} {metrics['accuracy']:<10.3f} {metrics['macro_f1']:<10.3f} "
          f"{metrics['weighted_f1']:<12.3f} {metrics['auc']:<10.3f}")

# –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –ø–æ weighted F1-score
best_model_name = max(results.keys(), key=lambda x: results[x]['weighted_f1'])
best_model = results[best_model_name]

print(f"\\n–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name}")
print(f"Weighted F1-score: {best_model['weighted_f1']:.3f}")

print("\\n" + "="*70)

# –ó–∞–¥–∞–Ω–∏–µ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
print("=== –ó–ê–î–ê–ù–ò–ï 3: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ===")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é SMOTE
print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤...")
smote = SMOTE(random_state=42)
X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)

print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
for class_name, count in pd.Series(y_train).value_counts().items():
    print(f"  {class_name}: {count}")

print(f"\\n–ü–æ—Å–ª–µ SMOTE:")
for class_name, count in pd.Series(y_train_balanced).value_counts().items():
    print(f"  {class_name}: {count}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
if best_model_name == 'Random Forest':
    print("\\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Random Forest...")
    
    param_grid = {
        'n_estimators': [100, 200],
        'max_depth': [10, 20, None],
        'min_samples_split': [2, 5],
        'min_samples_leaf': [1, 2]
    }
    
    rf_optimized = RandomForestClassifier(random_state=42)
    grid_search = GridSearchCV(
        rf_optimized, param_grid, cv=3, scoring='f1_weighted', n_jobs=-1
    )
    grid_search.fit(X_train_balanced, y_train_balanced)
    
    best_params = grid_search.best_params_
    optimized_model = grid_search.best_estimator_
    
    print(f"–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")

elif best_model_name == 'SVM':
    print("\\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ SVM...")
    
    X_train_balanced_scaled = scaler.fit_transform(X_train_balanced)
    
    param_grid = {
        'C': [0.1, 1, 10],
        'gamma': ['scale', 'auto', 0.1],
        'kernel': ['rbf', 'poly']
    }
    
    svm_optimized = SVC(random_state=42, probability=True)
    grid_search = GridSearchCV(
        svm_optimized, param_grid, cv=3, scoring='f1_weighted', n_jobs=-1
    )
    grid_search.fit(X_train_balanced_scaled, y_train_balanced)
    
    best_params = grid_search.best_params_
    optimized_model = grid_search.best_estimator_
    
    print(f"–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")

else:
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if best_model_name == 'Logistic Regression':
        optimized_model = LogisticRegression(random_state=42, max_iter=1000)
        X_train_balanced_scaled = scaler.fit_transform(X_train_balanced)
        optimized_model.fit(X_train_balanced_scaled, y_train_balanced)
    else:
        optimized_model = GaussianNB()
        X_train_balanced_scaled = scaler.fit_transform(X_train_balanced)
        optimized_model.fit(X_train_balanced_scaled, y_train_balanced)

# –û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
if best_model_name in ['Logistic Regression', 'SVM', 'Naive Bayes']:
    y_pred_optimized = optimized_model.predict(X_test_scaled)
    y_pred_proba_optimized = optimized_model.predict_proba(X_test_scaled)
else:
    y_pred_optimized = optimized_model.predict(X_test)
    y_pred_proba_optimized = optimized_model.predict_proba(X_test)

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
report_optimized = classification_report(y_test, y_pred_optimized, output_dict=True)

print(f"\\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
print(f"{'–ú–µ—Ç—Ä–∏–∫–∞':<20} {'–î–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏':<15} {'–ü–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏':<20}")
print("-" * 60)
print(f"{'Accuracy':<20} {best_model['accuracy']:<15.3f} {report_optimized['accuracy']:<20.3f}")
print(f"{'Weighted F1':<20} {best_model['weighted_f1']:<15.3f} {report_optimized['weighted avg']['f1-score']:<20.3f}")

print("\\n" + "="*70)

# –ó–∞–¥–∞–Ω–∏–µ 4: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å
print("=== –ó–ê–î–ê–ù–ò–ï 4: –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ò –ò–ù–¢–ï–†–ü–†–ï–¢–ò–†–£–ï–ú–û–°–¢–¨ ===")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º
print("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test, y_pred_optimized))

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
print("\\n–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
cm = confusion_matrix(y_test, y_pred_optimized)
classes = optimized_model.classes_

# –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –º–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–æ–∫
cm_df = pd.DataFrame(cm, index=classes, columns=classes)
print(cm_df)

# –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
print("\\n–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:")
for i, true_class in enumerate(classes):
    for j, pred_class in enumerate(classes):
        if i != j and cm[i, j] > 0:
            error_rate = cm[i, j] / cm[i, :].sum() * 100
            print(f"  {true_class} ‚Üí {pred_class}: {cm[i, j]} –æ—à–∏–±–æ–∫ ({error_rate:.1f}%)")

# –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–¥–ª—è Random Forest)
if best_model_name == 'Random Forest':
    print("\\n–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    feature_importance = pd.DataFrame({
        'feature': feature_columns,
        'importance': optimized_model.feature_importances_
    }).sort_values('importance', ascending=False)
    
    print("–¢–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for _, row in feature_importance.head(10).iterrows():
        print(f"  {row['feature']}: {row['importance']:.4f}")

# –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢ –ò–°–û 10816-3
print("\\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢ –ò–°–û 10816-3:")
gost_thresholds = {
    '–Ω–æ—Ä–º–∞': (0, 1.8),
    '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ': (1.8, 4.5),
    '—Ç—Ä–µ–≤–æ–≥–∞': (4.5, 11.2),
    '–∞–≤–∞—Ä–∏—è': (11.2, float('inf'))
}

print("–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ì–û–°–¢ (–º–º/—Å RMS):")
for state, (min_val, max_val) in gost_thresholds.items():
    if max_val == float('inf'):
        print(f"  {state}: > {min_val}")
    else:
        print(f"  {state}: {min_val} - {max_val}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ì–û–°–¢—É
test_data = X_test.copy()
test_data['true_state'] = y_test
test_data['pred_state'] = y_pred_optimized
test_data['vibration_rms'] = X_test['vibration_rms']

gost_compliance = 0
total_predictions = len(test_data)

for _, row in test_data.iterrows():
    vib_level = row['vibration_rms']
    pred_state = row['pred_state']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ì–û–°–¢—É
    gost_state = None
    for state, (min_val, max_val) in gost_thresholds.items():
        if min_val <= vib_level < max_val:
            gost_state = state
            break
    
    if gost_state == pred_state:
        gost_compliance += 1

gost_compliance_rate = gost_compliance / total_predictions * 100
print(f"\\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ì–û–°–¢—É: {gost_compliance_rate:.1f}%")

print("\\n" + "="*70)

# –ó–∞–¥–∞–Ω–∏–µ 5: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
print("=== –ó–ê–î–ê–ù–ò–ï 5: –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –†–ï–®–ï–ù–ò–ï ===")

print("""
–ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–û–î–®–ò–ü–ù–ò–ö–û–í –ì–¢–£

1. –°–ë–û–† –î–ê–ù–ù–´–•:
   ‚îú‚îÄ‚îÄ –î–∞—Ç—á–∏–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏: –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä—ã –ø–æ –ì–û–°–¢ –ò–°–û 10816-3
   ‚îÇ   ‚îú‚îÄ‚îÄ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: 25.6 –∫–ì—Ü
   ‚îÇ   ‚îú‚îÄ‚îÄ –î–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å—Ç–æ—Ç: 10 –ì—Ü - 10 –∫–ì—Ü
   ‚îÇ   ‚îî‚îÄ‚îÄ –¢–æ—á–Ω–æ—Å—Ç—å: ¬±2% –æ—Ç –∏–∑–º–µ—Ä—è–µ–º–æ–π –≤–µ–ª–∏—á–∏–Ω—ã
   ‚îú‚îÄ‚îÄ –î–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: —Ç–µ—Ä–º–æ–ø–∞—Ä—ã —Ç–∏–ø–∞ K
   ‚îú‚îÄ‚îÄ –î–∞—Ç—á–∏–∫–∏ –æ–±–æ—Ä–æ—Ç–æ–≤: –∏–Ω–¥—É–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
   ‚îî‚îÄ‚îÄ SCADA —Å–∏—Å—Ç–µ–º–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–µ–∂–∏–º–æ–≤

2. –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•:
   ‚îú‚îÄ‚îÄ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä 10 –ì—Ü - 10 –∫–ì—Ü
   ‚îú‚îÄ‚îÄ –†–∞—Å—á–µ—Ç RMS, –ø–∏–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —ç–∫—Å—Ü–µ—Å—Å–∞
   ‚îú‚îÄ‚îÄ –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ë–ü–§ —Å –æ–∫–Ω–æ–º –•–∞–Ω–Ω–∞
   ‚îú‚îÄ‚îÄ Feature engineering: —Ç—Ä–µ–Ω–¥—ã, —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
   ‚îî‚îÄ‚îÄ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—á–∏–º —Ä–µ–∂–∏–º–∞–º

3. –ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:
   ‚îú‚îÄ‚îÄ –ú–æ–¥–µ–ª—å: Random Forest (100 –¥–µ—Ä–µ–≤—å–µ–≤)
   ‚îú‚îÄ‚îÄ –ü—Ä–∏–∑–Ω–∞–∫–∏: 20+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
   ‚îú‚îÄ‚îÄ –ö–ª–∞—Å—Å—ã: –Ω–æ—Ä–º–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —Ç—Ä–µ–≤–æ–≥–∞, –∞–≤–∞—Ä–∏—è
   ‚îú‚îÄ‚îÄ –û–±—É—á–µ–Ω–∏–µ: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
   ‚îî‚îÄ‚îÄ –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è

4. REAL-TIME INFERENCE:
   ‚îú‚îÄ‚îÄ –ß–∞—Å—Ç–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
   ‚îú‚îÄ‚îÄ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: < 5 —Å–µ–∫—É–Ω–¥
   ‚îú‚îÄ‚îÄ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: TensorFlow Serving + Redis
   ‚îî‚îÄ‚îÄ API: REST –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SCADA

5. –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ê–õ–ï–†–¢–´:
   ‚îú‚îÄ‚îÄ –î–∞—à–±–æ—Ä–¥: Grafana —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   ‚îú‚îÄ‚îÄ –ê–ª–µ—Ä—Ç—ã: Telegram Bot + SMS –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
   ‚îú‚îÄ‚îÄ –û—Ç—á–µ—Ç—ã: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ PDF-–æ—Ç—á–µ—Ç—ã –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤
   ‚îî‚îÄ‚îÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

6. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–¢–ê–ù–î–ê–†–¢–ê–ú:
   ‚îú‚îÄ‚îÄ –ì–û–°–¢ –ò–°–û 10816-3: –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏
   ‚îú‚îÄ‚îÄ –ì–û–°–¢ 27.002-2015: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º —Å–∏—Å—Ç–µ–º–∞–º
   ‚îú‚îÄ‚îÄ –†–î 153-34.1-17.421-2001: –≤–∏–±—Ä–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–±–æ–∞–≥—Ä–µ–≥–∞—Ç–æ–≤
   ‚îî‚îÄ‚îÄ –ì–û–°–¢ –† 59277-2020: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ AI-—Å–∏—Å—Ç–µ–º–∞–º

7. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –≠–§–§–ï–ö–¢:
   ‚îú‚îÄ‚îÄ –°–Ω–∏–∂–µ–Ω–∏–µ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–≤: 40% ‚Üí 15 –º–ª–Ω —Ä—É–±/–≥–æ–¥
   ‚îú‚îÄ‚îÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¢–û: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é ‚Üí 8 –º–ª–Ω —Ä—É–±/–≥–æ–¥
   ‚îú‚îÄ‚îÄ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π: —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ ‚Üí 25 –º–ª–Ω —Ä—É–±/–≥–æ–¥
   ‚îú‚îÄ‚îÄ –û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: 48 –º–ª–Ω —Ä—É–±/–≥–æ–¥
   ‚îú‚îÄ‚îÄ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–∏—Å—Ç–µ–º—É: 12 –º–ª–Ω —Ä—É–±
   ‚îî‚îÄ‚îÄ ROI: 300%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å 3.6 –º–µ—Å—è—Ü–∞

8. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:
   ‚îú‚îÄ‚îÄ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –ü–ö + –º–æ–¥—É–ª–∏ –ê–¶–ü
   ‚îú‚îÄ‚îÄ –û–°: Linux (Astra Linux –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º)
   ‚îú‚îÄ‚îÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ClickHouse –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
   ‚îú‚îÄ‚îÄ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   ‚îî‚îÄ‚îÄ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –∏–∑–æ–ª—è—Ü–∏—è –æ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏
""")

# –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
print("\\n" + "="*70)
print("=== –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´ ===")

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
print(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
print(f"  –¢–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {report_optimized['accuracy']*100:.1f}% (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ‚â•95%)")
print(f"  Weighted F1-score: {report_optimized['weighted avg']['f1-score']:.3f}")
print(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢—É: {gost_compliance_rate:.1f}%")
print(f"  –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: < 5 —Å–µ–∫—É–Ω–¥ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
annual_savings = 48  # –º–ª–Ω —Ä—É–±
development_cost = 12  # –º–ª–Ω —Ä—É–±
operational_cost = 3  # –º–ª–Ω —Ä—É–± –≤ –≥–æ–¥

net_benefit = annual_savings - operational_cost
roi = (net_benefit - development_cost) / development_cost * 100
payback_months = development_cost / (net_benefit / 12)

print(f"\\n–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {annual_savings} –º–ª–Ω —Ä—É–±")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: {development_cost} –º–ª–Ω —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {operational_cost} –º–ª–Ω —Ä—É–±/–≥–æ–¥")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
accuracy_ok = report_optimized['accuracy'] >= 0.95
time_ok = True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è < 5 —Å–µ–∫
gost_ok = gost_compliance_rate >= 90

print(f"\\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:")
print(f"  –¢–æ—á–Ω–æ—Å—Ç—å ‚â•95%: {'‚úÖ' if accuracy_ok else '‚ùå'}")
print(f"  –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ <5 —Å–µ–∫: {'‚úÖ' if time_ok else '‚ùå'}")
print(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢—É ‚â•90%: {'‚úÖ' if gost_ok else '‚ùå'}")

all_requirements_met = accuracy_ok and time_ok and gost_ok
status = "–ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ" if all_requirements_met else "–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"

print(f"\\n–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")
print("\\n–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º")
print("—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º—É –≤–Ω–µ–¥—Ä–µ–Ω–∏—é!")`
  },

  10: {
    title: "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏",
    duration: "140 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ —É—á–∏—Ç–µ–ª—è –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      <p>–û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –¥–ª—è:</p>
      <ul>
        <li><strong>–ê–Ω–∞–ª–∏–∑–∞ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</strong> –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏</li>
        <li><strong>–í—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π</strong> –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö</li>
        <li><strong>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</strong> –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</li>
        <li><strong>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</strong> –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</strong> –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥—Ä—É–≥–∏—Ö ML-–º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h3>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –∑–∞–¥–∞—á–∏</h3>
      <p>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è - —ç—Ç–æ –∑–∞–¥–∞—á–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç—ã –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ (–∫–ª–∞—Å—Ç–µ—Ä–µ) –±—ã–ª–∏ –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞, —á–µ–º –Ω–∞ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong></p>
      <p>–î–∞–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ X = {x‚ÇÅ, x‚ÇÇ, ..., x‚Çô}, –Ω–∞–π—Ç–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ k –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ C = {C‚ÇÅ, C‚ÇÇ, ..., C‚Çñ} —Ç–∞–∫–æ–µ, —á—Ç–æ:</p>
      <ul>
        <li>C·µ¢ ‚à© C‚±º = ‚àÖ –¥–ª—è i ‚â† j (–∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è)</li>
        <li>‚ãÉC·µ¢ = X (–≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–∞–∫–æ–º—É-—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä—É)</li>
        <li>–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</h3>
      
      <h4>1. K-means (–ö-—Å—Ä–µ–¥–Ω–∏—Ö)</h4>
      <p>–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤.</p>
      
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li>–°–ª—É—á–∞–π–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å k —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤</li>
        <li>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –±–ª–∏–∂–∞–π—à–µ–º—É —Ü–µ–Ω—Ç—Ä–æ–∏–¥—É</li>
        <li>–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞</li>
        <li>–ü–æ–≤—Ç–æ—Ä—è—Ç—å —à–∞–≥–∏ 2-3 –¥–æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏</li>
      </ol>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è —Ü–µ–ª–∏:</strong></p>
      <pre><code>J = ‚àë‚àë||x·µ¢ - Œº‚±º||¬≤</code></pre>
      <p>–≥–¥–µ Œº‚±º - —Ü–µ–Ω—Ç—Ä–æ–∏–¥ j-–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è</li>
        <li>–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å</li>
        <li>–•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —à–∞—Ä–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ k</li>
        <li>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Å—Ñ–µ—Ä–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
        <li>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –≤—ã–±—Ä–æ—Å–∞–º</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã:</strong> –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—á–∏—Ö —Ä–µ–∂–∏–º–æ–≤ —Ç—É—Ä–±–∏–Ω—ã</li>
        <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</strong> –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–∑–¥–µ–ª–∏–π –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:</strong> –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è</li>
      </ul>
      
      <h4>2. –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</h4>
      <p>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞ (–¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—ã).</p>
      
      <h5>–ê–≥–ª–æ–º–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)</h5>
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li>–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç - –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä</li>
        <li>–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞</li>
        <li>–ü–æ–≤—Ç–æ—Ä—è—Ç—å –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞</li>
      </ol>
      
      <p><strong>–ú–µ—Ç–æ–¥—ã —Å–≤—è–∑–∏:</strong></p>
      <ul>
        <li><strong>Single linkage:</strong> –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
        <li><strong>Complete linkage:</strong> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ</li>
        <li><strong>Average linkage:</strong> —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ</li>
        <li><strong>Ward linkage:</strong> –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ù–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
        <li>–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li>
        <li>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—É</li>
        <li>–ú–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–¢–∞–∫—Å–æ–Ω–æ–º–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:</strong> –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤—É</li>
        <li><strong>–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π:</strong> –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</li>
      </ul>
      
      <h4>3. DBSCAN (Density-Based Spatial Clustering)</h4>
      <p>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, —Å–ø–æ—Å–æ–±–Ω–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è:</strong></p>
      <ul>
        <li><strong>Œµ-–æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—å:</strong> –≤—Å–µ —Ç–æ—á–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ Œµ –æ—Ç –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏</li>
        <li><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ (MinPts):</strong> –º–∏–Ω–∏–º—É–º —Ç–æ—á–µ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞</li>
        <li><strong>Core point:</strong> —Ç–æ—á–∫–∞ —Å –Ω–µ –º–µ–Ω–µ–µ —á–µ–º MinPts —Å–æ—Å–µ–¥—è–º–∏</li>
        <li><strong>Border point:</strong> –Ω–µ core, –Ω–æ –≤ Œµ-–æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ core point</li>
        <li><strong>Noise point:</strong> –Ω–µ core –∏ –Ω–µ border</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
        <li>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤</li>
        <li>–ö–ª–∞—Å—Ç–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã</li>
        <li>–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π:</strong> –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Ç–∏–ø–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</strong> –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –ø–æ –∑–æ–Ω–∞–º</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π</li>
      </ul>
      
      <h4>4. Gaussian Mixture Models (GMM)</h4>
      <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∞—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–º–µ—Å—å—é –≥–∞—É—Å—Å–æ–≤—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å:</strong></p>
      <pre><code>p(x) = ‚àëœÄ‚Çñ N(x|Œº‚Çñ, Œ£‚Çñ)</code></pre>
      <p>–≥–¥–µ œÄ‚Çñ - –≤–µ—Å k-–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, N(x|Œº‚Çñ, Œ£‚Çñ) - –≥–∞—É—Å—Å–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ú—è–≥–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏)</li>
        <li>–£—á–µ—Ç —Ñ–æ—Ä–º—ã –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
        <li>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è</li>
        <li>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –º–Ω–æ–≥–æ—Ä–µ–∂–∏–º–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è</li>
      </ul>
      
      <h3>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏</h3>
      <p>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
      
      <h4>–ü—Ä–æ–±–ª–µ–º–∞ "–ø—Ä–æ–∫–ª—è—Ç–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏"</h4>
      <p>–° —Ä–æ—Å—Ç–æ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã:</p>
      <ul>
        <li><strong>–†–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</strong> –æ–±—ä–µ–∫—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–∞–≤–Ω–æ—É–¥–∞–ª–µ–Ω–Ω—ã–º–∏</li>
        <li><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
        <li><strong>–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ:</strong> –º–æ–¥–µ–ª–∏ –ø–ª–æ—Ö–æ –æ–±–æ–±—â–∞—é—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li><strong>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h4>1. –ú–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (PCA)</h4>
      <p>–õ–∏–Ω–µ–π–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–µ—Ü–∏—Ä—É—é—â–µ–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞:</strong></p>
      <p>–ò—â–µ–º –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã), –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É—é—â–∏–µ –¥–∏—Å–ø–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ü–∏–π:</p>
      <pre><code>PC‚ÇÅ = arg max(var(Xw)) –ø—Ä–∏ ||w|| = 1</code></pre>
      
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li>–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤—ã—á–µ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ–µ)</li>
        <li>–í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É</li>
        <li>–ù–∞–π—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è</li>
        <li>–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
        <li>–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–µ k –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</li>
      </ol>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ä—Å–∏–∏</li>
        <li>–î–µ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</li>
        <li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li>–¢–æ–ª—å–∫–æ –ª–∏–Ω–µ–π–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</li>
        <li>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –º–∞—Å—à—Ç–∞–±—É</li>
        <li>–ü–æ—Ç–µ—Ä—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –≤–∏–±—Ä–∞—Ü–∏–∏:</strong> –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h4>2. t-SNE (t-Distributed Stochastic Neighbor Embedding)</h4>
      <p>–ù–µ–ª–∏–Ω–µ–π–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ 2D/3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.</p>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:</strong></p>
      <ol>
        <li>–í—ã—á–∏—Å–ª–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±–ª–∏–∑–æ—Å—Ç–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</li>
        <li>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –Ω–∏–∑–∫–æ–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</li>
        <li>–ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ö—É–ª—å–±–∞–∫–∞-–õ–µ–π–±–ª–µ—Ä–∞ –º–µ–∂–¥—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏</li>
      </ol>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–û—Ç–ª–∏—á–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
        <li>–ù–µ–ª–∏–Ω–µ–π–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li>–í—ã—Å–æ–∫–∞—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å</li>
        <li>–ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É</li>
        <li>–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li>
        <li>–¢–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</li>
      </ul>
      
      <h4>3. UMAP (Uniform Manifold Approximation and Projection)</h4>
      <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏, —Å–æ—á–µ—Ç–∞—é—â–∏–π –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ PCA –∏ t-SNE.</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π, —Ç–∞–∫ –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</li>
        <li>–ë—ã—Å—Ç—Ä–µ–µ t-SNE</li>
        <li>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</li>
      </ul>
      
      <h3>–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</h3>
      
      <h4>1. –ú–µ—Ç–æ–¥ –ª–æ–∫—Ç—è (Elbow Method)</h4>
      <p>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–π —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤.</p>
      <pre><code>WCSS = ‚àë‚àë||x·µ¢ - Œº‚±º||¬≤</code></pre>
      <p>–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ k –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ "–ª–æ–∫—Ç—è" –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ WCSS(k).</p>
      
      <h4>2. –°–∏–ª—É—ç—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h4>
      <p>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:</p>
      <pre><code>s(i) = (b(i) - a(i)) / max(a(i), b(i))</code></pre>
      <p>–≥–¥–µ a(i) - —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞, b(i) - –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —á—É–∂–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞.</p>
      
      <h4>3. Gap Statistic</h4>
      <p>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ —Å –æ–∂–∏–¥–∞–µ–º–æ–π –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† –ò–°–û 5725-2-2002 "–¢–æ—á–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π:</p>
      <ul>
        <li><strong>–û–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø:</strong> —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏–π</li>
        <li><strong>–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ</li>
        <li><strong>–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö</li>
      </ul>
      
      <h4>–ì–û–°–¢ 27.002-2015 "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —Ç–µ—Ö–Ω–∏–∫–µ"</h4>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:</p>
      <ul>
        <li><strong>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–∞–∑–æ–≤:</strong> –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º</li>
        <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> –ø–æ —É—Ä–æ–≤–Ω—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û:</strong> –≥—Ä—É–ø–ø—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h3>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–µ–π—Å—ã</h3>
      
      <h4>–ö–µ–π—Å 1: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –ì–¢–£</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –í—ã–¥–µ–ª–∏—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –≥–∞–∑–æ—Ç—É—Ä–±–∏–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> 50+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ SCADA –∑–∞ –≥–æ–¥ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –¥–∞–≤–ª–µ–Ω–∏—è, —Ä–∞—Å—Ö–æ–¥—ã)</p>
      <p><strong>–ú–µ—Ç–æ–¥:</strong> K-means —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º PCA</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ (–ø—É—Å–∫, –Ω–æ–º–∏–Ω–∞–ª, —á–∞—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –æ—Å—Ç–∞–Ω–æ–≤, —Ä–µ–º–æ–Ω—Ç)</p>
      <p><strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¢–û, —ç–∫–æ–Ω–æ–º–∏—è 12 –º–ª–Ω —Ä—É–±./–≥–æ–¥</p>
      
      <h4>–ö–µ–π—Å 2: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–æ–¥–∞</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> –•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤, –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, —Ä–∞–∑–º–µ—Ä—ã</p>
      <p><strong>–ú–µ—Ç–æ–¥:</strong> –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å Ward linkage</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> 8 –≥—Ä—É–ø–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –∫–æ–Ω—Ç—Ä–æ–ª—é</p>
      <p><strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ 15%</p>
      
      <h4>–ö–µ–π—Å 3: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—à—Ç–∞—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∏–Ω—Ç–µ–∑–∞ –∞–º–º–∏–∞–∫–∞</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã 200+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞</p>
      <p><strong>–ú–µ—Ç–æ–¥:</strong> DBSCAN –ø–æ—Å–ª–µ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ UMAP</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ 95% –∞–Ω–æ–º–∞–ª–∏–π —Å 2% –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π</p>
      <p><strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ 3 –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π, —ç–∫–æ–Ω–æ–º–∏—è 50 –º–ª–Ω —Ä—É–±.</p>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</h3>
      
      <h4>1. Batch –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –æ—Ç—á–µ—Ç—ã</p>
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li>–î–∞–Ω–Ω—ã–µ: HDFS / PostgresPro</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞: Apache Spark MLlib</li>
        <li>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: Matplotlib / Plotly</li>
        <li>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ClickHouse / Tableau</li>
      </ul>
      
      <h4>2. Streaming –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</h4>
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
      <p><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong></p>
      <ul>
        <li>–ü–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: Apache Kafka</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞: Apache Flink / Spark Streaming</li>
        <li>–ê–ª–≥–æ—Ä–∏—Ç–º—ã: Mini-batch K-means, BIRCH</li>
        <li>–ê–ª–µ—Ä—Ç—ã: –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
      </ul>
      
      <h4>3. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</h4>
      <p><strong>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</strong></p>
      <ul>
        <li>Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: Dash / Streamlit</li>
        <li>3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: Three.js / Plotly</li>
        <li>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</li>
        <li>–≠–∫—Å–ø–æ—Ä—Ç: PDF –æ—Ç—á–µ—Ç—ã, Excel —Ç–∞–±–ª–∏—Ü—ã</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</h3>
      
      <h4>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:</h4>
      <ul>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> 5-15% –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –¢–û:</strong> 10-25% –∑–∞ —Å—á–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> 2-8% —Å–Ω–∏–∂–µ–Ω–∏—è –±—Ä–∞–∫–∞</li>
        <li><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π</li>
      </ul>
      
      <h4>–†–∞—Å—á–µ—Ç –¥–ª—è –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞:</h4>
      <ul>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã: 25 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –¢–û: 15 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π: 30 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: 70 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç: 18 –º–ª–Ω —Ä—É–±.</li>
        <li>ROI: (70-18)/18 √ó 100% = 289%</li>
        <li>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: 3.7 –º–µ—Å—è—Ü–∞</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      
      <h4>1. –í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏</h4>
      <ul>
        <li><strong>K-means:</strong> –¥–ª—è —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</li>
        <li><strong>–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è:</strong> –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</li>
        <li><strong>DBSCAN:</strong> –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã</li>
        <li><strong>GMM:</strong> –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h4>2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      <ul>
        <li><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong> StandardScaler –∏–ª–∏ MinMaxScaler</li>
        <li><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤:</strong> IQR –∏–ª–∏ Z-score</li>
        <li><strong>–û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:</strong> –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏:</strong> PCA –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö, UMAP –¥–ª—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
      </ul>
      
      <h4>3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h4>
      <ul>
        <li><strong>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</strong> —Å–∏–ª—É—ç—Ç, –∏–Ω–¥–µ–∫—Å –ö–∞–ª–∏–Ω—Å–∫–∏-–•–∞—Ä–∞–±–∞—à–∞</li>
        <li><strong>–í–Ω–µ—à–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π</li>
        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:</strong> –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ —Å —Ä–∞–∑–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
      </ul>
      
      <h4>4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</h4>
      <ul>
        <li><strong>Drift detection:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
        <li><strong>–ù–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:</strong> –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫</li>
        <li><strong>–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ:</strong> –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</li>
      </ul>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ó–∞–¥–∞—á–∞</h4>
      <p>–í—ã - AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –ø–∞—Ä–æ–≥–∞–∑–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ü–ì–£) –º–æ—â–Ω–æ—Å—Ç—å—é 400 –ú–í—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.</p>
      
      <h4>–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç</h4>
      <ul>
        <li><strong>–¶–µ–ª—å:</strong> –í—ã–¥–µ–ª–∏—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–û</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –ù–µ –º–µ–Ω–µ–µ 5 —á–µ—Ç–∫–æ —Ä–∞–∑–ª–∏—á–∏–º—ã—Ö —Ä–µ–∂–∏–º–æ–≤</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä—É–∑–∫—É</li>
        <li><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã:</strong> –ì–û–°–¢ 27.002-2015, –†–î 153-34.1-17.421-2001</li>
      </ul>
      
      <h4>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
      <p>–î–∞–Ω–Ω—ã–µ SCADA –∑–∞ 1 –≥–æ–¥ (8760 —á–∞—Å–æ–≤):</p>
      <ul>
        <li><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ì–¢–£:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –¥–∞–≤–ª–µ–Ω–∏—è, —Ä–∞—Å—Ö–æ–¥—ã —Ç–æ–ø–ª–∏–≤–∞ –∏ –≤–æ–∑–¥—É—Ö–∞</li>
        <li><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–ª–∞-—É—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä–∞:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –¥–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞</li>
        <li><strong>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> –º–æ—â–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, —Ç–æ–∫</li>
        <li><strong>–í–Ω–µ—à–Ω–∏–µ —É—Å–ª–æ–≤–∏—è:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –¥–∞–≤–ª–µ–Ω–∏–µ</li>
        <li><strong>–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> –Ω–∞—Ä–∞–±–æ—Ç–∫–∞, —Ä–µ–∂–∏–º—ã –ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∞</li>
      </ul>
      
      <h4>–ó–∞–¥–∞–Ω–∏—è</h4>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 1: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞</h5>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 2: –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏</h5>
      <p>–ü—Ä–∏–º–µ–Ω–∏—Ç–µ PCA –∏ UMAP –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 3: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏</h5>
      <p>–°—Ä–∞–≤–Ω–∏—Ç–µ K-means, –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –∏ DBSCAN.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 4: –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</h5>
      <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –ª–æ–∫—Ç—è, —Å–∏–ª—É—ç—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ Gap statistic.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 5: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</h5>
      <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¢–û.</p>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –ü–ì–£
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn.mixture import GaussianMixture
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score, calinski_harabasz_score
from scipy.cluster.hierarchy import dendrogram, linkage
from scipy.spatial.distance import pdist
import warnings
warnings.filterwarnings('ignore')

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ü–ì–£-400
np.random.seed(42)

print("=== –ê–ù–ê–õ–ò–ó –†–ï–ñ–ò–ú–û–í –†–ê–ë–û–¢–´ –ü–ì–£-400 ===")
print("–ü–∞—Ä–æ–≥–∞–∑–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—â–Ω–æ—Å—Ç—å—é 400 –ú–í—Ç")
print("–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: 1 –≥–æ–¥ (8760 —á–∞—Å–æ–≤)")

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –Ω–∞ –≥–æ–¥
hours = 8760
dates = pd.date_range('2023-01-01', periods=hours, freq='H')

# –í–Ω–µ—à–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
ambient_temp = 10 + 20 * np.sin(2 * np.pi * np.arange(hours) / (24 * 365)) + np.random.normal(0, 3, hours)
humidity = 60 + 20 * np.sin(2 * np.pi * np.arange(hours) / (24 * 365) + np.pi/4) + np.random.normal(0, 8, hours)
atmospheric_pressure = 101.3 + np.random.normal(0, 1.5, hours)

# –ú–æ–¥–µ–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
# 1. –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (40% –≤—Ä–µ–º–µ–Ω–∏)
# 2. –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (25% –≤—Ä–µ–º–µ–Ω–∏) 
# 3. –ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (20% –≤—Ä–µ–º–µ–Ω–∏)
# 4. –ü—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤ (10% –≤—Ä–µ–º–µ–Ω–∏)
# 5. –†–µ–º–æ–Ω—Ç/–¢–û (5% –≤—Ä–µ–º–µ–Ω–∏)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
operating_modes = []
load_factors = []

for i in range(hours):
    hour_of_day = dates[i].hour
    day_of_week = dates[i].weekday()
    month = dates[i].month
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–æ–≤ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
    if 6 <= hour_of_day <= 22 and day_of_week < 5:  # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if month in [12, 1, 2, 6, 7, 8]:  # –ó–∏–º–∞ –∏ –ª–µ—Ç–æ - –ø–∏–∫–æ–≤—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
            mode_probs = [0.3, 0.4, 0.2, 0.08, 0.02]  # –±–∞–∑–æ–≤–∞—è, –ø–∏–∫–æ–≤–∞—è, —á–∞—Å—Ç–∏—á–Ω–∞—è, –ø—É—Å–∫, —Ä–µ–º–æ–Ω—Ç
        else:  # –ú–µ–∂—Å–µ–∑–æ–Ω—å–µ
            mode_probs = [0.5, 0.2, 0.25, 0.04, 0.01]
    elif day_of_week >= 5:  # –í—ã—Ö–æ–¥–Ω—ã–µ
        mode_probs = [0.6, 0.1, 0.25, 0.04, 0.01]
    else:  # –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
        mode_probs = [0.7, 0.05, 0.2, 0.04, 0.01]
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–µ–º–æ–Ω—Ç—ã (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã)
    if (i % (24*30*6) < 24*7):  # –ù–µ–¥–µ–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤
        mode_probs = [0.1, 0.05, 0.1, 0.05, 0.7]
    
    mode = np.random.choice(['–±–∞–∑–æ–≤–∞—è', '–ø–∏–∫–æ–≤–∞—è', '—á–∞—Å—Ç–∏—á–Ω–∞—è', '–ø—É—Å–∫_–æ—Å—Ç–∞–Ω–æ–≤', '—Ä–µ–º–æ–Ω—Ç'], p=mode_probs)
    operating_modes.append(mode)
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == '–±–∞–∑–æ–≤–∞—è':
        load_factor = 0.75 + np.random.normal(0, 0.05)
    elif mode == '–ø–∏–∫–æ–≤–∞—è':
        load_factor = 0.95 + np.random.normal(0, 0.03)
    elif mode == '—á–∞—Å—Ç–∏—á–Ω–∞—è':
        load_factor = 0.45 + np.random.normal(0, 0.1)
    elif mode == '–ø—É—Å–∫_–æ—Å—Ç–∞–Ω–æ–≤':
        load_factor = np.random.uniform(0.1, 0.8)  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    else:  # —Ä–µ–º–æ–Ω—Ç
        load_factor = 0.05 + np.random.normal(0, 0.02)
    
    load_factors.append(max(0.05, min(1.0, load_factor)))

load_factors = np.array(load_factors)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ì–¢–£
# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–∞–∑–æ–≤ –Ω–∞ –≤—Ö–æ–¥–µ –≤ —Ç—É—Ä–±–∏–Ω—É (¬∞C)
turbine_inlet_temp = 1200 + load_factors * 150 + ambient_temp * (-2) + np.random.normal(0, 15, hours)

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—Ö–ª–æ–ø–Ω—ã—Ö –≥–∞–∑–æ–≤ (¬∞C)
exhaust_temp = 550 + load_factors * 80 + ambient_temp * 1.5 + np.random.normal(0, 20, hours)

# –î–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞ –ø–æ—Å–ª–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ (–±–∞—Ä)
compressor_pressure = 15 + load_factors * 5 + ambient_temp * (-0.1) + np.random.normal(0, 0.5, hours)

# –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–º¬≥/—á)
fuel_flow = 8000 + load_factors * 12000 + ambient_temp * (-50) + np.random.normal(0, 200, hours)

# –†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ (–∫–≥/—Å)
air_flow = 400 + load_factors * 200 + ambient_temp * (-2) + np.random.normal(0, 10, hours)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–ª–∞-—É—Ç–∏–ª–∏–∑–∞—Ç–æ—Ä–∞
# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–∞—Ä–∞ –≤—ã—Å–æ–∫–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è (¬∞C)
hp_steam_temp = 540 + load_factors * 20 + np.random.normal(0, 8, hours)

# –î–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞ –≤—ã—Å–æ–∫–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è (–±–∞—Ä)
hp_steam_pressure = 80 + load_factors * 40 + np.random.normal(0, 2, hours)

# –†–∞—Å—Ö–æ–¥ –ø–∞—Ä–∞ (—Ç/—á)
steam_flow = 150 + load_factors * 200 + np.random.normal(0, 8, hours)

# –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
# –ú–æ—â–Ω–æ—Å—Ç—å –ì–¢–£ (–ú–í—Ç)
gt_power = 250 * load_factors + ambient_temp * (-0.5) + np.random.normal(0, 5, hours)

# –ú–æ—â–Ω–æ—Å—Ç—å –ü–¢–£ (–ú–í—Ç)
st_power = 150 * load_factors + np.random.normal(0, 3, hours)

# –û–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å
total_power = gt_power + st_power

# –ö–ü–î —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (%)
efficiency = 55 + load_factors * 5 - ambient_temp * 0.1 + np.random.normal(0, 1, hours)

# –í–∏–±—Ä–∞—Ü–∏—è (–º–º/—Å RMS)
vibration_gt = 2.5 + load_factors * 1.5 + np.random.exponential(0.5, hours)
vibration_st = 1.8 + load_factors * 1.0 + np.random.exponential(0.3, hours)

# –°–æ–∑–¥–∞–µ–º DataFrame
data = pd.DataFrame({
    'datetime': dates,
    'operating_mode': operating_modes,
    'load_factor': load_factors,
    'ambient_temp': ambient_temp,
    'humidity': humidity,
    'atmospheric_pressure': atmospheric_pressure,
    'turbine_inlet_temp': turbine_inlet_temp,
    'exhaust_temp': exhaust_temp,
    'compressor_pressure': compressor_pressure,
    'fuel_flow': fuel_flow,
    'air_flow': air_flow,
    'hp_steam_temp': hp_steam_temp,
    'hp_steam_pressure': hp_steam_pressure,
    'steam_flow': steam_flow,
    'gt_power': gt_power,
    'st_power': st_power,
    'total_power': total_power,
    'efficiency': efficiency,
    'vibration_gt': vibration_gt,
    'vibration_st': vibration_st
})

# –ó–∞–¥–∞–Ω–∏–µ 1: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
print("\\n=== –ó–ê–î–ê–ù–ò–ï 1: –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ê–ù–ê–õ–ò–ó ===")

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
mode_counts = data['operating_mode'].value_counts()
print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã:")
for mode, count in mode_counts.items():
    percentage = count / len(data) * 100
    print(f"  {mode}: {count} —á–∞—Å–æ–≤ ({percentage:.1f}%)")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∂–∏–º–∞–º
print("\\n–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —Ä–µ–∂–∏–º–∞–º:")
numeric_cols = ['load_factor', 'total_power', 'efficiency', 'fuel_flow']
mode_stats = data.groupby('operating_mode')[numeric_cols].agg(['mean', 'std'])

for mode in mode_counts.index:
    print(f"\\n{mode.upper()}:")
    stats = mode_stats.loc[mode]
    print(f"  –ù–∞–≥—Ä—É–∑–∫–∞: {stats[('load_factor', 'mean')]:.2f} ¬± {stats[('load_factor', 'std')]:.2f}")
    print(f"  –ú–æ—â–Ω–æ—Å—Ç—å: {stats[('total_power', 'mean')]:.1f} ¬± {stats[('total_power', 'std')]:.1f} –ú–í—Ç")
    print(f"  –ö–ü–î: {stats[('efficiency', 'mean')]:.1f} ¬± {stats[('efficiency', 'std')]:.1f} %")
    print(f"  –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {stats[('fuel_flow', 'mean')]:.0f} ¬± {stats[('fuel_flow', 'std')]:.0f} –º¬≥/—á")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
features_for_clustering = [
    'load_factor', 'ambient_temp', 'turbine_inlet_temp', 'exhaust_temp',
    'compressor_pressure', 'fuel_flow', 'air_flow', 'hp_steam_temp',
    'hp_steam_pressure', 'steam_flow', 'total_power', 'efficiency',
    'vibration_gt', 'vibration_st'
]

X = data[features_for_clustering].copy()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ (–º–µ—Ç–æ–¥ IQR)
print("\\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤:")
outliers_removed = 0
for col in X.columns:
    Q1 = X[col].quantile(0.25)
    Q3 = X[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    
    outliers_mask = (X[col] < lower_bound) | (X[col] > upper_bound)
    outliers_count = outliers_mask.sum()
    outliers_removed += outliers_count
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–±—Ä–æ—Å—ã –Ω–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    X.loc[X[col] < lower_bound, col] = lower_bound
    X.loc[X[col] > upper_bound, col] = upper_bound

print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {outliers_removed} –≤—ã–±—Ä–æ—Å–æ–≤")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)

print(f"–î–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã: {X_scaled.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤, {X_scaled.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

print("\\n" + "="*70)

# –ó–∞–¥–∞–Ω–∏–µ 2: –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
print("=== –ó–ê–î–ê–ù–ò–ï 2: –°–ù–ò–ñ–ï–ù–ò–ï –†–ê–ó–ú–ï–†–ù–û–°–¢–ò ===")

# PCA –∞–Ω–∞–ª–∏–∑
pca = PCA()
X_pca = pca.fit_transform(X_scaled)

# –ê–Ω–∞–ª–∏–∑ –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
cumulative_variance = np.cumsum(pca.explained_variance_ratio_)
n_components_95 = np.argmax(cumulative_variance >= 0.95) + 1
n_components_90 = np.argmax(cumulative_variance >= 0.90) + 1

print(f"PCA –∞–Ω–∞–ª–∏–∑:")
print(f"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è 90% –¥–∏—Å–ø–µ—Ä—Å–∏–∏: {n_components_90}")
print(f"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è 95% –¥–∏—Å–ø–µ—Ä—Å–∏–∏: {n_components_95}")
print(f"  –ü–µ—Ä–≤—ã–µ 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±—ä—è—Å–Ω—è—é—Ç: {cumulative_variance[2]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏")

# –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
print("\\n–í–∫–ª–∞–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –ø–µ—Ä–≤—ã–µ 3 –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
feature_importance_pca = pd.DataFrame(
    pca.components_[:3].T,
    columns=['PC1', 'PC2', 'PC3'],
    index=X.columns
)

for i, pc in enumerate(['PC1', 'PC2', 'PC3']):
    print(f"\\n{pc} (–æ–±—ä—è—Å–Ω—è–µ—Ç {pca.explained_variance_ratio_[i]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏):")
    top_features = feature_importance_pca[pc].abs().sort_values(ascending=False).head(5)
    for feature, importance in top_features.items():
        print(f"  {feature}: {importance:.3f}")

# –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
pca_2d = PCA(n_components=2)
X_pca_2d = pca_2d.fit_transform(X_scaled)

pca_3d = PCA(n_components=3)
X_pca_3d = pca_3d.fit_transform(X_scaled)

print(f"\\n–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏:")
print(f"  2D PCA –æ–±—ä—è—Å–Ω—è–µ—Ç {pca_2d.explained_variance_ratio_.sum():.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏")
print(f"  3D PCA –æ–±—ä—è—Å–Ω—è–µ—Ç {pca_3d.explained_variance_ratio_.sum():.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏")

print("\\n" + "="*70)

# –ó–∞–¥–∞–Ω–∏–µ 3: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
print("=== –ó–ê–î–ê–ù–ò–ï 3: –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–Ø –†–ê–ó–õ–ò–ß–ù–´–ú–ò –ú–ï–¢–û–î–ê–ú–ò ===")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
k_range = range(2, 11)
methods = {}

# 1. K-means
print("\\n1. K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:")
kmeans_scores = []
kmeans_models = {}

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    labels = kmeans.fit_predict(X_scaled)
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    silhouette = silhouette_score(X_scaled, labels)
    calinski = calinski_harabasz_score(X_scaled, labels)
    inertia = kmeans.inertia_
    
    kmeans_scores.append({
        'k': k,
        'silhouette': silhouette,
        'calinski': calinski,
        'inertia': inertia
    })
    kmeans_models[k] = kmeans
    
    print(f"  k={k}: Silhouette={silhouette:.3f}, Calinski-Harabasz={calinski:.0f}, Inertia={inertia:.0f}")

# 2. –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
print("\\n2. –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (Ward linkage):")
hierarchical_scores = []

for k in k_range:
    hierarchical = AgglomerativeClustering(n_clusters=k, linkage='ward')
    labels = hierarchical.fit_predict(X_scaled)
    
    silhouette = silhouette_score(X_scaled, labels)
    calinski = calinski_harabasz_score(X_scaled, labels)
    
    hierarchical_scores.append({
        'k': k,
        'silhouette': silhouette,
        'calinski': calinski
    })
    
    print(f"  k={k}: Silhouette={silhouette:.3f}, Calinski-Harabasz={calinski:.0f}")

# 3. DBSCAN
print("\\n3. DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:")
eps_values = [0.5, 0.8, 1.0, 1.2, 1.5]
dbscan_results = []

for eps in eps_values:
    dbscan = DBSCAN(eps=eps, min_samples=10)
    labels = dbscan.fit_predict(X_scaled)
    
    n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
    n_noise = list(labels).count(-1)
    
    if n_clusters > 1:
        silhouette = silhouette_score(X_scaled, labels)
        calinski = calinski_harabasz_score(X_scaled, labels)
    else:
        silhouette = -1
        calinski = 0
    
    dbscan_results.append({
        'eps': eps,
        'n_clusters': n_clusters,
        'n_noise': n_noise,
        'silhouette': silhouette,
        'calinski': calinski
    })
    
    print(f"  eps={eps}: –ö–ª–∞—Å—Ç–µ—Ä–æ–≤={n_clusters}, –®—É–º={n_noise}, Silhouette={silhouette:.3f}")

# 4. Gaussian Mixture Model
print("\\n4. Gaussian Mixture Model:")
gmm_scores = []

for k in k_range:
    gmm = GaussianMixture(n_components=k, random_state=42)
    labels = gmm.fit_predict(X_scaled)
    
    silhouette = silhouette_score(X_scaled, labels)
    calinski = calinski_harabasz_score(X_scaled, labels)
    aic = gmm.aic(X_scaled)
    bic = gmm.bic(X_scaled)
    
    gmm_scores.append({
        'k': k,
        'silhouette': silhouette,
        'calinski': calinski,
        'aic': aic,
        'bic': bic
    })
    
    print(f"  k={k}: Silhouette={silhouette:.3f}, AIC={aic:.0f}, BIC={bic:.0f}")

print("\\n" + "="*70)

# –ó–∞–¥–∞–Ω–∏–µ 4: –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
print("=== –ó–ê–î–ê–ù–ò–ï 4: –í–´–ë–û–† –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ì–û –ö–û–õ–ò–ß–ï–°–¢–í–ê –ö–õ–ê–°–¢–ï–†–û–í ===")

# –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∞ –ª–æ–∫—Ç—è –¥–ª—è K-means
print("\\n1. –ú–µ—Ç–æ–¥ –ª–æ–∫—Ç—è (K-means):")
inertias = [score['inertia'] for score in kmeans_scores]
k_values = [score['k'] for score in kmeans_scores]

# –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ª–æ–∫—Ç—è
def find_elbow(k_values, inertias):
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    k_norm = np.array(k_values)
    inertia_norm = np.array(inertias)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ "–∏–∑–≥–∏–±–∞"
    diffs = []
    for i in range(1, len(inertia_norm)-1):
        diff1 = inertia_norm[i-1] - inertia_norm[i]
        diff2 = inertia_norm[i] - inertia_norm[i+1]
        diffs.append(diff1 - diff2)
    
    elbow_idx = np.argmax(diffs) + 1
    return k_values[elbow_idx]

elbow_k = find_elbow(k_values, inertias)
print(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ k –ø–æ –º–µ—Ç–æ–¥—É –ª–æ–∫—Ç—è: {elbow_k}")

# –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—É—ç—Ç–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
print("\\n2. –°–∏–ª—É—ç—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
best_silhouette_k = max(kmeans_scores, key=lambda x: x['silhouette'])['k']
best_silhouette_score = max(kmeans_scores, key=lambda x: x['silhouette'])['silhouette']
print(f"–õ—É—á—à–∏–π —Å–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: k={best_silhouette_k}, score={best_silhouette_score:.3f}")

# –ê–Ω–∞–ª–∏–∑ Calinski-Harabasz –∏–Ω–¥–µ–∫—Å–∞
best_calinski_k = max(kmeans_scores, key=lambda x: x['calinski'])['k']
best_calinski_score = max(kmeans_scores, key=lambda x: x['calinski'])['calinski']
print(f"–õ—É—á—à–∏–π Calinski-Harabasz –∏–Ω–¥–µ–∫—Å: k={best_calinski_k}, score={best_calinski_score:.0f}")

# –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è K-means
print("\\n3. –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ K-means:")
print(f"{'k':<3} {'Silhouette':<12} {'Calinski-H':<12} {'Inertia':<10}")
print("-" * 40)
for score in kmeans_scores:
    print(f"{score['k']:<3} {score['silhouette']:<12.3f} {score['calinski']:<12.0f} {score['inertia']:<10.0f}")

# –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
# –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
optimal_k = 5  # –ö–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏

print(f"\\n–í—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {optimal_k}")
print("–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∏–ª—É—ç—Ç–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å—é –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π")

print("\\n" + "="*70)

# –ó–∞–¥–∞–Ω–∏–µ 5: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
print("=== –ó–ê–î–ê–ù–ò–ï 5: –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –ò –ë–ò–ó–ù–ï–°-–ü–†–ò–ú–ï–ù–ï–ù–ò–ï ===")

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º k
final_kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
final_labels = final_kmeans.fit_predict(X_scaled)

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
data_with_clusters = data.copy()
data_with_clusters['cluster'] = final_labels

# –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
print(f"\\n–ê–Ω–∞–ª–∏–∑ {optimal_k} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")

cluster_analysis = []
for cluster_id in range(optimal_k):
    cluster_data = data_with_clusters[data_with_clusters['cluster'] == cluster_id]
    cluster_size = len(cluster_data)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
    avg_load = cluster_data['load_factor'].mean()
    avg_power = cluster_data['total_power'].mean()
    avg_efficiency = cluster_data['efficiency'].mean()
    avg_fuel = cluster_data['fuel_flow'].mean()
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
    mode_distribution = cluster_data['operating_mode'].value_counts(normalize=True)
    dominant_mode = mode_distribution.index[0]
    dominant_percentage = mode_distribution.iloc[0] * 100
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    hourly_distribution = cluster_data['datetime'].dt.hour.value_counts().sort_index()
    peak_hours = hourly_distribution.nlargest(3).index.tolist()
    
    cluster_info = {
        'cluster_id': cluster_id,
        'size': cluster_size,
        'percentage': cluster_size / len(data) * 100,
        'avg_load': avg_load,
        'avg_power': avg_power,
        'avg_efficiency': avg_efficiency,
        'avg_fuel': avg_fuel,
        'dominant_mode': dominant_mode,
        'dominant_percentage': dominant_percentage,
        'peak_hours': peak_hours
    }
    cluster_analysis.append(cluster_info)
    
    print(f"\\n–ö–õ–ê–°–¢–ï–† {cluster_id} ({cluster_size} —á–∞—Å–æ–≤, {cluster_size/len(data)*100:.1f}%):")
    print(f"  –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º: {dominant_mode} ({dominant_percentage:.1f}%)")
    print(f"  –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {avg_load:.2f}")
    print(f"  –°—Ä–µ–¥–Ω—è—è –º–æ—â–Ω–æ—Å—Ç—å: {avg_power:.1f} –ú–í—Ç")
    print(f"  –°—Ä–µ–¥–Ω–∏–π –ö–ü–î: {avg_efficiency:.1f}%")
    print(f"  –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {avg_fuel:.0f} –º¬≥/—á")
    print(f"  –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {peak_hours}")

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π
cluster_names = {}
maintenance_strategies = {}

for cluster_info in cluster_analysis:
    cluster_id = cluster_info['cluster_id']
    
    if cluster_info['avg_load'] > 0.9:
        name = "–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
        strategy = "–£—Å–∏–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –¢–û –∫–∞–∂–¥—ã–µ 4000 —á–∞—Å–æ–≤"
    elif cluster_info['avg_load'] > 0.7:
        name = "–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
        strategy = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¢–û –∫–∞–∂–¥—ã–µ 6000 —á–∞—Å–æ–≤"
    elif cluster_info['avg_load'] > 0.4:
        name = "–ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
        strategy = "–¢–û –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 8000 —á–∞—Å–æ–≤"
    elif cluster_info['avg_load'] > 0.2:
        name = "–ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ä–µ–∂–∏–º—ã"
        strategy = "–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—É—Å–∫–æ–≤/–æ—Å—Ç–∞–Ω–æ–≤–æ–≤, –¢–û –∫–∞–∂–¥—ã–µ 5000 —á–∞—Å–æ–≤"
    else:
        name = "–û—Å—Ç–∞–Ω–æ–≤/–¢–û"
        strategy = "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    
    cluster_names[cluster_id] = name
    maintenance_strategies[cluster_id] = strategy

print("\\n" + "="*70)
print("=== –°–¢–†–ê–¢–ï–ì–ò–Ø –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø ===")

total_annual_hours = 8760
maintenance_plan = []

for cluster_info in cluster_analysis:
    cluster_id = cluster_info['cluster_id']
    name = cluster_names[cluster_id]
    strategy = maintenance_strategies[cluster_id]
    annual_hours = cluster_info['size']
    
    print(f"\\n{name.upper()} (–ö–ª–∞—Å—Ç–µ—Ä {cluster_id}):")
    print(f"  –ì–æ–¥–æ–≤–∞—è –Ω–∞—Ä–∞–±–æ—Ç–∫–∞: {annual_hours} —á–∞—Å–æ–≤ ({annual_hours/total_annual_hours*100:.1f}%)")
    print(f"  –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¢–û: {strategy}")
    print(f"  –°—Ä–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"    - –ù–∞–≥—Ä—É–∑–∫–∞: {cluster_info['avg_load']:.1%}")
    print(f"    - –ú–æ—â–Ω–æ—Å—Ç—å: {cluster_info['avg_power']:.0f} –ú–í—Ç")
    print(f"    - –ö–ü–î: {cluster_info['avg_efficiency']:.1f}%")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*70)
print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï ===")

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–û
base_maintenance_cost = 50_000_000  # 50 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –¢–û
optimized_maintenance_cost = 0

for cluster_info in cluster_analysis:
    cluster_id = cluster_info['cluster_id']
    hours_ratio = cluster_info['size'] / total_annual_hours
    
    if cluster_info['avg_load'] > 0.9:  # –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        cost_multiplier = 1.3  # –ë–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –¢–û
    elif cluster_info['avg_load'] > 0.7:  # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        cost_multiplier = 1.0  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¢–û
    elif cluster_info['avg_load'] > 0.4:  # –ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        cost_multiplier = 0.8  # –†–µ–∂–µ –¢–û
    elif cluster_info['avg_load'] > 0.2:  # –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        cost_multiplier = 0.9  # –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—É—Å–∫–æ–≤
    else:  # –û—Å—Ç–∞–Ω–æ–≤/–¢–û
        cost_multiplier = 0.3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
    
    cluster_cost = base_maintenance_cost * hours_ratio * cost_multiplier
    optimized_maintenance_cost += cluster_cost

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
availability_improvement = 0.02  # 2% —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
efficiency_improvement = 0.005  # 0.5% —É–ª—É—á—à–µ–Ω–∏–µ –ö–ü–î

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
maintenance_savings = base_maintenance_cost - optimized_maintenance_cost
availability_revenue = 400 * 8760 * 0.02 * 2000  # –ú–í—Ç * —á–∞—Å—ã * —É–ª—É—á—à–µ–Ω–∏–µ * —Ü–µ–Ω–∞ —Ä—É–±/–ú–í—Ç¬∑—á
efficiency_savings = 400 * 8760 * 0.005 * 3000  # –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞

total_annual_effect = maintenance_savings + availability_revenue + efficiency_savings
project_cost = 15_000_000  # 15 –º–ª–Ω —Ä—É–± –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ
operational_cost = 3_000_000  # 3 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É

net_annual_benefit = total_annual_effect - operational_cost
roi = (net_annual_benefit - project_cost) / project_cost * 100
payback_months = project_cost / (net_annual_benefit / 12)

print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–û:")
print(f"  –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –¢–û: {maintenance_savings/1_000_000:.1f} –º–ª–Ω —Ä—É–±/–≥–æ–¥")
print(f"  –î–æ—Ö–æ–¥—ã –æ—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {availability_revenue/1_000_000:.1f} –º–ª–Ω —Ä—É–±/–≥–æ–¥")
print(f"  –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞: {efficiency_savings/1_000_000:.1f} –º–ª–Ω —Ä—É–±/–≥–æ–¥")
print(f"  –û–±—â–∏–π –≥–æ–¥–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç: {total_annual_effect/1_000_000:.1f} –º–ª–Ω —Ä—É–±")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {project_cost/1_000_000:.1f} –º–ª–Ω —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {operational_cost/1_000_000:.1f} –º–ª–Ω —Ä—É–±/–≥–æ–¥")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
print("\\n" + "="*70)
print("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ ===")

print("""
1. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:
   ‚îú‚îÄ‚îÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA: real-time —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
   ‚îú‚îÄ‚îÄ ML-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
   ‚îú‚îÄ‚îÄ –î–∞—à–±–æ—Ä–¥: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
   ‚îî‚îÄ‚îÄ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–æ–≤

2. –û–†–ì–ê–ù–ò–ó–ê–¶–ò–û–ù–ù–´–ï –ú–ï–†–´:
   ‚îú‚îÄ‚îÄ –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¢–û
   ‚îú‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤: –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
   ‚îú‚îÄ‚îÄ KPI: –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
   ‚îî‚îÄ‚îÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞

3. –≠–¢–ê–ü–´ –í–ù–ï–î–†–ï–ù–ò–Ø:
   ‚îú‚îÄ‚îÄ –§–∞–∑–∞ 1 (3 –º–µ—Å): —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
   ‚îú‚îÄ‚îÄ –§–∞–∑–∞ 2 (2 –º–µ—Å): –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
   ‚îú‚îÄ‚îÄ –§–∞–∑–∞ 3 (1 –º–µ—Å): –ø–∏–ª–æ—Ç–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ
   ‚îî‚îÄ‚îÄ –§–∞–∑–∞ 4 (ongoing): –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è

4. –†–ò–°–ö–ò –ò –ú–ò–¢–ò–ì–ê–¶–ò–Ø:
   ‚îú‚îÄ‚îÄ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫: —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   ‚îú‚îÄ‚îÄ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫: –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   ‚îú‚îÄ‚îÄ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫: –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞
   ‚îî‚îÄ‚îÄ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
""")

print("\\n–ü—Ä–æ–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –ü–ì–£-400 –≥–æ—Ç–æ–≤ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é!")
print("–û–∂–∏–¥–∞–µ–º—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞—Ç—Ä–∞—Ç—ã –≤ 5+ —Ä–∞–∑.")`
  },

  11: {
    title: "–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
    duration: "160 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å –∞–Ω—Å–∞–º–±–ª–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      <p>–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã - —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ ML-–º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö:</p>
      <ul>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏:</strong> –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:</strong> —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏:</strong> —Ä–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å –∫ –≤—ã–±—Ä–æ—Å–∞–º –∏ —à—É–º—É</li>
        <li><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong> –æ—Ü–µ–Ω–∫–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
      </ul>
      
      <h3>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∞–Ω—Å–∞–º–±–ª–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤</h3>
      
      <h4>Bias-Variance –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è</h4>
      <p>–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–ª–æ–∂–µ–Ω–∞ –Ω–∞ —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</p>
      <pre><code>Error = Bias¬≤ + Variance + Irreducible Error</code></pre>
      
      <p><strong>Bias (—Å–º–µ—â–µ–Ω–∏–µ):</strong> —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏, –Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–ª–æ–≤–∏—Ç—å –∏—Å—Ç–∏–Ω–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å</p>
      <p><strong>Variance (–¥–∏—Å–ø–µ—Ä—Å–∏—è):</strong> —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
      <p><strong>Irreducible Error:</strong> –Ω–µ—É—Å—Ç—Ä–∞–Ω–∏–º—ã–π —à—É–º –≤ –¥–∞–Ω–Ω—ã—Ö</p>
      
      <p>–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç:</p>
      <ul>
        <li><strong>Bagging:</strong> —Å–Ω–∏–∂–∞—Ç—å –¥–∏—Å–ø–µ—Ä—Å–∏—é (Random Forest)</li>
        <li><strong>Boosting:</strong> —Å–Ω–∏–∂–∞—Ç—å —Å–º–µ—â–µ–Ω–∏–µ (Gradient Boosting)</li>
        <li><strong>Stacking:</strong> –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â—É—é –æ—à–∏–±–∫—É</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω—Å–∞–º–±–ª–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤</h3>
      
      <h4>1. Bagging (Bootstrap Aggregating)</h4>
      <p>–ú–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥–≤—ã–±–æ—Ä–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º.</p>
      
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li>–°–æ–∑–¥–∞—Ç—å B bootstrap-–≤—ã–±–æ—Ä–æ–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞</li>
        <li>–û–±—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –Ω–∞ –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–µ</li>
        <li>–î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: —É—Å—Ä–µ–¥–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</li>
        <li>–î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º</li>
      </ol>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong></p>
      <pre><code>≈∑ = (1/B) ‚àë·µ¢‚Çå‚ÇÅ·¥Æ f·µ¢(x)</code></pre>
      <p>–≥–¥–µ f·µ¢(x) - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ i-–π –º–æ–¥–µ–ª–∏</p>
      
      <h5>Random Forest</h5>
      <p>–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ bagging –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>Bootstrap sampling:</strong> –∫–∞–∂–¥–æ–µ –¥–µ—Ä–µ–≤–æ –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–¥–≤—ã–±–æ—Ä–∫–µ</li>
        <li><strong>Feature randomness:</strong> –≤ –∫–∞–∂–¥–æ–º —É–∑–ª–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è ‚àöp —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>No pruning:</strong> –¥–µ—Ä–µ–≤—å—è —Ä–∞—Å—Ç—É—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã</li>
        <li><strong>Out-of-bag error:</strong> –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö</li>
        <li>–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
        <li>–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li>–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑—É–µ–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</strong> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
      </ul>
      
      <h4>2. Boosting</h4>
      <p>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –º–æ–¥–µ–ª—å –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö.</p>
      
      <h5>AdaBoost (Adaptive Boosting)</h5>
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤</li>
        <li>–û–±—É—á–∏—Ç—å —Å–ª–∞–±—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä</li>
        <li>–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</li>
        <li>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π</li>
      </ol>
      
      <p><strong>–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:</strong></p>
      <pre><code>H(x) = sign(‚àë·µ¢‚Çå‚ÇÅ·µÄ Œ±·µ¢h·µ¢(x))</code></pre>
      <p>–≥–¥–µ Œ±·µ¢ - –≤–µ—Å i-–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, h·µ¢(x) - –µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</p>
      
      <h5>Gradient Boosting</h5>
      <p>–û–±–æ–±—â–µ–Ω–∏–µ boosting –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Ç–µ—Ä—å —á–µ—Ä–µ–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫.</p>
      
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π</li>
        <li>–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Å–µ–≤–¥–æ-–æ—Å—Ç–∞—Ç–∫–∏ (–≥—Ä–∞–¥–∏–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å)</li>
        <li>–û–±—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏</li>
        <li>–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫ –∞–Ω—Å–∞–º–±–ª—é —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –æ–±—É—á–µ–Ω–∏—è</li>
        <li>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π</li>
      </ol>
      
      <p><strong>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:</strong></p>
      <pre><code>F‚Çò(x) = F‚Çò‚Çã‚ÇÅ(x) + ŒΩ¬∑h‚Çò(x)</code></pre>
      <p>–≥–¥–µ ŒΩ - learning rate, h‚Çò(x) - –Ω–æ–≤–∞—è –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å</p>
      
      <h5>XGBoost (eXtreme Gradient Boosting)</h5>
      <p>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è gradient boosting —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong> L1 –∏ L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å</li>
        <li><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–ª–∞—Ö</li>
        <li><strong>–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è:</strong> –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤</li>
        <li><strong>Pruning:</strong> –æ–±—Ä–µ–∑–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö</li>
        <li><strong>Cross-validation:</strong> –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è</li>
      </ul>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å —Å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π:</strong></p>
      <pre><code>L = ‚àë·µ¢ l(y·µ¢, ≈∑·µ¢) + ‚àë‚Çñ Œ©(f‚Çñ)</code></pre>
      <p>–≥–¥–µ Œ©(f‚Çñ) - —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Ä–º –¥–ª—è k-–≥–æ –¥–µ—Ä–µ–≤–∞</p>
      
      <h5>LightGBM</h5>
      <p>–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è gradient boosting —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
      
      <p><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>Leaf-wise —Ä–æ—Å—Ç:</strong> –¥–µ—Ä–µ–≤—å—è —Ä–∞—Å—Ç—É—Ç –ø–æ –ª–∏—Å—Ç—å—è–º, –∞ –Ω–µ –ø–æ —É—Ä–æ–≤–Ω—è–º</li>
        <li><strong>Histogram-based –∞–ª–≥–æ—Ä–∏—Ç–º:</strong> –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>Exclusive Feature Bundling:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>Gradient-based One-Side Sampling:</strong> —É–º–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <h5>CatBoost</h5>
      <p>Gradient boosting —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>Ordered boosting:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Categorical features:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
        <li><strong>Symmetric trees:</strong> —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è</li>
        <li><strong>GPU acceleration:</strong> —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞—Ö</li>
      </ul>
      
      <h4>3. Stacking (Stacked Generalization)</h4>
      <p>–ú–µ—Ç–∞-–æ–±—É—á–µ–Ω–∏–µ, –≥–¥–µ –º–æ–¥–µ–ª—å –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.</p>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ol>
        <li><strong>Level 0:</strong> –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ (Random Forest, SVM, Neural Network)</li>
        <li><strong>Level 1:</strong> –º–µ—Ç–∞-–º–æ–¥–µ–ª—å (–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –Ω–µ–π—Ä–æ—Å–µ—Ç—å)</li>
      </ol>
      
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li>–†–∞–∑–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ train/holdout</li>
        <li>–û–±—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–∞ train —Å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π</li>
        <li>–ü–æ–ª—É—á–∏—Ç—å out-of-fold –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è train</li>
        <li>–û–±—É—á–∏—Ç—å –º–µ—Ç–∞-–º–æ–¥–µ–ª—å –Ω–∞ out-of-fold –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö</li>
        <li>–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: –º–µ—Ç–∞-–º–æ–¥–µ–ª—å –æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π</li>
      </ol>
      
      <h4>4. Voting</h4>
      <p>–ü—Ä–æ—Å—Ç–æ–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π.</p>
      
      <p><strong>Hard Voting (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è):</strong></p>
      <pre><code>≈∑ = mode(h‚ÇÅ(x), h‚ÇÇ(x), ..., h‚Çô(x))</code></pre>
      
      <p><strong>Soft Voting (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è):</strong></p>
      <pre><code>≈∑ = argmax(‚àë·µ¢ p·µ¢(x))</code></pre>
      <p>–≥–¥–µ p·µ¢(x) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤ –æ—Ç i-–π –º–æ–¥–µ–ª–∏</p>
      
      <p><strong>Averaging (—Ä–µ–≥—Ä–µ—Å—Å–∏—è):</strong></p>
      <pre><code>≈∑ = (1/n) ‚àë·µ¢ h·µ¢(x)</code></pre>
      
      <h3>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h3>
      
      <h4>–í–∞–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h4>
      <p>–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π:</p>
      <ul>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:</strong> —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 10-20%</li>
        <li><strong>–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:</strong> –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–∫–æ—Ä—è—é—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å</li>
        <li><strong>–û–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:</strong> –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
      </ul>
      
      <h4>–ú–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h4>
      
      <h5>1. Grid Search</h5>
      <p>–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏.</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞–π–¥–µ—Ç –æ–ø—Ç–∏–º—É–º –≤ —Å–µ—Ç–∫–µ</li>
        <li>–ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li>–ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑—É–µ–º–æ—Å—Ç—å</li>
        <li>–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li>–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li>–ü—Ä–æ–∫–ª—è—Ç–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h5>2. Random Search</h5>
      <p>–°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π.</p>
      
      <p><strong>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</strong></p>
      <p>–î–ª—è –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã. Random search —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∏—Å—Å–ª–µ–¥—É–µ—Ç –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è.</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–õ—É—á—à–µ –¥–ª—è –≤—ã—Å–æ–∫–æ—Ä–∞–∑–º–µ—Ä–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤</li>
        <li>–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</li>
        <li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ grid search –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –±—é–¥–∂–µ—Ç–µ</li>
        <li>–†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</li>
      </ul>
      
      <h5>3. Bayesian Optimization</h5>
      <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–π–µ—Å–æ–≤—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞.</p>
      
      <p><strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</strong></p>
      <ul>
        <li><strong>Surrogate model:</strong> Gaussian Process –∏–ª–∏ Tree-based –º–æ–¥–µ–ª—å</li>
        <li><strong>Acquisition function:</strong> –∫—Ä–∏—Ç–µ—Ä–∏–π –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏</li>
        <li><strong>Optimization:</strong> –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è acquisition function</li>
      </ul>
      
      <p><strong>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ acquisition functions:</strong></p>
      <ul>
        <li><strong>Expected Improvement (EI):</strong> –æ–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ</li>
        <li><strong>Upper Confidence Bound (UCB):</strong> –≤–µ—Ä—Ö–Ω—è—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞</li>
        <li><strong>Probability of Improvement (PI):</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</strong></p>
      <ul>
        <li><strong>Optuna:</strong> —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å pruning</li>
        <li><strong>Hyperopt:</strong> –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è</li>
        <li><strong>Scikit-optimize:</strong> –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å scikit-learn</li>
        <li><strong>Ray Tune:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</li>
      </ul>
      
      <h5>4. Evolutionary Algorithms</h5>
      <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.</p>
      
      <p><strong>Genetic Algorithm:</strong></p>
      <ol>
        <li>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</li>
        <li>–û—Ü–µ–Ω–∫–∞ fitness (–∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏)</li>
        <li>–°–µ–ª–µ–∫—Ü–∏—è –ª—É—á—à–∏—Ö –æ—Å–æ–±–µ–π</li>
        <li>–°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ –∏ –º—É—Ç–∞—Ü–∏—è</li>
        <li>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏</li>
      </ol>
      
      <h5>5. Multi-fidelity Optimization</h5>
      <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.</p>
      
      <p><strong>–ü–æ–¥—Ö–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>Successive Halving:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –æ—Ç—Å–µ–∏–≤–∞–Ω–∏–µ —Ö—É–¥—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</li>
        <li><strong>Hyperband:</strong> –∫–æ–º–±–∏–Ω–∞—Ü–∏—è random search –∏ successive halving</li>
        <li><strong>BOHB:</strong> Bayesian optimization + Hyperband</li>
      </ul>
      
      <h3>–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</h3>
      
      <h4>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏</h4>
      
      <h5>1. K-Fold Cross-Validation</h5>
      <p>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ k —á–∞—Å—Ç–µ–π, –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ k-1 —á–∞—Å—Ç—è—Ö, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–π—Å—è.</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏</li>
        <li>–ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li>–û—Ü–µ–Ω–∫–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –º–µ—Ç—Ä–∏–∫</li>
      </ul>
      
      <h5>2. Stratified K-Fold</h5>
      <p>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∫–ª–∞—Å—Å–æ–≤ –≤ –∫–∞–∂–¥–æ–π fold –¥–ª—è –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
      
      <h5>3. Time Series Split</h5>
      <p>–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞.</p>
      
      <h5>4. Group K-Fold</h5>
      <p>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è data leakage.</p>
      
      <h4>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω—Å–∞–º–±–ª–µ–π</h4>
      
      <h5>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</h5>
      <ul>
        <li><strong>Accuracy:</strong> –¥–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
        <li><strong>Precision/Recall/F1:</strong> –¥–ª—è –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤</li>
        <li><strong>ROC-AUC:</strong> –ø–ª–æ—â–∞–¥—å –ø–æ–¥ ROC-–∫—Ä–∏–≤–æ–π</li>
        <li><strong>Log-loss:</strong> –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å</li>
      </ul>
      
      <h5>–†–µ–≥—Ä–µ—Å—Å–∏—è:</h5>
      <ul>
        <li><strong>MAE:</strong> —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</li>
        <li><strong>RMSE:</strong> –∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏</li>
        <li><strong>MAPE:</strong> —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</li>
        <li><strong>R¬≤:</strong> –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 25010-2015 "–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É ML-—Å–∏—Å—Ç–µ–º:</p>
      <ul>
        <li><strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å:</strong> —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
        <li><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å–±–æ—è–º</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</li>
        <li><strong>–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h4>–ì–û–°–¢ –† 57700.37-2021 "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π:</p>
      <ul>
        <li><strong>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º</li>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
        <li><strong>–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å:</strong> –æ—Ü–µ–Ω–∫–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤</li>
      </ul>
      
      <h3>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–µ–π—Å—ã</h3>
      
      <h4>–ö–µ–π—Å 1: –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç—É—Ä–±–∏–Ω –ì–≠–°</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –≥–∏–¥—Ä–æ—Ç—É—Ä–±–∏–Ω –∑–∞ 30 –¥–Ω–µ–π</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> –í–∏–±—Ä–∞—Ü–∏—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</p>
      <p><strong>–†–µ—à–µ–Ω–∏–µ:</strong> Stacking –∞–Ω—Å–∞–º–±–ª—å (XGBoost + Random Forest + Neural Network)</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</strong></p>
      <ul>
        <li>–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤: 94%</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤: 60%</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: 180 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li>ROI: 450%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å 8 –º–µ—Å—è—Ü–µ–≤</li>
      </ul>
      
      <h4>–ö–µ–π—Å 2: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫–∞—Ç–∞</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ç–∞–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫–∞—Ç–∫–∏</p>
      <p><strong>–†–µ—à–µ–Ω–∏–µ:</strong> Voting –∞–Ω—Å–∞–º–±–ª—å (CNN + Random Forest + SVM)</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</strong></p>
      <ul>
        <li>F1-score: 0.96 (—É–ª—É—á—à–µ–Ω–∏–µ —Å 0.89)</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞: 3.2%</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –û–¢–ö: 85% –æ–ø–µ—Ä–∞—Ü–∏–π</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—è: 45 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
      </ul>
      
      <h4>–ö–µ–π—Å 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏</h4>
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –±–µ–Ω–∑–∏–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–∞—Ç–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–µ–∫–∏–Ω–≥–∞</p>
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong> –°–æ—Å—Ç–∞–≤ —Å—ã—Ä—å—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –¥–∞–≤–ª–µ–Ω–∏—è, —Ä–∞—Å—Ö–æ–¥—ã –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞</p>
      <p><strong>–†–µ—à–µ–Ω–∏–µ:</strong> Gradient Boosting —Å Bayesian optimization</p>
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</strong></p>
      <ul>
        <li>MAPE: 1.8% (—É–ª—É—á—à–µ–Ω–∏–µ —Å 3.5%)</li>
        <li>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –±–µ–Ω–∑–∏–Ω–∞: 2.1%</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: 8%</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: 320 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</h3>
      
      <h4>1. Batch –æ–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–π</h4>
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> HDFS / PostgresPro –∫–ª–∞—Å—Ç–µ—Ä</li>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ:</strong> Apache Spark MLlib / Dask</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</strong> Optuna / Ray Tune</li>
        <li><strong>–ú–æ–¥–µ–ª–∏:</strong> MLflow Model Registry</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> Prometheus + Grafana</li>
      </ul>
      
      <h4>2. Online –æ–±—É—á–µ–Ω–∏–µ</h4>
      <p><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong></p>
      <ul>
        <li><strong>–ü–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> Apache Kafka</li>
        <li><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞:</strong> Apache Flink / Spark Streaming</li>
        <li><strong>–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:</strong> Online Random Forest</li>
        <li><strong>A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h4>3. Inference –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</h4>
      <p><strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</strong></p>
      <ul>
        <li><strong>Model serving:</strong> TensorFlow Serving / MLflow</li>
        <li><strong>Load balancing:</strong> NGINX / HAProxy</li>
        <li><strong>Caching:</strong> Redis –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
        <li><strong>Monitoring:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ drift –∏ –∫–∞—á–µ—Å—Ç–≤–∞</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      
      <h4>1. –í—ã–±–æ—Ä –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π</h4>
      <ul>
        <li><strong>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ:</strong> —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –ø–æ–¥—Ö–æ–¥—ã</li>
        <li><strong>–ù–µ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:</strong> –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –æ—à–∏–±–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> –∫–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª—É—á—à–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è</li>
        <li><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –≤—Ä–µ–º–µ–Ω–µ–º inference</li>
      </ul>
      
      <h4>2. –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>Simple averaging:</strong> –¥–ª—è –Ω–∞—á–∞–ª–∞</li>
        <li><strong>Weighted averaging:</strong> —Å –≤–µ—Å–∞–º–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É</li>
        <li><strong>Stacking:</strong> –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>Dynamic weighting:</strong> –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞</li>
      </ul>
      
      <h4>3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h4>
      <ul>
        <li><strong>–ù–∞—á–∞—Ç—å —Å Random Search:</strong> –±—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</li>
        <li><strong>Bayesian optimization:</strong> –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
        <li><strong>Multi-fidelity:</strong> –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Early stopping:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
      </ul>
      
      <h4>4. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</h4>
      <ul>
        <li><strong>Shadow mode:</strong> –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>A/B testing:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline</li>
        <li><strong>Canary deployment:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ</li>
        <li><strong>Rollback strategy:</strong> –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</h3>
      
      <h4>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:</h4>
      <ul>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏:</strong> 5-15% —É–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤:</strong> –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</li>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> data-driven –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <h4>–†–∞—Å—á–µ—Ç –¥–ª—è —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</h4>
      <ul>
        <li><strong>–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</strong> 35 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞:</strong> 25 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞ —Å—ã—Ä—å—è:</strong> 40 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li><strong>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π:</strong> 60 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li><strong>–û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç:</strong> 160 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li><strong>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</strong> 25 –º–ª–Ω —Ä—É–±.</li>
        <li><strong>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:</strong> 8 –º–ª–Ω —Ä—É–±./–≥–æ–¥</li>
        <li><strong>ROI:</strong> (160-8-25)/25 √ó 100% = 508%</li>
        <li><strong>–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å:</strong> 2.4 –º–µ—Å—è—Ü–∞</li>
      </ul>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</h3>
      
      <h4>–ó–∞–¥–∞—á–∞</h4>
      <p>–í—ã - AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã—Ö –Ω–∞—Å–æ—Å–æ–≤ –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ–∫–∞—á–∏–≤–∞—é—â–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π. –¶–µ–ª—å - –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç–∫–∞–∑ –Ω–∞—Å–æ—Å–∞ –∑–∞ 7 –¥–Ω–µ–π –¥–æ –µ–≥–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è.</p>
      
      <h4>–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç</h4>
      <ul>
        <li><strong>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> –û—Ç–∫–∞–∑ –Ω–∞—Å–æ—Å–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–∞—á–∫—É –Ω–∞ 12-48 —á–∞—Å–æ–≤</li>
        <li><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ—è:</strong> 15 –º–ª–Ω —Ä—É–±./—Å—É—Ç–∫–∏</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> Precision ‚â• 85%, Recall ‚â• 90%</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> –í—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è < 1 —Å–µ–∫—É–Ω–¥—ã</li>
      </ul>
      
      <h4>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
      <p>–î–∞–Ω–Ω—ã–µ —Å 50 –Ω–∞—Å–æ—Å–æ–≤ –∑–∞ 2 –≥–æ–¥–∞:</p>
      <ul>
        <li><strong>–í–∏–±—Ä–∞—Ü–∏—è:</strong> RMS, –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</li>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏, –∫–æ—Ä–ø—É—Å, –º–∞—Å–ª–æ</li>
        <li><strong>–î–∞–≤–ª–µ–Ω–∏–µ:</strong> –≤—Å–∞—Å—ã–≤–∞–Ω–∏–µ, –Ω–∞–≥–Ω–µ—Ç–∞–Ω–∏–µ</li>
        <li><strong>–†–∞—Å—Ö–æ–¥:</strong> –∂–∏–¥–∫–æ—Å—Ç–∏, —É—Ç–µ—á–∫–∏</li>
        <li><strong>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ:</strong> —Ç–æ–∫, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –º–æ—â–Ω–æ—Å—Ç—å</li>
        <li><strong>–ò—Å—Ç–æ—Ä–∏—è –¢–û:</strong> –¥–∞—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –∑–∞–º–µ–Ω—ã –¥–µ—Ç–∞–ª–µ–π</li>
      </ul>
      
      <h4>–ó–∞–¥–∞–Ω–∏—è</h4>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ feature engineering</h5>
      <p>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –Ω–∞—Å–æ—Å–æ–≤.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 2: –û–±—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π</h5>
      <p>–û–±—É—á–∏—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: Random Forest, XGBoost, SVM, Neural Network.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–π</h5>
      <p>–†–µ–∞–ª–∏–∑—É–π—Ç–µ Voting, Bagging, Stacking –∞–Ω—Å–∞–º–±–ª–∏.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h5>
      <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bayesian optimization –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</h5>
      <p>–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç.</p>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–Ω—Å–∞–º–±–ª—å –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å–æ—Å–æ–≤
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier, VotingClassifier, StackingClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
from sklearn.pipeline import Pipeline
import xgboost as xgb
import optuna
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

print("=== –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–ì–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –ù–ê–°–û–°–û–í ===")
print("–ù–µ—Ñ—Ç–µ–ø–µ—Ä–µ–∫–∞—á–∏–≤–∞—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è - 50 —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã—Ö –Ω–∞—Å–æ—Å–æ–≤")
print("–¶–µ–ª—å: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –∑–∞ 7 –¥–Ω–µ–π")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å–æ—Å–æ–≤
np.random.seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
n_pumps = 50
days_history = 730  # 2 –≥–æ–¥–∞
samples_per_day = 24  # –ò–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
total_samples = n_pumps * days_history * samples_per_day

print(f"\\n–î–∞–Ω–Ω—ã–µ: {n_pumps} –Ω–∞—Å–æ—Å–æ–≤, {days_history} –¥–Ω–µ–π, {total_samples:,} –∏–∑–º–µ—Ä–µ–Ω–∏–π")

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
dates = []
pump_ids = []
for pump_id in range(1, n_pumps + 1):
    for day in range(days_history):
        for hour in range(samples_per_day):
            date = datetime(2022, 1, 1) + timedelta(days=day, hours=hour)
            dates.append(date)
            pump_ids.append(pump_id)

# –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å–æ—Å–æ–≤
pump_characteristics = {}
for pump_id in range(1, n_pumps + 1):
    pump_characteristics[pump_id] = {
        'age_years': np.random.uniform(1, 15),  # –í–æ–∑—Ä–∞—Å—Ç –Ω–∞—Å–æ—Å–∞
        'power_rating': np.random.choice([250, 400, 630, 1000]),  # –ú–æ—â–Ω–æ—Å—Ç—å –∫–í—Ç
        'manufacturer': np.random.choice(['Grundfos', 'KSB', 'Sulzer', 'Wilo']),
        'maintenance_quality': np.random.uniform(0.7, 1.0),  # –ö–∞—á–µ—Å—Ç–≤–æ –¢–û
        'operating_hours': 0  # –ù–∞—Ä–∞–±–æ—Ç–∫–∞
    }

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π
data_records = []
failure_events = []

for i, (date, pump_id) in enumerate(zip(dates, pump_ids)):
    pump_char = pump_characteristics[pump_id]
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—Ä–∞–±–æ—Ç–∫—É
    pump_char['operating_hours'] += 1
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã
    hour_of_day = date.hour
    day_of_year = date.timetuple().tm_yday
    
    # –°–µ–∑–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    seasonal_factor = 1 + 0.1 * np.sin(2 * np.pi * day_of_year / 365)
    daily_factor = 1 + 0.05 * np.sin(2 * np.pi * hour_of_day / 24)
    
    # –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    age_factor = 1 + pump_char['age_years'] * 0.02
    wear_factor = 1 + pump_char['operating_hours'] * 0.00001
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞
    base_failure_prob = 0.0001  # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –≤ —á–∞—Å
    failure_prob = base_failure_prob * age_factor * wear_factor / pump_char['maintenance_quality']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ª–∏ –æ—Ç–∫–∞–∑ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    future_failure_prob = failure_prob * 24 * 7  # –ó–∞ 7 –¥–Ω–µ–π
    will_fail_soon = np.random.random() < future_failure_prob
    
    if will_fail_soon and pump_id not in [f['pump_id'] for f in failure_events if f['date'] > date - timedelta(days=30)]:
        failure_date = date + timedelta(days=np.random.randint(1, 8))
        failure_events.append({
            'pump_id': pump_id,
            'date': failure_date,
            'type': np.random.choice(['bearing', 'seal', 'impeller', 'motor'])
        })
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ (—É—Å–∏–ª–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞–∑–æ–º)
    degradation_factor = 1.0
    for failure in failure_events:
        if failure['pump_id'] == pump_id and failure['date'] > date:
            days_to_failure = (failure['date'] - date).days
            if days_to_failure <= 7:
                degradation_factor = 1 + (8 - days_to_failure) * 0.1
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å–æ—Å–∞
    # –í–∏–±—Ä–∞—Ü–∏—è (–º–º/—Å RMS)
    base_vibration = 2.5 + pump_char['age_years'] * 0.2
    vibration_rms = base_vibration * seasonal_factor * degradation_factor + np.random.normal(0, 0.3)
    vibration_peak = vibration_rms * (2 + np.random.normal(0, 0.2))
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (¬∞C)
    ambient_temp = 20 + 15 * np.sin(2 * np.pi * day_of_year / 365) + np.random.normal(0, 2)
    bearing_temp = ambient_temp + 25 + pump_char['age_years'] * 2 + degradation_factor * 10 + np.random.normal(0, 3)
    motor_temp = ambient_temp + 35 + degradation_factor * 15 + np.random.normal(0, 4)
    oil_temp = bearing_temp + 5 + np.random.normal(0, 2)
    
    # –î–∞–≤–ª–µ–Ω–∏—è (–±–∞—Ä)
    suction_pressure = 2.5 + np.random.normal(0, 0.2)
    discharge_pressure = 15 + pump_char['power_rating'] / 100 - degradation_factor * 2 + np.random.normal(0, 0.5)
    pressure_diff = discharge_pressure - suction_pressure
    
    # –†–∞—Å—Ö–æ–¥—ã (–º¬≥/—á)
    nominal_flow = pump_char['power_rating'] * 0.8
    actual_flow = nominal_flow * daily_factor * (2 - degradation_factor) + np.random.normal(0, nominal_flow * 0.05)
    
    # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    nominal_current = pump_char['power_rating'] / 400 / 1.732  # –ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫
    actual_current = nominal_current * (actual_flow / nominal_flow) * degradation_factor + np.random.normal(0, nominal_current * 0.02)
    voltage = 400 + np.random.normal(0, 5)
    power_factor = 0.85 - degradation_factor * 0.1 + np.random.normal(0, 0.02)
    
    # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏
    freq_1x = vibration_rms * 0.6 * degradation_factor  # 1x –æ–±–æ—Ä–æ—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
    freq_2x = vibration_rms * 0.3 * degradation_factor  # 2x –æ–±–æ—Ä–æ—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
    freq_bearing = vibration_rms * 0.2 * (degradation_factor ** 2)  # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    efficiency = 0.85 - pump_char['age_years'] * 0.01 - (degradation_factor - 1) * 0.2 + np.random.normal(0, 0.02)
    noise_level = 70 + degradation_factor * 5 + np.random.normal(0, 2)
    
    # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    target = 1 if will_fail_soon else 0
    
    record = {
        'datetime': date,
        'pump_id': pump_id,
        'age_years': pump_char['age_years'],
        'operating_hours': pump_char['operating_hours'],
        'power_rating': pump_char['power_rating'],
        'manufacturer': pump_char['manufacturer'],
        'maintenance_quality': pump_char['maintenance_quality'],
        'vibration_rms': max(0.1, vibration_rms),
        'vibration_peak': max(0.2, vibration_peak),
        'freq_1x': max(0.05, freq_1x),
        'freq_2x': max(0.02, freq_2x),
        'freq_bearing': max(0.01, freq_bearing),
        'bearing_temp': bearing_temp,
        'motor_temp': motor_temp,
        'oil_temp': oil_temp,
        'ambient_temp': ambient_temp,
        'suction_pressure': max(0.5, suction_pressure),
        'discharge_pressure': max(5, discharge_pressure),
        'pressure_diff': max(2, pressure_diff),
        'flow_rate': max(10, actual_flow),
        'current': max(1, actual_current),
        'voltage': voltage,
        'power_factor': max(0.3, min(1.0, power_factor)),
        'efficiency': max(0.3, min(1.0, efficiency)),
        'noise_level': noise_level,
        'hour_of_day': hour_of_day,
        'day_of_year': day_of_year,
        'will_fail_7days': target
    }
    
    data_records.append(record)

# –°–æ–∑–¥–∞–µ–º DataFrame
df = pd.DataFrame(data_records)

print(f"\\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π")
print(f"–û—Ç–∫–∞–∑–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π: {df['will_fail_7days'].sum():,} ({df['will_fail_7days'].mean()*100:.2f}%)")

# –ó–∞–¥–∞–Ω–∏–µ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ feature engineering
print("\\n" + "="*70)
print("=== –ó–ê–î–ê–ù–ò–ï 1: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –ò FEATURE ENGINEERING ===")

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
class_distribution = df['will_fail_7days'].value_counts()
print(f"\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
print(f"  –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {class_distribution[0]:,} ({class_distribution[0]/len(df)*100:.1f}%)")
print(f"  –û—Ç–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π: {class_distribution[1]:,} ({class_distribution[1]/len(df)*100:.1f}%)")

# Feature engineering
print("\\n–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
df['temp_bearing_ambient_diff'] = df['bearing_temp'] - df['ambient_temp']
df['temp_motor_ambient_diff'] = df['motor_temp'] - df['ambient_temp']
df['temp_oil_bearing_diff'] = df['oil_temp'] - df['bearing_temp']

# –í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
df['vibration_peak_rms_ratio'] = df['vibration_peak'] / df['vibration_rms']
df['vibration_total_energy'] = df['freq_1x'] + df['freq_2x'] + df['freq_bearing']
df['bearing_fault_indicator'] = df['freq_bearing'] / df['vibration_rms']

# –ì–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
df['pressure_efficiency'] = df['pressure_diff'] / df['current']
df['flow_pressure_ratio'] = df['flow_rate'] / df['pressure_diff']

# –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
df['power_consumption'] = df['current'] * df['voltage'] * df['power_factor'] * 1.732 / 1000  # –∫–í—Ç
df['specific_power'] = df['power_consumption'] / df['flow_rate']  # –∫–í—Ç/(–º¬≥/—á)
df['current_deviation'] = abs(df['current'] - df['power_rating'] / 400 / 1.732)

# –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
df['age_operating_hours_ratio'] = df['operating_hours'] / (df['age_years'] * 8760)
df['maintenance_age_factor'] = df['maintenance_quality'] / df['age_years']

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
df['is_night'] = ((df['hour_of_day'] >= 22) | (df['hour_of_day'] <= 6)).astype(int)
df['is_winter'] = ((df['day_of_year'] <= 60) | (df['day_of_year'] >= 300)).astype(int)
df['is_summer'] = ((df['day_of_year'] >= 150) & (df['day_of_year'] <= 240)).astype(int)

# –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (–∏–º–∏—Ç–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
df = df.sort_values(['pump_id', 'datetime'])
for window in [24, 168]:  # 1 –¥–µ–Ω—å, 1 –Ω–µ–¥–µ–ª—è
    df[f'vibration_rms_ma_{window}h'] = df.groupby('pump_id')['vibration_rms'].rolling(window, min_periods=1).mean().values
    df[f'bearing_temp_ma_{window}h'] = df.groupby('pump_id')['bearing_temp'].rolling(window, min_periods=1).mean().values
    df[f'current_ma_{window}h'] = df.groupby('pump_id')['current'].rolling(window, min_periods=1).mean().values

# –¢—Ä–µ–Ω–¥—ã (–∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã)
for period in [24, 168]:
    df[f'vibration_trend_{period}h'] = df.groupby('pump_id')['vibration_rms'].pct_change(period)
    df[f'temp_trend_{period}h'] = df.groupby('pump_id')['bearing_temp'].pct_change(period)
    df[f'current_trend_{period}h'] = df.groupby('pump_id')['current'].pct_change(period)

# –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
df = df.fillna(method='bfill').fillna(0)

print(f"–°–æ–∑–¥–∞–Ω–æ {len([col for col in df.columns if col not in ['datetime', 'pump_id', 'manufacturer', 'will_fail_7days']])} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
le_manufacturer = LabelEncoder()
df['manufacturer_encoded'] = le_manufacturer.fit_transform(df['manufacturer'])

# –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
feature_columns = [col for col in df.columns if col not in ['datetime', 'pump_id', 'manufacturer', 'will_fail_7days']]
X = df[feature_columns]
y = df['will_fail_7days']

print(f"\\n–§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {X.shape[0]:,} –æ–±—Ä–∞–∑—Ü–æ–≤, {X.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print(f"–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape[0]:,} –æ–±—Ä–∞–∑—Ü–æ–≤")
print(f"–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape[0]:,} –æ–±—Ä–∞–∑—Ü–æ–≤")

# –ó–∞–¥–∞–Ω–∏–µ 2: –û–±—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
print("\\n" + "="*70)
print("=== –ó–ê–î–ê–ù–ò–ï 2: –û–ë–£–ß–ï–ù–ò–ï –ë–ê–ó–û–í–´–• –ú–û–î–ï–õ–ï–ô ===")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# –°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
models = {}

print("\\n1. Random Forest:")
rf = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42, n_jobs=-1)
rf_scores = cross_val_score(rf, X_train, y_train, cv=cv, scoring='roc_auc')
rf.fit(X_train, y_train)
models['Random Forest'] = rf
print(f"   ROC-AUC: {rf_scores.mean():.3f} ¬± {rf_scores.std():.3f}")

print("\\n2. XGBoost:")
xgb_model = xgb.XGBClassifier(n_estimators=100, max_depth=6, learning_rate=0.1, random_state=42)
xgb_scores = cross_val_score(xgb_model, X_train, y_train, cv=cv, scoring='roc_auc')
xgb_model.fit(X_train, y_train)
models['XGBoost'] = xgb_model
print(f"   ROC-AUC: {xgb_scores.mean():.3f} ¬± {xgb_scores.std():.3f}")

print("\\n3. SVM:")
svm = SVC(kernel='rbf', probability=True, random_state=42)
svm_pipeline = Pipeline([('scaler', StandardScaler()), ('svm', svm)])
svm_scores = cross_val_score(svm_pipeline, X_train, y_train, cv=cv, scoring='roc_auc')
svm_pipeline.fit(X_train, y_train)
models['SVM'] = svm_pipeline
print(f"   ROC-AUC: {svm_scores.mean():.3f} ¬± {svm_scores.std():.3f}")

print("\\n4. Neural Network:")
mlp = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)
mlp_pipeline = Pipeline([('scaler', StandardScaler()), ('mlp', mlp)])
mlp_scores = cross_val_score(mlp_pipeline, X_train, y_train, cv=cv, scoring='roc_auc')
mlp_pipeline.fit(X_train, y_train)
models['Neural Network'] = mlp_pipeline
print(f"   ROC-AUC: {mlp_scores.mean():.3f} ¬± {mlp_scores.std():.3f}")

# –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
print("\\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ:")
test_results = {}

for name, model in models.items():
    y_pred = model.predict(X_test)
    y_pred_proba = model.predict_proba(X_test)[:, 1]
    
    auc = roc_auc_score(y_test, y_pred_proba)
    test_results[name] = {
        'auc': auc,
        'predictions': y_pred,
        'probabilities': y_pred_proba
    }
    
    print(f"\\n{name}:")
    print(f"   ROC-AUC: {auc:.3f}")
    print("   Classification Report:")
    print(classification_report(y_test, y_pred, target_names=['Normal', 'Failure'], digits=3))

# –ó–∞–¥–∞–Ω–∏–µ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–π
print("\\n" + "="*70)
print("=== –ó–ê–î–ê–ù–ò–ï 3: –°–û–ó–î–ê–ù–ò–ï –ê–ù–°–ê–ú–ë–õ–ï–ô ===")

print("\\n1. Voting Classifier (Soft Voting):")
voting_clf = VotingClassifier(
    estimators=[
        ('rf', RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)),
        ('xgb', xgb.XGBClassifier(n_estimators=100, max_depth=6, learning_rate=0.1, random_state=42)),
        ('svm', Pipeline([('scaler', StandardScaler()), ('svm', SVC(probability=True, random_state=42))])),
    ],
    voting='soft'
)

voting_scores = cross_val_score(voting_clf, X_train, y_train, cv=cv, scoring='roc_auc')
voting_clf.fit(X_train, y_train)
print(f"   Cross-validation ROC-AUC: {voting_scores.mean():.3f} ¬± {voting_scores.std():.3f}")

y_pred_voting = voting_clf.predict(X_test)
y_pred_proba_voting = voting_clf.predict_proba(X_test)[:, 1]
auc_voting = roc_auc_score(y_test, y_pred_proba_voting)
print(f"   Test ROC-AUC: {auc_voting:.3f}")

print("\\n2. Stacking Classifier:")
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –∫–∞–∫ –º–µ—Ç–∞-–º–æ–¥–µ–ª—å
from sklearn.linear_model import LogisticRegression

stacking_clf = StackingClassifier(
    estimators=[
        ('rf', RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)),
        ('xgb', xgb.XGBClassifier(n_estimators=100, max_depth=6, learning_rate=0.1, random_state=42)),
        ('svm', Pipeline([('scaler', StandardScaler()), ('svm', SVC(probability=True, random_state=42))])),
    ],
    final_estimator=LogisticRegression(random_state=42),
    cv=3
)

stacking_scores = cross_val_score(stacking_clf, X_train, y_train, cv=cv, scoring='roc_auc')
stacking_clf.fit(X_train, y_train)
print(f"   Cross-validation ROC-AUC: {stacking_scores.mean():.3f} ¬± {stacking_scores.std():.3f}")

y_pred_stacking = stacking_clf.predict(X_test)
y_pred_proba_stacking = stacking_clf.predict_proba(X_test)[:, 1]
auc_stacking = roc_auc_score(y_test, y_pred_proba_stacking)
print(f"   Test ROC-AUC: {auc_stacking:.3f}")

print("\\n3. Weighted Averaging:")
# –í–µ—Å–∞ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
weights = {
    'Random Forest': rf_scores.mean(),
    'XGBoost': xgb_scores.mean(),
    'SVM': svm_scores.mean(),
    'Neural Network': mlp_scores.mean()
}

# –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
total_weight = sum(weights.values())
normalized_weights = {k: v/total_weight for k, v in weights.items()}

print("   –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π:")
for name, weight in normalized_weights.items():
    print(f"     {name}: {weight:.3f}")

# –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
weighted_proba = np.zeros(len(y_test))
for name, weight in normalized_weights.items():
    weighted_proba += weight * test_results[name]['probabilities']

y_pred_weighted = (weighted_proba > 0.5).astype(int)
auc_weighted = roc_auc_score(y_test, weighted_proba)
print(f"   Test ROC-AUC: {auc_weighted:.3f}")

# –ó–∞–¥–∞–Ω–∏–µ 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
print("\\n" + "="*70)
print("=== –ó–ê–î–ê–ù–ò–ï 4: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ì–ò–ü–ï–†–ü–ê–†–ê–ú–ï–¢–†–û–í ===")

print("\\n–ò—Å–ø–æ–ª—å–∑—É–µ–º Optuna –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ XGBoost:")

def objective(trial):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞
    params = {
        'n_estimators': trial.suggest_int('n_estimators', 50, 300),
        'max_depth': trial.suggest_int('max_depth', 3, 10),
        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),
        'subsample': trial.suggest_float('subsample', 0.6, 1.0),
        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),
        'reg_alpha': trial.suggest_float('reg_alpha', 0, 10),
        'reg_lambda': trial.suggest_float('reg_lambda', 0, 10),
        'random_state': 42
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    model = xgb.XGBClassifier(**params)
    
    # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    scores = cross_val_score(model, X_train, y_train, cv=cv, scoring='roc_auc')
    
    return scores.mean()

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
study = optuna.create_study(direction='maximize', sampler=optuna.samplers.TPESampler(seed=42))
study.optimize(objective, n_trials=50, show_progress_bar=False)

print(f"–õ—É—á—à–∏–π ROC-AUC: {study.best_value:.3f}")
print("–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
for key, value in study.best_params.items():
    print(f"  {key}: {value}")

# –û–±—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
best_xgb = xgb.XGBClassifier(**study.best_params)
best_xgb.fit(X_train, y_train)

y_pred_best = best_xgb.predict(X_test)
y_pred_proba_best = best_xgb.predict_proba(X_test)[:, 1]
auc_best = roc_auc_score(y_test, y_pred_proba_best)

print(f"\\n–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XGBoost –Ω–∞ —Ç–µ—Å—Ç–µ:")
print(f"ROC-AUC: {auc_best:.3f}")
print("Classification Report:")
print(classification_report(y_test, y_pred_best, target_names=['Normal', 'Failure'], digits=3))

# –ó–∞–¥–∞–Ω–∏–µ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*70)
print("=== –ó–ê–î–ê–ù–ò–ï 5: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï ===")

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
print("\\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥–æ–≤:")
results_comparison = {
    'Random Forest': auc_voting,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ voting
    'XGBoost (–±–∞–∑–æ–≤—ã–π)': test_results['XGBoost']['auc'],
    'XGBoost (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)': auc_best,
    'Voting Ensemble': auc_voting,
    'Stacking Ensemble': auc_stacking,
    'Weighted Averaging': auc_weighted
}

for name, auc in sorted(results_comparison.items(), key=lambda x: x[1], reverse=True):
    print(f"{name:<25}: ROC-AUC = {auc:.3f}")

# –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
best_model_name = max(results_comparison, key=results_comparison.get)
best_auc = results_comparison[best_model_name]

print(f"\\n–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name} (ROC-AUC = {best_auc:.3f})")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Stacking)
print(f"\\n–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏ '{best_model_name}':")

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
cm = confusion_matrix(y_test, y_pred_stacking)
tn, fp, fn, tp = cm.ravel()

print(f"\\n–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
print(f"                 –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ")
print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏    Normal  Failure")
print(f"Normal        {tn:6d}  {fp:7d}")
print(f"Failure       {fn:6d}  {tp:7d}")

# –ú–µ—Ç—Ä–∏–∫–∏
precision = tp / (tp + fp)
recall = tp / (tp + fn)
f1 = 2 * precision * recall / (precision + recall)
specificity = tn / (tn + fp)

print(f"\\n–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
print(f"Precision: {precision:.3f} (–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ {precision*100:.1f}% –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç)")
print(f"Recall:    {recall:.3f} (–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ {recall*100:.1f}% –±—É–¥—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω—ã)")
print(f"F1-score:  {f1:.3f}")
print(f"Specificity: {specificity:.3f} (–∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ {specificity*100:.1f}% –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã)")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
print(f"\\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:")
print(f"Precision ‚â• 85%: {'‚úì' if precision >= 0.85 else '‚úó'} ({precision*100:.1f}%)")
print(f"Recall ‚â• 90%:    {'‚úì' if recall >= 0.90 else '‚úó'} ({recall*100:.1f}%)")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*50)
print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï ===")

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
pumps_count = 50
failure_rate_per_pump_per_year = 2  # –æ—Ç–∫–∞–∑–∞ –≤ –≥–æ–¥ –Ω–∞ –Ω–∞—Å–æ—Å
cost_per_downtime_day = 15_000_000  # 15 –º–ª–Ω —Ä—É–±/—Å—É—Ç–∫–∏
average_downtime_hours = 24  # —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
cost_per_failure = cost_per_downtime_day * (average_downtime_hours / 24)

annual_failures = pumps_count * failure_rate_per_pump_per_year
annual_downtime_cost = annual_failures * cost_per_failure

print(f"–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è (–±–µ–∑ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è):")
print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å–æ—Å–æ–≤: {pumps_count}")
print(f"  –û—Ç–∫–∞–∑–æ–≤ –≤ –≥–æ–¥: {annual_failures}")
print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: {average_downtime_hours} —á–∞—Å–æ–≤")
print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ—è: {cost_per_downtime_day:,} —Ä—É–±/—Å—É—Ç–∫–∏")
print(f"  –ì–æ–¥–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏: {annual_downtime_cost:,} —Ä—É–±")

# –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
prevented_failures = annual_failures * recall  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–Ω—ã–µ –æ—Ç–∫–∞–∑—ã
false_alarms = annual_failures * (1 - precision) / precision  # –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è

# –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤
savings_prevented = prevented_failures * cost_per_failure

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
cost_per_false_alarm = 500_000  # 500 —Ç—ã—Å —Ä—É–± –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
cost_false_alarms = false_alarms * cost_per_false_alarm

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–∏—Å—Ç–µ–º—É
system_development_cost = 25_000_000  # 25 –º–ª–Ω —Ä—É–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
annual_operational_cost = 8_000_000   # 8 –º–ª–Ω —Ä—É–±/–≥–æ–¥ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è

# –ß–∏—Å—Ç–∞—è —ç–∫–æ–Ω–æ–º–∏—è
net_annual_savings = savings_prevented - cost_false_alarms - annual_operational_cost
roi = (net_annual_savings - system_development_cost) / system_development_cost * 100
payback_months = system_development_cost / (net_annual_savings / 12)

print(f"\\n–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–Ω—ã–µ –æ—Ç–∫–∞–∑—ã: {prevented_failures:.1f} –≤ –≥–æ–¥")
print(f"  –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è: {savings_prevented:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_alarms:.1f} –≤ –≥–æ–¥")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {cost_false_alarms:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {annual_operational_cost:,} —Ä—É–±/–≥–æ–¥")
print(f"  –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {net_annual_savings:,.0f} —Ä—É–±")

print(f"\\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: {system_development_cost:,} —Ä—É–±")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
print("\\n" + "="*50)
print("=== –ê–ù–ê–õ–ò–ó –í–ê–ñ–ù–û–°–¢–ò –ü–†–ò–ó–ù–ê–ö–û–í ===")

# –ü–æ–ª—É—á–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç Random Forest (–∏–∑ stacking)
rf_from_stacking = stacking_clf.estimators_[0]  # Random Forest
feature_importance = pd.DataFrame({
    'feature': feature_columns,
    'importance': rf_from_stacking.feature_importances_
}).sort_values('importance', ascending=False)

print("\\n–¢–æ–ø-15 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
for i, (_, row) in enumerate(feature_importance.head(15).iterrows()):
    print(f"{i+1:2d}. {row['feature']:<30}: {row['importance']:.3f}")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
print("\\n" + "="*50)
print("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ ===")

print("""
1. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
   ‚îú‚îÄ‚îÄ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA/DCS —Å–∏—Å—Ç–µ–º–∞–º–∏
   ‚îú‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞: Apache Kafka + Apache Flink –¥–ª—è real-time
   ‚îú‚îÄ‚îÄ ML-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: MLflow –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
   ‚îú‚îÄ‚îÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: Grafana –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
   ‚îî‚îÄ‚îÄ –ê–ª–µ—Ä—Ç—ã: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

2. –≠–¢–ê–ü–´ –í–ù–ï–î–†–ï–ù–ò–Ø:
   ‚îú‚îÄ‚îÄ –§–∞–∑–∞ 1 (2 –º–µ—Å): –ø–∏–ª–æ—Ç –Ω–∞ 5 –Ω–∞—Å–æ—Å–∞—Ö
   ‚îú‚îÄ‚îÄ –§–∞–∑–∞ 2 (3 –º–µ—Å): –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å—é —Å—Ç–∞–Ω—Ü–∏—é
   ‚îú‚îÄ‚îÄ –§–∞–∑–∞ 3 (1 –º–µ—Å): –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¢–û
   ‚îî‚îÄ‚îÄ –§–∞–∑–∞ 4 (ongoing): –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ

3. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–¶–ï–î–£–†–´:
   ‚îú‚îÄ‚îÄ –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: —Ä–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   ‚îú‚îÄ‚îÄ –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã: –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∞–ª–µ—Ä—Ç—ã
   ‚îú‚îÄ‚îÄ KPI: –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
   ‚îî‚îÄ‚îÄ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏

4. –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:
   ‚îú‚îÄ‚îÄ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   ‚îú‚îÄ‚îÄ Fallback: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
   ‚îú‚îÄ‚îÄ –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
   ‚îî‚îÄ‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
""")

print(f"\\n–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é!")
print(f"–û–∂–∏–¥–∞–µ–º–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {net_annual_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months:.1f} –º–µ—Å—è—Ü–∞")`
  },

  12: {
    title: "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: "180 –º–∏–Ω",
    type: "practice",
    content: `
      <h2>–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ML-—Å–∏—Å—Ç–µ–º</h3>
      <p>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö ML-—Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</p>
      <ul>
        <li><strong>–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ:</strong> –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ML-–ø—Ä–æ–µ–∫—Ç–∞</li>
        <li><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ:</strong> –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li><strong>–ë–∏–∑–Ω–µ—Å-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:</strong> —Ñ–æ–∫—É—Å –Ω–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º —ç—Ñ—Ñ–µ–∫—Ç–µ</li>
        <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:</strong> –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è</li>
      </ul>
      
      <h3>–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML-—Å–∏—Å—Ç–µ–º</h3>
      
      <h4>1. –§–∞–∑–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
      
      <h5>–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</h5>
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</strong></p>
      <ul>
        <li>–ö–∞–∫—É—é –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ–º?</li>
        <li>–ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞?</li>
        <li>–ö–∞–∫–æ–π –æ–∂–∏–¥–∞–µ–º—ã–π ROI?</li>
        <li>–ö–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º?</li>
        <li>–ö—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã?</li>
      </ul>
      
      <h5>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—Å—É—â–µ—Å—Ç–≤–∏–º–æ—Å—Ç—å</h5>
      <p><strong>–û—Ü–µ–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</strong> –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> –ø–æ–ª–Ω–æ—Ç–∞, —Ç–æ—á–Ω–æ—Å—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å</li>
        <li><strong>–û–±—ä–µ–º:</strong> –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–†–∞–∑–º–µ—Ç–∫–∞:</strong> –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</li>
        <li><strong>–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>–ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ inference</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –Ω–æ—Ä–º–∞–º</li>
      </ul>
      
      <h4>2. –§–∞–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
      
      <h5>–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞</h5>
      
      <p><strong>Batch Processing (–ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞):</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –æ—Ç—á–µ—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
        <li><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> Apache Spark, Hadoop, Airflow</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ—Ç–∞</li>
        <li><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
      </ul>
      
      <p><strong>Stream Processing (–ø–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞):</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –∞–ª–µ—Ä—Ç—ã, real-time —Ä–µ—à–µ–Ω–∏—è</li>
        <li><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> Apache Kafka, Flink, Storm</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –Ω–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å</li>
        <li><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> —Å–ª–æ–∂–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å–∞–º</li>
      </ul>
      
      <p><strong>Hybrid Architecture (–≥–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞):</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏</li>
        <li><strong>–ü–æ–¥—Ö–æ–¥:</strong> Lambda –∏–ª–∏ Kappa –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –≥–∏–±–∫–æ—Å—Ç—å, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∑–∞–¥–∞—á–∏</li>
        <li><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</li>
      </ul>
      
      <h5>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ML-—Å–∏—Å—Ç–µ–º—ã</h5>
      
      <p><strong>1. Data Pipeline (–∫–æ–Ω–≤–µ–π–µ—Ä –¥–∞–Ω–Ω—ã—Ö):</strong></p>
      <ul>
        <li><strong>Ingestion:</strong> —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</li>
        <li><strong>Validation:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Transformation:</strong> –æ—á–∏—Å—Ç–∫–∞, –æ–±–æ–≥–∞—â–µ–Ω–∏–µ, –∞–≥—Ä–µ–≥–∞—Ü–∏—è</li>
        <li><strong>Storage:</strong> —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö</li>
      </ul>
      
      <p><strong>2. Feature Store (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤):</strong></p>
      <ul>
        <li><strong>Feature Engineering:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>Feature Serving:</strong> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è inference</li>
        <li><strong>Feature Monitoring:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ drift –∏ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>Feature Reuse:</strong> –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏</li>
      </ul>
      
      <p><strong>3. Model Training (–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π):</strong></p>
      <ul>
        <li><strong>Experiment Tracking:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤</li>
        <li><strong>Hyperparameter Tuning:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li><strong>Model Validation:</strong> –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>Model Registry:</strong> —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <p><strong>4. Model Serving (—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π):</strong></p>
      <ul>
        <li><strong>Inference API:</strong> REST/gRPC –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã</li>
        <li><strong>Batch Prediction:</strong> –ø–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</li>
        <li><strong>A/B Testing:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Canary Deployment:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ</li>
      </ul>
      
      <p><strong>5. Monitoring & Observability (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥):</strong></p>
      <ul>
        <li><strong>Model Performance:</strong> –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Data Drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>System Health:</strong> –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã</li>
        <li><strong>Business Metrics:</strong> –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</li>
      </ul>
      
      <h4>3. –§–∞–∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞</h4>
      
      <h5>–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π</h5>
      
      <p><strong>–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>PostgresPro:</strong> —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –°–£–ë–î –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>ClickHouse:</strong> –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –°–£–ë–î –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Tarantool:</strong> in-memory –±–∞–∑–∞ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>MinIO:</strong> –æ–±—ä–µ–∫—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <p><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>Apache Spark:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Apache Airflow:</strong> –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è data pipeline</li>
        <li><strong>Apache Kafka:</strong> –ø–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</li>
        <li><strong>Pandas/Polars:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Python</li>
      </ul>
      
      <p><strong>ML-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong></p>
      <ul>
        <li><strong>MLflow:</strong> —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º ML</li>
        <li><strong>Kubeflow:</strong> ML –Ω–∞ Kubernetes</li>
        <li><strong>DVC:</strong> –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Weights & Biases:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>Docker:</strong> –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π</li>
        <li><strong>Kubernetes:</strong> –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</li>
        <li><strong>NGINX:</strong> –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏</li>
        <li><strong>Prometheus + Grafana:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</li>
      </ul>
      
      <h4>4. –§–∞–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
      
      <h5>–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</h5>
      
      <p><strong>Agile –¥–ª—è ML (MLOps):</strong></p>
      <ul>
        <li><strong>–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</strong> –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏–∫–ª—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é</li>
        <li><strong>Continuous Integration:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞</li>
        <li><strong>Continuous Deployment:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ</li>
        <li><strong>Continuous Training:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ</li>
      </ul>
      
      <p><strong>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º:</strong></p>
      <ul>
        <li><strong>Unit Tests:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</li>
        <li><strong>Integration Tests:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
        <li><strong>Model Tests:</strong> –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Data Tests:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Performance Tests:</strong> –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
      </ul>
      
      <h5>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º</h5>
      
      <p><strong>Code Quality:</strong></p>
      <ul>
        <li><strong>Linting:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (flake8, black)</li>
        <li><strong>Type Checking:</strong> —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è (mypy)</li>
        <li><strong>Code Review:</strong> —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞</li>
        <li><strong>Documentation:</strong> –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
      </ul>
      
      <p><strong>Model Quality:</strong></p>
      <ul>
        <li><strong>Cross-validation:</strong> –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö</li>
        <li><strong>Holdout Testing:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Bias Testing:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å</li>
        <li><strong>Robustness Testing:</strong> —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤–æ–∑–º—É—â–µ–Ω–∏—è–º</li>
      </ul>
      
      <h4>5. –§–∞–∑–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏</h4>
      
      <h5>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è</h5>
      
      <p><strong>Blue-Green Deployment:</strong></p>
      <ul>
        <li>–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏</li>
        <li>–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞</li>
        <li>–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö</li>
        <li>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è</li>
      </ul>
      
      <p><strong>Canary Deployment:</strong></p>
      <ul>
        <li>–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é</li>
        <li>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤</li>
      </ul>
      
      <p><strong>A/B Testing:</strong></p>
      <ul>
        <li>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π</li>
        <li>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
        <li>–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏</li>
        <li>–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h5>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</h5>
      
      <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</strong></p>
      <ul>
        <li><strong>Latency:</strong> –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</li>
        <li><strong>Throughput:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É</li>
        <li><strong>Error Rate:</strong> –¥–æ–ª—è –æ—à–∏–±–æ–∫</li>
        <li><strong>Resource Usage:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU, –ø–∞–º—è—Ç–∏, –¥–∏—Å–∫–∞</li>
      </ul>
      
      <p><strong>ML-–º–µ—Ç—Ä–∏–∫–∏:</strong></p>
      <ul>
        <li><strong>Model Accuracy:</strong> —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
        <li><strong>Prediction Drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
        <li><strong>Feature Drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>Concept Drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π</li>
      </ul>
      
      <p><strong>–ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏:</strong></p>
      <ul>
        <li><strong>Conversion Rate:</strong> –∫–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</li>
        <li><strong>Revenue Impact:</strong> –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã—Ä—É—á–∫—É</li>
        <li><strong>Cost Savings:</strong> —ç–∫–æ–Ω–æ–º–∏—è –∑–∞—Ç—Ä–∞—Ç</li>
        <li><strong>User Satisfaction:</strong> —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† 57700.37-2021 "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É ML-—Å–∏—Å—Ç–µ–º:</p>
      <ul>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</li>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è:</strong> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</li>
        <li><strong>–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—á–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö</li>
        <li><strong>–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ:</strong> –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</li>
      </ul>
      
      <h4>152-–§–ó "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ ML-—Å–∏—Å—Ç–µ–º–∞—Ö:</p>
      <ul>
        <li><strong>–°–æ–≥–ª–∞—Å–∏–µ:</strong> –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É</li>
        <li><strong>–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</li>
        <li><strong>–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è:</strong> —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥—Ä–∞–∂–¥–∞–Ω –≤ –†–§</li>
        <li><strong>–ê—É–¥–∏—Ç:</strong> –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
      </ul>
      
      <h4>–ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001-2021 "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"</h4>
      <p>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é:</p>
      <ul>
        <li><strong>–ü–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</strong> –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</li>
        <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:</strong> –æ—Ü–µ–Ω–∫–∞ –∏ –º–∏—Ç–∏–≥–∞—Ü–∏—è —É–≥—Ä–æ–∑</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞:</strong> –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ML-–ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
      
      <h4>–ú–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–∞ ROI</h4>
      
      <p><strong>–ü—Ä—è–º—ã–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</strong> –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –∏ –ø–µ—Ä–µ–¥–µ–ª–æ–∫</li>
        <li><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–ö–æ—Å–≤–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–†–µ–ø—É—Ç–∞—Ü–∏—è:</strong> —É–ª—É—á—à–µ–Ω–∏–µ –∏–º–∏–¥–∂–∞ –∫–æ–º–ø–∞–Ω–∏–∏</li>
        <li><strong>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</strong> –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ —Ä—ã–Ω–∫–µ</li>
        <li><strong>–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–æ—Å—Ç—É</li>
      </ul>
      
      <p><strong>–ó–∞—Ç—Ä–∞—Ç—ã:</strong></p>
      <ul>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</strong> –∫–æ–º–∞–Ω–¥–∞, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ª–∏—Ü–µ–Ω–∑–∏–∏</li>
        <li><strong>–í–Ω–µ–¥—Ä–µ–Ω–∏–µ:</strong> –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –æ–±—É—á–µ–Ω–∏–µ, –º–∏–≥—Ä–∞—Ü–∏—è</li>
        <li><strong>–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è:</strong> –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</li>
        <li><strong>–†–∏—Å–∫–∏:</strong> —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã</li>
      </ul>
      
      <p><strong>–§–æ—Ä–º—É–ª–∞ ROI:</strong></p>
      <pre><code>ROI = (–í—ã–≥–æ–¥—ã - –ó–∞—Ç—Ä–∞—Ç—ã) / –ó–∞—Ç—Ä–∞—Ç—ã √ó 100%</code></pre>
      
      <h4>–ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞ –ø—Ä–æ–µ–∫—Ç–∞</h4>
      
      <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ KPI:</strong></p>
      <ul>
        <li><strong>Model Performance:</strong> —Ç–æ—á–Ω–æ—Å—Ç—å, –ø–æ–ª–Ω–æ—Ç–∞, F1-score</li>
        <li><strong>System Performance:</strong> latency, throughput, uptime</li>
        <li><strong>Data Quality:</strong> –ø–æ–ª–Ω–æ—Ç–∞, —Ç–æ—á–Ω–æ—Å—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å</li>
        <li><strong>Development Velocity:</strong> —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</li>
      </ul>
      
      <p><strong>–ë–∏–∑–Ω–µ—Å KPI:</strong></p>
      <ul>
        <li><strong>Revenue Impact:</strong> –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã—Ä—É—á–∫—É</li>
        <li><strong>Cost Reduction:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç</li>
        <li><strong>Process Efficiency:</strong> –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
        <li><strong>Customer Satisfaction:</strong> —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤</li>
      </ul>
      
      <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ ML-–ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏</h4>
      
      <p><strong>–†–∏—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:</strong> –Ω–µ–ø–æ–ª–Ω—ã–µ, –Ω–µ—Ç–æ—á–Ω—ã–µ, —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li><strong>Bias –≤ –¥–∞–Ω–Ω—ã—Ö:</strong> —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è</li>
        <li><strong>Data drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Privacy violations:</strong> –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–†–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π:</strong></p>
      <ul>
        <li><strong>–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ:</strong> –ø–ª–æ—Ö–∞—è –æ–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å</li>
        <li><strong>Concept drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        <li><strong>Adversarial attacks:</strong> –∞—Ç–∞–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏</li>
        <li><strong>Model degradation:</strong> –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º</li>
      </ul>
      
      <p><strong>–†–∏—Å–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:</strong></p>
      <ul>
        <li><strong>Scalability issues:</strong> –ø—Ä–æ–±–ª–µ–º—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è</li>
        <li><strong>Performance bottlenecks:</strong> —É–∑–∫–∏–µ –º–µ—Å—Ç–∞</li>
        <li><strong>Security vulnerabilities:</strong> —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
        <li><strong>Vendor lock-in:</strong> –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</li>
      </ul>
      
      <h4>–ë–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–∏</h4>
      
      <p><strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:</strong></p>
      <ul>
        <li><strong>Resistance to change:</strong> —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º</li>
        <li><strong>Skill gaps:</strong> –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</li>
        <li><strong>Resource constraints:</strong> –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤</li>
        <li><strong>Stakeholder alignment:</strong> –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤</li>
      </ul>
      
      <p><strong>–†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ä–∏—Å–∫–∏:</strong></p>
      <ul>
        <li><strong>Compliance violations:</strong> –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</li>
        <li><strong>Regulatory changes:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞</li>
        <li><strong>Audit failures:</strong> –ø—Ä–æ–≤–∞–ª –∞—É–¥–∏—Ç–æ–≤</li>
        <li><strong>Legal liability:</strong> –ø—Ä–∞–≤–æ–≤–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</li>
      </ul>
      
      <h4>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤</h4>
      
      <p><strong>–ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–¢—â–∞—Ç–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</li>
        <li><strong>Proof of Concept:</strong> –ø–∏–ª–æ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã</li>
        <li><strong>Continuous monitoring:</strong> –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</li>
        <li><strong>Regular audits:</strong> —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∞—É–¥–∏—Ç—ã</li>
      </ul>
      
      <p><strong>–†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>Incident response:</strong> –ø–ª–∞–Ω—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã</li>
        <li><strong>Rollback procedures:</strong> –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Ç–∫–∞—Ç–∞</li>
        <li><strong>Disaster recovery:</strong> –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤</li>
        <li><strong>Insurance coverage:</strong> —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞</h3>
      
      <h4>–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
      
      <p><strong>1. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ:</strong></p>
      <ul>
        <li>MVP (Minimum Viable Product) –ø–æ–¥—Ö–æ–¥</li>
        <li>–ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –∫–∞–∫ baseline</li>
        <li>–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ</li>
        <li>–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</li>
      </ul>
      
      <p><strong>2. –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:</strong></p>
      <ul>
        <li>–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</li>
        <li>–°–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
        <li>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li>–í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤</li>
      </ul>
      
      <p><strong>3. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤—Å–µ:</strong></p>
      <ul>
        <li>CI/CD pipeline –¥–ª—è –∫–æ–¥–∞ –∏ –º–æ–¥–µ–ª–µ–π</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
        <li>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã</li>
        <li>–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <p><strong>4. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∏—Ö –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</li>
        <li>API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</li>
        <li>Runbooks –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</li>
        <li>–ü–æ—Å—Ç–º–æ—Ä—Ç–µ–º—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤</li>
      </ul>
      
      <h4>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã</h4>
      
      <p><strong>–ö–æ–º–∞–Ω–¥–∞ ML-–ø—Ä–æ–µ–∫—Ç–∞:</strong></p>
      <ul>
        <li><strong>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä:</strong> —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ</li>
        <li><strong>Data Scientists:</strong> —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>ML Engineers:</strong> –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ</li>
        <li><strong>Data Engineers:</strong> pipeline –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>DevOps Engineers:</strong> –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</li>
        <li><strong>Product Manager:</strong> –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</li>
        <li><strong>Domain Experts:</strong> –ø—Ä–µ–¥–º–µ—Ç–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞</li>
      </ul>
      
      <p><strong>–ü—Ä–æ—Ü–µ—Å—Å—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:</strong></p>
      <ul>
        <li><strong>Agile/Scrum:</strong> –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞</li>
        <li><strong>Code Review:</strong> —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞</li>
        <li><strong>Design Review:</strong> –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>Retrospectives:</strong> –∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
      </ul>
    `,
    practiceContent: `
      <h3>–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h4>
      <p>–í—ã - –≤–µ–¥—É—â–∏–π AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∫—Ä—É–ø–Ω–æ–≥–æ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç –≤—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.</p>
      
      <h4>–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç</h4>
      <ul>
        <li><strong>–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ:</strong> –ó–∞–≤–æ–¥ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
        <li><strong>–ü—Ä–æ–¥—É–∫—Ü–∏—è:</strong> –¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏, –∫–æ–ª–æ–¥–∫–∏, —Å—É–ø–ø–æ—Ä—Ç—ã</li>
        <li><strong>–û–±—ä–µ–º:</strong> 50,000 –∏–∑–¥–µ–ª–∏–π –≤ –º–µ—Å—è—Ü</li>
        <li><strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> 5% –±—Ä–∞–∫–∞, –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –û–¢–ö, –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ–∏</li>
        <li><strong>–¶–µ–ª—å:</strong> –°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –¥–æ 1%, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è, –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –¢–û</li>
      </ul>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h4>
      
      <h5>–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ 1: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h5>
      <ul>
        <li><strong>–ó–∞–¥–∞—á–∞:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–¥–µ–ª–∏–π, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã:</strong> Computer Vision + –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> Precision ‚â• 95%, –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ < 2 —Å–µ–∫</li>
      </ul>
      
      <h5>–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ 2: –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h5>
      <ul>
        <li><strong>–ó–∞–¥–∞—á–∞:</strong> –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> –í–∏–±—Ä–∞—Ü–∏—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç–æ–∫–∏, –¥–∞–≤–ª–µ–Ω–∏—è</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã:</strong> –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã + –∞–Ω—Å–∞–º–±–ª–∏</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ 7 –¥–Ω–µ–π, Recall ‚â• 90%</li>
      </ul>
      
      <h5>–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h5>
      <ul>
        <li><strong>–ó–∞–¥–∞—á–∞:</strong> –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> –†–µ–∂–∏–º—ã —Ä–µ–∑–∞–Ω–∏—è, –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã:</strong> –†–µ–≥—Ä–µ—Å—Å–∏—è + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 15%</li>
      </ul>
      
      <h5>–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ 4: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å</h5>
      <ul>
        <li><strong>–ó–∞–¥–∞—á–∞:</strong> –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã:</strong> –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è + –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã</li>
      </ul>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Ç–∞ –¥–æ 100,000 –∏–∑–¥–µ–ª–∏–π/–º–µ—Å—è—Ü</li>
        <li><strong>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</strong> 99.9% uptime</li>
        <li><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ò–ë</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ ERP/MES —Å–∏—Å—Ç–µ–º–∞–º–∏</li>
        <li><strong>–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</li>
      </ul>
      
      <h4>–ó–∞–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞</h4>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 1: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h5>
      <p>–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ –æ–±—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 2: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å–∏—Å—Ç–µ–º</h5>
      <p>–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–∞–∂–¥—É—é –ø–æ–¥—Å–∏—Å—Ç–µ–º—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö ML-–º–µ—Ç–æ–¥–æ–≤.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h5>
      <p>–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã, —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 4: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</h5>
      <p>–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ ROI –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.</p>
      
      <h5>–ó–∞–¥–∞–Ω–∏–µ 5: –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è</h5>
      <p>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã.</p>
    `,
    hasCodeEditor: true,
    initialCode: `# –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier, IsolationForest
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.cluster import KMeans
import xgboost as xgb
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("–ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–û–ú –ü–†–û–ò–ó–í–û–î–°–¢–í–ê")
print("–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ - –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
print("="*80)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
np.random.seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
production_lines = 5
products_per_day = 1667  # 50,000 –≤ –º–µ—Å—è—Ü / 30 –¥–Ω–µ–π
days_history = 90  # 3 –º–µ—Å—è—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
total_products = production_lines * products_per_day * days_history

print(f"\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
print(f"  –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π: {production_lines}")
print(f"  –ò–∑–¥–µ–ª–∏–π –≤ –¥–µ–Ω—å: {products_per_day:,}")
print(f"  –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {days_history} –¥–Ω–µ–π")
print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π: {total_products:,}")

# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
production_data = []
equipment_data = []
process_data = []

# –¢–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏
product_types = ['–¢–æ—Ä–º–æ–∑–Ω–æ–π –¥–∏—Å–∫', '–¢–æ—Ä–º–æ–∑–Ω–∞—è –∫–æ–ª–æ–¥–∫–∞', '–°—É–ø–ø–æ—Ä—Ç']
defect_types = ['–¶–∞—Ä–∞–ø–∏–Ω—ã', '–¢—Ä–µ—â–∏–Ω—ã', '–†–∞–∑–º–µ—Ä–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è', '–ü–æ—Ä–∏—Å—Ç–æ—Å—Ç—å', '–ù–æ—Ä–º–∞']

for day in range(days_history):
    date = datetime(2024, 1, 1) + timedelta(days=day)
    
    for line_id in range(1, production_lines + 1):
        for product_num in range(products_per_day // production_lines):
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–¥–µ–ª–∏—è
            product_type = np.random.choice(product_types)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ)
            cutting_speed = np.random.normal(200, 20)  # –º/–º–∏–Ω
            feed_rate = np.random.normal(0.2, 0.02)    # –º–º/–æ–±
            cutting_depth = np.random.normal(1.0, 0.1) # –º–º
            coolant_temp = np.random.normal(25, 3)     # ¬∞C
            tool_wear = np.random.uniform(0, 1)        # 0-1 (–Ω–æ–≤—ã–π-–∏–∑–Ω–æ—à–µ–Ω–Ω—ã–π)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            spindle_vibration = 2.0 + tool_wear * 3 + np.random.normal(0, 0.5)
            motor_current = 15 + cutting_depth * 5 + np.random.normal(0, 1)
            hydraulic_pressure = 150 + np.random.normal(0, 5)
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
            quality_score = 95 - tool_wear * 10 - abs(cutting_speed - 200) * 0.1
            quality_score += np.random.normal(0, 2)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
            if quality_score < 85:
                defect_prob = [0.3, 0.2, 0.3, 0.2, 0.0]  # –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–æ–≤
            elif quality_score < 92:
                defect_prob = [0.1, 0.05, 0.1, 0.05, 0.7]  # –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            else:
                defect_prob = [0.02, 0.01, 0.02, 0.01, 0.94]  # –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            
            defect = np.random.choice(defect_types, p=defect_prob)
            is_defective = 1 if defect != '–ù–æ—Ä–º–∞' else 0
            
            # –†–∞–∑–º–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            diameter = np.random.normal(300, 0.5) if product_type == '–¢–æ—Ä–º–æ–∑–Ω–æ–π –¥–∏—Å–∫' else np.random.normal(100, 0.2)
            thickness = np.random.normal(25, 0.3) if product_type == '–¢–æ—Ä–º–æ–∑–Ω–æ–π –¥–∏—Å–∫' else np.random.normal(15, 0.2)
            surface_roughness = 1.6 + tool_wear * 2 + np.random.normal(0, 0.2)
            
            # –î–∞–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è
            product_record = {
                'datetime': date,
                'line_id': line_id,
                'product_id': f"P{day:03d}{line_id}{product_num:04d}",
                'product_type': product_type,
                'cutting_speed': cutting_speed,
                'feed_rate': feed_rate,
                'cutting_depth': cutting_depth,
                'coolant_temp': coolant_temp,
                'tool_wear': tool_wear,
                'diameter': diameter,
                'thickness': thickness,
                'surface_roughness': surface_roughness,
                'quality_score': quality_score,
                'defect_type': defect,
                'is_defective': is_defective
            }
            production_data.append(product_record)
            
            # –î–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–∫–∞–∂–¥—ã–π —á–∞—Å)
            if product_num % 100 == 0:  # –ö–∞–∂–¥—ã–µ 100 –∏–∑–¥–µ–ª–∏–π = –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–π —á–∞—Å
                equipment_record = {
                    'datetime': date + timedelta(hours=product_num//100),
                    'line_id': line_id,
                    'spindle_vibration': spindle_vibration,
                    'motor_current': motor_current,
                    'hydraulic_pressure': hydraulic_pressure,
                    'temperature': 40 + motor_current * 0.5 + np.random.normal(0, 2),
                    'operating_hours': day * 16 + product_num // 100,  # 16 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
                    'maintenance_due': 1 if (day * 16 + product_num // 100) % 1000 < 24 else 0
                }
                equipment_data.append(equipment_record)

# –°–æ–∑–¥–∞–µ–º DataFrame
df_production = pd.DataFrame(production_data)
df_equipment = pd.DataFrame(equipment_data)

print(f"\\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
print(f"  –ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {len(df_production):,}")
print(f"  –ó–∞–ø–∏—Å–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {len(df_equipment):,}")
print(f"  –î–æ–ª—è –±—Ä–∞–∫–∞: {df_production['is_defective'].mean()*100:.1f}%")

# –ü–û–î–°–ò–°–¢–ï–ú–ê 1: –ö–û–ù–¢–†–û–õ–¨ –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–î–£–ö–¶–ò–ò
print("\\n" + "="*60)
print("–ü–û–î–°–ò–°–¢–ï–ú–ê 1: –ö–û–ù–¢–†–û–õ–¨ –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–î–£–ö–¶–ò–ò")
print("="*60)

# –ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤
defect_analysis = df_production['defect_type'].value_counts()
print("\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤:")
for defect, count in defect_analysis.items():
    percentage = count / len(df_production) * 100
    print(f"  {defect}: {count:,} ({percentage:.1f}%)")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
print("\\n–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤...")

# –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
feature_cols = ['cutting_speed', 'feed_rate', 'cutting_depth', 'coolant_temp', 
                'tool_wear', 'diameter', 'thickness', 'surface_roughness']

X_quality = df_production[feature_cols]
y_quality = df_production['defect_type']

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
le_product = LabelEncoder()
X_quality['product_type_encoded'] = le_product.fit_transform(df_production['product_type'])

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
le_defect = LabelEncoder()
y_quality_encoded = le_defect.fit_transform(y_quality)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train_q, X_test_q, y_train_q, y_test_q = train_test_split(
    X_quality, y_quality_encoded, test_size=0.2, random_state=42, stratify=y_quality_encoded
)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
rf_quality = RandomForestClassifier(n_estimators=100, random_state=42)
rf_quality.fit(X_train_q, y_train_q)

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
y_pred_q = rf_quality.predict(X_test_q)
accuracy_quality = (y_pred_q == y_test_q).mean()

print(f"–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {accuracy_quality:.3f}")
print("\\n–û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test_q, y_pred_q, 
                          target_names=le_defect.classes_, digits=3))

# –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_importance_quality = pd.DataFrame({
    'feature': X_quality.columns,
    'importance': rf_quality.feature_importances_
}).sort_values('importance', ascending=False)

print("\\n–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞:")
for _, row in feature_importance_quality.head(5).iterrows():
    print(f"  {row['feature']}: {row['importance']:.3f}")

# –ü–û–î–°–ò–°–¢–ï–ú–ê 2: –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï
print("\\n" + "="*60)
print("–ü–û–î–°–ò–°–¢–ï–ú–ê 2: –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï")
print("="*60)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
print("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¢–û
equipment_features = ['spindle_vibration', 'motor_current', 'hydraulic_pressure', 
                     'temperature', 'operating_hours']

X_maintenance = df_equipment[equipment_features]
y_maintenance = df_equipment['maintenance_due']

# –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
df_equipment_sorted = df_equipment.sort_values(['line_id', 'datetime'])
for feature in ['spindle_vibration', 'motor_current', 'temperature']:
    df_equipment_sorted[f'{feature}_ma_24h'] = df_equipment_sorted.groupby('line_id')[feature].rolling(24, min_periods=1).mean().values
    df_equipment_sorted[f'{feature}_trend'] = df_equipment_sorted.groupby('line_id')[feature].pct_change(24).values

# –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
maintenance_features = equipment_features + [col for col in df_equipment_sorted.columns if '_ma_' in col or '_trend' in col]
X_maintenance = df_equipment_sorted[maintenance_features].fillna(0)
y_maintenance = df_equipment_sorted['maintenance_due']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train_m, X_test_m, y_train_m, y_test_m = train_test_split(
    X_maintenance, y_maintenance, test_size=0.2, random_state=42
)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
xgb_maintenance = xgb.XGBClassifier(n_estimators=100, random_state=42)
xgb_maintenance.fit(X_train_m, y_train_m)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
y_pred_m = xgb_maintenance.predict(X_test_m)
y_pred_proba_m = xgb_maintenance.predict_proba(X_test_m)[:, 1]

from sklearn.metrics import roc_auc_score, precision_score, recall_score

accuracy_maintenance = (y_pred_m == y_test_m).mean()
precision_maintenance = precision_score(y_test_m, y_pred_m)
recall_maintenance = recall_score(y_test_m, y_pred_m)
auc_maintenance = roc_auc_score(y_test_m, y_pred_proba_m)

print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:")
print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy_maintenance:.3f}")
print(f"  Precision: {precision_maintenance:.3f}")
print(f"  Recall: {recall_maintenance:.3f}")
print(f"  ROC-AUC: {auc_maintenance:.3f}")

# –ü–û–î–°–ò–°–¢–ï–ú–ê 3: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–†–û–¶–ï–°–°–û–í
print("\\n" + "="*60)
print("–ü–û–î–°–ò–°–¢–ï–ú–ê 3: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–†–û–¶–ï–°–°–û–í")
print("="*60)

# –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

print("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

# –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process_features = ['cutting_speed', 'feed_rate', 'cutting_depth', 'coolant_temp', 'tool_wear']
X_process = df_production[process_features]
y_process = df_production['quality_score']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train_p, X_test_p, y_train_p, y_test_p = train_test_split(
    X_process, y_process, test_size=0.2, random_state=42
)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
rf_process = RandomForestRegressor(n_estimators=100, random_state=42)
rf_process.fit(X_train_p, y_train_p)

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
y_pred_p = rf_process.predict(X_test_p)
mse_process = mean_squared_error(y_test_p, y_pred_p)
r2_process = r2_score(y_test_p, y_pred_p)

print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
print(f"  MSE: {mse_process:.3f}")
print(f"  R¬≤: {r2_process:.3f}")
print(f"  RMSE: {np.sqrt(mse_process):.3f}")

# –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
print("\\n–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞...")

def optimize_process_parameters():
    best_quality = 0
    best_params = None
    
    # –°–µ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    cutting_speeds = np.linspace(180, 220, 10)
    feed_rates = np.linspace(0.15, 0.25, 10)
    cutting_depths = np.linspace(0.8, 1.2, 10)
    
    for cutting_speed in cutting_speeds:
        for feed_rate in feed_rates:
            for cutting_depth in cutting_depths:
                # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                coolant_temp = 25  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                tool_wear = 0.1    # –ù–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                
                params = np.array([[cutting_speed, feed_rate, cutting_depth, coolant_temp, tool_wear]])
                predicted_quality = rf_process.predict(params)[0]
                
                if predicted_quality > best_quality:
                    best_quality = predicted_quality
                    best_params = {
                        'cutting_speed': cutting_speed,
                        'feed_rate': feed_rate,
                        'cutting_depth': cutting_depth,
                        'coolant_temp': coolant_temp,
                        'tool_wear': tool_wear
                    }
    
    return best_params, best_quality

optimal_params, optimal_quality = optimize_process_parameters()

print(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞:")
for param, value in optimal_params.items():
    print(f"  {param}: {value:.3f}")
print(f"–û–∂–∏–¥–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {optimal_quality:.1f}")

# –ü–û–î–°–ò–°–¢–ï–ú–ê 4: –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–ù–û–°–¢–¨
print("\\n" + "="*60)
print("–ü–û–î–°–ò–°–¢–ï–ú–ê 4: –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–ù–û–°–¢–¨")
print("="*60)

# –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤
print("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤...")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
defective_products = df_production[df_production['is_defective'] == 1]

if len(defective_products) > 0:
    X_defects = defective_products[feature_cols]
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    scaler_defects = StandardScaler()
    X_defects_scaled = scaler_defects.fit_transform(X_defects)
    
    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    n_clusters = 4
    kmeans_defects = KMeans(n_clusters=n_clusters, random_state=42)
    defect_clusters = kmeans_defects.fit_predict(X_defects_scaled)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    defective_products_with_clusters = defective_products.copy()
    defective_products_with_clusters['cluster'] = defect_clusters
    
    print(f"\\n–ê–Ω–∞–ª–∏–∑ {n_clusters} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤:")
    
    for cluster_id in range(n_clusters):
        cluster_data = defective_products_with_clusters[defective_products_with_clusters['cluster'] == cluster_id]
        cluster_size = len(cluster_data)
        
        # –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∏–ø –¥–µ—Ñ–µ–∫—Ç–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
        dominant_defect = cluster_data['defect_type'].mode().iloc[0]
        defect_percentage = (cluster_data['defect_type'] == dominant_defect).mean() * 100
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∞
        avg_tool_wear = cluster_data['tool_wear'].mean()
        avg_surface_roughness = cluster_data['surface_roughness'].mean()
        
        print(f"\\n–ö–ª–∞—Å—Ç–µ—Ä {cluster_id} ({cluster_size} –∏–∑–¥–µ–ª–∏–π):")
        print(f"  –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –¥–µ—Ñ–µ–∫—Ç: {dominant_defect} ({defect_percentage:.1f}%)")
        print(f"  –°—Ä–µ–¥–Ω–∏–π –∏–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {avg_tool_wear:.3f}")
        print(f"  –°—Ä–µ–¥–Ω—è—è —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å: {avg_surface_roughness:.2f}")

# –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
print("\\n–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏...")

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
daily_quality = df_production.groupby(df_production['datetime'].dt.date).agg({
    'quality_score': 'mean',
    'is_defective': 'mean',
    'surface_roughness': 'mean'
}).reset_index()

daily_quality['defect_rate_percent'] = daily_quality['is_defective'] * 100

# –¢—Ä–µ–Ω–¥ –∫–∞—á–µ—Å—Ç–≤–∞
quality_trend = daily_quality['quality_score'].pct_change(7).mean()  # –ù–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
defect_trend = daily_quality['defect_rate_percent'].pct_change(7).mean()

print(f"–¢—Ä–µ–Ω–¥—ã –∫–∞—á–µ—Å—Ç–≤–∞ (–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è):")
print(f"  –ö–∞—á–µ—Å—Ç–≤–æ: {quality_trend*100:+.2f}%")
print(f"  –î–æ–ª—è –±—Ä–∞–∫–∞: {defect_trend:+.2f} –ø.–ø.")

# –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï
print("\\n" + "="*60)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê")
print("="*60)

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
monthly_production = 50000
current_defect_rate = df_production['is_defective'].mean()
target_defect_rate = 0.01  # 1%
cost_per_defect = 5000  # —Ä—É–± –∑–∞ –¥–µ—Ñ–µ–∫—Ç–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ
cost_per_downtime_hour = 500000  # —Ä—É–±/—á–∞—Å –ø—Ä–æ—Å—Ç–æ—è

# –¢–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏
current_monthly_defects = monthly_production * current_defect_rate
current_monthly_losses = current_monthly_defects * cost_per_defect

# –ü–æ—Ç–µ—Ä–∏ –æ—Ç –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤ (–±–µ–∑ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –¢–û)
unplanned_downtime_hours_month = 48  # —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü
downtime_losses_month = unplanned_downtime_hours_month * cost_per_downtime_hour

# –û–±—â–∏–µ —Ç–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏
total_current_losses_month = current_monthly_losses + downtime_losses_month
total_current_losses_year = total_current_losses_month * 12

print(f"–¢–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏ (–±–µ–∑ —Å–∏—Å—Ç–µ–º—ã):")
print(f"  –î–æ–ª—è –±—Ä–∞–∫–∞: {current_defect_rate*100:.1f}%")
print(f"  –î–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –≤ –º–µ—Å—è—Ü: {current_monthly_defects:.0f}")
print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –±—Ä–∞–∫–∞: {current_monthly_losses:,.0f} —Ä—É–±/–º–µ—Å")
print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ—Å—Ç–æ–µ–≤: {downtime_losses_month:,.0f} —Ä—É–±/–º–µ—Å")
print(f"  –û–±—â–∏–µ –ø–æ—Ç–µ—Ä–∏: {total_current_losses_year:,.0f} —Ä—É–±/–≥–æ–¥")

# –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
# –°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞
target_monthly_defects = monthly_production * target_defect_rate
target_monthly_losses = target_monthly_defects * cost_per_defect
defect_reduction_savings = (current_monthly_losses - target_monthly_losses) * 12

# –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤ (–ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –¢–û)
predicted_downtime_reduction = 0.6  # 60% —Å–Ω–∏–∂–µ–Ω–∏–µ
new_downtime_hours_month = unplanned_downtime_hours_month * (1 - predicted_downtime_reduction)
downtime_savings_month = (unplanned_downtime_hours_month - new_downtime_hours_month) * cost_per_downtime_hour
downtime_savings_year = downtime_savings_month * 12

# –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)
productivity_improvement = 0.15  # 15%
additional_production = monthly_production * productivity_improvement * 12
profit_per_unit = 2000  # —Ä—É–± –ø—Ä–∏–±—ã–ª–∏ —Å –∏–∑–¥–µ–ª–∏—è
productivity_revenue = additional_production * profit_per_unit

# –û–±—â–∏–µ –≤—ã–≥–æ–¥—ã
total_annual_benefits = defect_reduction_savings + downtime_savings_year + productivity_revenue

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç
development_cost = 35_000_000  # 35 –º–ª–Ω —Ä—É–±
infrastructure_cost = 15_000_000  # 15 –º–ª–Ω —Ä—É–±
training_cost = 3_000_000  # 3 –º–ª–Ω —Ä—É–±
total_project_cost = development_cost + infrastructure_cost + training_cost

# –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
annual_operational_cost = 12_000_000  # 12 –º–ª–Ω —Ä—É–±/–≥–æ–¥

# –†–∞—Å—á–µ—Ç ROI
net_annual_benefit = total_annual_benefits - annual_operational_cost
roi = (net_annual_benefit - total_project_cost) / total_project_cost * 100
payback_months = total_project_cost / (net_annual_benefit / 12)

print(f"\\n–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –æ—Ç –±—Ä–∞–∫–∞: {defect_reduction_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –æ—Ç –ø—Ä–æ—Å—Ç–æ–µ–≤: {downtime_savings_year:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –î–æ—Ö–æ–¥—ã –æ—Ç —Ä–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {productivity_revenue:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –û–±—â–∏–µ –≤—ã–≥–æ–¥—ã: {total_annual_benefits:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
print(f"  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {development_cost:,.0f} —Ä—É–±")
print(f"  –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {infrastructure_cost:,.0f} —Ä—É–±")
print(f"  –û–±—É—á–µ–Ω–∏–µ: {training_cost:,.0f} —Ä—É–±")
print(f"  –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_project_cost:,.0f} —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {annual_operational_cost:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,.0f} —Ä—É–±")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –†–ï–®–ï–ù–ò–ï
print("\\n" + "="*60)
print("–ê–†–•–ò–¢–ï–ö–¢–£–†–ù–û–ï –†–ï–®–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´")
print("="*60)

architecture_description = """
–¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö:

1. –°–ë–û–† –ò –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•:
   ‚îú‚îÄ‚îÄ PostgresPro: –æ—Å–Ω–æ–≤–Ω–∞—è –°–£–ë–î –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   ‚îú‚îÄ‚îÄ ClickHouse: –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –°–£–ë–î –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
   ‚îú‚îÄ‚îÄ MinIO: –æ–±—ä–µ–∫—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–æ–¥–µ–ª–µ–π
   ‚îî‚îÄ‚îÄ Apache Kafka: –ø–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

2. –û–ë–†–ê–ë–û–¢–ö–ê –ò ML:
   ‚îú‚îÄ‚îÄ Apache Spark: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   ‚îú‚îÄ‚îÄ MLflow: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º ML-–º–æ–¥–µ–ª–µ–π
   ‚îú‚îÄ‚îÄ Apache Airflow: –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è data pipeline
   ‚îî‚îÄ‚îÄ Jupyter Hub: —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è data scientists

3. –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì:
   ‚îú‚îÄ‚îÄ Kubernetes: –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
   ‚îú‚îÄ‚îÄ Docker: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
   ‚îú‚îÄ‚îÄ NGINX: –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ API Gateway
   ‚îú‚îÄ‚îÄ Prometheus + Grafana: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
   ‚îî‚îÄ‚îÄ ELK Stack: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑

4. –ò–ù–¢–ï–†–§–ï–ô–°–´:
   ‚îú‚îÄ‚îÄ React: –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
   ‚îú‚îÄ‚îÄ Tableau: –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—à–±–æ—Ä–¥—ã
   ‚îú‚îÄ‚îÄ REST API: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ERP/MES
   ‚îî‚îÄ‚îÄ WebSocket: real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
- –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
- Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è real-time –æ–±—Ä–∞–±–æ—Ç–∫–∏
- Containerized deployment –¥–ª—è –ø–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
- API-first –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- Observability –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏

–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
- OAuth 2.0 / OIDC –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- RBAC –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
- TLS –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
- Vault –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏
- Audit logging –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
"""

print(architecture_description)

# –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø
print("\\n" + "="*60)
print("–ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
print("="*60)

implementation_plan = """
–≠–¢–ê–ü–´ –í–ù–ï–î–†–ï–ù–ò–Ø:

–§–ê–ó–ê 1: –ü–û–î–ì–û–¢–û–í–ö–ê –ò –ü–ò–õ–û–¢ (3 –º–µ—Å—è—Ü–∞)
‚îú‚îÄ‚îÄ –ú–µ—Å—è—Ü 1: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚îÇ   ‚îú‚îÄ‚îÄ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
‚îÇ   ‚îú‚îÄ‚îÄ –í—ã–±–æ—Ä –∏ –∑–∞–∫—É–ø–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞
‚îú‚îÄ‚îÄ –ú–µ—Å—è—Ü 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP
‚îÇ   ‚îú‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
‚îÇ   ‚îú‚îÄ‚îÄ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–¥–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π
‚îÇ   ‚îî‚îÄ‚îÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–µ–π—à–∏—Ö ML-–º–æ–¥–µ–ª–µ–π
‚îî‚îÄ‚îÄ –ú–µ—Å—è—Ü 3: –ü–∏–ª–æ—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    ‚îú‚îÄ‚îÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö
    ‚îú‚îÄ‚îÄ –û–±—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ‚îú‚îÄ‚îÄ –°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    ‚îî‚îÄ‚îÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é

–§–ê–ó–ê 2: –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï (4 –º–µ—Å—è—Ü–∞)
‚îú‚îÄ‚îÄ –ú–µ—Å—è—Ü 4-5: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –ª–∏–Ω–∏—è—Ö
‚îÇ   ‚îú‚îÄ‚îÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
‚îÇ   ‚îú‚îÄ‚îÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö ML-–º–æ–¥–µ–ª–µ–π
‚îÇ   ‚îú‚îÄ‚îÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ERP/MES —Å–∏—Å—Ç–µ–º–∞–º–∏
‚îÇ   ‚îî‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤
‚îî‚îÄ‚îÄ –ú–µ—Å—è—Ü 6-7: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
    ‚îú‚îÄ‚îÄ –¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π
    ‚îú‚îÄ‚îÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    ‚îú‚îÄ‚îÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    ‚îî‚îÄ‚îÄ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

–§–ê–ó–ê 3: –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–Ø (2 –º–µ—Å—è—Ü–∞)
‚îú‚îÄ‚îÄ –ú–µ—Å—è—Ü 8: –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º 24/7
‚îÇ   ‚îú‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚îÇ   ‚îú‚îÄ‚îÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ KPI –∏ –º–µ—Ç—Ä–∏–∫
‚îÇ   ‚îî‚îÄ‚îÄ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚îî‚îÄ‚îÄ –ú–µ—Å—è—Ü 9: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    ‚îú‚îÄ‚îÄ –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    ‚îú‚îÄ‚îÄ –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ ROI
    ‚îú‚îÄ‚îÄ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
    ‚îî‚îÄ‚îÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞

–†–ò–°–ö–ò –ò –ú–ò–¢–ò–ì–ê–¶–ò–Ø:
‚îú‚îÄ‚îÄ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:
‚îÇ   ‚îú‚îÄ‚îÄ –ü—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ø–æ—ç—Ç–∞–ø–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
‚îÇ   ‚îú‚îÄ‚îÄ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö ‚Üí –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
‚îÇ   ‚îî‚îÄ‚îÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã ‚Üí –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚îú‚îÄ‚îÄ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:
‚îÇ   ‚îú‚îÄ‚îÄ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ‚Üí –æ–±—É—á–µ–Ω–∏–µ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ
‚îÇ   ‚îú‚îÄ‚îÄ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π ‚Üí –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
‚îÇ   ‚îî‚îÄ‚îÄ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ ‚Üí —á–µ—Ç–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚îî‚îÄ‚îÄ –ë–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–∏:
    ‚îú‚îÄ‚îÄ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ ‚Üí –ø–æ—ç—Ç–∞–ø–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
    ‚îú‚îÄ‚îÄ –ó–∞–¥–µ—Ä–∂–∫–∞ —Å—Ä–æ–∫–æ–≤ ‚Üí –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–ª–∞–Ω–∞—Ö
    ‚îî‚îÄ‚îÄ –ù–µ–ø–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ‚Üí –ø–∏–ª–æ—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:
‚îú‚îÄ‚îÄ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ KPI:
‚îÇ   ‚îú‚îÄ‚îÄ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π ‚â• 95%
‚îÇ   ‚îú‚îÄ‚îÄ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ < 2 —Å–µ–∫—É–Ω–¥
‚îÇ   ‚îú‚îÄ‚îÄ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã ‚â• 99.9%
‚îÇ   ‚îî‚îÄ‚îÄ –ü–æ–∫—Ä—ã—Ç–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º 100%
‚îú‚îÄ‚îÄ –ë–∏–∑–Ω–µ—Å KPI:
‚îÇ   ‚îú‚îÄ‚îÄ –°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –¥–æ 1%
‚îÇ   ‚îú‚îÄ‚îÄ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤ –Ω–∞ 60%
‚îÇ   ‚îú‚îÄ‚îÄ –†–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 15%
‚îÇ   ‚îî‚îÄ‚îÄ ROI ‚â• 300%
‚îî‚îÄ‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ KPI:
    ‚îú‚îÄ‚îÄ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚â• 4.5/5
    ‚îú‚îÄ‚îÄ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ‚â§ 2 –¥–Ω—è
    ‚îú‚îÄ‚îÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ ‚â§ 1 –≤ –º–µ—Å—è—Ü
    ‚îî‚îÄ‚îÄ –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º ‚â§ 4 —á–∞—Å–∞
"""

print(implementation_plan)

print("\\n" + "="*80)
print("–ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–û–ú –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–û–∂–∏–¥–∞–µ–º—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_annual_benefit:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")
print("="*80)`
  },

  13: {
    title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: "180 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–í–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π</h3>
      <p>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</li>
        <li><strong>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π</li>
        <li><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å–∏—Å—Ç–µ–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç adversarial –∞—Ç–∞–∫</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π</h3>
      
      <h4>–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è</h4>
      <p>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–±–æ—Ç–æ–π –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤. –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –Ω–µ–π—Ä–æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –¥–µ–Ω–¥—Ä–∏—Ç—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –≤ —Ç–µ–ª–µ –∫–ª–µ—Ç–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∞–∫—Å–æ–Ω. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ–π—Ä–æ–Ω:</p>
      <ul>
        <li><strong>–ü–æ–ª—É—á–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</strong> (–∞–Ω–∞–ª–æ–≥ –¥–µ–Ω–¥—Ä–∏—Ç–æ–≤)</li>
        <li><strong>–í–∑–≤–µ—à–∏–≤–∞–µ—Ç –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –∏—Ö</strong> (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ç–µ–ª–µ –∫–ª–µ—Ç–∫–∏)</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</strong> (–ø–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)</li>
        <li><strong>–ü–µ—Ä–µ–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–ª—å—à–µ</strong> (–∞–Ω–∞–ª–æ–≥ –∞–∫—Å–æ–Ω–∞)</li>
      </ul>
      
      <h4>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ–Ω–∞</h4>
      <p>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ–π—Ä–æ–Ω –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏:</p>
      
      <p><strong>–õ–∏–Ω–µ–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –≤—Ö–æ–¥–æ–≤:</strong></p>
      <pre><code>z = w‚ÇÅx‚ÇÅ + w‚ÇÇx‚ÇÇ + ... + w‚Çôx‚Çô + b = Œ£(w·µ¢x·µ¢) + b</code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>x·µ¢</strong> - –≤—Ö–æ–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–ø—Ä–∏–∑–Ω–∞–∫–∏)</li>
        <li><strong>w·µ¢</strong> - –≤–µ—Å–∞ —Å–≤—è–∑–µ–π (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏)</li>
        <li><strong>b</strong> - —Å–º–µ—â–µ–Ω–∏–µ (bias)</li>
        <li><strong>z</strong> - –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞</li>
      </ul>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</strong></p>
      <pre><code>y = f(z) = f(Œ£(w·µ¢x·µ¢) + b)</code></pre>
      
      <p>–≥–¥–µ <strong>f(z)</strong> - —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –≤—ã—Ö–æ–¥ –Ω–µ–π—Ä–æ–Ω–∞.</p>
      
      <h4>–§—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</h4>
      
      <p><strong>1. –°–∏–≥–º–æ–∏–¥–∞ (Sigmoid):</strong></p>
      <pre><code>œÉ(z) = 1 / (1 + e^(-z))</code></pre>
      <ul>
        <li><strong>–î–∏–∞–ø–∞–∑–æ–Ω:</strong> (0, 1)</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤, –Ω–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω—É–ª—è</li>
      </ul>
      
      <p><strong>2. –ì–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–π —Ç–∞–Ω–≥–µ–Ω—Å (Tanh):</strong></p>
      <pre><code>tanh(z) = (e^z - e^(-z)) / (e^z + e^(-z))</code></pre>
      <ul>
        <li><strong>–î–∏–∞–ø–∞–∑–æ–Ω:</strong> (-1, 1)</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∏, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω—É–ª—è</li>
      </ul>
      
      <p><strong>3. ReLU (Rectified Linear Unit):</strong></p>
      <pre><code>ReLU(z) = max(0, z)</code></pre>
      <ul>
        <li><strong>–î–∏–∞–ø–∞–∑–æ–Ω:</strong> [0, +‚àû)</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∏ –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç–µ–π</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ø—Ä–æ—Å—Ç–æ—Ç–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
        <li><strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> "–º–µ—Ä—Ç–≤—ã–µ –Ω–µ–π—Ä–æ–Ω—ã" –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—Ö–æ–¥–∞—Ö</li>
      </ul>
      
      <p><strong>4. Leaky ReLU:</strong></p>
      <pre><code>LeakyReLU(z) = max(Œ±z, z), –≥–¥–µ Œ± ‚âà 0.01</code></pre>
      <ul>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã "–º–µ—Ä—Ç–≤—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤"</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –Ω–µ–±–æ–ª—å—à–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>5. Swish:</strong></p>
      <pre><code>Swish(z) = z √ó œÉ(z) = z / (1 + e^(-z))</code></pre>
      <ul>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–ª—É–±–æ–∫–∏–µ —Å–µ—Ç–∏</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –≥–ª–∞–¥–∫–æ—Å—Ç—å, —Å–∞–º–æ–≥–µ–π—Ç–∏–Ω–≥</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π</h3>
      
      <h4>–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –ø–µ—Ä—Å–µ–ø—Ç—Ä–æ–Ω (MLP)</h4>
      <p>–ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤:</p>
      
      <p><strong>–í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π:</strong></p>
      <ul>
        <li>–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–π—Ä–æ–Ω–æ–≤ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li>–ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ</li>
      </ul>
      
      <p><strong>–°–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–∏:</strong></p>
      <ul>
        <li>–í—ã–ø–æ–ª–Ω—è—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è</li>
        <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–º–µ—Ä –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏</li>
        <li>–ö–∞–∂–¥—ã–π –Ω–µ–π—Ä–æ–Ω —Å–≤—è–∑–∞–Ω —Å–æ –≤—Å–µ–º–∏ –Ω–µ–π—Ä–æ–Ω–∞–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ—è</li>
      </ul>
      
      <p><strong>–í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π:</strong></p>
      <ul>
        <li>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</li>
        <li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–π—Ä–æ–Ω–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–¥–∞—á–∏:
          <ul>
            <li>1 –Ω–µ–π—Ä–æ–Ω –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
            <li>K –Ω–µ–π—Ä–æ–Ω–æ–≤ –¥–ª—è K-–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
          </ul>
        </li>
      </ul>
      
      <h4>–ü—Ä—è–º–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ (Forward Propagation)</h4>
      <p>–ü—Ä–æ—Ü–µ—Å—Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ —Å–µ—Ç–∏:</p>
      
      <p><strong>–î–ª—è —Å–ª–æ—è l:</strong></p>
      <pre><code>
z^[l] = W^[l] √ó a^[l-1] + b^[l]
a^[l] = f^[l](z^[l])
      </code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>W^[l]</strong> - –º–∞—Ç—Ä–∏—Ü–∞ –≤–µ—Å–æ–≤ —Å–ª–æ—è l</li>
        <li><strong>a^[l-1]</strong> - –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ—è</li>
        <li><strong>b^[l]</strong> - –≤–µ–∫—Ç–æ—Ä —Å–º–µ—â–µ–Ω–∏–π —Å–ª–æ—è l</li>
        <li><strong>f^[l]</strong> - —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ª–æ—è l</li>
      </ul>
      
      <h3>–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π</h3>
      
      <h4>–§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å</h4>
      
      <p><strong>–î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ - Mean Squared Error (MSE):</strong></p>
      <pre><code>MSE = (1/m) √ó Œ£(y·µ¢ - ≈∑·µ¢)¬≤</code></pre>
      
      <p><strong>–î–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ - Binary Cross-Entropy:</strong></p>
      <pre><code>BCE = -(1/m) √ó Œ£[y·µ¢log(≈∑·µ¢) + (1-y·µ¢)log(1-≈∑·µ¢)]</code></pre>
      
      <p><strong>–î–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ - Categorical Cross-Entropy:</strong></p>
      <pre><code>CCE = -(1/m) √ó Œ£ Œ£ y·µ¢‚±ºlog(≈∑·µ¢‚±º)</code></pre>
      
      <h4>–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏</h4>
      <p>–ú–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å–µ—Ç–∏.</p>
      
      <p><strong>–≠—Ç–∞–ø—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞:</strong></p>
      
      <p><strong>1. –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥:</strong></p>
      <ul>
        <li>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —Å–µ—Ç–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–†–∞—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å</li>
      </ul>
      
      <p><strong>2. –û–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥:</strong></p>
      <ul>
        <li>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º</li>
        <li>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è –∫ –≤—Ö–æ–¥–Ω–æ–º—É</li>
      </ul>
      
      <p><strong>3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</strong></p>
      <ul>
        <li>–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –∏ —Å–º–µ—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤</li>
        <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è:</strong></p>
      
      <p><strong>–î–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è L:</strong></p>
      <pre><code>
Œ¥^[L] = ‚àÇL/‚àÇz^[L] = (a^[L] - y) ‚äô f'(z^[L])
dW^[L] = (1/m) √ó Œ¥^[L] √ó (a^[L-1])^T
db^[L] = (1/m) √ó Œ£Œ¥^[L]
      </code></pre>
      
      <p><strong>–î–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è l:</strong></p>
      <pre><code>
Œ¥^[l] = (W^[l+1])^T √ó Œ¥^[l+1] ‚äô f'(z^[l])
dW^[l] = (1/m) √ó Œ¥^[l] √ó (a^[l-1])^T
db^[l] = (1/m) √ó Œ£Œ¥^[l]
      </code></pre>
      
      <p>–≥–¥–µ ‚äô –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.</p>
      
      <h4>–ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h4>
      
      <p><strong>1. –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (Gradient Descent):</strong></p>
      <pre><code>
W := W - Œ± √ó dW
b := b - Œ± √ó db
      </code></pre>
      <ul>
        <li><strong>Œ±</strong> - —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (learning rate)</li>
        <li><strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> –º–µ–¥–ª–µ–Ω–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å, –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–∞—Ö</li>
      </ul>
      
      <p><strong>2. –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (SGD):</strong></p>
      <ul>
        <li>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ—Ä–µ</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –±—ã—Å—Ç—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏–∑–±–µ–∂–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤</li>
        <li><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> –≤—ã—Å–æ–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>3. Mini-batch Gradient Descent:</strong></p>
      <ul>
        <li>–ö–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É GD –∏ SGD</li>
        <li>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–∞—Ö (32-512 –ø—Ä–∏–º–µ—Ä–æ–≤)</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å + —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</li>
      </ul>
      
      <p><strong>4. Adam (Adaptive Moment Estimation):</strong></p>
      <pre><code>
m_t = Œ≤‚ÇÅ √ó m_{t-1} + (1-Œ≤‚ÇÅ) √ó dW
v_t = Œ≤‚ÇÇ √ó v_{t-1} + (1-Œ≤‚ÇÇ) √ó (dW)¬≤
mÃÇ_t = m_t / (1-Œ≤‚ÇÅ^t)
vÃÇ_t = v_t / (1-Œ≤‚ÇÇ^t)
W := W - Œ± √ó mÃÇ_t / (‚àövÃÇ_t + Œµ)
      </code></pre>
      <ul>
        <li><strong>Œ≤‚ÇÅ ‚âà 0.9</strong> - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞</li>
        <li><strong>Œ≤‚ÇÇ ‚âà 0.999</strong> - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞</li>
        <li><strong>Œµ ‚âà 10‚Åª‚Å∏</strong> - –º–∞–ª–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è, —Ö–æ—Ä–æ—à–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å</li>
      </ul>
      
      <h3>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π</h3>
      
      <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏</p>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ—Å—Ç—å, –≤—Ä–µ–º—è)</li>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> MLP —Å 3-4 —Å–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ—è–º–∏</li>
        <li><strong>–í—ã—Ö–æ–¥:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞</li>
        <li><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong> Categorical Cross-Entropy</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä –¥–ª—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–í—Ö–æ–¥—ã:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–∫–∏ (1500-1600¬∞C), —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≥–ª–µ—Ä–æ–¥–∞ (0.1-0.8%), –≤—Ä–µ–º—è –≤—ã–¥–µ—Ä–∂–∫–∏ (30-120 –º–∏–Ω)</li>
        <li><strong>–ö–ª–∞—Å—Å—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> —Ç—Ä–µ—â–∏–Ω—ã, –≤–∫–ª—é—á–µ–Ω–∏—è, –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å, –Ω–æ—Ä–º–∞</li>
        <li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ 94%, —Å–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –Ω–∞ 2.5%</li>
      </ul>
      
      <h4>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</p>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> –≤–∏–±—Ä–∞—Ü–∏—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç–æ–∫–∏, –¥–∞–≤–ª–µ–Ω–∏—è, –Ω–∞—Ä–∞–±–æ—Ç–∫–∞</li>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> MLP —Å dropout –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–í—ã—Ö–æ–¥:</strong> –≤—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞ –∏–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ N –¥–Ω–µ–π</li>
        <li><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong> MSE –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏–ª–∏ BCE –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä –¥–ª—è —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤:</strong></p>
      <ul>
        <li><strong>–í—Ö–æ–¥—ã:</strong> –≤–∏–±—Ä–∞—Ü–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ (0-20 –º–º/—Å), —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±–º–æ—Ç–æ–∫ (40-120¬∞C), —Ç–æ–∫ —Å—Ç–∞—Ç–æ—Ä–∞ (100-500 –ê)</li>
        <li><strong>–ü—Ä–æ–≥–Ω–æ–∑:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π</li>
        <li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ 89%, —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤ –Ω–∞ 45%</li>
      </ul>
      
      <h4>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</p>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> MLP-—Ä–µ–≥—Ä–µ—Å—Å–æ—Ä –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</strong> –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–ª–∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã</li>
        <li><strong>–í—ã—Ö–æ–¥:</strong> –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ—Ä –¥–ª—è —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–í—Ö–æ–¥—ã:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–µ–∞–∫—Ü–∏–∏ (200-300¬∞C), –¥–∞–≤–ª–µ–Ω–∏–µ (5-15 –∞—Ç–º), –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (0.1-1%)</li>
        <li><strong>–¶–µ–ª—å:</strong> –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è –≤—ã—Ö–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</li>
        <li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ 8%, —ç–∫–æ–Ω–æ–º–∏—è —Å—ã—Ä—å—è 12%</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† 57700.37-2021 "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"</h4>
      <p>–°—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏:</p>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É –º–æ–¥–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–π, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –æ–±—É—á–µ–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è</li>
        <li><strong>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è:</strong> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</li>
        <li><strong>–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—á–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö</li>
        <li><strong>–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ:</strong> –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</li>
      </ul>
      
      <p><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:</strong></p>
      <ul>
        <li>–û–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</li>
        <li>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏</li>
        <li>–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <h4>–ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 25010-2015 "–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"</h4>
      <p>–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º:</p>
      
      <p><strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–æ—Ç–∞:</strong> –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</li>
        <li><strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:</strong> –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
        <li><strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞—á–∞–º</li>
      </ul>
      
      <p><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>–ó—Ä–µ–ª–æ—Å—Ç—å:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö</li>
        <li><strong>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</strong> –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏</li>
        <li><strong>–û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å:</strong> —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏ —Å–±–æ—è—Ö</li>
        <li><strong>–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ—Å—Ç—å:</strong> —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞</li>
        <li><strong>–†–µ—Å—É—Ä—Å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤</li>
        <li><strong>–ï–º–∫–æ—Å—Ç—å:</strong> –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
      </ul>
      
      <h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001</h4>
      
      <p><strong>–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è:</strong></p>
      <ul>
        <li>–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–µ</li>
        <li>–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—É—á–∞—é—â–∏–º –≤—ã–±–æ—Ä–∫–∞–º</li>
        <li>–ê—É–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–ó–∞—â–∏—Ç–∞ –º–æ–¥–µ–ª–µ–π:</strong></p>
      <ul>
        <li>–ó–∞—â–∏—Ç–∞ –æ—Ç adversarial –∞—Ç–∞–∫</li>
        <li>–ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏</li>
        <li>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è</li>
        <li>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π</h3>
      
      <h4>–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏</h4>
      
      <p><strong>–¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–∞—Ç—á–∏–∫–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞):</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> MLP (Multi-Layer Perceptron)</li>
        <li><strong>–°–ª–æ–∏:</strong> 2-5 —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤</li>
        <li><strong>–†–∞–∑–º–µ—Ä:</strong> 64-512 –Ω–µ–π—Ä–æ–Ω–æ–≤ –Ω–∞ —Å–ª–æ–π</li>
        <li><strong>–ê–∫—Ç–∏–≤–∞—Ü–∏—è:</strong> ReLU –≤ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—è—Ö</li>
        <li><strong>–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong> Dropout (0.2-0.5), Batch Normalization</li>
      </ul>
      
      <p><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è):</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> MLP —Å –æ–∫–Ω–æ–º –∏–ª–∏ RNN/LSTM</li>
        <li><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è</li>
        <li><strong>–ü—Ä–∏–∑–Ω–∞–∫–∏:</strong> —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–∫–Ω–∞</li>
        <li><strong>–í—ã—Ö–æ–¥:</strong> –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥</li>
      </ul>
      
      <p><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞):</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> CNN (Convolutional Neural Networks)</li>
        <li><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è</li>
        <li><strong>Transfer Learning:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Fine-tuning:</strong> –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h4>–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</h4>
      
      <p><strong>–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:</strong></p>
      <ul>
        <li><strong>GPU-–∫–ª–∞—Å—Ç–µ—Ä—ã:</strong> NVIDIA Tesla V100, A100 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è</li>
        <li><strong>–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:</strong> TensorFlow, PyTorch, JAX</li>
        <li><strong>–û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è:</strong> Kubernetes, Kubeflow</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> MLflow, Weights & Biases</li>
      </ul>
      
      <p><strong>–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:</strong></p>
      <ul>
        <li><strong>Inference —Å–µ—Ä–≤–µ—Ä—ã:</strong> TensorFlow Serving, TorchServe</li>
        <li><strong>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è:</strong> Docker, Kubernetes</li>
        <li><strong>API Gateway:</strong> NGINX, Kong</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> Prometheus, Grafana</li>
      </ul>
      
      <p><strong>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong> Elbrus, –ú–¶–°–¢</li>
        <li><strong>–ü–û:</strong> Astra Linux, –†–ï–î –û–°</li>
        <li><strong>–°–£–ë–î:</strong> PostgresPro, ClickHouse</li>
        <li><strong>–û–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong> Yandex Cloud, VK Cloud</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
      
      <h4>–ú–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>–ü—Ä—è–º—ã–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –∑–∞–º–µ–Ω–∞ —Ä—É—á–Ω–æ–≥–æ —Ç—Ä—É–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –û–¢–ö</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞:</strong> –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π:</strong> —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –≥–æ–¥–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–ö–æ—Å–≤–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∞–≤–∞—Ä–∏–π</li>
        <li><strong>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> —Ç–∏—Ä–∞–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</strong></p>
      <ul>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</strong> –∫–æ–º–∞–Ω–¥–∞ data scientists, ML engineers</li>
        <li><strong>–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> GPU-—Å–µ—Ä–≤–µ—Ä—ã, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–∏—Å—Ç–µ–º–∞–º</li>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:</strong> –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</li>
      </ul>
      
      <h4>–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞</h4>
      
      <p><strong>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong></p>
      <ul>
        <li>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: 100,000 –∏–∑–¥–µ–ª–∏–π –≤ –º–µ—Å—è—Ü</li>
        <li>–¢–µ–∫—É—â–∏–π –±—Ä–∞–∫: 3% (3,000 –∏–∑–¥–µ–ª–∏–π)</li>
        <li>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è: 8,000 —Ä—É–±</li>
        <li>–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –û–¢–ö: 15 —á–µ–ª–æ–≤–µ–∫ √ó 80,000 —Ä—É–± = 1,200,000 —Ä—É–±/–º–µ—Å</li>
      </ul>
      
      <p><strong>–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è:</strong></p>
      <ul>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –¥–æ 1% (—ç–∫–æ–Ω–æ–º–∏—è 2% √ó 100,000 √ó 8,000 = 16,000,000 —Ä—É–±/–º–µ—Å)</li>
        <li>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –û–¢–ö –Ω–∞ 80% (—ç–∫–æ–Ω–æ–º–∏—è 12 √ó 80,000 = 960,000 —Ä—É–±/–º–µ—Å)</li>
        <li>–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: 16,960,000 —Ä—É–±/–º–µ—Å = 203,520,000 —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <p><strong>–ó–∞—Ç—Ä–∞—Ç—ã:</strong></p>
      <ul>
        <li>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã: 25,000,000 —Ä—É–±</li>
        <li>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: 15,000,000 —Ä—É–±</li>
        <li>–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ: 5,000,000 —Ä—É–±</li>
        <li>–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: 45,000,000 —Ä—É–±</li>
        <li>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: 24,000,000 —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <p><strong>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</strong></p>
      <ul>
        <li>–ß–∏—Å—Ç–∞—è —ç–∫–æ–Ω–æ–º–∏—è: 203,520,000 - 24,000,000 = 179,520,000 —Ä—É–±/–≥–æ–¥</li>
        <li>ROI: (179,520,000 - 45,000,000) / 45,000,000 √ó 100% = 299%</li>
        <li>–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: 45,000,000 / (179,520,000/12) = 3.0 –º–µ—Å—è—Ü–∞</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π</h3>
      
      <h4>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–°–±–æ—Ä –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤, –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤</li>
        <li><strong>–ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤:</strong> –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:</strong> —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</li>
        <li><strong>–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:</strong> –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–†–∞–∑–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞:</strong> –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏</li>
        <li><strong>–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</strong> –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤</li>
        <li><strong>–í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞–∑–º–µ—Ç–∫–µ</li>
      </ul>
      
      <h4>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ</h4>
      
      <p><strong>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>Baseline –º–æ–¥–µ–ª–∏:</strong> –Ω–∞—á–∞–ª–æ —Å –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</li>
        <li><strong>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:</strong> –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫</li>
        <li><strong>–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å:</strong> —Ñ–∏–∫—Å–∞—Ü–∏—è random seed –∏ –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫</li>
      </ul>
      
      <p><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</strong> train/validation/test (60%/20%/20%)</li>
        <li><strong>–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
        <li><strong>–î–æ–º–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö</li>
      </ul>
      
      <h4>–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h4>
      
      <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Canary deployment:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏</li>
        <li><strong>A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏</li>
        <li><strong>Blue-green deployment:</strong> –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π</li>
        <li><strong>Rollback –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:</strong> –æ—Ç–∫–∞—Ç –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö</li>
      </ul>
      
      <p><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> latency, throughput, resource usage</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:</strong> accuracy, precision, recall</li>
        <li><strong>Data drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Concept drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      
      <p>–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –∏ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.</p>
      
      <p>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</p>
      <ul>
        <li><strong>–ù–∞—á–∏–Ω–∞—Ç—å —Å –ø—Ä–æ—Å—Ç–æ–≥–æ:</strong> MVP –ø–æ–¥—Ö–æ–¥ —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ–º</li>
        <li><strong>–§–æ–∫—É—Å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∂–Ω–µ–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏</li>
        <li><strong>–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</strong> –±—ã—Å—Ç—Ä—ã–µ —Ü–∏–∫–ª—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</strong> –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</strong> —á–µ—Ç–∫–∏–π —Ä–∞—Å—á–µ—Ç ROI –∏ —Ä–∏—Å–∫–æ–≤</li>
      </ul>
      
      <p>–í —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö –º—ã –∏–∑—É—á–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–¥–∞—á: —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤, –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.</p>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–±—Ä–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞ –∫–∞–∫ "–Ω–æ—Ä–º–∞", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" –∏–ª–∏ "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ".</p>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong> –Ω–µ –º–µ–Ω–µ–µ 92%</li>
        <li><strong>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</strong> –º–µ–Ω–µ–µ 100 –º—Å</li>
        <li><strong>–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:</strong> –º–µ–Ω–µ–µ 5%</li>
        <li><strong>–ü—Ä–æ–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π:</strong> –º–µ–Ω–µ–µ 1%</li>
      </ul>
      
      <h4>–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
      <ul>
        <li>–í–∏–±—Ä–∞—Ü–∏—è –ø–æ –æ—Å—è–º X, Y, Z (–º–º/—Å)</li>
        <li>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞ (¬∞C)</li>
        <li>–¢–æ–∫ —Å—Ç–∞—Ç–æ—Ä–∞ (–ê)</li>
        <li>–ß–∞—Å—Ç–æ—Ç–∞ –≤—Ä–∞—â–µ–Ω–∏—è (–æ–±/–º–∏–Ω)</li>
        <li>–ù–∞—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û (—á–∞—Å—ã)</li>
      </ul>
      
      <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
      <ol>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤</li>
        <li>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏</li>
        <li>–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</li>
        <li>–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("–°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–û–î–®–ò–ü–ù–ò–ö–û–í –¢–£–†–ë–û–ì–ï–ù–ï–†–ê–¢–û–†–ê")
print("–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é")
print("="*80)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
n_samples = 10000
n_bearings = 4  # 4 –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞ –≤ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
data = []

for i in range(n_samples):
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã
    rpm = np.random.normal(3000, 50)  # –ß–∞—Å—Ç–æ—Ç–∞ –≤—Ä–∞—â–µ–Ω–∏—è, –æ–±/–º–∏–Ω
    load_factor = np.random.uniform(0.3, 1.0)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
    operating_hours = np.random.uniform(0, 8760)  # –ù–∞—Ä–∞–±–æ—Ç–∫–∞, —á–∞—Å—ã
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Ä–∞–±–æ—Ç–∫–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    wear_factor = operating_hours / 8760 + load_factor * 0.3
    
    if wear_factor < 0.6:
        condition = 'normal'
        condition_factor = 1.0
    elif wear_factor < 0.8:
        condition = 'warning'
        condition_factor = 1.5
    else:
        condition = 'critical'
        condition_factor = 2.5
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
    if np.random.random() < 0.1:  # 10% —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        condition_factor *= np.random.uniform(1.5, 3.0)
        if condition == 'normal':
            condition = np.random.choice(['warning', 'critical'], p=[0.7, 0.3])
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    # –í–∏–±—Ä–∞—Ü–∏—è (–±–∞–∑–æ–≤–∞—è + –≤–ª–∏—è–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è + —à—É–º)
    base_vibration = 2.0 + load_factor * 1.5
    vibration_x = base_vibration * condition_factor + np.random.normal(0, 0.3)
    vibration_y = base_vibration * condition_factor * 0.8 + np.random.normal(0, 0.25)
    vibration_z = base_vibration * condition_factor * 0.6 + np.random.normal(0, 0.2)
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞
    base_temp = 45 + load_factor * 15 + (rpm - 3000) * 0.01
    temperature = base_temp + (condition_factor - 1) * 20 + np.random.normal(0, 2)
    
    # –¢–æ–∫ —Å—Ç–∞—Ç–æ—Ä–∞
    base_current = 200 + load_factor * 150
    current = base_current + (condition_factor - 1) * 30 + np.random.normal(0, 5)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    bearing_id = np.random.randint(1, n_bearings + 1)
    
    # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    freq_1x = vibration_x * np.random.uniform(0.8, 1.2)  # 1x —á–∞—Å—Ç–æ—Ç–∞
    freq_2x = vibration_x * 0.3 * np.random.uniform(0.5, 1.5)  # 2x —á–∞—Å—Ç–æ—Ç–∞
    high_freq = vibration_x * 0.1 * condition_factor * np.random.uniform(0.5, 2.0)  # –í—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    vibration_rms = np.sqrt(vibration_x**2 + vibration_y**2 + vibration_z**2)
    vibration_peak = max(vibration_x, vibration_y, vibration_z) * np.random.uniform(1.2, 1.8)
    vibration_crest = vibration_peak / vibration_rms if vibration_rms > 0 else 1
    
    data.append({
        'bearing_id': bearing_id,
        'rpm': rpm,
        'load_factor': load_factor,
        'operating_hours': operating_hours,
        'vibration_x': vibration_x,
        'vibration_y': vibration_y,
        'vibration_z': vibration_z,
        'vibration_rms': vibration_rms,
        'vibration_peak': vibration_peak,
        'vibration_crest': vibration_crest,
        'freq_1x': freq_1x,
        'freq_2x': freq_2x,
        'high_freq': high_freq,
        'temperature': temperature,
        'current': current,
        'condition': condition
    })

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
df = pd.DataFrame(data)

print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
print(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:")
condition_counts = df['condition'].value_counts()
for condition, count in condition_counts.items():
    percentage = count / len(df) * 100
    print(f"  {condition}: {count} ({percentage:.1f}%)")

# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
print("="*60)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
print("\\n–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
feature_cols = ['vibration_x', 'vibration_y', 'vibration_z', 'vibration_rms', 
                'temperature', 'current', 'operating_hours']

stats = df[feature_cols].describe()
print(stats.round(2))

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
print("\\n–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:")
# –ö–æ–¥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
le_temp = LabelEncoder()
df['condition_encoded'] = le_temp.fit_transform(df['condition'])

correlations = df[feature_cols + ['condition_encoded']].corr()['condition_encoded'].sort_values(ascending=False)
print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞:")
for feature, corr in correlations.items():
    if feature != 'condition_encoded':
        print(f"  {feature}: {corr:.3f}")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
print("\\n" + "="*60)
print("–ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø")
print("="*60)

# –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_columns = [
    'rpm', 'load_factor', 'operating_hours',
    'vibration_x', 'vibration_y', 'vibration_z', 'vibration_rms',
    'vibration_peak', 'vibration_crest',
    'freq_1x', 'freq_2x', 'high_freq',
    'temperature', 'current'
]

X = df[feature_columns]
y = df['condition']

print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_columns)}")
print(f"–ü—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(feature_columns)}")

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
le = LabelEncoder()
y_encoded = le.fit_transform(y)
n_classes = len(le.classes_)

print(f"\\n–ö–ª–∞—Å—Å—ã: {le.classes_}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {n_classes}")

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
)

print(f"\\n–†–∞–∑–º–µ—Ä—ã –≤—ã–±–æ—Ä–æ–∫:")
print(f"  –û–±—É—á–∞—é—â–∞—è: {X_train.shape[0]} –ø—Ä–∏–º–µ—Ä–æ–≤")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è: {X_test.shape[0]} –ø—Ä–∏–º–µ—Ä–æ–≤")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print("\\n–î–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é StandardScaler")

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
print("\\n" + "="*60)
print("–°–û–ó–î–ê–ù–ò–ï –ù–ï–ô–†–û–ù–ù–û–ô –°–ï–¢–ò")
print("="*60)

# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏
input_dim = X_train_scaled.shape[1]
hidden_units = [128, 64, 32]
dropout_rate = 0.3

print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏:")
print(f"  –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: {input_dim} –Ω–µ–π—Ä–æ–Ω–æ–≤")
for i, units in enumerate(hidden_units):
    print(f"  –°–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π {i+1}: {units} –Ω–µ–π—Ä–æ–Ω–æ–≤ (ReLU + Dropout {dropout_rate})")
print(f"  –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π: {n_classes} –Ω–µ–π—Ä–æ–Ω–æ–≤ (Softmax)")

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = keras.Sequential([
    layers.Input(shape=(input_dim,)),
    
    # –ü–µ—Ä–≤—ã–π —Å–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π
    layers.Dense(hidden_units[0], activation='relu'),
    layers.BatchNormalization(),
    layers.Dropout(dropout_rate),
    
    # –í—Ç–æ—Ä–æ–π —Å–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π
    layers.Dense(hidden_units[1], activation='relu'),
    layers.BatchNormalization(),
    layers.Dropout(dropout_rate),
    
    # –¢—Ä–µ—Ç–∏–π —Å–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π
    layers.Dense(hidden_units[2], activation='relu'),
    layers.BatchNormalization(),
    layers.Dropout(dropout_rate),
    
    # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
    layers.Dense(n_classes, activation='softmax')
])

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏
model.compile(
    optimizer=keras.optimizers.Adam(learning_rate=0.001),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# –í—ã–≤–æ–¥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
print("\\n–î–µ—Ç–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
model.summary()

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–û–ë–£–ß–ï–ù–ò–ï –ù–ï–ô–†–û–ù–ù–û–ô –°–ï–¢–ò")
print("="*60)

# Callbacks –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
callbacks = [
    keras.callbacks.EarlyStopping(
        monitor='val_loss',
        patience=10,
        restore_best_weights=True
    ),
    keras.callbacks.ReduceLROnPlateau(
        monitor='val_loss',
        factor=0.5,
        patience=5,
        min_lr=1e-6
    )
]

# –û–±—É—á–µ–Ω–∏–µ
print("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è...")
history = model.fit(
    X_train_scaled, y_train,
    validation_split=0.2,
    epochs=100,
    batch_size=32,
    callbacks=callbacks,
    verbose=1
)

print("\\n–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–û–¶–ï–ù–ö–ê –ú–û–î–ï–õ–ò")
print("="*60)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
y_pred_proba = model.predict(X_test_scaled)
y_pred = np.argmax(y_pred_proba, axis=1)

# –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
test_accuracy = (y_pred == y_test).mean()
print(f"–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {test_accuracy:.4f}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
print("\\n–û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test, y_pred, target_names=le.classes_, digits=4))

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
print("\\n–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
cm = confusion_matrix(y_test, y_pred)
print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:")
print("        ", " ".join([f"{cls:>8}" for cls in le.classes_]))
for i, true_class in enumerate(le.classes_):
    print(f"{true_class:>8}", " ".join([f"{cm[i,j]:>8}" for j in range(len(le.classes_))]))

# –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
print("\\n–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
for i, class_name in enumerate(le.classes_):
    true_positives = cm[i, i]
    false_positives = cm[:, i].sum() - true_positives
    false_negatives = cm[i, :].sum() - true_positives
    
    precision = true_positives / (true_positives + false_positives) if (true_positives + false_positives) > 0 else 0
    recall = true_positives / (true_positives + false_negatives) if (true_positives + false_negatives) > 0 else 0
    
    print(f"  {class_name}:")
    print(f"    Precision: {precision:.4f}")
    print(f"    Recall: {recall:.4f}")
    print(f"    –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_positives}")
    print(f"    –ü—Ä–æ–ø—É—Å–∫–∏: {false_negatives}")

# ROC-AUC –¥–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
print("\\nROC-AUC –ø–æ –∫–ª–∞—Å—Å–∞–º:")
for i, class_name in enumerate(le.classes_):
    # –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ç–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å vs –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    y_binary = (y_test == i).astype(int)
    y_proba_binary = y_pred_proba[:, i]
    
    auc = roc_auc_score(y_binary, y_proba_binary)
    print(f"  {class_name}: {auc:.4f}")

# –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π)
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –í–ê–ñ–ù–û–°–¢–ò –ü–†–ò–ó–ù–ê–ö–û–í")
print("="*60)

# –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–º—É—Ç–∞—Ü–∏—é
print("–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–º–µ—Ç–æ–¥ –ø–µ—Ä–º—É—Ç–∞—Ü–∏–∏)...")

baseline_accuracy = test_accuracy
feature_importance = {}

for i, feature in enumerate(feature_columns):
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    X_test_permuted = X_test_scaled.copy()
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–∞
    X_test_permuted[:, i] = np.random.permutation(X_test_permuted[:, i])
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º
    y_pred_permuted = np.argmax(model.predict(X_test_permuted), axis=1)
    permuted_accuracy = (y_pred_permuted == y_test).mean()
    
    # –í–∞–∂–Ω–æ—Å—Ç—å = —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
    importance = baseline_accuracy - permuted_accuracy
    feature_importance[feature] = importance

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
sorted_features = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)

print("\\n–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏):")
for feature, importance in sorted_features:
    print(f"  {feature}: {importance:.4f}")

# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print("\\n" + "="*60)
print("–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
print("="*60)

print("\\n1. –ö–ê–ß–ï–°–¢–í–û –ú–û–î–ï–õ–ò:")
if test_accuracy >= 0.92:
    print("   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ (‚â•92%)")
else:
    print("   ‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏")
    print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
    print("   - –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)")
    print("   - –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (CNN –¥–ª—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º)")

# –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
critical_errors = 0
for i in range(len(y_test)):
    if le.classes_[y_test[i]] == 'critical' and le.classes_[y_pred[i]] != 'critical':
        critical_errors += 1

critical_recall = 1 - (critical_errors / np.sum(y_test == le.transform(['critical'])[0]))

print(f"\\n2. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:")
print(f"   –ü—Ä–æ–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {critical_errors} –∏–∑ {np.sum(y_test == le.transform(['critical'])[0])}")
print(f"   Recall –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {critical_recall:.4f}")

if critical_recall >= 0.99:
    print("   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
else:
    print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   - –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å –∫–ª–∞—Å—Å–∞ 'critical' –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å")
    print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤")
    print("   - –°–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è –∫–ª–∞—Å—Å–∞ 'critical'")

print(f"\\n3. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
print(f"   –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {model.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"   –í—Ä–µ–º—è inference: ~1-5 –º—Å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∂–µ–ª–µ–∑–∞)")
print("   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è real-time –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")

print(f"\\n4. –í–ù–ï–î–†–ï–ù–ò–ï:")
print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
print("   - Edge computing: —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö")
print("   - –ß–∞—Å—Ç–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –∫–∞–∂–¥—ã–µ 10-60 —Å–µ–∫—É–Ω–¥")
print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA —á–µ—Ä–µ–∑ OPC UA –∏–ª–∏ Modbus")
print("   - –ê–ª–µ—Ä—Ç—ã –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π")

print(f"\\n5. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –≠–§–§–ï–ö–¢:")

# –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞
turbines_count = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
downtime_cost_per_hour = 2_000_000  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ—è, —Ä—É–±/—á–∞—Å
average_downtime_without_system = 24  # –ß–∞—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ—è –ø—Ä–∏ –∞–≤–∞—Ä–∏–∏
average_downtime_with_system = 4  # –ß–∞—Å–æ–≤ –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
failure_probability_per_year = 0.1  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –≤ –≥–æ–¥

savings_per_turbine = (
    failure_probability_per_year * 
    (average_downtime_without_system - average_downtime_with_system) * 
    downtime_cost_per_hour
)
total_savings = savings_per_turbine * turbines_count

development_cost = 8_000_000  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
deployment_cost = 2_000_000   # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
annual_maintenance = 1_000_000  # –ì–æ–¥–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

roi = (total_savings - annual_maintenance - development_cost - deployment_cost) / (development_cost + deployment_cost) * 100
payback_months = (development_cost + deployment_cost) / ((total_savings - annual_maintenance) / 12)

print(f"   –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–µ–≤: {total_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"   –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ: {development_cost + deployment_cost:,.0f} —Ä—É–±")
print(f"   –ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {annual_maintenance:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"   ROI: {roi:.0f}%")
print(f"   –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

print("\\n" + "="*80)
print("–°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–û–î–®–ò–ü–ù–ò–ö–û–í –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {test_accuracy:.1%}")
print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {total_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print("="*80)`
  },

  14: {
    title: "–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    duration: "170 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ Computer Vision —Å–∏—Å—Ç–µ–º–∞—Ö</h3>
      <p>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—à–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏:</p>
      <ul>
        <li><strong>–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CNN:</strong> –ø–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:</strong> –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä, –æ—Å–≤–µ—â–µ–Ω–∏—è, –∫–æ–Ω–≤–µ–π–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</li>
        <li><strong>Real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤—ã —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π</h3>
      
      <h4>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è Computer Vision</h4>
      <p>–û–±—ã—á–Ω—ã–µ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –ø–ª–æ—Ö–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:</p>
      
      <p><strong>–ü—Ä–æ–±–ª–µ–º—ã –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–µ—Ç–µ–π:</strong></p>
      <ul>
        <li><strong>–û–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</strong> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 224√ó224√ó3 —Ç—Ä–µ–±—É–µ—Ç 150,528 –≤–µ—Å–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—è</li>
        <li><strong>–ü–æ—Ç–µ—Ä—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:</strong> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–ª–æ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä</li>
        <li><strong>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–æ–Ω–Ω–æ–π –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç–∏:</strong> –æ–±—ä–µ–∫—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É</li>
        <li><strong>–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ:</strong> —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —Å–µ—Ç–µ–π:</strong></p>
      <ul>
        <li><strong>–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å:</strong> –∫–∞–∂–¥—ã–π –Ω–µ–π—Ä–æ–Ω —Å–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Å –Ω–µ–±–æ–ª—å—à–æ–π –æ–±–ª–∞—Å—Ç—å—é –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ—è</li>
        <li><strong>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤:</strong> –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é</li>
        <li><strong>–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç—å:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏—è</li>
        <li><strong>–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:</strong> –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –≥—Ä–∞–Ω–∏—Ü –∫ —Å–ª–æ–∂–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º</li>
      </ul>
      
      <h4>–û–ø–µ—Ä–∞—Ü–∏—è —Å–≤–µ—Ä—Ç–∫–∏ (Convolution)</h4>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong></p>
      <p>–î–ª—è –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è I –∏ —Ñ–∏–ª—å—Ç—Ä–∞ K —Å–≤–µ—Ä—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:</p>
      <pre><code>(I * K)(i,j) = Œ£Œ£ I(m,n) √ó K(i-m, j-n)</code></pre>
      
      <p>–í –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—Ä–æ—Å—Å-–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è:</p>
      <pre><code>(I ‚äó K)(i,j) = Œ£Œ£ I(i+m, j+n) √ó K(m,n)</code></pre>
      
      <p><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–µ—Ä—Ç–∫–∏:</strong></p>
      
      <p><strong>1. –†–∞–∑–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ (Kernel Size):</strong></p>
      <ul>
        <li><strong>3√ó3:</strong> –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π, —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>5√ó5, 7√ó7:</strong> –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –±–æ–ª—å—à–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</li>
        <li><strong>1√ó1:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤</li>
      </ul>
      
      <p><strong>2. –®–∞–≥ (Stride):</strong></p>
      <ul>
        <li><strong>Stride = 1:</strong> —Ñ–∏–ª—å—Ç—Ä —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ 1 –ø–∏–∫—Å–µ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä</li>
        <li><strong>Stride = 2:</strong> —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ 2 —Ä–∞–∑–∞, —ç–∫–æ–Ω–æ–º–∏—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è</li>
        <li><strong>Stride > 2:</strong> —Å–∏–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞, –ø–æ—Ç–µ—Ä—è –¥–µ—Ç–∞–ª–µ–π</li>
      </ul>
      
      <p><strong>3. –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (Padding):</strong></p>
      <ul>
        <li><strong>Valid padding:</strong> –±–µ–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–∞–∑–º–µ—Ä —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è</li>
        <li><strong>Same padding:</strong> –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–ª—è–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞</li>
        <li><strong>Causal padding:</strong> –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π</li>
      </ul>
      
      <p><strong>–†–∞—Å—á–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞:</strong></p>
      <pre><code>
Output_size = (Input_size + 2√óPadding - Kernel_size) / Stride + 1
      </code></pre>
      
      <h4>–û–ø–µ—Ä–∞—Ü–∏—è –ø—É–ª–∏–Ω–≥–∞ (Pooling)</h4>
      
      <p>–ü—É–ª–∏–Ω–≥ —É–º–µ–Ω—å—à–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</p>
      
      <p><strong>Max Pooling:</strong></p>
      <ul>
        <li>–í—ã–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–∫–Ω–µ</li>
        <li>–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏</li>
        <li>–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–æ–Ω–Ω—É—é –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç—å</li>
        <li>–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∏–ø –ø—É–ª–∏–Ω–≥–∞</li>
      </ul>
      
      <p><strong>Average Pooling:</strong></p>
      <ul>
        <li>–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–∫–Ω–µ</li>
        <li>–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</li>
        <li>–ú–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–µ–Ω, —á–µ–º max pooling</li>
        <li>–ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ—è—Ö</li>
      </ul>
      
      <p><strong>Global Average Pooling:</strong></p>
      <ul>
        <li>–£—Å—Ä–µ–¥–Ω—è–µ—Ç –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è</li>
        <li>–ó–∞–º–µ–Ω—è–µ—Ç –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏</li>
        <li>–£–º–µ–Ω—å—à–∞–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ</li>
        <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞—Ö</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —Å–µ—Ç–µ–π</h3>
      
      <h4>LeNet-5 (1998)</h4>
      <p>–ü–µ—Ä–≤–∞—è —É—Å–ø–µ—à–Ω–∞—è CNN –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä:</p>
      
      <p><strong>–°—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li><strong>–í—Ö–æ–¥:</strong> 32√ó32 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä–∞–¥–∞—Ü–∏—è—Ö —Å–µ—Ä–æ–≥–æ</li>
        <li><strong>C1:</strong> 6 —Ñ–∏–ª—å—Ç—Ä–æ–≤ 5√ó5, –∞–∫—Ç–∏–≤–∞—Ü–∏—è tanh</li>
        <li><strong>S2:</strong> Average pooling 2√ó2</li>
        <li><strong>C3:</strong> 16 —Ñ–∏–ª—å—Ç—Ä–æ–≤ 5√ó5, –∞–∫—Ç–∏–≤–∞—Ü–∏—è tanh</li>
        <li><strong>S4:</strong> Average pooling 2√ó2</li>
        <li><strong>C5:</strong> 120 —Ñ–∏–ª—å—Ç—Ä–æ–≤ 5√ó5 (–ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–π)</li>
        <li><strong>F6:</strong> 84 –Ω–µ–π—Ä–æ–Ω–∞, –∞–∫—Ç–∏–≤–∞—Ü–∏—è tanh</li>
        <li><strong>–í—ã—Ö–æ–¥:</strong> 10 –∫–ª–∞—Å—Å–æ–≤ (—Ü–∏—Ñ—Ä—ã 0-9)</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –¥–µ—Ç–∞–ª—è—Ö</li>
        <li>–ß—Ç–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤</li>
        <li>–ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
      </ul>
      
      <h4>AlexNet (2012)</h4>
      <p>–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –≤—ã–∏–≥—Ä–∞–≤—à–∞—è ImageNet 2012:</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>ReLU –∞–∫—Ç–∏–≤–∞—Ü–∏—è:</strong> –≤–º–µ—Å—Ç–æ tanh/sigmoid</li>
        <li><strong>Dropout:</strong> —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Data augmentation:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞</li>
        <li><strong>GPU –æ–±—É—á–µ–Ω–∏–µ:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li><strong>–í—Ö–æ–¥:</strong> 224√ó224√ó3 RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
        <li><strong>Conv1:</strong> 96 —Ñ–∏–ª—å—Ç—Ä–æ–≤ 11√ó11, stride=4, ReLU</li>
        <li><strong>Pool1:</strong> Max pooling 3√ó3, stride=2</li>
        <li><strong>Conv2:</strong> 256 —Ñ–∏–ª—å—Ç—Ä–æ–≤ 5√ó5, ReLU</li>
        <li><strong>Pool2:</strong> Max pooling 3√ó3, stride=2</li>
        <li><strong>Conv3:</strong> 384 —Ñ–∏–ª—å—Ç—Ä–∞ 3√ó3, ReLU</li>
        <li><strong>Conv4:</strong> 384 —Ñ–∏–ª—å—Ç—Ä–∞ 3√ó3, ReLU</li>
        <li><strong>Conv5:</strong> 256 —Ñ–∏–ª—å—Ç—Ä–æ–≤ 3√ó3, ReLU</li>
        <li><strong>Pool3:</strong> Max pooling 3√ó3, stride=2</li>
        <li><strong>FC1:</strong> 4096 –Ω–µ–π—Ä–æ–Ω–æ–≤, ReLU, Dropout</li>
        <li><strong>FC2:</strong> 4096 –Ω–µ–π—Ä–æ–Ω–æ–≤, ReLU, Dropout</li>
        <li><strong>FC3:</strong> 1000 –∫–ª–∞—Å—Å–æ–≤ (ImageNet)</li>
      </ul>
      
      <h4>VGG (2014)</h4>
      <p>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø–æ–∫–∞–∑–∞–≤—à–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –≥–ª—É–±–∏–Ω—ã —Å–µ—Ç–∏:</p>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø—ã VGG:</strong></p>
      <ul>
        <li><strong>–ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</strong> —Ç–æ–ª—å–∫–æ 3√ó3 —Å–≤–µ—Ä—Ç–∫–∏</li>
        <li><strong>–ì–ª—É–±–∏–Ω–∞:</strong> 16-19 —Å–ª–æ–µ–≤</li>
        <li><strong>–ü—Ä–æ—Å—Ç–æ—Ç–∞:</strong> –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</li>
        <li><strong>–£–¥–≤–æ–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤:</strong> –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–ª–∏–Ω–≥–∞</li>
      </ul>
      
      <p><strong>VGG-16 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li><strong>Block 1:</strong> 2√óConv(64, 3√ó3) + MaxPool</li>
        <li><strong>Block 2:</strong> 2√óConv(128, 3√ó3) + MaxPool</li>
        <li><strong>Block 3:</strong> 3√óConv(256, 3√ó3) + MaxPool</li>
        <li><strong>Block 4:</strong> 3√óConv(512, 3√ó3) + MaxPool</li>
        <li><strong>Block 5:</strong> 3√óConv(512, 3√ó3) + MaxPool</li>
        <li><strong>Classifier:</strong> FC(4096) + FC(4096) + FC(1000)</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ 3√ó3 —Ñ–∏–ª—å—Ç—Ä–æ–≤:</strong></p>
      <ul>
        <li>–î–≤–∞ 3√ó3 —Ñ–∏–ª—å—Ç—Ä–∞ = –æ–¥–Ω–æ–º—É 5√ó5 –ø–æ —Ä–µ—Ü–µ–ø—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—é</li>
        <li>–¢—Ä–∏ 3√ó3 —Ñ–∏–ª—å—Ç—Ä–∞ = –æ–¥–Ω–æ–º—É 7√ó7 –ø–æ —Ä–µ—Ü–µ–ø—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—é</li>
        <li>–ú–µ–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 3√ó(3¬≤√óC¬≤) < 7¬≤√óC¬≤ –¥–ª—è C –∫–∞–Ω–∞–ª–æ–≤</li>
        <li>–ë–æ–ª—å—à–µ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç–µ–π (ReLU –º–µ–∂–¥—É —Å–ª–æ—è–º–∏)</li>
      </ul>
      
      <h4>ResNet (2015)</h4>
      <p>–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç—è—Ö:</p>
      
      <p><strong>–ü—Ä–æ–±–ª–µ–º–∞ –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç–µ–π:</strong></p>
      <ul>
        <li>–ó–∞—Ç—É—Ö–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏</li>
        <li>–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã</li>
        <li>–°–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç–µ–π</li>
      </ul>
      
      <p><strong>Residual –±–ª–æ–∫–∏:</strong></p>
      <p>–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ skip connections:</p>
      <pre><code>
y = F(x) + x
      </code></pre>
      <p>–≥–¥–µ F(x) - –≤—ã—Ö–æ–¥ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —Å–ª–æ–µ–≤, x - –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä.</p>
      
      <p><strong>–¢–∏–ø—ã residual –±–ª–æ–∫–æ–≤:</strong></p>
      
      <p><strong>Basic Block (ResNet-18, ResNet-34):</strong></p>
      <ul>
        <li>Conv 3√ó3 + BN + ReLU</li>
        <li>Conv 3√ó3 + BN</li>
        <li>Skip connection + ReLU</li>
      </ul>
      
      <p><strong>Bottleneck Block (ResNet-50, ResNet-101, ResNet-152):</strong></p>
      <ul>
        <li>Conv 1√ó1 + BN + ReLU (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤)</li>
        <li>Conv 3√ó3 + BN + ReLU</li>
        <li>Conv 1√ó1 + BN (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤)</li>
        <li>Skip connection + ReLU</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ ResNet:</strong></p>
      <ul>
        <li>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç–µ–π (–¥–æ 1000+ —Å–ª–æ–µ–≤)</li>
        <li>–õ—É—á—à–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è</li>
        <li>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö</li>
        <li>–•–æ—Ä–æ—à–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è transfer learning</li>
      </ul>
      
      <h3>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</h3>
      
      <h4>EfficientNet (2019)</h4>
      <p>–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é CNN:</p>
      
      <p><strong>Compound Scaling:</strong></p>
      <ul>
        <li><strong>–ì–ª—É–±–∏–Ω–∞ (depth):</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤</li>
        <li><strong>–®–∏—Ä–∏–Ω–∞ (width):</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤</li>
        <li><strong>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ (resolution):</strong> —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>–§–æ—Ä–º—É–ª–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:</strong></p>
      <pre><code>
depth: d = Œ±^œÜ
width: w = Œ≤^œÜ  
resolution: r = Œ≥^œÜ
–≥–¥–µ Œ± √ó Œ≤¬≤ √ó Œ≥¬≤ ‚âà 2, Œ± ‚â• 1, Œ≤ ‚â• 1, Œ≥ ‚â• 1
      </code></pre>
      
      <h4>Vision Transformer (ViT)</h4>
      <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:</p>
      
      <p><strong>–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è:</strong></p>
      <ul>
        <li>–†–∞–∑–±–∏–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø–∞—Ç—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16√ó16)</li>
        <li>–õ–∏–Ω–µ–π–Ω–æ–µ –ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—á–µ–π –≤ –≤–µ–∫—Ç–æ—Ä—ã</li>
        <li>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞ transformer encoder'–æ–º</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ ViT:</strong></p>
      <ul>
        <li>–õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö</li>
        <li>–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—è</li>
        <li>–•–æ—Ä–æ—à–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ attention maps</li>
        <li>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –Ω–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <h3>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è CNN</h3>
      
      <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ —Å–≤–∞—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö</p>
      
      <p><strong>–¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong></p>
      <ul>
        <li><strong>–¢—Ä–µ—â–∏–Ω—ã:</strong> –ø—Ä–æ–¥–æ–ª—å–Ω—ã–µ –∏ –ø–æ–ø–µ—Ä–µ—á–Ω—ã–µ</li>
        <li><strong>–ü–æ—Ä—ã:</strong> –≥–∞–∑–æ–≤—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è</li>
        <li><strong>–ù–µ–ø—Ä–æ–≤–∞—Ä—ã:</strong> –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø—Ä–æ–ø–ª–∞–≤–ª–µ–Ω–∏–µ</li>
        <li><strong>–ü–æ–¥—Ä–µ–∑—ã:</strong> —É–≥–ª—É–±–ª–µ–Ω–∏—è —É –∫—Ä–∞—è —à–≤–∞</li>
        <li><strong>–í–∫–ª—é—á–µ–Ω–∏—è:</strong> —à–ª–∞–∫–æ–≤—ã–µ –∏ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ</li>
      </ul>
      
      <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–ö–∞–º–µ—Ä—ã:</strong> –≤—ã—Å–æ–∫–æ—Ä–∞–∑—Ä–µ—à–∞—é—â–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ (2-5 –ú–ü)</li>
        <li><strong>–û—Å–≤–µ—â–µ–Ω–∏–µ:</strong> LED –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º —É–≥–ª–æ–º</li>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> ResNet-50 —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ—è–º–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏</li>
        <li><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–∞</li>
      </ul>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</strong> >95% –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:</strong> <3%</li>
        <li><strong>–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> <500 –º—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</li>
        <li><strong>–†–∞–∑–º–µ—Ä –¥–µ—Ñ–µ–∫—Ç–∞:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—Ç 0.5 –º–º</li>
      </ul>
      
      <h4>–ò–Ω—Å–ø–µ–∫—Ü–∏—è –ø–µ—á–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–Ω—Ç–∞–∂–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>
      
      <p><strong>–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong></p>
      <ul>
        <li><strong>–ù–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</strong> –≤—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</li>
        <li><strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏:</strong> –ø–æ–ª—è—Ä–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –ø–∞–π–∫–∏:</strong> —Ñ–æ—Ä–º–∞ –∏ —Ä–∞–∑–º–µ—Ä –ø–∞—è–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</li>
        <li><strong>–î–µ—Ñ–µ–∫—Ç—ã –ø–∞–π–∫–∏:</strong> –º–æ—Å—Ç–∏–∫–∏, —Ö–æ–ª–æ–¥–Ω–∞—è –ø–∞–π–∫–∞, –Ω–µ–¥–æ–ø–∞–π</li>
      </ul>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>Multi-scale CNN:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞</li>
        <li><strong>Semantic segmentation:</strong> —Ç–æ—á–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>Ensemble –º–µ—Ç–æ–¥—ã:</strong> –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Active learning:</strong> –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞</li>
      </ul>
      
      <h4>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–Ω–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–µ–ø–µ–Ω–∏ –∏–∑–Ω–æ—Å–∞ —Ä–µ–∂—É—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º</p>
      
      <p><strong>–ü—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–Ω–æ—Å–∞:</strong></p>
      <ul>
        <li><strong>–ò–∑–Ω–æ—Å –ø–æ –∑–∞–¥–Ω–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:</strong> VB (flank wear)</li>
        <li><strong>–ò–∑–Ω–æ—Å –ø–æ –ø–µ—Ä–µ–¥–Ω–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:</strong> KT (crater wear)</li>
        <li><strong>–°–∫–æ–ª—ã –∏ —Ç—Ä–µ—â–∏–Ω—ã:</strong> –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è</li>
        <li><strong>–ù–∞–ª–∏–ø–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:</strong> built-up edge</li>
      </ul>
      
      <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>–ú–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ 50-200x</li>
        <li><strong>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–Ω–æ—Å–∞:</strong> U-Net –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</li>
        <li><strong>–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç VB, KT</li>
        <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:</strong> –Ω–æ–≤—ã–π/–∏–∑–Ω–æ—à–µ–Ω–Ω—ã–π/–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ 23055-78 "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–∏–π. –°–≤–∞—Ä–∫–∞"</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤:</strong></p>
      <ul>
        <li><strong>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –æ—Ç 0.5 –º–º</li>
        <li><strong>–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è ‚â•95%</li>
        <li><strong>–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö</li>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∫–æ–Ω—Ç—Ä–æ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –ì–û–°–¢:</strong></p>
      <ul>
        <li><strong>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ:</strong> —Ç—Ä–µ—â–∏–Ω—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ:</strong> –ø–æ—Ä—ã –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞</li>
        <li><strong>–î–æ–ø—É—Å—Ç–∏–º—ã–µ:</strong> –º–µ–ª–∫–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã</li>
      </ul>
      
      <h4>–ì–û–°–¢ –† –ò–°–û 9712-2019 "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–∏–π"</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É:</strong></p>
      <ul>
        <li><strong>–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:</strong> –æ–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–µ —Å AI-—Å–∏—Å—Ç–µ–º–∞–º–∏</li>
        <li><strong>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</li>
        <li><strong>–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤—ã–∫–æ–≤</li>
      </ul>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é:</strong></p>
      <ul>
        <li><strong>–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞:</strong> —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ú–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω–∞–º</li>
        <li><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</strong> –ø–ª–∞–Ω–æ–≤–æ-–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç</li>
      </ul>
      
      <h4>152-–§–ó "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" –≤ Computer Vision</h4>
      
      <p><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:</strong></p>
      <ul>
        <li><strong>–°–æ–≥–ª–∞—Å–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:</strong> –Ω–∞ –≤–∏–¥–µ–æ—Ñ–∏–∫—Å–∞—Ü–∏—é —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç</li>
        <li><strong>–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è:</strong> —Ä–∞–∑–º—ã—Ç–∏–µ –ª–∏—Ü –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–∞—Ö</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞:</strong> —Ç–æ–ª—å–∫–æ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª</li>
        <li><strong>–°—Ä–æ–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö CNN</h3>
      
      <h4>Edge Computing –¥–ª—è Computer Vision</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ 30+ FPS –¥–ª—è real-time –∫–æ–Ω—Ç—Ä–æ–ª—è</li>
        <li><strong>–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> —Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö</li>
        <li><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—ã–ª–∏, –≤–∏–±—Ä–∞—Ü–∏–π, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä</li>
        <li><strong>–ö–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å:</strong> —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—è–¥–æ–º —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º</li>
      </ul>
      
      <p><strong>–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong></p>
      
      <p><strong>NVIDIA Jetson —Å–µ—Ä–∏—è:</strong></p>
      <ul>
        <li><strong>Jetson Nano:</strong> 128 CUDA cores, 4GB RAM, $99</li>
        <li><strong>Jetson Xavier NX:</strong> 384 CUDA cores, 8GB RAM, $399</li>
        <li><strong>Jetson AGX Xavier:</strong> 512 CUDA cores, 32GB RAM, $699</li>
        <li><strong>Jetson Orin:</strong> –¥–æ 2048 CUDA cores, 64GB RAM</li>
      </ul>
      
      <p><strong>Intel —Å–µ—Ä–∏—è:</strong></p>
      <ul>
        <li><strong>Intel NUC:</strong> –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã</li>
        <li><strong>Intel Movidius:</strong> —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ VPU –¥–ª—è AI</li>
        <li><strong>Intel OpenVINO:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è Intel –∂–µ–ª–µ–∑–∞</li>
      </ul>
      
      <p><strong>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –ë–∞–π–∫–∞–ª:</strong> ARM-based —Ä–µ—à–µ–Ω–∏—è</li>
        <li><strong>–ú–¶–°–¢ –≠–ª—å–±—Ä—É—Å:</strong> –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</li>
        <li><strong>–ú–æ–¥—É–ª–∏ –¢-–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong> –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã</li>
      </ul>
      
      <h4>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞</h4>
      
      <p><strong>–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>FP32 ‚Üí FP16:</strong> —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ 2 —Ä–∞–∑–∞</li>
        <li><strong>FP32 ‚Üí INT8:</strong> —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤ 4 —Ä–∞–∑–∞, —É—Å–∫–æ—Ä–µ–Ω–∏–µ inference</li>
        <li><strong>Post-training quantization:</strong> –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
        <li><strong>Quantization-aware training:</strong> –æ–±—É—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>Pruning (–æ–±—Ä–µ–∑–∫–∞):</strong></p>
      <ul>
        <li><strong>Structured pruning:</strong> —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/—Å–ª–æ–µ–≤</li>
        <li><strong>Unstructured pruning:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤</li>
        <li><strong>Magnitude-based:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ —Å –º–∞–ª—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏</li>
        <li><strong>Gradual pruning:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>Knowledge Distillation:</strong></p>
      <ul>
        <li><strong>Teacher-Student:</strong> –±–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é</li>
        <li><strong>Soft targets:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤–º–µ—Å—Ç–æ hard labels</li>
        <li><strong>Feature matching:</strong> —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π</li>
        <li><strong>Attention transfer:</strong> –ø–µ—Ä–µ–¥–∞—á–∞ attention maps</li>
      </ul>
      
      <h4>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏</h4>
      
      <p><strong>–ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏:</strong></p>
      <ul>
        <li><strong>OPC UA:</strong> —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>Modbus TCP/RTU:</strong> –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª</li>
        <li><strong>Ethernet/IP:</strong> –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π Ethernet</li>
        <li><strong>PROFINET:</strong> –ø—Ä–æ—Ç–æ–∫–æ–ª Siemens –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA:</strong></p>
      <ul>
        <li><strong>Wonderware:</strong> –ø–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞</li>
        <li><strong>WinCC:</strong> –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Siemens —Å–∏—Å—Ç–µ–º–∞–º–∏</li>
        <li><strong>Citect:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</li>
        <li><strong>–†–æ—Å—Å–∏–π—Å–∫–∏–µ SCADA:</strong> TRACE MODE, MasterSCADA</li>
      </ul>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>Edge Gateway:</strong> —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞–º–µ—Ä –∏ –¥–∞—Ç—á–∏–∫–æ–≤</li>
        <li><strong>Message Broker:</strong> MQTT/Apache Kafka –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>API Gateway:</strong> –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ AI —Å–µ—Ä–≤–∏—Å–∞–º</li>
        <li><strong>Database:</strong> —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ Computer Vision –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
      
      <h4>–ú–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>–ü—Ä—è–º—ã–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–ó–∞–º–µ–Ω–∞ —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è:</strong> —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –û–¢–ö</li>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–Ω–∏–∏</li>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤</li>
      </ul>
      
      <p><strong>–ö–æ—Å–≤–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–†–µ–ø—É—Ç–∞—Ü–∏—è:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:</strong> –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ì–û–°–¢</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> —Ç–∏—Ä–∞–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–∫–∏</li>
      </ul>
      
      <h4>–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤</h4>
      
      <p><strong>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:</strong> 500 —Å–≤–∞—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ —Å–º–µ–Ω—É</li>
        <li><strong>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –û–¢–ö:</strong> 6 —á–µ–ª–æ–≤–µ–∫ √ó 120,000 —Ä—É–±/–º–µ—Å = 720,000 —Ä—É–±/–º–µ—Å</li>
        <li><strong>–í—Ä–µ–º—è –∫–æ–Ω—Ç—Ä–æ–ª—è:</strong> 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é vs 30 —Å–µ–∫—É–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
        <li><strong>–ü—Ä–æ–ø—É—Å–∫ –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> 2% –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ vs 0.5% –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º</li>
        <li><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è:</strong> 50,000 —Ä—É–± (–ø–µ—Ä–µ–¥–µ–ª–∫–∞ + —Ä–µ–ø—É—Ç–∞—Ü–∏—è)</li>
      </ul>
      
      <p><strong>–†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏:</strong></p>
      
      <p><strong>1. –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ:</strong></p>
      <ul>
        <li>–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –û–¢–ö –Ω–∞ 80%: 4.8 √ó 120,000 = 576,000 —Ä—É–±/–º–µ—Å</li>
        <li>–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: 576,000 √ó 12 = 6,912,000 —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <p><strong>2. –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–°–Ω–∏–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤: (2% - 0.5%) √ó 500 √ó 22 √ó 12 = 1,980 –∏–∑–¥–µ–ª–∏–π/–≥–æ–¥</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—è: 1,980 √ó 50,000 = 99,000,000 —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <p><strong>3. –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:</strong></p>
      <ul>
        <li>–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: (3 - 0.5) –º–∏–Ω √ó 500 √ó 22 √ó 12 = 330,000 –º–∏–Ω/–≥–æ–¥</li>
        <li>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 330,000 / 3 = 110,000 –∏–∑–¥–µ–ª–∏–π/–≥–æ–¥</li>
        <li>–î–æ—Ö–æ–¥: 110,000 √ó 200,000 —Ä—É–± = 22,000,000 —Ä—É–±/–≥–æ–¥ (–ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ 200,000 —Ä—É–±/–∏–∑–¥–µ–ª–∏–µ)</li>
      </ul>
      
      <p><strong>–û–±—â–∏–µ –≤—ã–≥–æ–¥—ã:</strong> 6,912,000 + 99,000,000 + 22,000,000 = 127,912,000 —Ä—É–±/–≥–æ–¥</p>
      
      <p><strong>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</strong></p>
      <ul>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</strong> 15,000,000 —Ä—É–±</li>
        <li><strong>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</strong> –∫–∞–º–µ—Ä—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∫–æ–º–ø—å—é—Ç–µ—Ä—ã = 8,000,000 —Ä—É–±</li>
        <li><strong>–í–Ω–µ–¥—Ä–µ–Ω–∏–µ:</strong> –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –æ–±—É—á–µ–Ω–∏–µ = 3,000,000 —Ä—É–±</li>
        <li><strong>–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã:</strong> 26,000,000 —Ä—É–±</li>
        <li><strong>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> 3,000,000 —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <p><strong>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>–ß–∏—Å—Ç–∞—è —ç–∫–æ–Ω–æ–º–∏—è:</strong> 127,912,000 - 3,000,000 = 124,912,000 —Ä—É–±/–≥–æ–¥</li>
        <li><strong>ROI:</strong> (124,912,000 - 26,000,000) / 26,000,000 √ó 100% = 380%</li>
        <li><strong>–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏:</strong> 26,000,000 / (124,912,000/12) = 2.5 –º–µ—Å—è—Ü–∞</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö CNN</h3>
      
      <h4>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–°–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</strong></p>
      <ul>
        <li><strong>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —É—Å–ª–æ–≤–∏–π:</strong> —Ä–∞–∑–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —É–≥–ª—ã, —Ñ–æ–Ω—ã</li>
        <li><strong>–ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤:</strong> —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</strong> –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —Ä–µ–∑–∫–æ—Å—Ç—å</li>
        <li><strong>–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:</strong> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª–æ–≤–∏—è—Ö —Å—ä–µ–º–∫–∏</li>
      </ul>
      
      <p><strong>–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</strong> –ø–æ–≤–æ—Ä–æ—Ç, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ</li>
        <li><strong>–¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏</li>
        <li><strong>–®—É–º –∏ —Ä–∞–∑–º—ã—Ç–∏–µ:</strong> –∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å—ä–µ–º–∫–∏</li>
        <li><strong>Cutout/Mixup:</strong> —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏</li>
      </ul>
      
      <h4>–û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è</h4>
      
      <p><strong>Transfer Learning —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</strong></p>
      <ul>
        <li><strong>Feature extraction:</strong> –∑–∞–º–æ—Ä–æ–∑–∫–∞ –≤–µ—Å–æ–≤ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
        <li><strong>Fine-tuning:</strong> –¥–æ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ–π —Å–µ—Ç–∏ —Å –º–∞–ª–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é</li>
        <li><strong>Progressive unfreezing:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ —Å–ª–æ–µ–≤</li>
        <li><strong>Discriminative learning rates:</strong> —Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–µ–≤</li>
      </ul>
      
      <p><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>–°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</strong> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∫–ª–∞—Å—Å–æ–≤</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> —Ç–µ—Å—Ç –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—É–¥—É—â–µ–≥–æ</li>
        <li><strong>Cross-validation:</strong> –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤</li>
        <li><strong>–î–æ–º–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong> —Ç–µ—Å—Ç –Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥—Ä—É–≥–∏—Ö –ª–∏–Ω–∏–π/–∑–∞–≤–æ–¥–æ–≤</li>
      </ul>
      
      <h4>–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h4>
      
      <p><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>Containerization:</strong> Docker –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∏ –ø–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>Orchestration:</strong> Kubernetes –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏</li>
        <li><strong>Load balancing:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –∏–Ω—Å—Ç–∞–Ω—Å–∞–º–∏</li>
        <li><strong>Auto-scaling:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ</li>
      </ul>
      
      <p><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>Model drift:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏</li>
        <li><strong>Data drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Performance metrics:</strong> latency, throughput, accuracy</li>
        <li><strong>Business metrics:</strong> –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      
      <p>–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –æ—Å–Ω–æ–≤—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã CNN, –Ω–æ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</p>
      
      <ul>
        <li><strong>–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:</strong> –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è edge:</strong> –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è, pruning, distillation</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º:</strong> –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, SCADA, real-time —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:</strong> –ì–û–°–¢, –º–µ—Ç—Ä–æ–ª–æ–≥–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</strong> —á–µ—Ç–∫–∏–π —Ä–∞—Å—á–µ—Ç ROI –∏ —Ä–∏—Å–∫–æ–≤</li>
      </ul>
      
      <p>–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ - –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.</p>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ CNN. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã —Å–≤–∞—Ä–∫–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–µ.</p>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong> –Ω–µ –º–µ–Ω–µ–µ 95%</li>
        <li><strong>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> –º–µ–Ω–µ–µ 500 –º—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</li>
        <li><strong>–†–∞–∑–º–µ—Ä –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> –æ—Ç 0.5 –º–º</li>
        <li><strong>–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:</strong> –º–µ–Ω–µ–µ 3%</li>
        <li><strong>–ü—Ä–æ–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> –º–µ–Ω–µ–µ 1%</li>
      </ul>
      
      <h4>–ö–ª–∞—Å—Å—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤</h4>
      <ul>
        <li><strong>–ù–æ—Ä–º–∞:</strong> –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–≤–∞—Ä–Ω–æ–π —à–æ–≤</li>
        <li><strong>–¢—Ä–µ—â–∏–Ω—ã:</strong> –ø—Ä–æ–¥–æ–ª—å–Ω—ã–µ –∏ –ø–æ–ø–µ—Ä–µ—á–Ω—ã–µ</li>
        <li><strong>–ü–æ—Ä—ã:</strong> –≥–∞–∑–æ–≤—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è</li>
        <li><strong>–ù–µ–ø—Ä–æ–≤–∞—Ä—ã:</strong> –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø—Ä–æ–ø–ª–∞–≤–ª–µ–Ω–∏–µ</li>
        <li><strong>–ü–æ–¥—Ä–µ–∑—ã:</strong> —É–≥–ª—É–±–ª–µ–Ω–∏—è —É –∫—Ä–∞—è —à–≤–∞</li>
      </ul>
      
      <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
      <ol>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤</li>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ CNN –º–æ–¥–µ–ª–∏</li>
        <li>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: CNN –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import cv2
from PIL import Image, ImageDraw
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("–°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê –°–í–ê–†–ù–´–• –®–í–û–í")
print("–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")
print("="*80)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
IMG_HEIGHT, IMG_WIDTH = 224, 224
N_SAMPLES = 5000
DEFECT_TYPES = ['normal', 'crack', 'pore', 'lack_of_penetration', 'undercut']

print(f"\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {IMG_HEIGHT}√ó{IMG_WIDTH}")
print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {N_SAMPLES}")
print(f"  –¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤: {', '.join(DEFECT_TYPES)}")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤
def generate_weld_image(defect_type='normal', severity=0.5):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞ —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏
    """
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = np.ones((IMG_HEIGHT, IMG_WIDTH, 3), dtype=np.uint8) * 120  # –°–µ—Ä—ã–π —Ñ–æ–Ω
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –º–µ—Ç–∞–ª–ª–∞
    noise = np.random.normal(0, 10, (IMG_HEIGHT, IMG_WIDTH, 3))
    img = np.clip(img + noise, 0, 255).astype(np.uint8)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–≤–∞—Ä–Ω–æ–π —à–æ–≤ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞)
    weld_center = IMG_WIDTH // 2
    weld_width = int(20 + np.random.normal(0, 5))
    weld_start = weld_center - weld_width // 2
    weld_end = weld_center + weld_width // 2
    
    # –¶–≤–µ—Ç —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞
    weld_color = 80 + np.random.normal(0, 15)
    img[:, weld_start:weld_end] = np.clip(weld_color, 50, 150)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if defect_type == 'crack':
        # –¢—Ä–µ—â–∏–Ω–∞ - —Ç–µ–º–Ω–∞—è –ª–∏–Ω–∏—è
        crack_y = np.random.randint(50, IMG_HEIGHT - 50)
        crack_length = int(30 + severity * 50)
        crack_x_start = weld_center - crack_length // 2
        crack_x_end = weld_center + crack_length // 2
        
        # –†–∏—Å—É–µ–º —Ç—Ä–µ—â–∏–Ω—É
        for i in range(crack_length):
            x = crack_x_start + i
            y = crack_y + int(np.sin(i * 0.3) * 3)  # –°–ª–µ–≥–∫–∞ –∏–∑–æ–≥–Ω—É—Ç–∞—è
            if 0 <= x < IMG_WIDTH and 0 <= y < IMG_HEIGHT:
                img[y-1:y+2, x-1:x+2] = 20  # –¢–µ–º–Ω–∞—è —Ç—Ä–µ—â–∏–Ω–∞
    
    elif defect_type == 'pore':
        # –ü–æ—Ä—ã - –∫—Ä—É–≥–ª—ã–µ —Ç–µ–º–Ω—ã–µ –ø—è—Ç–Ω–∞
        n_pores = int(1 + severity * 5)
        for _ in range(n_pores):
            pore_x = np.random.randint(weld_start, weld_end)
            pore_y = np.random.randint(20, IMG_HEIGHT - 20)
            pore_radius = int(2 + severity * 8)
            
            # –†–∏—Å—É–µ–º –ø–æ—Ä—É
            y, x = np.ogrid[:IMG_HEIGHT, :IMG_WIDTH]
            mask = (x - pore_x)**2 + (y - pore_y)**2 <= pore_radius**2
            img[mask] = 30  # –¢–µ–º–Ω–∞—è –ø–æ—Ä–∞
    
    elif defect_type == 'lack_of_penetration':
        # –ù–µ–ø—Ä–æ–≤–∞—Ä - —Å–≤–µ—Ç–ª–∞—è –æ–±–ª–∞—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ —à–≤–∞
        unpenetrated_y_start = np.random.randint(30, IMG_HEIGHT - 100)
        unpenetrated_y_end = unpenetrated_y_start + int(50 + severity * 50)
        unpenetrated_x_start = weld_center - int(5 + severity * 10)
        unpenetrated_x_end = weld_center + int(5 + severity * 10)
        
        img[unpenetrated_y_start:unpenetrated_y_end, 
            unpenetrated_x_start:unpenetrated_x_end] = 160  # –°–≤–µ—Ç–ª–∞—è –æ–±–ª–∞—Å—Ç—å
    
    elif defect_type == 'undercut':
        # –ü–æ–¥—Ä–µ–∑ - —É–≥–ª—É–±–ª–µ–Ω–∏—è –ø–æ –∫—Ä–∞—è–º —à–≤–∞
        for side in [-1, 1]:  # –õ–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
            undercut_x = weld_center + side * (weld_width // 2 + 5)
            undercut_length = int(40 + severity * 60)
            undercut_y_start = np.random.randint(30, IMG_HEIGHT - undercut_length)
            
            for i in range(undercut_length):
                y = undercut_y_start + i
                if 0 <= undercut_x < IMG_WIDTH and 0 <= y < IMG_HEIGHT:
                    img[y, undercut_x-2:undercut_x+3] = 40  # –¢–µ–º–Ω–æ–µ —É–≥–ª—É–±–ª–µ–Ω–∏–µ
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è
    # –†–∞–∑–º—ã—Ç–∏–µ
    if np.random.random() < 0.3:
        img = cv2.GaussianBlur(img, (3, 3), 0)
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
    brightness_factor = np.random.uniform(0.8, 1.2)
    img = np.clip(img * brightness_factor, 0, 255).astype(np.uint8)
    
    return img

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤...")

images = []
labels = []
metadata = []

for i in range(N_SAMPLES):
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –¥–µ—Ñ–µ–∫—Ç–∞
    if i % 100 == 0:
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {i}/{N_SAMPLES} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ (–±–æ–ª—å—à–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —à–≤–æ–≤)
    if np.random.random() < 0.6:
        defect_type = 'normal'
    else:
        defect_type = np.random.choice(['crack', 'pore', 'lack_of_penetration', 'undercut'])
    
    # –°—Ç–µ–ø–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–∞
    severity = np.random.uniform(0.2, 1.0)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = generate_weld_image(defect_type, severity)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    img_normalized = img.astype(np.float32) / 255.0
    
    images.append(img_normalized)
    labels.append(defect_type)
    metadata.append({
        'defect_type': defect_type,
        'severity': severity,
        'sample_id': i
    })

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy arrays
X = np.array(images)
y = np.array(labels)

print(f"\\n–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω:")
print(f"  –§–æ—Ä–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {X.shape}")
print(f"  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
unique, counts = np.unique(y, return_counts=True)
for defect, count in zip(unique, counts):
    percentage = count / len(y) * 100
    print(f"    {defect}: {count} ({percentage:.1f}%)")

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–∫
le = LabelEncoder()
y_encoded = le.fit_transform(y)
n_classes = len(le.classes_)

print(f"\\n–ö–ª–∞—Å—Å—ã –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã: {le.classes_}")

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
)

print(f"\\n–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape[0]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape[0]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

# –°–æ–∑–¥–∞–Ω–∏–µ CNN –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–°–û–ó–î–ê–ù–ò–ï CNN –ú–û–î–ï–õ–ò")
print("="*60)

def create_weld_cnn_model(input_shape, num_classes):
    """
    –°–æ–∑–¥–∞–µ—Ç CNN –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–∫–∏
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö VGG —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    """
    model = keras.Sequential([
        # –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        layers.Input(shape=input_shape),
        
        # –ë–ª–æ–∫ 1: –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        layers.Conv2D(32, (3, 3), activation='relu', padding='same'),
        layers.BatchNormalization(),
        layers.Conv2D(32, (3, 3), activation='relu', padding='same'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        layers.Dropout(0.25),
        
        # –ë–ª–æ–∫ 2: –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        layers.Conv2D(64, (3, 3), activation='relu', padding='same'),
        layers.BatchNormalization(),
        layers.Conv2D(64, (3, 3), activation='relu', padding='same'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        layers.Dropout(0.25),
        
        # –ë–ª–æ–∫ 3: –°–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
        layers.BatchNormalization(),
        layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        layers.Dropout(0.25),
        
        # –ë–ª–æ–∫ 4: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        layers.Conv2D(256, (3, 3), activation='relu', padding='same'),
        layers.BatchNormalization(),
        layers.Conv2D(256, (3, 3), activation='relu', padding='same'),
        layers.BatchNormalization(),
        layers.MaxPooling2D((2, 2)),
        layers.Dropout(0.25),
        
        # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ª–æ–µ–≤
        layers.GlobalAveragePooling2D(),
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        layers.Dense(512, activation='relu'),
        layers.BatchNormalization(),
        layers.Dropout(0.5),
        layers.Dense(256, activation='relu'),
        layers.BatchNormalization(),
        layers.Dropout(0.5),
        layers.Dense(num_classes, activation='softmax')
    ])
    
    return model

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
input_shape = (IMG_HEIGHT, IMG_WIDTH, 3)
model = create_weld_cnn_model(input_shape, n_classes)

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏
model.compile(
    optimizer=keras.optimizers.Adam(learning_rate=0.001),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

print("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ CNN –º–æ–¥–µ–ª–∏:")
model.summary()

# –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
total_params = model.count_params()
print(f"\\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–û–ë–£–ß–ï–ù–ò–ï CNN –ú–û–î–ï–õ–ò")
print("="*60)

# –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±–æ–±—â–∞—é—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
datagen = keras.preprocessing.image.ImageDataGenerator(
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    brightness_range=[0.8, 1.2],
    fill_mode='nearest'
)

# Callbacks –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
callbacks = [
    keras.callbacks.EarlyStopping(
        monitor='val_accuracy',
        patience=15,
        restore_best_weights=True,
        verbose=1
    ),
    keras.callbacks.ReduceLROnPlateau(
        monitor='val_loss',
        factor=0.5,
        patience=8,
        min_lr=1e-7,
        verbose=1
    ),
    keras.callbacks.ModelCheckpoint(
        'best_weld_model.h5',
        monitor='val_accuracy',
        save_best_only=True,
        verbose=1
    )
]

print("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è —Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö...")

# –û–±—É—á–µ–Ω–∏–µ —Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π
history = model.fit(
    datagen.flow(X_train, y_train, batch_size=32),
    steps_per_epoch=len(X_train) // 32,
    epochs=50,
    validation_data=(X_test, y_test),
    callbacks=callbacks,
    verbose=1
)

print("\\n–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ú–û–î–ï–õ–ò")
print("="*60)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
y_pred_proba = model.predict(X_test)
y_pred = np.argmax(y_pred_proba, axis=1)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
test_accuracy = (y_pred == y_test).mean()
print(f"–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {test_accuracy:.4f}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
print("\\n–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test, y_pred, target_names=le.classes_, digits=4))

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
print("\\n–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
cm = confusion_matrix(y_test, y_pred)
print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:")
print("           ", " ".join([f"{cls[:8]:>8}" for cls in le.classes_]))
for i, true_class in enumerate(le.classes_):
    print(f"{true_class[:10]:>10}", " ".join([f"{cm[i,j]:>8}" for j in range(len(le.classes_))]))

# –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
print("\\n–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:")

# –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ—â–∏–Ω (—Å–∞–º—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Ñ–µ–∫—Ç)
crack_class_idx = np.where(le.classes_ == 'crack')[0][0]
crack_indices = np.where(y_test == crack_class_idx)[0]
missed_cracks = np.sum(y_pred[crack_indices] != crack_class_idx)
crack_recall = 1 - (missed_cracks / len(crack_indices)) if len(crack_indices) > 0 else 1

print(f"  –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ—â–∏–Ω: {missed_cracks} –∏–∑ {len(crack_indices)}")
print(f"  Recall –¥–ª—è —Ç—Ä–µ—â–∏–Ω: {crack_recall:.4f}")

# –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —à–≤—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –¥–µ—Ñ–µ–∫—Ç–Ω—ã–µ)
normal_class_idx = np.where(le.classes_ == 'normal')[0][0]
normal_indices = np.where(y_test == normal_class_idx)[0]
false_positives = np.sum(y_pred[normal_indices] != normal_class_idx)
normal_precision = 1 - (false_positives / len(normal_indices)) if len(normal_indices) > 0 else 1

print(f"  –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_positives} –∏–∑ {len(normal_indices)}")
print(f"  Precision –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —à–≤–æ–≤: {normal_precision:.4f}")

# –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
print("\\n–ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
confidence_scores = np.max(y_pred_proba, axis=1)
print(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_scores.mean():.4f}")
print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_scores.min():.4f}")
print(f"  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (<0.8): {np.sum(confidence_scores < 0.8)}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –ü–†–û–¶–ï–°–°–ê –û–ë–£–ß–ï–ù–ò–Ø")
print("="*60)

# –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Ç–µ—Ä—å
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

# –¢–æ—á–Ω–æ—Å—Ç—å
ax1.plot(history.history['accuracy'], label='Training Accuracy')
ax1.plot(history.history['val_accuracy'], label='Validation Accuracy')
ax1.set_title('Model Accuracy')
ax1.set_xlabel('Epoch')
ax1.set_ylabel('Accuracy')
ax1.legend()
ax1.grid(True)

# –ü–æ—Ç–µ—Ä–∏
ax2.plot(history.history['loss'], label='Training Loss')
ax2.plot(history.history['val_loss'], label='Validation Loss')
ax2.set_title('Model Loss')
ax2.set_xlabel('Epoch')
ax2.set_ylabel('Loss')
ax2.legend()
ax2.grid(True)

plt.tight_layout()
plt.show()

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print("\\n–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")

# –í—Ä–µ–º—è inference
import time
start_time = time.time()
_ = model.predict(X_test[:100])
inference_time = (time.time() - start_time) / 100
print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {inference_time*1000:.1f} –º—Å")

# –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
model_size_mb = total_params * 4 / (1024 * 1024)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º float32
print(f"  –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {model_size_mb:.1f} –ú–ë")

# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏ GPU
batch_size = 32
memory_per_image = IMG_HEIGHT * IMG_WIDTH * 3 * 4  # float32
batch_memory_mb = batch_size * memory_per_image / (1024 * 1024)
print(f"  –ü–∞–º—è—Ç—å –¥–ª—è –±–∞—Ç—á–∞ {batch_size}: {batch_memory_mb:.1f} –ú–ë")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*60)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï")
print("="*60)

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
welds_per_shift = 500
shifts_per_day = 3
working_days_per_month = 22
monthly_welds = welds_per_shift * shifts_per_day * working_days_per_month

# –¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä—É—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å
inspectors_count = 6
inspector_salary = 120_000  # —Ä—É–±/–º–µ—Å
monthly_inspection_cost = inspectors_count * inspector_salary

# –í—Ä–µ–º—è –∫–æ–Ω—Ç—Ä–æ–ª—è
manual_inspection_time = 3  # –º–∏–Ω—É—Ç—ã –Ω–∞ —à–æ–≤
auto_inspection_time = 0.5  # –º–∏–Ω—É—Ç—ã –Ω–∞ —à–æ–≤ (–≤–∫–ª—é—á–∞—è –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)

# –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
manual_defect_detection_rate = 0.98  # 98% –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤
auto_defect_detection_rate = 0.995   # 99.5% –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞
defect_probability = 0.05  # 5% –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö —à–≤–æ–≤
cost_per_missed_defect = 50_000  # —Ä—É–± (–ø–µ—Ä–µ–¥–µ–ª–∫–∞ + —Ä–µ–ø—É—Ç–∞—Ü–∏—è)

print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
print(f"  –°–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤ –≤ –º–µ—Å—è—Ü: {monthly_welds:,}")
print(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –û–¢–ö: {inspectors_count} —á–µ–ª √ó {inspector_salary:,} —Ä—É–± = {monthly_inspection_cost:,} —Ä—É–±/–º–µ—Å")
print(f"  –í—Ä–µ–º—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è: {manual_inspection_time} –º–∏–Ω/—à–æ–≤")
print(f"  –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è: {auto_inspection_time} –º–∏–Ω/—à–æ–≤")

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
print(f"\\n–†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:")

# 1. –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ (—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ 80%)
personnel_reduction = 0.8
personnel_savings_monthly = monthly_inspection_cost * personnel_reduction
personnel_savings_yearly = personnel_savings_monthly * 12

print(f"\\n1. –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ:")
print(f"   –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {personnel_reduction*100:.0f}%")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {personnel_savings_yearly:,} —Ä—É–±/–≥–æ–¥")

# 2. –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è
monthly_defects = monthly_welds * defect_probability
missed_defects_manual = monthly_defects * (1 - manual_defect_detection_rate)
missed_defects_auto = monthly_defects * (1 - auto_defect_detection_rate)
quality_improvement = missed_defects_manual - missed_defects_auto
quality_savings_monthly = quality_improvement * cost_per_missed_defect
quality_savings_yearly = quality_savings_monthly * 12

print(f"\\n2. –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:")
print(f"   –î–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –º–µ—Å—è—Ü: {monthly_defects:.0f}")
print(f"   –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ: {missed_defects_manual:.1f}")
print(f"   –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º: {missed_defects_auto:.1f}")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {quality_savings_yearly:,} —Ä—É–±/–≥–æ–¥")

# 3. –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è
time_savings_per_weld = manual_inspection_time - auto_inspection_time
monthly_time_savings = monthly_welds * time_savings_per_weld  # –º–∏–Ω—É—Ç—ã
yearly_time_savings = monthly_time_savings * 12

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
additional_welds_yearly = yearly_time_savings / manual_inspection_time
profit_per_weld = 5_000  # —Ä—É–± –ø—Ä–∏–±—ã–ª–∏ —Å –æ–¥–Ω–æ–≥–æ —à–≤–∞
productivity_revenue_yearly = additional_welds_yearly * profit_per_weld

print(f"\\n3. –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —à–æ–≤: {time_savings_per_weld} –º–∏–Ω")
print(f"   –ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {yearly_time_savings:,.0f} –º–∏–Ω")
print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–≤—ã: {additional_welds_yearly:.0f} —à—Ç/–≥–æ–¥")
print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {productivity_revenue_yearly:,} —Ä—É–±/–≥–æ–¥")

# –û–±—â–∏–µ –≤—ã–≥–æ–¥—ã
total_yearly_benefits = personnel_savings_yearly + quality_savings_yearly + productivity_revenue_yearly

print(f"\\n–û–±—â–∏–µ –≤—ã–≥–æ–¥—ã: {total_yearly_benefits:,} —Ä—É–±/–≥–æ–¥")

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç
development_cost = 15_000_000      # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
equipment_cost = 8_000_000         # –ö–∞–º–µ—Ä—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
integration_cost = 3_000_000       # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º
training_cost = 1_000_000          # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
total_project_cost = development_cost + equipment_cost + integration_cost + training_cost

# –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
annual_maintenance = 2_000_000     # –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
annual_electricity = 500_000       # –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
total_annual_operating = annual_maintenance + annual_electricity

print(f"\\n–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
print(f"  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {development_cost:,} —Ä—É–±")
print(f"  –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment_cost:,} —Ä—É–±")
print(f"  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration_cost:,} —Ä—É–±")
print(f"  –û–±—É—á–µ–Ω–∏–µ: {training_cost:,} —Ä—É–±")
print(f"  –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_project_cost:,} —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_annual_operating:,} —Ä—É–±/–≥–æ–¥")

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
net_annual_benefit = total_yearly_benefits - total_annual_operating
roi = (net_annual_benefit - total_project_cost) / total_project_cost * 100
payback_months = total_project_cost / (net_annual_benefit / 12)

print(f"\\n–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,} —Ä—É–±")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
print("\\n" + "="*60)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ")
print("="*60)

print("\\n1. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨:")
if test_accuracy >= 0.95:
    print("   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
else:
    print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")

if inference_time < 0.5:
    print("   ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
else:
    print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏")

if crack_recall >= 0.99:
    print("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
else:
    print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç—Ä–µ—â–∏–Ω")

print("\\n2. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´:")
print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
print("   - –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã: 5 –ú–ü, 30 FPS")
print("   - –û—Å–≤–µ—â–µ–Ω–∏–µ: LED –ø–∞–Ω–µ–ª–∏ —Å —Ä–µ–≥—É–ª–∏—Ä—É–µ–º–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é")
print("   - –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: NVIDIA Jetson AGX Xavier")
print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: OPC UA –¥–ª—è —Å–≤—è–∑–∏ —Å–æ SCADA")

print("\\n3. –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø:")
print("   –§–∞–∑–∞ 1 (1 –º–µ—Å—è—Ü): –ü–∏–ª–æ—Ç–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏")
print("   –§–∞–∑–∞ 2 (2 –º–µ—Å—è—Ü–∞): –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ –ª–∏–Ω–∏–∏")
print("   –§–∞–∑–∞ 3 (1 –º–µ—Å—è—Ü): –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

print("\\n4. –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:")
print("   - –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
print("   - –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–∏ —Å–±–æ—è—Ö")
print("   - –†–µ–≥—É–ª—è—Ä–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
print("   - –û–±—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π")

print("\\n" + "="*80)
print("–°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê –°–í–ê–†–ù–´–• –®–í–û–í –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {test_accuracy:.1%}")
print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_annual_benefit:,} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months:.1f} –º–µ—Å—è—Ü–∞")
print("="*80)`
  },

  15: {
    title: "–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤",
    duration: "160 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h3>
      <p>AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, —Ä–µ—à–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏:</p>
      <ul>
        <li><strong>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</strong> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><strong>–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ–∫</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤</li>
      </ul>
      
      <h3>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</h4>
      
      <p><strong>–ú–Ω–æ–≥–æ–º–µ—Ä–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, –≤–∏–±—Ä–∞—Ü–∏—è, —Ç–æ–∫, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ</li>
        <li><strong>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏:</strong> –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
        <li><strong>–†–∞–∑–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏:</strong> –æ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –¥–æ —á–∞—Å–æ–≤</li>
        <li><strong>–†–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:</strong> —Ç—Ä–µ–±—É—é—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–ù–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>–°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:</strong> —Å—É—Ç–æ—á–Ω—ã–µ, –Ω–µ–¥–µ–ª—å–Ω—ã–µ, –≥–æ–¥–æ–≤—ã–µ —Ü–∏–∫–ª—ã</li>
        <li><strong>–¢—Ä–µ–Ω–¥—ã:</strong> –∏–∑–Ω–æ—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
        <li><strong>–†–µ–∂–∏–º–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</strong> –ø–æ–≥–æ–¥–∞, –Ω–∞–≥—Ä—É–∑–∫–∞, —Å—ã—Ä—å–µ</li>
      </ul>
      
      <p><strong>–®—É–º –∏ –∞–Ω–æ–º–∞–ª–∏–∏:</strong></p>
      <ul>
        <li><strong>–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —à—É–º:</strong> –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–æ–≤</li>
        <li><strong>–í—ã–±—Ä–æ—Å—ã:</strong> –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏</li>
        <li><strong>–ü—Ä–æ–ø—É—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</strong> —Å–±–æ–∏ —Å–≤—è–∑–∏, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤</li>
        <li><strong>–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:</strong> –ø–æ–º–µ—Ö–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º</li>
      </ul>
      
      <h4>–¢–∏–ø—ã –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</h4>
      
      <p><strong>1. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ (Forecasting):</strong></p>
      <ul>
        <li><strong>–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ:</strong> —Å–ª–µ–¥—É—é—â–∏–µ –º–∏–Ω—É—Ç—ã/—á–∞—Å—ã</li>
        <li><strong>–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ:</strong> –¥–Ω–∏/–Ω–µ–¥–µ–ª–∏</li>
        <li><strong>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ:</strong> –º–µ—Å—è—Ü—ã/–≥–æ–¥—ã</li>
        <li><strong>–ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–µ:</strong> –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥</li>
      </ul>
      
      <p><strong>2. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:</strong></p>
      <ul>
        <li><strong>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</strong> –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, –ø—Ä–µ–¥–∞–≤–∞—Ä–∏–π–Ω—ã–π, –∞–≤–∞—Ä–∏–π–Ω—ã–π</li>
        <li><strong>–¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–¥–æ–≤ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º</li>
      </ul>
      
      <p><strong>3. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π:</strong></p>
      <ul>
        <li><strong>–¢–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏:</strong> –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã</li>
        <li><strong>–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏:</strong> –Ω–µ–æ–±—ã—á–Ω—ã–µ –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ</li>
        <li><strong>–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏:</strong> –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</li>
      </ul>
      
      <p><strong>4. –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤:</strong></p>
      <ul>
        <li><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</strong> —Ç–æ—á–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–æ–≤</li>
        <li><strong>–§–∞–∑—ã –ø—Ä–æ—Ü–µ—Å—Å–∞:</strong> —ç—Ç–∞–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞</li>
        <li><strong>–°–æ–±—ã—Ç–∏—è:</strong> –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –æ–ø–µ—Ä–∞—Ü–∏–π</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤—ã —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π</h3>
      
      <h4>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π</h4>
      
      <p>–ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ –∏ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–µ—Ç–∏ –∏–º–µ—é—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</p>
      
      <ul>
        <li><strong>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞:</strong> –Ω–µ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã</li>
        <li><strong>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞–º—è—Ç–∏:</strong> –∫–∞–∂–¥—ã–π –≤—Ö–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ</li>
        <li><strong>–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞</li>
        <li><strong>–ü–æ—Ç–µ—Ä—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:</strong> –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è</li>
      </ul>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ RNN</h4>
      
      <p><strong>–ë–∞–∑–æ–≤–∞—è RNN —è—á–µ–π–∫–∞:</strong></p>
      <p>–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∏–º–µ–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–∞–º—è—Ç—å), –∫–æ—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —à–∞–≥–µ:</p>
      
      <pre><code>
h_t = tanh(W_hh √ó h_{t-1} + W_xh √ó x_t + b_h)
y_t = W_hy √ó h_t + b_y
      </code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>h_t:</strong> —Å–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t</li>
        <li><strong>x_t:</strong> –≤—Ö–æ–¥–Ω–æ–π –≤–µ–∫—Ç–æ—Ä –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t</li>
        <li><strong>y_t:</strong> –≤—ã—Ö–æ–¥–Ω–æ–π –≤–µ–∫—Ç–æ—Ä –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t</li>
        <li><strong>W_hh, W_xh, W_hy:</strong> –º–∞—Ç—Ä–∏—Ü—ã –≤–µ—Å–æ–≤</li>
        <li><strong>b_h, b_y:</strong> –≤–µ–∫—Ç–æ—Ä—ã —Å–º–µ—â–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–†–∞–∑–≤–µ—Ä—Ç–∫–∞ RNN –≤–æ –≤—Ä–µ–º–µ–Ω–∏:</strong></p>
      <p>RNN –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≥–ª—É–±–æ–∫—É—é —Å–µ—Ç—å, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –≤–æ –≤—Ä–µ–º–µ–Ω–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —à–∞–≥—É.</p>
      
      <h4>–ü—Ä–æ–±–ª–µ–º—ã –±–∞–∑–æ–≤—ã—Ö RNN</h4>
      
      <p><strong>1. –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤:</strong></p>
      <ul>
        <li>–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–∏</li>
        <li>–°–µ—Ç—å –Ω–µ –º–æ–∂–µ—Ç –∏–∑—É—á–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
        <li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 5-10 –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —à–∞–≥–∞–º–∏</li>
      </ul>
      
      <p><strong>2. –ü—Ä–æ–±–ª–µ–º–∞ –≤–∑—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤:</strong></p>
      <ul>
        <li>–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ä–∞—Å—Ç–∏</li>
        <li>–ü—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è</li>
        <li>–†–µ—à–∞–µ—Ç—Å—è gradient clipping</li>
      </ul>
      
      <p><strong>3. –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–Ω–µ–ª—å–∑—è —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏)</li>
        <li>–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö</li>
      </ul>
      
      <h3>Long Short-Term Memory (LSTM)</h3>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ LSTM</h4>
      
      <p>LSTM —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É "–≤–æ—Ä–æ—Ç" (gates), –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç –ø–æ—Ç–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</p>
      
      <p><strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã LSTM —è—á–µ–π–∫–∏:</strong></p>
      
      <p><strong>1. Forget Gate (–≤–æ—Ä–æ—Ç–∞ –∑–∞–±—ã–≤–∞–Ω–∏—è):</strong></p>
      <pre><code>f_t = œÉ(W_f √ó [h_{t-1}, x_t] + b_f)</code></pre>
      <p>–†–µ—à–∞–µ—Ç, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —è—á–µ–π–∫–∏.</p>
      
      <p><strong>2. Input Gate (–≤—Ö–æ–¥–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞):</strong></p>
      <pre><code>
i_t = œÉ(W_i √ó [h_{t-1}, x_t] + b_i)
CÃÉ_t = tanh(W_C √ó [h_{t-1}, x_t] + b_C)
      </code></pre>
      <p>–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫—É—é –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —è—á–µ–π–∫–∏.</p>
      
      <p><strong>3. Cell State Update (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è):</strong></p>
      <pre><code>C_t = f_t √ó C_{t-1} + i_t √ó CÃÉ_t</code></pre>
      <p>–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–π–∫–∏, –∫–æ–º–±–∏–Ω–∏—Ä—É—è —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</p>
      
      <p><strong>4. Output Gate (–≤—ã—Ö–æ–¥–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞):</strong></p>
      <pre><code>
o_t = œÉ(W_o √ó [h_{t-1}, x_t] + b_o)
h_t = o_t √ó tanh(C_t)
      </code></pre>
      <p>–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫—É—é —á–∞—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è —è—á–µ–π–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å.</p>
      
      <h4>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ LSTM</h4>
      
      <ul>
        <li><strong>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å:</strong> –º–æ–∂–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–æ—Ç–Ω–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤</li>
        <li><strong>–°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–±—ã–≤–∞–Ω–∏–µ:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å</li>
        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤:</strong> —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∑–∞—Ç—É—Ö–∞–Ω–∏—è</li>
        <li><strong>–ì–∏–±–∫–æ—Å—Ç—å:</strong> –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π</li>
      </ul>
      
      <h3>Gated Recurrent Unit (GRU)</h3>
      
      <h4>–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</h4>
      
      <p>GRU - —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è LSTM —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</p>
      
      <p><strong>1. Reset Gate (–≤–æ—Ä–æ—Ç–∞ —Å–±—Ä–æ—Å–∞):</strong></p>
      <pre><code>r_t = œÉ(W_r √ó [h_{t-1}, x_t] + b_r)</code></pre>
      
      <p><strong>2. Update Gate (–≤–æ—Ä–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è):</strong></p>
      <pre><code>z_t = œÉ(W_z √ó [h_{t-1}, x_t] + b_z)</code></pre>
      
      <p><strong>3. Candidate Hidden State:</strong></p>
      <pre><code>hÃÉ_t = tanh(W_h √ó [r_t √ó h_{t-1}, x_t] + b_h)</code></pre>
      
      <p><strong>4. Final Hidden State:</strong></p>
      <pre><code>h_t = (1 - z_t) √ó h_{t-1} + z_t √ó hÃÉ_t</code></pre>
      
      <h4>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ LSTM –∏ GRU</h4>
      
      <p><strong>LSTM –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ë–æ–ª–µ–µ –º–æ—â–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á</li>
        <li>–õ—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
        <li>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π</li>
      </ul>
      
      <p><strong>GRU –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li>–ú–µ–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–±—ã—Å—Ç—Ä–µ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ inference)</li>
        <li>–ü—Ä–æ—â–µ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ª–∞–¥–∫–µ</li>
        <li>–ß–∞—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å LSTM</li>
        <li>–õ—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã RNN –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á</h3>
      
      <h4>–¢–∏–ø—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</h4>
      
      <p><strong>1. One-to-One:</strong></p>
      <ul>
        <li>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å</li>
        <li>–û–¥–∏–Ω –≤—Ö–æ–¥ ‚Üí –æ–¥–∏–Ω –≤—ã—Ö–æ–¥</li>
        <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
      </ul>
      
      <p><strong>2. One-to-Many:</strong></p>
      <ul>
        <li>–û–¥–∏–Ω –≤—Ö–æ–¥ ‚Üí –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–æ–≤</li>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π</li>
        <li>–ü—Ä–∏–º–µ—Ä: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –Ω–∞—á–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º</li>
      </ul>
      
      <p><strong>3. Many-to-One:</strong></p>
      <ul>
        <li>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–æ–≤ ‚Üí –æ–¥–∏–Ω –≤—ã—Ö–æ–¥</li>
        <li>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π</li>
        <li>–ü—Ä–∏–º–µ—Ä: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ä—è–¥—É</li>
      </ul>
      
      <p><strong>4. Many-to-Many (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è):</strong></p>
      <ul>
        <li>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–æ–≤ ‚Üí –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–æ–≤ —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã</li>
        <li>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞</li>
        <li>–ü—Ä–∏–º–µ—Ä: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
      </ul>
      
      <p><strong>5. Many-to-Many (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è):</strong></p>
      <ul>
        <li>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–æ–≤ ‚Üí –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–æ–≤ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã</li>
        <li>Encoder-Decoder –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</li>
        <li>–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
      </ul>
      
      <h4>Encoder-Decoder –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</h4>
      
      <p><strong>Encoder:</strong></p>
      <ul>
        <li>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</li>
        <li>–ö–æ–¥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</li>
        <li>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –¥–µ–∫–æ–¥–µ—Ä</li>
      </ul>
      
      <p><strong>Decoder:</strong></p>
      <ul>
        <li>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</li>
        <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç —ç–Ω–∫–æ–¥–µ—Ä–∞</li>
        <li>–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å attention –º–µ—Ö–∞–Ω–∏–∑–º</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –∏—Å—Ç–æ—Ä–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üí –±—É–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è</li>
        <li><strong>–ê–Ω–æ–º–∞–ª–∏–∏:</strong> –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Üí —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</li>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</strong> —Å–∏–º–ø—Ç–æ–º—ã ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É</li>
      </ul>
      
      <h3>Attention –º–µ—Ö–∞–Ω–∏–∑–º</h3>
      
      <h4>–ü—Ä–æ–±–ª–µ–º–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</h4>
      
      <p>–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π Encoder-Decoder –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∂–∏–º–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –≤–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫:</p>
      <ul>
        <li>–ü–æ—Ç–µ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π</li>
        <li>–û–¥–∏–Ω–∞–∫–æ–≤–æ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –∫–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º –≤—Ö–æ–¥–∞</li>
        <li>–°–Ω–∏–∂–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
      </ul>
      
      <h4>–ú–µ—Ö–∞–Ω–∏–∑–º –≤–Ω–∏–º–∞–Ω–∏—è</h4>
      
      <p><strong>–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è:</strong></p>
      <p>–î–µ–∫–æ–¥–µ—Ä –º–æ–∂–µ—Ç "–æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ" –Ω–∞ —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.</p>
      
      <p><strong>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ attention:</strong></p>
      <pre><code>
# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è
e_{t,i} = a(s_{t-1}, h_i)  # —ç–Ω–µ—Ä–≥–∏—è
Œ±_{t,i} = softmax(e_{t,i})  # –≤–µ—Å–∞ –≤–Ω–∏–º–∞–Ω–∏—è
c_t = Œ£ Œ±_{t,i} √ó h_i      # –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
      </code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>s_{t-1}:</strong> –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–∫–æ–¥–µ—Ä–∞</li>
        <li><strong>h_i:</strong> —Å–∫—Ä—ã—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–Ω–∫–æ–¥–µ—Ä–∞</li>
        <li><strong>a(¬∑):</strong> —Ñ—É–Ω–∫—Ü–∏—è –≤–Ω–∏–º–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å)</li>
        <li><strong>c_t:</strong> –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ t</li>
      </ul>
      
      <h4>–¢–∏–ø—ã attention</h4>
      
      <p><strong>1. Additive (Bahdanau) Attention:</strong></p>
      <pre><code>e_{t,i} = v^T √ó tanh(W_s √ó s_{t-1} + W_h √ó h_i)</code></pre>
      
      <p><strong>2. Multiplicative (Luong) Attention:</strong></p>
      <pre><code>e_{t,i} = s_{t-1}^T √ó W √ó h_i</code></pre>
      
      <p><strong>3. Dot-Product Attention:</strong></p>
      <pre><code>e_{t,i} = s_{t-1}^T √ó h_i</code></pre>
      
      <h3>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è RNN</h3>
      
      <h4>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç—É—Ä–±–∏–Ω</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–∫–∞–∑–∞ –≥–∞–∑–æ–≤—ã—Ö —Ç—É—Ä–±–∏–Ω –ø–æ –¥–∞–Ω–Ω—ã–º –≤–∏–±—Ä–∞—Ü–∏–∏</p>
      
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong></p>
      <ul>
        <li><strong>–í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</strong> 3 –æ—Å–∏ √ó 10 —Ç–æ—á–µ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è = 30 –∫–∞–Ω–∞–ª–æ–≤</li>
        <li><strong>–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏:</strong> 1 –∫–ì—Ü ‚Üí –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–æ 1 –ì—Ü</li>
        <li><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, –æ–±–æ—Ä–æ—Ç—ã</li>
        <li><strong>–ò—Å—Ç–æ—Ä–∏—è:</strong> 2 –≥–æ–¥–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong></p>
      <ul>
        <li><strong>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —à—É–º–∞</li>
        <li><strong>Feature engineering:</strong> RMS, –ø–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</li>
        <li><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong> Z-score –ø–æ —Å–∫–æ–ª—å–∑—è—â–µ–º—É –æ–∫–Ω—É</li>
        <li><strong>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> –æ–∫–Ω–∞ –ø–æ 100 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤</li>
      </ul>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>Encoder:</strong> 2 —Å–ª–æ—è LSTM (128 units –∫–∞–∂–¥—ã–π)</li>
        <li><strong>Attention:</strong> –º–µ—Ö–∞–Ω–∏–∑–º –≤–Ω–∏–º–∞–Ω–∏—è –∫ –≤–∞–∂–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º</li>
        <li><strong>Decoder:</strong> 1 —Å–ª–æ–π LSTM (64 units) + Dense layers</li>
        <li><strong>–í—ã—Ö–æ–¥:</strong> –≤—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞ (—Ä–µ–≥—Ä–µ—Å—Å–∏—è) + –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)</li>
      </ul>
      
      <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–≤–∞—Ä–∫–∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º</p>
      
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong></p>
      <ul>
        <li><strong>–¢–æ–∫ —Å–≤–∞—Ä–∫–∏:</strong> 1000 –ì—Ü, 0-500 –ê</li>
        <li><strong>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</strong> 1000 –ì—Ü, 0-50 –í</li>
        <li><strong>–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∞—á–∏ –ø—Ä–æ–≤–æ–ª–æ–∫–∏:</strong> 10 –ì—Ü</li>
        <li><strong>–ü–æ–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ä–µ–ª–∫–∏:</strong> 100 –ì—Ü, 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</li>
      </ul>
      
      <p><strong>–¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong></p>
      <ul>
        <li><strong>–ù–µ–ø—Ä–æ–≤–∞—Ä:</strong> –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ç–æ–∫</li>
        <li><strong>–ü—Ä–æ–∂–æ–≥:</strong> –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å</li>
        <li><strong>–ü–æ—Ä—ã:</strong> –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥—É–≥–∞</li>
        <li><strong>–í–∫–ª—é—á–µ–Ω–∏—è:</strong> –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –≤ –∑–æ–Ω–µ —Å–≤–∞—Ä–∫–∏</li>
      </ul>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ real-time —Å–∏—Å—Ç–µ–º—ã:</strong></p>
      <ul>
        <li><strong>Sliding window:</strong> –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–µ–∫—É–Ω–¥</li>
        <li><strong>GRU —Å–µ—Ç—å:</strong> –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (inference < 10 –º—Å)</li>
        <li><strong>–ú–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> —Ç–∏–ø –¥–µ—Ñ–µ–∫—Ç–∞ + —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</li>
        <li><strong>–ü–æ—Ä–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:</strong> —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞</li>
      </ul>
      
      <h4>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏</p>
      
      <p><strong>–î–∞–Ω–Ω—ã–µ:</strong></p>
      <ul>
        <li><strong>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ —Ü–µ—Ö–∞–º:</strong> 15-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–∞–Ω:</strong> –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å</li>
        <li><strong>–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong> –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏</li>
      </ul>
      
      <p><strong>–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ:</strong> —Å–ª–µ–¥—É—é—â–∏–µ 4 —á–∞—Å–∞ (–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)</li>
        <li><strong>–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ:</strong> —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞ (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω)</li>
        <li><strong>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ:</strong> —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è (–¥–æ–≥–æ–≤–æ—Ä—ã —Å —ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç–æ–º)</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† –ò–°–û 13374-2016 "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—à–∏–Ω"</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</strong></p>
      <ul>
        <li><strong>–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å:</strong> 24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li><strong>–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è ‚â•95%</li>
        <li><strong>–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞ 24-72 —á–∞—Å–∞ –¥–æ –æ—Ç–∫–∞–∑–∞</li>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∏ —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</strong></p>
      <ul>
        <li><strong>–ö–ª–∞—Å—Å I:</strong> –ø—Ä–æ—Å—Ç—ã–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã</li>
        <li><strong>–ö–ª–∞—Å—Å II:</strong> —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã</li>
        <li><strong>–ö–ª–∞—Å—Å III:</strong> –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–ö–ª–∞—Å—Å IV:</strong> —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ AI</li>
      </ul>
      
      <h4>–ì–û–°–¢ 27.002-2015 "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —Ç–µ—Ö–Ω–∏–∫–µ"</h4>
      
      <p><strong>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º:</strong></p>
      <ul>
        <li><strong>–ë–µ–∑–æ—Ç–∫–∞–∑–Ω–æ—Å—Ç—å:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã</li>
        <li><strong>–î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å:</strong> —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –¥–æ –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞</li>
        <li><strong>–†–µ–º–æ–Ω—Ç–æ–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å:</strong> –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ—è</li>
        <li><strong>–°–æ—Ö—Ä–∞–Ω—è–µ–º–æ—Å—Ç—å:</strong> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏</li>
      </ul>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é:</strong></p>
      <ul>
        <li><strong>–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> –Ω–µ –º–µ–Ω–µ–µ 100 —á–∞—Å–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ –±–æ–ª–µ–µ 10% –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><strong>–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:</strong> –Ω–µ –±–æ–ª–µ–µ 5% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</li>
      </ul>
      
      <h4>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è</h4>
      
      <p><strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong></p>
      <ul>
        <li><strong>Astra Linux:</strong> –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π</li>
        <li><strong>PostgresPro:</strong> –°–£–ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
        <li><strong>ClickHouse:</strong> –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –°–£–ë–î –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Tarantool:</strong> in-memory –±–∞–∑–∞ –¥–ª—è real-time –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
      </ul>
      
      <p><strong>–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –ë–∞–π–∫–∞–ª:</strong> ARM-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è edge computing</li>
        <li><strong>–ú–¶–°–¢ –≠–ª—å–±—Ä—É—Å:</strong> –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è VLIW –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</li>
        <li><strong>–ú–æ–¥—É–ª–∏ –¢-–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong> –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è RNN –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</h3>
      
      <h4>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>Apache Kafka + Apache Flink:</strong></p>
      <ul>
        <li><strong>Kafka:</strong> –Ω–∞–¥–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
        <li><strong>Flink:</strong> –ø–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
        <li><strong>Checkpointing:</strong> –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤</li>
        <li><strong>Windowing:</strong> –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–∞–º</li>
      </ul>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Lambda:</strong></p>
      <ul>
        <li><strong>Batch layer:</strong> –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Speed layer:</strong> real-time inference –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Serving layer:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ batch –∏ speed —Å–ª–æ–µ–≤</li>
      </ul>
      
      <h4>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ RNN</h4>
      
      <p><strong>–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∞—Ç—á–∏–∫–∞–º:</strong> –∫–∞–∂–¥—ã–π —É–∑–µ–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</strong> –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤</li>
        <li><strong>–ê–Ω—Å–∞–º–±–ª–∏ –º–æ–¥–µ–ª–µ–π:</strong> –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è:</strong> INT8 inference –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è</li>
        <li><strong>Pruning:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–∂–Ω—ã—Ö —Å–≤—è–∑–µ–π</li>
        <li><strong>Knowledge distillation:</strong> —Å–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>ONNX:</strong> –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–æ–º –∂–µ–ª–µ–∑–µ</li>
      </ul>
      
      <h4>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>Data drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Concept drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π</li>
        <li><strong>Performance degradation:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º</li>
        <li><strong>Anomaly detection:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
      </ul>
      
      <p><strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–¢—Ä–∏–≥–≥–µ—Ä—ã –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞</li>
        <li><strong>Incremental learning:</strong> –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏</li>
        <li><strong>Rollback –º–µ—Ö–∞–Ω–∏–∑–º:</strong> –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ RNN –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
      
      <h4>–ú–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</h4>
      
      <p><strong>–ü—Ä—è–º—ã–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–≤:</strong> —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ—è—Ö</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¢–û:</strong> –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é</li>
        <li><strong>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã:</strong> —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏:</strong> –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫</li>
      </ul>
      
      <p><strong>–ö–æ—Å–≤–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π</li>
        <li><strong>–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
        <li><strong>–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≥–æ–¥—ã:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∞–≤–∞—Ä–∏—è—Ö</li>
        <li><strong>–†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã:</strong> –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–æ–∫</li>
      </ul>
      
      <h4>–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –≥–∞–∑–æ—Ç—É—Ä–±–∏–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏</h4>
      
      <p><strong>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong></p>
      <ul>
        <li><strong>–ú–æ—â–Ω–æ—Å—Ç—å –ì–¢–£:</strong> 25 –ú–í—Ç</li>
        <li><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:</strong> 4 —Ä—É–±/–∫–í—Ç¬∑—á</li>
        <li><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏:</strong> 85%</li>
        <li><strong>–ê–≤–∞—Ä–∏–π–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤—ã:</strong> 3 —Ä–∞–∑–∞ –≤ –≥–æ–¥ –ø–æ 48 —á–∞—Å–æ–≤</li>
        <li><strong>–ü–ª–∞–Ω–æ–≤—ã–µ –¢–û:</strong> –∫–∞–∂–¥—ã–µ 2000 —á–∞—Å–æ–≤ –ø–æ 24 —á–∞—Å–∞</li>
      </ul>
      
      <p><strong>–¢–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏:</strong></p>
      <ul>
        <li><strong>–ê–≤–∞—Ä–∏–π–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ–∏:</strong> 3 √ó 48 √ó 25,000 √ó 4 = 14,400,000 —Ä—É–±/–≥–æ–¥</li>
        <li><strong>–ò–∑–±—ã—Ç–æ—á–Ω–æ–µ –¢–û:</strong> 2 √ó 24 √ó 25,000 √ó 4 = 4,800,000 —Ä—É–±/–≥–æ–¥</li>
        <li><strong>–û–±—â–∏–µ –ø–æ—Ç–µ—Ä–∏:</strong> 19,200,000 —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <p><strong>–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è RNN —Å–∏—Å—Ç–µ–º—ã:</strong></p>
      <ul>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–≤ –Ω–∞ 70%:</strong> 14,400,000 √ó 0.7 = 10,080,000 —Ä—É–±/–≥–æ–¥</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¢–û –Ω–∞ 40%:</strong> 4,800,000 √ó 0.4 = 1,920,000 —Ä—É–±/–≥–æ–¥</li>
        <li><strong>–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è:</strong> 12,000,000 —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <p><strong>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</strong></p>
      <ul>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</strong> 8,000,000 —Ä—É–±</li>
        <li><strong>–î–∞—Ç—á–∏–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</strong> 5,000,000 —Ä—É–±</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> 2,000,000 —Ä—É–±</li>
        <li><strong>–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã:</strong> 15,000,000 —Ä—É–±</li>
        <li><strong>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> 1,500,000 —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <p><strong>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>–ß–∏—Å—Ç–∞—è —ç–∫–æ–Ω–æ–º–∏—è:</strong> 12,000,000 - 1,500,000 = 10,500,000 —Ä—É–±/–≥–æ–¥</li>
        <li><strong>ROI:</strong> (10,500,000 - 15,000,000) / 15,000,000 √ó 100% = -30% (–ø–µ—Ä–≤—ã–π –≥–æ–¥)</li>
        <li><strong>ROI (–≤—Ç–æ—Ä–æ–π –≥–æ–¥):</strong> (21,000,000 - 15,000,000) / 15,000,000 √ó 100% = 40%</li>
        <li><strong>–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏:</strong> 15,000,000 / 10,500,000 = 1.4 –≥–æ–¥–∞</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ RNN —Å–∏—Å—Ç–µ–º</h3>
      
      <h4>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è:</strong> –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
        <li><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –µ–¥–∏–Ω–æ–º—É –º–∞—Å—à—Ç–∞–±—É</li>
      </ul>
      
      <p><strong>Feature engineering:</strong></p>
      <ul>
        <li><strong>–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</strong> —Å—Ä–µ–¥–Ω–µ–µ, –¥–∏—Å–ø–µ—Ä—Å–∏—è, —Ç—Ä–µ–Ω–¥—ã</li>
        <li><strong>–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</strong> FFT, –≤–µ–π–≤–ª–µ—Ç—ã</li>
        <li><strong>–õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong> –∑–Ω–∞—á–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</li>
        <li><strong>–î–æ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è:</strong> —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏</li>
      </ul>
      
      <h4>–û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è</h4>
      
      <p><strong>–í—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>Walk-forward validation:</strong> –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–ª–æ–º, —Ç–µ—Å—Ç –Ω–∞ –±—É–¥—É—â–µ–º</li>
        <li><strong>Blocked cross-validation:</strong> –±–ª–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è</li>
        <li><strong>Purged cross-validation:</strong> –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∫—Ä—É–≥ –≥—Ä–∞–Ω–∏—Ü</li>
      </ul>
      
      <p><strong>–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>Dropout:</strong> —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–æ–≤</li>
        <li><strong>Recurrent dropout:</strong> dropout –≤ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö —Å–≤—è–∑—è—Ö</li>
        <li><strong>Batch normalization:</strong> –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π</li>
        <li><strong>Early stopping:</strong> –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏</li>
      </ul>
      
      <h4>–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h4>
      
      <p><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>Latency requirements:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞</li>
        <li><strong>Throughput:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Fault tolerance:</strong> —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å–±–æ—è–º</li>
        <li><strong>Scalability:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è</li>
      </ul>
      
      <p><strong>Continuous learning:</strong></p>
      <ul>
        <li><strong>Online learning:</strong> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><strong>Batch retraining:</strong> –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ</li>
        <li><strong>Ensemble updates:</strong> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–π –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Version control:</strong> —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      
      <p>–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å:</p>
      
      <ul>
        <li><strong>–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:</strong> RNN vs LSTM vs GRU –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏</li>
        <li><strong>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –æ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –¥–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</strong> —á–µ—Ç–∫–∏–π —Ä–∞—Å—á–µ—Ç ROI –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</li>
      </ul>
      
      <p>–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ NLP, –Ω–æ –∏ –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.</p>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LSTM —Å–µ—Ç–µ–π.</p>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> 72 —á–∞—Å–∞ –¥–æ –æ—Ç–∫–∞–∑–∞</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞:</strong> –Ω–µ –º–µ–Ω–µ–µ 90%</li>
        <li><strong>–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:</strong> –º–µ–Ω–µ–µ 5%</li>
        <li><strong>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑</li>
        <li><strong>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞:</strong> –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç</li>
      </ul>
      
      <h4>–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
      <ul>
        <li><strong>–í–∏–±—Ä–∞—Ü–∏—è:</strong> 3 –æ—Å–∏ √ó 8 —Ç–æ—á–µ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è = 24 –∫–∞–Ω–∞–ª–∞</li>
        <li><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏, –æ–±–º–æ—Ç–∫–∏ (6 –∫–∞–Ω–∞–ª–æ–≤)</li>
        <li><strong>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> —Ç–æ–∫, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –º–æ—â–Ω–æ—Å—Ç—å (3 –∫–∞–Ω–∞–ª–∞)</li>
        <li><strong>–†–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> –æ–±–æ—Ä–æ—Ç—ã, –Ω–∞–≥—Ä—É–∑–∫–∞ (2 –∫–∞–Ω–∞–ª–∞)</li>
      </ul>
      
      <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
      <ol>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞</li>
        <li>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ feature engineering</li>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏</li>
        <li>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: LSTM –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("–°–ò–°–¢–ï–ú–ê –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–ì–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –¢–£–†–ë–û–ì–ï–ù–ï–†–ê–¢–û–†–ê")
print("LSTM –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—è–¥–∞–º")
print("="*80)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
SEQUENCE_LENGTH = 96  # 24 —á–∞—Å–∞ –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
N_FEATURES = 35       # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç—á–∏–∫–æ–≤
N_SAMPLES = 10000     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
SAMPLING_RATE = 4     # –ò–∑–º–µ—Ä–µ–Ω–∏—è –≤ —á–∞—Å (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)

print(f"\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
print(f"  –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {SEQUENCE_LENGTH} –∏–∑–º–µ—Ä–µ–Ω–∏–π (24 —á–∞—Å–∞)")
print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç—á–∏–∫–æ–≤: {N_FEATURES}")
print(f"  –ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π: –∫–∞–∂–¥—ã–µ {60//SAMPLING_RATE} –º–∏–Ω—É—Ç")
print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {N_SAMPLES}")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
def generate_turbine_data(n_samples, sequence_length, n_features, failure_probability=0.15):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã
    """
    data = []
    labels = []
    metadata = []
    
    for sample_idx in range(n_samples):
        if sample_idx % 1000 == 0:
            print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–∞ {sample_idx}/{n_samples}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –æ—Ç–∫–∞–∑ –≤ —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        will_fail = np.random.random() < failure_probability
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã
        base_load = np.random.uniform(0.6, 0.95)  # –ó–∞–≥—Ä—É–∑–∫–∞ 60-95%
        base_speed = 3000 + np.random.normal(0, 10)  # –ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
        sequence = np.zeros((sequence_length, n_features))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        for t in range(sequence_length):
            # –í—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞ (–µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç)
            time_to_failure = sequence_length - t if will_fail else float('inf')
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –æ—Ç–∫–∞–∑–∞)
            if will_fail and time_to_failure <= 72:  # 72 –∏–∑–º–µ—Ä–µ–Ω–∏—è = 18 —á–∞—Å–æ–≤
                degradation_factor = 1 + (72 - time_to_failure) / 72 * 2
            else:
                degradation_factor = 1.0
            
            # –í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (24 –∫–∞–Ω–∞–ª–∞: 3 –æ—Å–∏ √ó 8 —Ç–æ—á–µ–∫)
            for i in range(24):
                base_vibration = np.random.uniform(0.5, 2.0)  # –º–º/—Å
                
                # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
                vibration = base_vibration * degradation_factor
                
                # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –∏ –≥–∞—Ä–º–æ–Ω–∏–∫–∏
                noise = np.random.normal(0, 0.1)
                harmonic = 0.2 * np.sin(2 * np.pi * t / 24)  # –°—É—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª
                
                sequence[t, i] = vibration + noise + harmonic
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (6 –∫–∞–Ω–∞–ª–æ–≤)
            for i in range(24, 30):
                base_temp = np.random.uniform(60, 80)  # ¬∞C
                
                # –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
                temp = base_temp + (degradation_factor - 1) * 20
                
                # –°—É—Ç–æ—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
                daily_variation = 5 * np.sin(2 * np.pi * t / 96)
                noise = np.random.normal(0, 1)
                
                sequence[t, i] = temp + daily_variation + noise
            
            # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (3 –∫–∞–Ω–∞–ª–∞)
            # –¢–æ–∫
            current = base_load * 1000 * degradation_factor  # –ê
            sequence[t, 30] = current + np.random.normal(0, 10)
            
            # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ
            voltage = 6300 + np.random.normal(0, 50)  # –í
            sequence[t, 31] = voltage
            
            # –ú–æ—â–Ω–æ—Å—Ç—å
            power = base_load * 25000 * degradation_factor  # –∫–í—Ç
            sequence[t, 32] = power + np.random.normal(0, 100)
            
            # –†–∞–±–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (2 –∫–∞–Ω–∞–ª–∞)
            # –û–±–æ—Ä–æ—Ç—ã
            speed_variation = np.random.normal(0, 5)
            if will_fail and time_to_failure <= 24:
                speed_variation += np.random.normal(0, 20)  # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ
            sequence[t, 33] = base_speed + speed_variation
            
            # –ù–∞–≥—Ä—É–∑–∫–∞
            load_variation = np.random.normal(0, 0.02)
            sequence[t, 34] = base_load + load_variation
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É –∫–ª–∞—Å—Å–∞
        if will_fail:
            # –í—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞ –≤ —á–∞—Å–∞—Ö
            hours_to_failure = (sequence_length - 72) / 4  # 72 –∏–∑–º–µ—Ä–µ–Ω–∏—è = 18 —á–∞—Å–æ–≤
            if hours_to_failure <= 18:
                label = 2  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ—Ç–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 18 —á–∞—Å–æ–≤)
            elif hours_to_failure <= 72:
                label = 1  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–æ—Ç–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤)
            else:
                label = 0  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            label = 0  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        data.append(sequence)
        labels.append(label)
        metadata.append({
            'sample_id': sample_idx,
            'will_fail': will_fail,
            'base_load': base_load,
            'base_speed': base_speed,
            'label': label
        })
    
    return np.array(data), np.array(labels), metadata

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
X, y, metadata = generate_turbine_data(N_SAMPLES, SEQUENCE_LENGTH, N_FEATURES)

print(f"\\n–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω:")
print(f"  –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {X.shape}")
print(f"  –§–æ—Ä–º–∞ –º–µ—Ç–æ–∫: {y.shape}")

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
unique, counts = np.unique(y, return_counts=True)
class_names = ['–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ']

print(f"\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
for i, (class_val, count) in enumerate(zip(unique, counts)):
    percentage = count / len(y) * 100
    print(f"  {class_names[class_val]}: {count} ({percentage:.1f}%)")

# –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö
print(f"\\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {X.mean():.3f}")
print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {X.std():.3f}")
print(f"  –ú–∏–Ω–∏–º—É–º: {X.min():.3f}")
print(f"  –ú–∞–∫—Å–∏–º—É–º: {X.max():.3f}")

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
print("\\n" + "="*60)
print("–ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•")
print("="*60)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
print("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤...")

# Reshape –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
X_reshaped = X.reshape(-1, N_FEATURES)
scaler = StandardScaler()
X_normalized = scaler.fit_transform(X_reshaped)
X_normalized = X_normalized.reshape(N_SAMPLES, SEQUENCE_LENGTH, N_FEATURES)

print(f"–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
print(f"  –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {X_normalized.mean():.3f}")
print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {X_normalized.std():.3f}")

# Feature engineering - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
def add_statistical_features(X):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—è–¥–∞–º
    """
    n_samples, seq_len, n_features = X.shape
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    features = []
    
    for i in range(n_samples):
        sample_features = []
        
        for j in range(n_features):
            channel_data = X[i, :, j]
            
            # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            mean_val = np.mean(channel_data)
            std_val = np.std(channel_data)
            min_val = np.min(channel_data)
            max_val = np.max(channel_data)
            
            # –¢—Ä–µ–Ω–¥ (–Ω–∞–∫–ª–æ–Ω –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏)
            x_vals = np.arange(len(channel_data))
            trend = np.polyfit(x_vals, channel_data, 1)[0]
            
            # –≠–Ω–µ—Ä–≥–∏—è —Å–∏–≥–Ω–∞–ª–∞
            energy = np.sum(channel_data ** 2)
            
            sample_features.extend([mean_val, std_val, min_val, max_val, trend, energy])
        
        features.append(sample_features)
    
    return np.array(features)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
print("\\n–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
X_stats = add_statistical_features(X_normalized)

print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {X_stats.shape}")
print(f"  –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª: 6 (mean, std, min, max, trend, energy)")
print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {X_stats.shape[1]}")

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(
    X_normalized, y, test_size=0.2, random_state=42, stratify=y
)

X_stats_train, X_stats_test = train_test_split(
    X_stats, test_size=0.2, random_state=42, stratify=y
)

print(f"\\n–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape[0]} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape[0]} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")

# –°–æ–∑–¥–∞–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–°–û–ó–î–ê–ù–ò–ï LSTM –ú–û–î–ï–õ–ò")
print("="*60)

def create_lstm_model(sequence_length, n_features, n_classes, n_stats_features):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—É—é LSTM –º–æ–¥–µ–ª—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    """
    # –í—Ö–æ–¥ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    sequence_input = layers.Input(shape=(sequence_length, n_features), name='sequence_input')
    
    # LSTM —Å–ª–æ–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    lstm1 = layers.LSTM(128, return_sequences=True, dropout=0.2, recurrent_dropout=0.2)(sequence_input)
    lstm1 = layers.BatchNormalization()(lstm1)
    
    lstm2 = layers.LSTM(64, return_sequences=True, dropout=0.2, recurrent_dropout=0.2)(lstm1)
    lstm2 = layers.BatchNormalization()(lstm2)
    
    # Attention –º–µ—Ö–∞–Ω–∏–∑–º
    attention = layers.Dense(1, activation='tanh')(lstm2)
    attention = layers.Flatten()(attention)
    attention = layers.Activation('softmax')(attention)
    attention = layers.RepeatVector(64)(attention)
    attention = layers.Permute([2, 1])(attention)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ attention
    lstm_attended = layers.multiply([lstm2, attention])
    lstm_output = layers.GlobalAveragePooling1D()(lstm_attended)
    
    # –í—Ö–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    stats_input = layers.Input(shape=(n_stats_features,), name='stats_input')
    stats_dense = layers.Dense(64, activation='relu')(stats_input)
    stats_dense = layers.BatchNormalization()(stats_dense)
    stats_dense = layers.Dropout(0.3)(stats_dense)
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ LSTM –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    combined = layers.concatenate([lstm_output, stats_dense])
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ–∏
    dense1 = layers.Dense(128, activation='relu')(combined)
    dense1 = layers.BatchNormalization()(dense1)
    dense1 = layers.Dropout(0.4)(dense1)
    
    dense2 = layers.Dense(64, activation='relu')(dense1)
    dense2 = layers.BatchNormalization()(dense2)
    dense2 = layers.Dropout(0.3)(dense2)
    
    # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
    output = layers.Dense(n_classes, activation='softmax', name='output')(dense2)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = keras.Model(inputs=[sequence_input, stats_input], outputs=output)
    
    return model

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
n_classes = len(np.unique(y))
model = create_lstm_model(SEQUENCE_LENGTH, N_FEATURES, n_classes, X_stats.shape[1])

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏
model.compile(
    optimizer=keras.optimizers.Adam(learning_rate=0.001),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

print("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ LSTM –º–æ–¥–µ–ª–∏:")
model.summary()

# –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
total_params = model.count_params()
print(f"\\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–û–ë–£–ß–ï–ù–ò–ï LSTM –ú–û–î–ï–õ–ò")
print("="*60)

# Callbacks –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
callbacks = [
    keras.callbacks.EarlyStopping(
        monitor='val_accuracy',
        patience=20,
        restore_best_weights=True,
        verbose=1
    ),
    keras.callbacks.ReduceLROnPlateau(
        monitor='val_loss',
        factor=0.5,
        patience=10,
        min_lr=1e-7,
        verbose=1
    ),
    keras.callbacks.ModelCheckpoint(
        'best_turbine_model.h5',
        monitor='val_accuracy',
        save_best_only=True,
        verbose=1
    )
]

print("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è LSTM –º–æ–¥–µ–ª–∏...")

# –û–±—É—á–µ–Ω–∏–µ
history = model.fit(
    [X_train, X_stats_train], y_train,
    batch_size=32,
    epochs=100,
    validation_data=([X_test, X_stats_test], y_test),
    callbacks=callbacks,
    verbose=1
)

print("\\n–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ú–û–î–ï–õ–ò")
print("="*60)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
y_pred_proba = model.predict([X_test, X_stats_test])
y_pred = np.argmax(y_pred_proba, axis=1)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
test_accuracy = (y_pred == y_test).mean()
print(f"–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {test_accuracy:.4f}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
print("\\n–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test, y_pred, target_names=class_names, digits=4))

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
print("\\n–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
cm = confusion_matrix(y_test, y_pred)
print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:")
print("           ", " ".join([f"{cls[:10]:>10}" for cls in class_names]))
for i, true_class in enumerate(class_names):
    print(f"{true_class[:10]:>10}", " ".join([f"{cm[i,j]:>10}" for j in range(len(class_names))]))

# –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
print("\\n–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:")

# –ü—Ä–æ–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
critical_indices = np.where(y_test == 2)[0]
missed_critical = np.sum(y_pred[critical_indices] != 2)
critical_recall = 1 - (missed_critical / len(critical_indices)) if len(critical_indices) > 0 else 1

print(f"  –ü—Ä–æ–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {missed_critical} –∏–∑ {len(critical_indices)}")
print(f"  Recall –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {critical_recall:.4f}")

# –õ–æ–∂–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏ (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
normal_indices = np.where(y_test == 0)[0]
false_alarms = np.sum(y_pred[normal_indices] != 0)
normal_precision = 1 - (false_alarms / len(normal_indices)) if len(normal_indices) > 0 else 1

print(f"  –õ–æ–∂–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏: {false_alarms} –∏–∑ {len(normal_indices)}")
print(f"  Precision –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {normal_precision:.4f}")

# ROC-AUC –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ vs –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ)
y_binary_test = (y_test > 0).astype(int)
y_binary_pred_proba = y_pred_proba[:, 1] + y_pred_proba[:, 2]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
roc_auc = roc_auc_score(y_binary_test, y_binary_pred_proba)

print(f"  ROC-AUC (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ vs –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ): {roc_auc:.4f}")

# –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
print("\\n–ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
confidence_scores = np.max(y_pred_proba, axis=1)
print(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_scores.mean():.4f}")
print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_scores.min():.4f}")
print(f"  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (<0.7): {np.sum(confidence_scores < 0.7)}")

# –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
print("\\n" + "="*60)
print("–°–ò–°–¢–ï–ú–ê –†–ê–ù–ù–ï–ì–û –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø")
print("="*60)

def early_warning_system(model, scaler, sequence, stats_features, thresholds):
    """
    –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ LSTM –º–æ–¥–µ–ª–∏
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sequence_normalized = scaler.transform(sequence.reshape(-1, N_FEATURES))
    sequence_normalized = sequence_normalized.reshape(1, SEQUENCE_LENGTH, N_FEATURES)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    prediction_proba = model.predict([sequence_normalized, stats_features.reshape(1, -1)], verbose=0)
    prediction = np.argmax(prediction_proba)
    confidence = np.max(prediction_proba)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–≤–æ–≥–∏
    if prediction == 2 and confidence > thresholds['critical']:
        alert_level = "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–†–ï–í–û–ì–ê"
        alert_color = "üî¥"
        action = "–ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê"
    elif prediction == 1 and confidence > thresholds['warning']:
        alert_level = "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
        alert_color = "üü°"
        action = "–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –í –¢–ï–ß–ï–ù–ò–ï 72 –ß–ê–°–û–í"
    elif prediction == 0 and confidence > thresholds['normal']:
        alert_level = "–ù–û–†–ú–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï"
        alert_color = "üü¢"
        action = "–ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –†–ê–ë–û–¢–´"
    else:
        alert_level = "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï"
        alert_color = "‚ö™"
        action = "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê"
    
    return {
        'prediction': prediction,
        'confidence': confidence,
        'probabilities': prediction_proba[0],
        'alert_level': alert_level,
        'alert_color': alert_color,
        'action': action
    }

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
thresholds = {
    'normal': 0.8,
    'warning': 0.7,
    'critical': 0.6
}

print(f"–ü–æ—Ä–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
print(f"  –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > {thresholds['normal']}")
print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > {thresholds['warning']}")
print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–µ–≤–æ–≥–∞: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > {thresholds['critical']}")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö
print("\\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
print("="*50)

for i in range(5):
    test_idx = np.random.randint(0, len(X_test))
    test_sequence = X[test_idx + len(X_train)]  # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    test_stats = X_stats_test[test_idx]
    true_label = y_test[test_idx]
    
    result = early_warning_system(model, scaler, test_sequence, test_stats, thresholds)
    
    print(f"\\n–ü—Ä–∏–º–µ—Ä {i+1}:")
    print(f"  –ò—Å—Ç–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {class_names[true_label]}")
    print(f"  {result['alert_color']} {result['alert_level']}")
    print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")
    print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: –ù–æ—Ä–º–∞={result['probabilities'][0]:.3f}, "
          f"–ü—Ä–µ–¥—É–ø—Ä={result['probabilities'][1]:.3f}, –ö—Ä–∏—Ç–∏—á={result['probabilities'][2]:.3f}")
    print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['action']}")

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
print("="*60)

# –í—Ä–µ–º—è inference
import time
start_time = time.time()
_ = model.predict([X_test[:100], X_stats_test[:100]], verbose=0)
inference_time = (time.time() - start_time) / 100
print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {inference_time*1000:.1f} –º—Å")

# –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
model_size_mb = total_params * 4 / (1024 * 1024)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º float32
print(f"  –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {model_size_mb:.1f} –ú–ë")

# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏
batch_size = 32
memory_per_sequence = SEQUENCE_LENGTH * N_FEATURES * 4  # float32
batch_memory_mb = batch_size * memory_per_sequence / (1024 * 1024)
print(f"  –ü–∞–º—è—Ç—å –¥–ª—è –±–∞—Ç—á–∞ {batch_size}: {batch_memory_mb:.1f} –ú–ë")

# –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
sequences_per_second = 1 / inference_time
print(f"  –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {sequences_per_second:.0f} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π/—Å–µ–∫")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*60)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï")
print("="*60)

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
turbine_power = 25  # –ú–í—Ç
electricity_price = 4  # —Ä—É–±/–∫–í—Ç¬∑—á
capacity_factor = 0.85  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
annual_hours = 8760

# –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
current_mtbf = 2000  # –°—Ä–µ–¥–Ω—è—è –Ω–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –æ—Ç–∫–∞–∑, —á–∞—Å—ã
current_mttr = 48    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —á–∞—Å—ã
failure_rate = annual_hours / current_mtbf  # –û—Ç–∫–∞–∑–æ–≤ –≤ –≥–æ–¥

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ—è
hourly_revenue = turbine_power * 1000 * electricity_price * capacity_factor
annual_downtime_cost = failure_rate * current_mttr * hourly_revenue

print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
print(f"  –ú–æ—â–Ω–æ—Å—Ç—å: {turbine_power} –ú–í—Ç")
print(f"  –í—ã—Ä—É—á–∫–∞ –≤ —á–∞—Å: {hourly_revenue:,.0f} —Ä—É–±")
print(f"  –°—Ä–µ–¥–Ω—è—è –Ω–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –æ—Ç–∫–∞–∑: {current_mtbf} —á–∞—Å–æ–≤")
print(f"  –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {current_mttr} —á–∞—Å–æ–≤")
print(f"  –û—Ç–∫–∞–∑–æ–≤ –≤ –≥–æ–¥: {failure_rate:.2f}")
print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ—Å—Ç–æ–µ–≤: {annual_downtime_cost:,.0f} —Ä—É–±/–≥–æ–¥")

# –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
print(f"\\n–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è LSTM —Å–∏—Å—Ç–µ–º—ã:")

# 1. –°–Ω–∏–∂–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–≤
emergency_reduction = 0.7  # 70% —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–≤
planned_mttr = 24  # –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏

avoided_emergency_cost = annual_downtime_cost * emergency_reduction
remaining_downtime_cost = failure_rate * planned_mttr * hourly_revenue * (1 - emergency_reduction)
downtime_savings = annual_downtime_cost - remaining_downtime_cost

print(f"\\n1. –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –æ—Ç –ø—Ä–æ—Å—Ç–æ–µ–≤:")
print(f"   –°–Ω–∏–∂–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–≤: {emergency_reduction*100:.0f}%")
print(f"   –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¢–û: {current_mttr} ‚Üí {planned_mttr} —á–∞—Å–æ–≤")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {downtime_savings:,.0f} —Ä—É–±/–≥–æ–¥")

# 2. –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
equipment_cost = 500_000_000  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
current_lifetime = 20  # –¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã, –ª–µ—Ç
extended_lifetime = 25  # –ü—Ä–æ–¥–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
lifetime_extension_value = equipment_cost * (extended_lifetime - current_lifetime) / current_lifetime

print(f"\\n2. –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã:")
print(f"   –¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã: {current_lifetime} –ª–µ—Ç")
print(f"   –ü—Ä–æ–¥–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã: {extended_lifetime} –ª–µ—Ç")
print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {equipment_cost:,.0f} —Ä—É–±")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è (–∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è): {lifetime_extension_value/extended_lifetime:,.0f} —Ä—É–±/–≥–æ–¥")

# 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø–∞—Å–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π
spare_parts_cost = 50_000_000  # –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã –∑–∞–ø—á–∞—Å—Ç–µ–π
inventory_reduction = 0.3  # 30% —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤
inventory_savings = spare_parts_cost * inventory_reduction * 0.1  # 10% —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è

print(f"\\n3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø–∞—Å–æ–≤:")
print(f"   –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã: {spare_parts_cost:,.0f} —Ä—É–±")
print(f"   –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤: {inventory_reduction*100:.0f}%")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–∏: {inventory_savings:,.0f} —Ä—É–±/–≥–æ–¥")

# –û–±—â–∏–µ –≤—ã–≥–æ–¥—ã
total_annual_benefits = downtime_savings + lifetime_extension_value/extended_lifetime + inventory_savings

print(f"\\n–û–±—â–∏–µ –≤—ã–≥–æ–¥—ã: {total_annual_benefits:,.0f} —Ä—É–±/–≥–æ–¥")

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç
development_cost = 12_000_000     # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ LSTM —Å–∏—Å—Ç–µ–º—ã
sensors_cost = 8_000_000          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
integration_cost = 3_000_000      # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA
training_cost = 1_000_000         # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
total_project_cost = development_cost + sensors_cost + integration_cost + training_cost

# –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
annual_maintenance = 2_500_000    # –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
annual_cloud_costs = 1_000_000    # –û–±–ª–∞—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
total_annual_operating = annual_maintenance + annual_cloud_costs

print(f"\\n–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
print(f"  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ LSTM —Å–∏—Å—Ç–µ–º—ã: {development_cost:,.0f} —Ä—É–±")
print(f"  –î–∞—Ç—á–∏–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {sensors_cost:,.0f} —Ä—É–±")
print(f"  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration_cost:,.0f} —Ä—É–±")
print(f"  –û–±—É—á–µ–Ω–∏–µ: {training_cost:,.0f} —Ä—É–±")
print(f"  –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_project_cost:,.0f} —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_annual_operating:,.0f} —Ä—É–±/–≥–æ–¥")

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
net_annual_benefit = total_annual_benefits - total_annual_operating
roi = (net_annual_benefit - total_project_cost) / total_project_cost * 100
payback_months = total_project_cost / (net_annual_benefit / 12)

print(f"\\n–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,.0f} —Ä—É–±")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# NPV —Ä–∞—Å—á–µ—Ç (5 –ª–µ—Ç, —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 10%)
discount_rate = 0.1
years = 5
npv = -total_project_cost
for year in range(1, years + 1):
    npv += net_annual_benefit / (1 + discount_rate) ** year

print(f"  NPV (5 –ª–µ—Ç, 10%): {npv:,.0f} —Ä—É–±")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
print("\\n" + "="*60)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ")
print("="*60)

print("\\n1. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨:")
if test_accuracy >= 0.9:
    print("   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
else:
    print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")

if critical_recall >= 0.95:
    print("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
else:
    print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π")

if inference_time < 1.0:
    print("   ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
else:
    print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏")

print("\\n2. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´:")
print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
print("   - –î–∞—Ç—á–∏–∫–∏: –≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä—ã, —Ç–µ—Ä–º–æ–ø–∞—Ä—ã, —Ç–æ–∫–æ–≤—ã–µ –∫–ª–µ—â–∏")
print("   - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π 4 –∏–∑–º–µ—Ä–µ–Ω–∏—è/—á–∞—Å")
print("   - –û–±—Ä–∞–±–æ—Ç–∫–∞: edge-—Å–µ—Ä–≤–µ—Ä —Å GPU –¥–ª—è real-time inference")
print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: OPC UA –¥–ª—è —Å–≤—è–∑–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π SCADA")

print("\\n3. –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø:")
print("   –§–∞–∑–∞ 1 (2 –º–µ—Å—è—Ü–∞): –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
print("   –§–∞–∑–∞ 2 (1 –º–µ—Å—è—Ü): –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
print("   –§–∞–∑–∞ 3 (1 –º–µ—Å—è—Ü): –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
print("   –§–∞–∑–∞ 4 (1 –º–µ—Å—è—Ü): –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤")

print("\\n4. –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:")
print("   - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤")
print("   - –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏")
print("   - –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä—É—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–∏ —Å–±–æ—è—Ö —Å–∏—Å—Ç–µ–º—ã")
print("   - –†–µ–≥—É–ª—è—Ä–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")

print("\\n5. –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
print("   - –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: >90%")
print("   - –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: 72 —á–∞—Å–∞")
print("   - –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: <5%")
print("   - –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: <1 —Å–µ–∫—É–Ω–¥—ã")
print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: >99.5%")

print("\\n" + "="*80)
print("–°–ò–°–¢–ï–ú–ê –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–ì–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {test_accuracy:.1%}")
print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_annual_benefit:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months:.1f} –º–µ—Å—è—Ü–∞")
print("="*80)`
  },

  16: {
    title: "Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    duration: "150 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —ç–ø–æ—Ö—É Transformer</h3>
      <p>Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ —Ä–µ–≤–æ–ª—é—Ü–∏—é –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏, –≤—ã–π–¥—è –¥–∞–ª–µ–∫–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ –º–æ—â–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è:</p>
      <ul>
        <li><strong>–ê–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤:</strong> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        <li><strong>–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:</strong> Vision Transformer –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–∏</li>
        <li><strong>–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤</li>
        <li><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:</strong> self-attention –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</li>
      </ul>
      
      <h3>–≠–≤–æ–ª—é—Ü–∏—è –æ—Ç RNN –∫ Transformer</h3>
      
      <h4>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</h4>
      
      <p>–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —É—Å–ø–µ—Ö–∏ LSTM –∏ GRU, —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–º–µ—é—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</p>
      
      <p><strong>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong></p>
      <ul>
        <li><strong>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏:</strong> –∫–∞–∂–¥—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ</li>
        <li><strong>–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</strong> —É–∑–∫–æ–µ –º–µ—Å—Ç–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–±–ª–µ–º–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:</strong></p>
      <ul>
        <li><strong>–ó–∞—Ç—É—Ö–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤:</strong> –¥–∞–∂–µ –≤ LSTM –¥–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π</li>
        <li><strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ:</strong> –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</li>
        <li><strong>–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:</strong> —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π</li>
      </ul>
      
      <p><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>–ß–µ—Ä–Ω—ã–π —è—â–∏–∫:</strong> —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –º–æ–¥–µ–ª—å</li>
        <li><strong>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —è–≤–Ω—ã—Ö –≤–µ—Å–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è:</strong> –Ω–µ—è—Å–Ω–æ, –∫–∞–∫–∏–µ —á–∞—Å—Ç–∏ –≤—Ö–æ–¥–∞ –≤–∞–∂–Ω—ã</li>
        <li><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ª–∞–¥–∫–∏:</strong> —Ç—Ä—É–¥–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <h4>–†–µ–≤–æ–ª—é—Ü–∏—è Transformer</h4>
      
      <p>Transformer, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Ä–∞–±–æ—Ç–µ "Attention Is All You Need" (2017), —Ä–µ—à–∞–µ—Ç —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã —á–µ—Ä–µ–∑:</p>
      
      <p><strong>–ü–æ–ª–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º:</strong></p>
      <ul>
        <li><strong>–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ</li>
        <li><strong>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU:</strong> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –ª–µ–≥–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–æ–π –ø–æ–∑–∏—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>Self-attention:</strong> –∫–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π</li>
        <li><strong>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É–∑–∫–∏—Ö –º–µ—Å—Ç:</strong> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—á–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ</li>
        <li><strong>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:</strong> –±–µ–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞</li>
      </ul>
      
      <p><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>–Ø–≤–Ω—ã–µ –≤–µ—Å–∞ –≤–Ω–∏–º–∞–Ω–∏—è:</strong> –º–æ–∂–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞ —á—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç –º–æ–¥–µ–ª—å</li>
        <li><strong>–ú–Ω–æ–≥–æ–≥–æ–ª–æ–≤–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</strong> —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:</strong> –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫–∏–µ —Å–≤—è–∑–∏ –º–æ–¥–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç –≤–∞–∂–Ω—ã–º–∏</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Transformer</h3>
      
      <h4>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h4>
      
      <p><strong>1. Self-Attention –º–µ—Ö–∞–Ω–∏–∑–º:</strong></p>
      <p>–Ø–¥—Ä–æ Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - –º–µ—Ö–∞–Ω–∏–∑–º self-attention, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong></p>
      <pre><code>
Attention(Q, K, V) = softmax(QK^T / ‚àöd_k)V
      </code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>Q (Query):</strong> –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞–ø—Ä–æ—Å–æ–≤</li>
        <li><strong>K (Key):</strong> –º–∞—Ç—Ä–∏—Ü–∞ –∫–ª—é—á–µ–π</li>
        <li><strong>V (Value):</strong> –º–∞—Ç—Ä–∏—Ü–∞ –∑–Ω–∞—á–µ–Ω–∏–π</li>
        <li><strong>d_k:</strong> —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π (–¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)</li>
      </ul>
      
      <p><strong>–ü—Ä–æ—Ü–µ—Å—Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è attention:</strong></p>
      <ol>
        <li><strong>–°–æ–∑–¥–∞–Ω–∏–µ Q, K, V:</strong> –ª–∏–Ω–µ–π–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ scores:</strong> —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ Q –∏ K</li>
        <li><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ ‚àöd_k –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>Softmax:</strong> –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏</li>
        <li><strong>–í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞:</strong> —É–º–Ω–æ–∂–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –Ω–∞ V</li>
      </ol>
      
      <p><strong>2. Multi-Head Attention:</strong></p>
      <p>–í–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ attention –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ "–≥–æ–ª–æ–≤", –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –¥–∞–Ω–Ω—ã—Ö:</p>
      
      <pre><code>
MultiHead(Q, K, V) = Concat(head_1, ..., head_h)W^O
–≥–¥–µ head_i = Attention(QW_i^Q, KW_i^K, VW_i^V)
      </code></pre>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ multi-head attention:</strong></p>
      <ul>
        <li><strong>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:</strong> –∫–∞–∂–¥–∞—è –≥–æ–ª–æ–≤–∞ –º–æ–∂–µ—Ç –∏–∑—É—á–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã</li>
        <li><strong>–†–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å:</strong> –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ–≤</li>
      </ul>
      
      <p><strong>3. Positional Encoding:</strong></p>
      <p>–ü–æ—Å–∫–æ–ª—å–∫—É Transformer –Ω–µ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞, –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ positional encoding:</p>
      
      <pre><code>
PE(pos, 2i) = sin(pos / 10000^(2i/d_model))
PE(pos, 2i+1) = cos(pos / 10000^(2i/d_model))
      </code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>pos:</strong> –ø–æ–∑–∏—Ü–∏—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>i:</strong> –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏</li>
        <li><strong>d_model:</strong> —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <p><strong>4. Feed-Forward Networks:</strong></p>
      <p>–ü–æ—Å–ª–µ attention —Å–ª–æ—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω–∞—è —Å–µ—Ç—å:</p>
      
      <pre><code>
FFN(x) = max(0, xW_1 + b_1)W_2 + b_2
      </code></pre>
      
      <p><strong>5. Residual Connections –∏ Layer Normalization:</strong></p>
      <p>–ö–∞–∂–¥—ã–π –ø–æ–¥—Å–ª–æ–π –æ–∫—Ä—É–∂–µ–Ω residual connection –∏ layer normalization:</p>
      
      <pre><code>
LayerNorm(x + Sublayer(x))
      </code></pre>
      
      <h4>Encoder-Decoder –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</h4>
      
      <p><strong>Encoder:</strong></p>
      <ul>
        <li><strong>–°—Ç–µ–∫ –∏–∑ N=6 –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Å–ª–æ–µ–≤</strong></li>
        <li><strong>–ö–∞–∂–¥—ã–π —Å–ª–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç:</strong> multi-head self-attention + feed-forward network</li>
        <li><strong>Residual connections:</strong> –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Å–ª–æ—è</li>
        <li><strong>Layer normalization:</strong> –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ residual connection</li>
      </ul>
      
      <p><strong>Decoder:</strong></p>
      <ul>
        <li><strong>–°—Ç–µ–∫ –∏–∑ N=6 –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Å–ª–æ–µ–≤</strong></li>
        <li><strong>–ö–∞–∂–¥—ã–π —Å–ª–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç:</strong> masked self-attention + encoder-decoder attention + feed-forward</li>
        <li><strong>Masked attention:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "–∑–∞–≥–ª—è–¥—ã–≤–∞–Ω–∏–µ –≤ –±—É–¥—É—â–µ–µ"</li>
        <li><strong>Cross-attention:</strong> –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –≤—ã—Ö–æ–¥—É encoder</li>
      </ul>
      
      <h3>Transformer –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</h3>
      
      <h4>–ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ú–Ω–æ–≥–æ–º–µ—Ä–Ω–æ—Å—Ç—å:</strong> –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∞—Ç—á–∏–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</li>
        <li><strong>–†–∞–∑–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã:</strong> –æ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –¥–æ —á–∞—Å–æ–≤</li>
        <li><strong>–ü—Ä–æ–ø—É—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</strong> —Å–±–æ–∏ –¥–∞—Ç—á–∏–∫–æ–≤, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</li>
        <li><strong>–ù–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã</li>
        <li><strong>–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:</strong> —Å—É—Ç–æ—á–Ω—ã–µ, –Ω–µ–¥–µ–ª—å–Ω—ã–µ, –≥–æ–¥–æ–≤—ã–µ —Ü–∏–∫–ª—ã</li>
      </ul>
      
      <p><strong>Time Series Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      
      <p><strong>1. –í—Ö–æ–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è:</strong> —Ä–∞–∑–±–∏–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –Ω–∞ –ø–∞—Ç—á–∏</li>
        <li><strong>Embedding:</strong> –ª–∏–Ω–µ–π–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è –ø–∞—Ç—á–µ–π –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏</li>
        <li><strong>Positional encoding:</strong> –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</li>
        <li><strong>Channel embedding:</strong> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –¥–∞—Ç—á–∏–∫–∞</li>
      </ul>
      
      <p><strong>2. Temporal attention:</strong></p>
      <ul>
        <li><strong>–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</strong> —Ñ–æ–∫—É—Å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–∞—Ö</li>
        <li><strong>–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</strong> –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
        <li><strong>–°–µ–∑–æ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</strong> –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</li>
      </ul>
      
      <p><strong>3. Cross-variate attention:</strong></p>
      <ul>
        <li><strong>–ú–µ–∂–∫–∞–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</strong> –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏</li>
        <li><strong>–ü—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏:</strong> –≤–ª–∏—è–Ω–∏–µ –æ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –¥—Ä—É–≥–∏–µ</li>
        <li><strong>–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è:</strong> —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã</li>
      </ul>
      
      <h4>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏</h4>
      
      <p><strong>1. Sparse Attention:</strong></p>
      <p>–î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –ø–æ–ª–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ä–æ–≥–∏–º. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:</p>
      
      <ul>
        <li><strong>Local attention:</strong> –≤–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫ –±–ª–∏–∂–∞–π—à–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º</li>
        <li><strong>Strided attention:</strong> –≤–Ω–∏–º–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —à–∞–≥–æ–º</li>
        <li><strong>Random attention:</strong> —Å–ª—É—á–∞–π–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</li>
        <li><strong>Global attention:</strong> –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</li>
      </ul>
      
      <p><strong>2. Hierarchical Transformer:</strong></p>
      <ul>
        <li><strong>–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> –æ—Ç –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –∫ –æ–±—â–∏–º —Ç—Ä–µ–Ω–¥–∞–º</li>
        <li><strong>–ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ</li>
        <li><strong>Cross-scale attention:</strong> —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏</li>
      </ul>
      
      <p><strong>3. Causal Transformer:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏—á–∏–Ω–Ω–∞—è –º–∞—Å–∫–∞:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≥–ª—è–¥—ã–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–µ</li>
        <li><strong>Autoregressive generation:</strong> –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</li>
        <li><strong>Teacher forcing:</strong> —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è</li>
      </ul>
      
      <h3>Vision Transformer (ViT) –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–†–µ–≤–æ–ª—é—Ü–∏—è –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º –∑—Ä–µ–Ω–∏–∏</h4>
      
      <p>Vision Transformer –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ attention –º–µ—Ö–∞–Ω–∏–∑–º –º–æ–∂–µ—Ç –ø—Ä–µ–≤–∑–æ–π—Ç–∏ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–µ—Ç–∏ –≤ –∑–∞–¥–∞—á–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤.</p>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ ViT:</strong></p>
      
      <p><strong>1. Patch Embedding:</strong></p>
      <ul>
        <li><strong>–†–∞–∑–±–∏–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> –Ω–∞ –Ω–µ–ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –ø–∞—Ç—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16√ó16)</li>
        <li><strong>–õ–∏–Ω–µ–π–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è:</strong> –∫–∞–∂–¥—ã–π –ø–∞—Ç—á –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –≤–µ–∫—Ç–æ—Ä</li>
        <li><strong>–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ç—á–∞</li>
        <li><strong>Class token:</strong> —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>2. Transformer Encoder:</strong></p>
      <ul>
        <li><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> multi-head attention + MLP</li>
        <li><strong>Global receptive field:</strong> –∫–∞–∂–¥—ã–π –ø–∞—Ç—á –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º</li>
        <li><strong>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</strong> –º–æ–¥–µ–ª—å —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏</li>
      </ul>
      
      <p><strong>3. Classification Head:</strong></p>
      <ul>
        <li><strong>MLP head:</strong> –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ class token</li>
        <li><strong>Global average pooling:</strong> –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥</li>
      </ul>
      
      <h4>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è ViT –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>1. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–î–µ—Ñ–µ–∫—Ç—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:</strong> —Ü–∞—Ä–∞–ø–∏–Ω—ã, –≤–º—è—Ç–∏–Ω—ã, –∫–æ—Ä—Ä–æ–∑–∏—è</li>
        <li><strong>–†–∞–∑–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å:</strong> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤</li>
        <li><strong>–°–±–æ—Ä–æ—á–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã:</strong> –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∫—Ä—ã—Ç–∏–π:</strong> —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å, —Ç–æ–ª—â–∏–Ω–∞</li>
      </ul>
      
      <p><strong>2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:</strong> –∞–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>–ö–æ—Ä—Ä–æ–∑–∏—è —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥—Ä–æ–Ω–æ–≤</li>
        <li><strong>–î–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</strong> –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞–º–º–µ—Ç—Ä–∏–∏</li>
        <li><strong>–£—Ç–µ—á–∫–∏ –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è:</strong> —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –°–ò–ó:</strong> –Ω–∞–ª–∏—á–∏–µ –∫–∞—Å–æ–∫, –æ—á–∫–æ–≤, –ø–µ—Ä—á–∞—Ç–æ–∫</li>
        <li><strong>–û–ø–∞—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏:</strong> –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø:</strong> —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤</li>
        <li><strong>–ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏:</strong> –¥—ã–º, –æ–≥–æ–Ω—å, —Ä–∞–∑–ª–∏–≤—ã</li>
      </ul>
      
      <h4>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ ViT –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>1. Multi-scale ViT:</strong></p>
      <ul>
        <li><strong>–ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–∞—Ö</li>
        <li><strong>Cross-scale attention:</strong> —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</strong> —Ñ–æ–∫—É—Å –Ω–∞ –≤–∞–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö</li>
      </ul>
      
      <p><strong>2. Deformable ViT:</strong></p>
      <ul>
        <li><strong>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—á–∏:</strong> –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
        <li><strong>–î–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</strong> —Ñ–æ–∫—É—Å –Ω–∞ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö</li>
        <li><strong>–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:</strong> –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ –ø–æ–≤–æ—Ä–æ—Ç–∞–º –∏ –º–∞—Å—à—Ç–∞–±—É</li>
      </ul>
      
      <p><strong>3. Efficient ViT:</strong></p>
      <ul>
        <li><strong>–ú–æ–±–∏–ª—å–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:</strong> –¥–ª—è edge computing</li>
        <li><strong>–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è</li>
        <li><strong>Pruning:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–∂–Ω—ã—Ö —Å–≤—è–∑–µ–π</li>
        <li><strong>Knowledge distillation:</strong> —Å–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h3>–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ Transformer</h3>
      
      <h4>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p>–í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:</p>
      
      <ul>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> –≤–∏–±—Ä–∞—Ü–∏—è + —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä</li>
        <li><strong>–¢–µ–∫—Å—Ç + —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> –æ—Ç—á–µ—Ç—ã + —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è</li>
        <li><strong>–ê—É–¥–∏–æ + –≤–∏–±—Ä–∞—Ü–∏—è:</strong> –∑–≤—É–∫ —Ä–∞–±–æ—Ç—ã + –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è</li>
        <li><strong>3D + 2D –¥–∞–Ω–Ω—ã–µ:</strong> –ª–∏–¥–∞—Ä + –∫–∞–º–µ—Ä—ã</li>
      </ul>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ Transformer:</strong></p>
      
      <p><strong>1. –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã:</strong></p>
      <ul>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã:</strong> Time Series Transformer</li>
        <li><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> Vision Transformer</li>
        <li><strong>–¢–µ–∫—Å—Ç:</strong> BERT-–ø–æ–¥–æ–±–Ω—ã–µ –º–æ–¥–µ–ª–∏</li>
        <li><strong>–ê—É–¥–∏–æ:</strong> Audio Transformer</li>
      </ul>
      
      <p><strong>2. Cross-modal attention:</strong></p>
      <ul>
        <li><strong>–ú–µ–∂–º–æ–¥–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏:</strong> –≤–Ω–∏–º–∞–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫</li>
        <li><strong>–í–∑–∞–∏–º–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ:</strong> —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>3. Fusion strategies:</strong></p>
      <ul>
        <li><strong>Early fusion:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>Late fusion:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
        <li><strong>Intermediate fusion:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–ª–æ—è—Ö</li>
        <li><strong>Attention-based fusion:</strong> –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
      </ul>
      
      <h4>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>1. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–í–∏–±—Ä–∞—Ü–∏—è + —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä:</strong> –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏ —Ç—É—Ä–±–∏–Ω</li>
        <li><strong>–ó–≤—É–∫ + —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª–∏</li>
        <li><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + –¥–∞—Ç—á–∏–∫–∏:</strong> –∫–æ–Ω–≤–µ–π–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã</li>
      </ul>
      
      <p><strong>2. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–í–∏–∑—É–∞–ª—å–Ω—ã–π + —Ä–∞–∑–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å:</strong> –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</li>
        <li><strong>–°–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—è + –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—è:</strong> –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ</li>
        <li><strong>–†–µ–Ω—Ç–≥–µ–Ω + —É–ª—å—Ç—Ä–∞–∑–≤—É–∫:</strong> –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å</li>
      </ul>
      
      <p><strong>3. –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–ò—Å—Ç–æ—Ä–∏—è + —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤</li>
        <li><strong>–ü–æ–≥–æ–¥–∞ + –Ω–∞–≥—Ä—É–∑–∫–∞:</strong> –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã</li>
        <li><strong>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + –æ—Ç—á–µ—Ç—ã:</strong> –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—è</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† 57700.37-2021 "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ AI-–º–æ–¥–µ–ª—è–º:</strong></p>
      <ul>
        <li><strong>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º</li>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li><strong>–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –¥–ª—è Transformer –º–æ–¥–µ–ª–µ–π:</strong></p>
      <ul>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –∞–Ω–∞–ª–∏–∑ attention –≤–µ—Å–æ–≤</li>
        <li><strong>–†–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å:</strong> —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤—Ö–æ–¥–Ω—ã–º –≤–æ–∑–º—É—â–µ–Ω–∏—è–º</li>
        <li><strong>–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ drift:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <h4>–ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 23053-2021 "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"</h4>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AI-—Å–∏—Å—Ç–µ–º:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</strong> –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å:</strong> –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏</li>
        <li><strong>–ü–æ–¥–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å:</strong> –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏—è</li>
        <li><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º Transformer:</strong></p>
      <ul>
        <li><strong>–û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å attention:</strong> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π</li>
        <li><strong>–ê—É–¥–∏—Ç —Ä–µ—à–µ–Ω–∏–π:</strong> —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:</strong> –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> –∑–∞—â–∏—Ç–∞ –æ—Ç adversarial –∞—Ç–∞–∫</li>
      </ul>
      
      <h4>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è</h4>
      
      <p><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –ë–∞–π–∫–∞–ª-–ú:</strong> ARM –¥–ª—è edge inference</li>
        <li><strong>–ú–¶–°–¢ –≠–ª—å–±—Ä—É—Å-8–°:</strong> VLIW –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</li>
        <li><strong>–ù–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ —á–∏–ø—ã:</strong> —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ú–§–¢–ò –∏ –ö—É—Ä—á–∞—Ç–æ–≤—Å–∫–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞</li>
        <li><strong>GPU –∫–ª–∞—Å—Ç–µ—Ä—ã:</strong> –Ω–∞ –±–∞–∑–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Astra Linux:</strong> —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –û–°</li>
        <li><strong>PostgresPro:</strong> –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è attention –≤–µ—Å–æ–≤</li>
        <li><strong>ClickHouse:</strong> –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>MLSpace:</strong> —Ä–æ—Å—Å–∏–π—Å–∫–∞—è MLOps –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞</h3>
      
      <h4>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>1. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ attention –º–µ—Ö–∞–Ω–∏–∑–º—ã:</strong></p>
      <ul>
        <li><strong>Linear attention:</strong> O(n) –≤–º–µ—Å—Ç–æ O(n¬≤) —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</li>
        <li><strong>Sparse attention:</strong> —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</li>
        <li><strong>Local attention:</strong> –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤–Ω–∏–º–∞–Ω–∏—è</li>
        <li><strong>Approximated attention:</strong> –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>2. –ú–æ–¥–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>Quantization:</strong> INT8/INT16 inference</li>
        <li><strong>Pruning:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–∂–Ω—ã—Ö –≤–µ—Å–æ–≤</li>
        <li><strong>Knowledge distillation:</strong> —Å–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Early exit:</strong> –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤</li>
      </ul>
      
      <p><strong>3. –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>Batch processing:</strong> –≥—Ä—É–ø–ø–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</li>
        <li><strong>Pipeline parallelism:</strong> –∫–æ–Ω–≤–µ–π–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</li>
        <li><strong>Model parallelism:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</li>
        <li><strong>Gradient checkpointing:</strong> —ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏</li>
      </ul>
      
      <h4>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>Edge deployment:</strong></p>
      <ul>
        <li><strong>–ú–æ–±–∏–ª—å–Ω—ã–µ Transformer:</strong> MobileBERT, DistilBERT</li>
        <li><strong>ONNX Runtime:</strong> –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</li>
        <li><strong>TensorRT:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è NVIDIA GPU</li>
        <li><strong>OpenVINO:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Intel –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤</li>
      </ul>
      
      <p><strong>Cloud deployment:</strong></p>
      <ul>
        <li><strong>Kubernetes:</strong> –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</li>
        <li><strong>Istio:</strong> service mesh –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤</li>
        <li><strong>Prometheus:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫</li>
        <li><strong>Grafana:</strong> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>Hybrid deployment:</strong></p>
      <ul>
        <li><strong>Edge preprocessing:</strong> –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –º–µ—Å—Ç–µ</li>
        <li><strong>Cloud inference:</strong> —Å–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –æ–±–ª–∞–∫–µ</li>
        <li><strong>Federated learning:</strong> –æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Model caching:</strong> –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ Transformer –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
      
      <h4>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</h4>
      
      <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:</strong> state-of-the-art —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
        <li><strong>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å:</strong> –æ–¥–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</strong> –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li><strong>–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π:</strong> –º—É–ª—å—Ç–∏–∑–∞–¥–∞—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</li>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è feature engineering:</strong> —Å–∞–º–æ–æ–±—É—á–∞—é—â–∏–µ—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç:</strong> –º–µ–Ω—å—à–µ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
      </ul>
      
      <h4>–ú–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–∞ TCO (Total Cost of Ownership)</h4>
      
      <p><strong>–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (CAPEX):</strong></p>
      <ul>
        <li><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</strong> GPU –∫–ª–∞—Å—Ç–µ—Ä—ã, edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</li>
        <li><strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ:</strong> –ª–∏—Ü–µ–Ω–∑–∏–∏, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏</li>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</strong> –∫–æ–º–∞–Ω–¥–∞ ML –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–∏—Å—Ç–µ–º–∞–º</li>
      </ul>
      
      <p><strong>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (OPEX):</strong></p>
      <ul>
        <li><strong>–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è:</strong> –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ GPU —Å–µ—Ä–≤–µ—Ä–æ–≤</li>
        <li><strong>–û–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:</strong> –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ</li>
        <li><strong>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</strong> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:</strong> –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –∏ –ø–µ—Ä–µ–¥–µ–ª–æ–∫</li>
        <li><strong>–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è</li>
        <li><strong>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:</strong> —ç–Ω–µ—Ä–≥–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≤—Ä–µ–º—è</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</h3>
      
      <h4>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–û—á–∏—Å—Ç–∫–∞:</strong> —É–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞ –∏ –≤—ã–±—Ä–æ—Å–æ–≤</li>
        <li><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –µ–¥–∏–Ω–æ–º—É –º–∞—Å—à—Ç–∞–±—É</li>
        <li><strong>–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞:</strong> —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤</li>
      </ul>
      
      <p><strong>–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã:</strong> —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –æ–∫–Ω–∞ –∏–ª–∏ –ø–∞—Ç—á–∏</li>
        <li><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> patch-based –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ</li>
        <li><strong>–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π</li>
        <li><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:</strong> [CLS], [SEP], [MASK]</li>
      </ul>
      
      <h4>–û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è</h4>
      
      <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—É—á–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Warm-up:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ learning rate</li>
        <li><strong>Learning rate scheduling:</strong> –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ</li>
        <li><strong>Gradient clipping:</strong> —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Mixed precision:</strong> —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å FP16</li>
      </ul>
      
      <p><strong>–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>Dropout:</strong> –≤ attention –∏ feed-forward —Å–ª–æ—è—Ö</li>
        <li><strong>Layer dropout:</strong> —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏–µ —Å–ª–æ–µ–≤</li>
        <li><strong>Weight decay:</strong> L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è</li>
        <li><strong>Label smoothing:</strong> —Å–º—è–≥—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç–æ–∫</li>
      </ul>
      
      <h4>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>Latency:</strong> –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –º–æ–¥–µ–ª–∏</li>
        <li><strong>Throughput:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</li>
        <li><strong>Memory usage:</strong> –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏</li>
        <li><strong>Energy consumption:</strong> —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ</li>
      </ul>
      
      <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>Accuracy drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º</li>
        <li><strong>Attention analysis:</strong> –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è</li>
        <li><strong>Calibration:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>Fairness metrics:</strong> —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      
      <p>Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –û–Ω–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:</p>
      
      <ul>
        <li><strong>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å:</strong> –µ–¥–∏–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ attention –≤–µ—Å–∞</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> state-of-the-art —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –∑–∞–¥–∞—á</li>
        <li><strong>–ì–∏–±–∫–æ—Å—Ç—å:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</li>
      </ul>
      
      <p>–ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –∏ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.</p>
      
      <p>–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –∏ —Å–∂–∞—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.</p>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–±–∏–Ω—ã</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é Transformer —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞–∑–æ–≤–æ–π —Ç—É—Ä–±–∏–Ω—ã, –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ (–≤–∏–±—Ä–∞—Ü–∏—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞) –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä).</p>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏:</strong> –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (24 –∫–∞–Ω–∞–ª–∞) + —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
        <li><strong>–ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:</strong> –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> –Ω–µ –º–µ–Ω–µ–µ 95%</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è attention –≤–µ—Å–æ–≤</li>
        <li><strong>–í—Ä–µ–º—è inference:</strong> –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥</li>
      </ul>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã</h4>
      <ul>
        <li><strong>Time Series Transformer:</strong> –∞–Ω–∞–ª–∏–∑ –≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Vision Transformer:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>Cross-modal Fusion:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π</li>
        <li><strong>Attention Visualization:</strong> –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
      <ol>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–∏–Ω—ã</li>
        <li>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è Time Series Transformer</li>
        <li>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è Vision Transformer</li>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π fusion –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</li>
        <li>–û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã</li>
        <li>–ê–Ω–∞–ª–∏–∑ attention –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è Transformer —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–±–∏–Ω—ã
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import cv2
from PIL import Image
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("–ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–ê–Ø TRANSFORMER –°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –¢–£–†–ë–ò–ù–´")
print("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
print("="*80)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
SEQUENCE_LENGTH = 64      # –î–ª–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
N_CHANNELS = 24          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (–≤–∏–±—Ä–∞—Ü–∏—è + —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
IMAGE_SIZE = 128         # –†–∞–∑–º–µ—Ä —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
N_SAMPLES = 5000         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤
N_CLASSES = 3            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Transformer
D_MODEL = 256            # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
N_HEADS = 8              # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ attention –≥–æ–ª–æ–≤
N_LAYERS = 6             # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤
FFN_DIM = 512            # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å feed-forward —Å–µ—Ç–∏

print(f"\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã: {SEQUENCE_LENGTH} √ó {N_CHANNELS}")
print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {IMAGE_SIZE} √ó {IMAGE_SIZE}")
print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {N_SAMPLES}")
print(f"  –ö–ª–∞—Å—Å—ã: {N_CLASSES} (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ)")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–∏–Ω—ã
def generate_multimodal_turbine_data(n_samples, seq_len, n_channels, img_size, failure_prob=0.2):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–±–∏–Ω—ã:
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (–≤–∏–±—Ä–∞—Ü–∏—è + —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
    - –¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    time_series_data = []
    thermal_images = []
    labels = []
    metadata = []
    
    class_names = ['–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ']
    
    for sample_idx in range(n_samples):
        if sample_idx % 500 == 0:
            print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–∞ {sample_idx}/{n_samples}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–±–∏–Ω—ã
        state_prob = np.random.random()
        if state_prob < 0.6:
            state = 0  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ
        elif state_prob < 0.85:
            state = 1  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        else:
            state = 2  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state == 0:  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ
            vibration_base = np.random.uniform(0.5, 2.0)
            temp_base = np.random.uniform(60, 80)
            thermal_anomaly = False
        elif state == 1:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            vibration_base = np.random.uniform(2.0, 4.0)
            temp_base = np.random.uniform(80, 100)
            thermal_anomaly = np.random.random() < 0.3
        else:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ
            vibration_base = np.random.uniform(4.0, 8.0)
            temp_base = np.random.uniform(100, 130)
            thermal_anomaly = True
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        time_series = np.zeros((seq_len, n_channels))
        
        for t in range(seq_len):
            # –í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (0-17)
            for ch in range(18):
                # –ë–∞–∑–æ–≤–∞—è –≤–∏–±—Ä–∞—Ü–∏—è —Å —Ç—Ä–µ–Ω–¥–æ–º
                base_vib = vibration_base * (1 + 0.1 * t / seq_len)
                
                # –ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                harmonic1 = 0.3 * np.sin(2 * np.pi * t / 20)  # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
                harmonic2 = 0.1 * np.sin(2 * np.pi * t / 7)   # –í—ã—Å—à–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞
                
                # –®—É–º
                noise = np.random.normal(0, 0.2)
                
                # –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if state == 2 and np.random.random() < 0.05:
                    spike = np.random.uniform(2, 5)
                else:
                    spike = 0
                
                time_series[t, ch] = base_vib + harmonic1 + harmonic2 + noise + spike
        
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (18-23)
            for ch in range(18, 24):
                # –ë–∞–∑–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å –º–µ–¥–ª–µ–Ω–Ω—ã–º —Ç—Ä–µ–Ω–¥–æ–º
                base_temp = temp_base + 0.5 * t / seq_len
                
                # –°—É—Ç–æ—á–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
                daily_cycle = 3 * np.sin(2 * np.pi * t / 48)
                
                # –®—É–º
                noise = np.random.normal(0, 1)
                
                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏
                if state >= 1 and np.random.random() < 0.02:
                    temp_spike = np.random.uniform(5, 15)
                else:
                    temp_spike = 0
                
                time_series[t, ch] = base_temp + daily_cycle + noise + temp_spike
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        thermal_image = generate_thermal_image(img_size, state, thermal_anomaly)
        
        time_series_data.append(time_series)
        thermal_images.append(thermal_image)
        labels.append(state)
        metadata.append({
            'sample_id': sample_idx,
            'state': class_names[state],
            'vibration_base': vibration_base,
            'temp_base': temp_base,
            'thermal_anomaly': thermal_anomaly
        })
    
    return np.array(time_series_data), np.array(thermal_images), np.array(labels), metadata

def generate_thermal_image(size, state, has_anomaly):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–±–∏–Ω—ã
    """
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = np.zeros((size, size))
    
    # –¶–µ–Ω—Ç—Ä —Ç—É—Ä–±–∏–Ω—ã
    center_x, center_y = size // 2, size // 2
    
    # –ë–∞–∑–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if state == 0:  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ
        base_temp = np.random.uniform(0.3, 0.5)
    elif state == 1:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        base_temp = np.random.uniform(0.5, 0.7)
    else:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ
        base_temp = np.random.uniform(0.7, 0.9)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç (—Ç—É—Ä–±–∏–Ω–∞ –≥–æ—Ä—è—á–µ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ)
    y, x = np.ogrid[:size, :size]
    distance = np.sqrt((x - center_x)**2 + (y - center_y)**2)
    max_distance = np.sqrt(2) * size / 2
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    norm_distance = distance / max_distance
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –ø–æ–ª–µ
    image = base_temp * (1 - 0.3 * norm_distance)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
    noise = np.random.normal(0, 0.05, (size, size))
    image += noise
    
    # –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if has_anomaly:
        n_hotspots = np.random.randint(1, 4)
        for _ in range(n_hotspots):
            hx = np.random.randint(size//4, 3*size//4)
            hy = np.random.randint(size//4, 3*size//4)
            hotspot_size = np.random.randint(5, 15)
            hotspot_intensity = np.random.uniform(0.8, 1.0)
            
            # –°–æ–∑–¥–∞–µ–º –≥–∞—É—Å—Å–æ–≤–æ –ø—è—Ç–Ω–æ
            y_hot, x_hot = np.ogrid[:size, :size]
            hotspot_mask = ((x_hot - hx)**2 + (y_hot - hy)**2) <= hotspot_size**2
            hotspot_distance = np.sqrt((x_hot - hx)**2 + (y_hot - hy)**2)
            hotspot_weight = np.exp(-hotspot_distance**2 / (2 * (hotspot_size/3)**2))
            
            image += hotspot_mask * hotspot_weight * hotspot_intensity
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    image = np.clip(image, 0, 1)
    
    return image

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–∏–Ω—ã...")
X_time, X_thermal, y, metadata = generate_multimodal_turbine_data(
    N_SAMPLES, SEQUENCE_LENGTH, N_CHANNELS, IMAGE_SIZE
)

print(f"\\n–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω:")
print(f"  –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã: {X_time.shape}")
print(f"  –¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {X_thermal.shape}")
print(f"  –ú–µ—Ç–∫–∏: {y.shape}")

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
unique, counts = np.unique(y, return_counts=True)
class_names = ['–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ']

print(f"\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
for i, (class_val, count) in enumerate(zip(unique, counts)):
    percentage = count / len(y) * 100
    print(f"  {class_names[class_val]}: {count} ({percentage:.1f}%)")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
print("\\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")

fig, axes = plt.subplots(3, 4, figsize=(16, 12))
fig.suptitle('–ü—Ä–∏–º–µ—Ä—ã –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–∏–Ω—ã', fontsize=16)

for state in range(3):
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    state_indices = np.where(y == state)[0]
    example_idx = state_indices[0]
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã - –≤–∏–±—Ä–∞—Ü–∏—è
    axes[state, 0].plot(X_time[example_idx, :, :6])
    axes[state, 0].set_title(f'{class_names[state]} - –í–∏–±—Ä–∞—Ü–∏—è')
    axes[state, 0].set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞')
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    axes[state, 1].plot(X_time[example_idx, :, 18:24])
    axes[state, 1].set_title(f'{class_names[state]} - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    axes[state, 1].set_ylabel('¬∞C')
    
    # –¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    im = axes[state, 2].imshow(X_thermal[example_idx], cmap='hot', vmin=0, vmax=1)
    axes[state, 2].set_title(f'{class_names[state]} - –¢–µ–ø–ª–æ–≤–∏–∑–æ—Ä')
    axes[state, 2].axis('off')
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    axes[state, 3].hist(X_thermal[example_idx].flatten(), bins=50, alpha=0.7)
    axes[state, 3].set_title(f'{class_names[state]} - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä')
    axes[state, 3].set_xlabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')

plt.tight_layout()
plt.show()

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
print("\\n" + "="*60)
print("–ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•")
print("="*60)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
print("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤...")
X_time_reshaped = X_time.reshape(-1, N_CHANNELS)
time_scaler = StandardScaler()
X_time_normalized = time_scaler.fit_transform(X_time_reshaped)
X_time_normalized = X_time_normalized.reshape(N_SAMPLES, SEQUENCE_LENGTH, N_CHANNELS)

print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
print(f"  –°—Ä–µ–¥–Ω–µ–µ: {X_time_normalized.mean():.3f}")
print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {X_time_normalized.std():.3f}")

# –¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã (0-1)
print(f"\\n–¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: [{X_thermal.min():.3f}, {X_thermal.max():.3f}]")

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_time_train, X_time_test, X_thermal_train, X_thermal_test, y_train, y_test = train_test_split(
    X_time_normalized, X_thermal, y, test_size=0.2, random_state=42, stratify=y
)

print(f"\\n–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_time_train.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_time_test.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")

# –°–æ–∑–¥–∞–Ω–∏–µ Transformer –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
print("\\n" + "="*60)
print("–°–û–ó–î–ê–ù–ò–ï TRANSFORMER –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
print("="*60)

class MultiHeadAttention(layers.Layer):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Multi-Head Attention –º–µ—Ö–∞–Ω–∏–∑–º–∞
    """
    def __init__(self, d_model, num_heads):
        super(MultiHeadAttention, self).__init__()
        self.num_heads = num_heads
        self.d_model = d_model
        
        assert d_model % self.num_heads == 0
        
        self.depth = d_model // self.num_heads
        
        self.wq = layers.Dense(d_model)
        self.wk = layers.Dense(d_model)
        self.wv = layers.Dense(d_model)
        
        self.dense = layers.Dense(d_model)
    
    def split_heads(self, x, batch_size):
        """–†–∞–∑–¥–µ–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –Ω–∞ (num_heads, depth)"""
        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))
        return tf.transpose(x, perm=[0, 2, 1, 3])
    
    def call(self, v, k, q, mask=None):
        batch_size = tf.shape(q)[0]
        
        q = self.wq(q)
        k = self.wk(k)
        v = self.wv(v)
        
        q = self.split_heads(q, batch_size)
        k = self.split_heads(k, batch_size)
        v = self.split_heads(v, batch_size)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ attention
        scaled_attention, attention_weights = self.scaled_dot_product_attention(q, k, v, mask)
        
        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])
        
        concat_attention = tf.reshape(scaled_attention, (batch_size, -1, self.d_model))
        
        output = self.dense(concat_attention)
        
        return output, attention_weights
    
    def scaled_dot_product_attention(self, q, k, v, mask):
        """–í—ã—á–∏—Å–ª—è–µ—Ç attention –≤–µ—Å–∞"""
        matmul_qk = tf.matmul(q, k, transpose_b=True)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        dk = tf.cast(tf.shape(k)[-1], tf.float32)
        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏
        if mask is not None:
            scaled_attention_logits += (mask * -1e9)
        
        # Softmax
        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)
        
        output = tf.matmul(attention_weights, v)
        
        return output, attention_weights

class TransformerBlock(layers.Layer):
    """
    –ë–ª–æ–∫ Transformer —Å multi-head attention –∏ feed-forward —Å–µ—Ç—å—é
    """
    def __init__(self, d_model, num_heads, dff, rate=0.1):
        super(TransformerBlock, self).__init__()
        
        self.mha = MultiHeadAttention(d_model, num_heads)
        self.ffn = self.point_wise_feed_forward_network(d_model, dff)
        
        self.layernorm1 = layers.LayerNormalization(epsilon=1e-6)
        self.layernorm2 = layers.LayerNormalization(epsilon=1e-6)
        
        self.dropout1 = layers.Dropout(rate)
        self.dropout2 = layers.Dropout(rate)
    
    def point_wise_feed_forward_network(self, d_model, dff):
        return tf.keras.Sequential([
            layers.Dense(dff, activation='relu'),
            layers.Dense(d_model)
        ])
    
    def call(self, x, training, mask=None):
        attn_output, attention_weights = self.mha(x, x, x, mask)
        attn_output = self.dropout1(attn_output, training=training)
        out1 = self.layernorm1(x + attn_output)
        
        ffn_output = self.ffn(out1)
        ffn_output = self.dropout2(ffn_output, training=training)
        out2 = self.layernorm2(out1 + ffn_output)
        
        return out2, attention_weights

def positional_encoding(position, d_model):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    angle_rads = np.arange(position)[:, np.newaxis] / np.power(10000, (2 * (np.arange(d_model)[np.newaxis, :] // 2)) / np.float32(d_model))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º sin –∫ —á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º
    angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º cos –∫ –Ω–µ—á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º
    angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])
    
    pos_encoding = angle_rads[np.newaxis, ...]
    
    return tf.cast(pos_encoding, dtype=tf.float32)

# Time Series Transformer
def create_time_series_transformer(seq_len, n_channels, d_model, num_heads, num_layers, dff):
    """
    –°–æ–∑–¥–∞–µ—Ç Transformer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    """
    inputs = layers.Input(shape=(seq_len, n_channels))
    
    # –ü—Ä–æ–µ–∫—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
    x = layers.Dense(d_model)(inputs)
    
    # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    pos_encoding = positional_encoding(seq_len, d_model)
    x += pos_encoding[:, :seq_len, :]
    
    # –°—Ç–µ–∫ Transformer –±–ª–æ–∫–æ–≤
    attention_weights = []
    for i in range(num_layers):
        x, attn_weights = TransformerBlock(d_model, num_heads, dff)(x)
        attention_weights.append(attn_weights)
    
    # Global average pooling
    x = layers.GlobalAveragePooling1D()(x)
    
    # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
    outputs = layers.Dense(d_model, activation='relu')(x)
    
    model = keras.Model(inputs=inputs, outputs=outputs, name='time_series_transformer')
    
    return model

# Vision Transformer –¥–ª—è —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def create_vision_transformer(img_size, patch_size, d_model, num_heads, num_layers, dff):
    """
    –°–æ–∑–¥–∞–µ—Ç Vision Transformer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    inputs = layers.Input(shape=(img_size, img_size, 1))
    
    # Patch embedding
    num_patches = (img_size // patch_size) ** 2
    patch_dim = patch_size * patch_size
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π
    patches = layers.Reshape((num_patches, patch_dim))(
        tf.image.extract_patches(
            inputs,
            sizes=[1, patch_size, patch_size, 1],
            strides=[1, patch_size, patch_size, 1],
            rates=[1, 1, 1, 1],
            padding='VALID'
        )
    )
    
    # –ü—Ä–æ–µ–∫—Ü–∏—è –ø–∞—Ç—á–µ–π
    x = layers.Dense(d_model)(patches)
    
    # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    pos_encoding = positional_encoding(num_patches, d_model)
    x += pos_encoding[:, :num_patches, :]
    
    # –°—Ç–µ–∫ Transformer –±–ª–æ–∫–æ–≤
    attention_weights = []
    for i in range(num_layers):
        x, attn_weights = TransformerBlock(d_model, num_heads, dff)(x)
        attention_weights.append(attn_weights)
    
    # Global average pooling
    x = layers.GlobalAveragePooling1D()(x)
    
    # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
    outputs = layers.Dense(d_model, activation='relu')(x)
    
    model = keras.Model(inputs=inputs, outputs=outputs, name='vision_transformer')
    
    return model

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
print("–°–æ–∑–¥–∞–Ω–∏–µ Time Series Transformer...")
ts_transformer = create_time_series_transformer(
    SEQUENCE_LENGTH, N_CHANNELS, D_MODEL, N_HEADS, N_LAYERS, FFN_DIM
)

print("–°–æ–∑–¥–∞–Ω–∏–µ Vision Transformer...")
patch_size = 16
vit_transformer = create_vision_transformer(
    IMAGE_SIZE, patch_size, D_MODEL, N_HEADS, N_LAYERS, FFN_DIM
)

print("\\n–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã:")
print(f"  Time Series Transformer: {ts_transformer.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  Vision Transformer: {vit_transformer.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

# –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è fusion –º–æ–¥–µ–ª—å
def create_multimodal_fusion_model(ts_model, vit_model, d_model, n_classes):
    """
    –°–æ–∑–¥–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å —Å cross-modal attention
    """
    # –í—Ö–æ–¥—ã
    time_input = layers.Input(shape=(SEQUENCE_LENGTH, N_CHANNELS), name='time_series')
    thermal_input = layers.Input(shape=(IMAGE_SIZE, IMAGE_SIZE, 1), name='thermal_image')
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    ts_features = ts_model(time_input)
    vit_features = vit_model(thermal_input)
    
    # Reshape –¥–ª—è attention
    ts_features_reshaped = layers.Reshape((1, d_model))(ts_features)
    vit_features_reshaped = layers.Reshape((1, d_model))(vit_features)
    
    # Cross-modal attention
    # Time series attending to vision
    ts_to_vit, _ = MultiHeadAttention(d_model, N_HEADS)(
        vit_features_reshaped, vit_features_reshaped, ts_features_reshaped
    )
    
    # Vision attending to time series
    vit_to_ts, _ = MultiHeadAttention(d_model, N_HEADS)(
        ts_features_reshaped, ts_features_reshaped, vit_features_reshaped
    )
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    ts_enhanced = layers.Flatten()(ts_to_vit)
    vit_enhanced = layers.Flatten()(vit_to_ts)
    
    # Concatenation fusion
    fused_features = layers.concatenate([ts_features, vit_features, ts_enhanced, vit_enhanced])
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ–∏
    x = layers.Dense(512, activation='relu')(fused_features)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.3)(x)
    
    x = layers.Dense(256, activation='relu')(x)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.2)(x)
    
    # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
    outputs = layers.Dense(n_classes, activation='softmax', name='classification')(x)
    
    model = keras.Model(inputs=[time_input, thermal_input], outputs=outputs, name='multimodal_transformer')
    
    return model

# –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
print("\\n–°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π fusion –º–æ–¥–µ–ª–∏...")
multimodal_model = create_multimodal_fusion_model(ts_transformer, vit_transformer, D_MODEL, N_CLASSES)

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏
multimodal_model.compile(
    optimizer=keras.optimizers.Adam(learning_rate=0.0001),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

print("\\n–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:")
multimodal_model.summary()

total_params = multimodal_model.count_params()
print(f"\\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–û–ë–£–ß–ï–ù–ò–ï –ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò")
print("="*60)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
X_thermal_train_expanded = np.expand_dims(X_thermal_train, axis=-1)
X_thermal_test_expanded = np.expand_dims(X_thermal_test, axis=-1)

# Callbacks
callbacks = [
    keras.callbacks.EarlyStopping(
        monitor='val_accuracy',
        patience=15,
        restore_best_weights=True,
        verbose=1
    ),
    keras.callbacks.ReduceLROnPlateau(
        monitor='val_loss',
        factor=0.5,
        patience=8,
        min_lr=1e-7,
        verbose=1
    )
]

print("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π Transformer –º–æ–¥–µ–ª–∏...")

# –û–±—É—á–µ–Ω–∏–µ
history = multimodal_model.fit(
    [X_time_train, X_thermal_train_expanded], y_train,
    batch_size=16,
    epochs=50,
    validation_data=([X_time_test, X_thermal_test_expanded], y_test),
    callbacks=callbacks,
    verbose=1
)

print("\\n–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò")
print("="*60)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
y_pred_proba = multimodal_model.predict([X_time_test, X_thermal_test_expanded])
y_pred = np.argmax(y_pred_proba, axis=1)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
test_accuracy = (y_pred == y_test).mean()
print(f"–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {test_accuracy:.4f}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
print("\\n–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test, y_pred, target_names=class_names, digits=4))

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
print("\\n–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
cm = confusion_matrix(y_test, y_pred)
print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:")
print("           ", " ".join([f"{cls[:10]:>10}" for cls in class_names]))
for i, true_class in enumerate(class_names):
    print(f"{true_class[:10]:>10}", " ".join([f"{cm[i,j]:>10}" for j in range(len(class_names))]))

# –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
confidence_scores = np.max(y_pred_proba, axis=1)
print(f"\\n–ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
print(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_scores.mean():.4f}")
print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_scores.min():.4f}")
print(f"  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (<0.8): {np.sum(confidence_scores < 0.8)}")

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—è–º
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –í–ö–õ–ê–î–ê –ú–û–î–ê–õ–¨–ù–û–°–¢–ï–ô")
print("="*60)

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤...")
ts_only_model = keras.Model(
    inputs=ts_transformer.input,
    outputs=layers.Dense(N_CLASSES, activation='softmax')(ts_transformer.output)
)
ts_only_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ
ts_only_model.fit(X_time_train, y_train, epochs=10, verbose=0)
ts_only_accuracy = ts_only_model.evaluate(X_time_test, y_test, verbose=0)[1]

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
vit_only_model = keras.Model(
    inputs=vit_transformer.input,
    outputs=layers.Dense(N_CLASSES, activation='softmax')(vit_transformer.output)
)
vit_only_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ
vit_only_model.fit(X_thermal_train_expanded, y_train, epochs=10, verbose=0)
vit_only_accuracy = vit_only_model.evaluate(X_thermal_test_expanded, y_test, verbose=0)[1]

print(f"\\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
print(f"  –¢–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã: {ts_only_accuracy:.4f}")
print(f"  –¢–æ–ª—å–∫–æ —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä: {vit_only_accuracy:.4f}")
print(f"  –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: {test_accuracy:.4f}")
print(f"  –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç fusion: {test_accuracy - max(ts_only_accuracy, vit_only_accuracy):.4f}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è attention –≤–µ—Å–æ–≤
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó ATTENTION –ü–ê–¢–¢–ï–†–ù–û–í")
print("="*60)

def visualize_attention_patterns(model, time_data, thermal_data, sample_idx=0):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç attention –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
    """
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è attention –≤–µ—Å–æ–≤
    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    
    sample_time = time_data[sample_idx:sample_idx+1]
    sample_thermal = thermal_data[sample_idx:sample_idx+1]
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    prediction = model.predict([sample_time, sample_thermal])
    predicted_class = np.argmax(prediction)
    confidence = np.max(prediction)
    
    print(f"\\n–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑—Ü–∞ {sample_idx}:")
    print(f"  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {class_names[predicted_class]}")
    print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.4f}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    fig, axes = plt.subplots(2, 3, figsize=(15, 10))
    fig.suptitle(f'–ê–Ω–∞–ª–∏–∑ attention –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞ {sample_idx} ({class_names[predicted_class]})', fontsize=14)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã - –≤–∏–±—Ä–∞—Ü–∏—è
    axes[0, 0].plot(sample_time[0, :, :6])
    axes[0, 0].set_title('–í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã')
    axes[0, 0].set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞')
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    axes[0, 1].plot(sample_time[0, :, 18:24])
    axes[0, 1].set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã')
    axes[0, 1].set_ylabel('¬∞C')
    
    # –¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    im1 = axes[0, 2].imshow(sample_thermal[0, :, :, 0], cmap='hot')
    axes[0, 2].set_title('–¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    axes[0, 2].axis('off')
    plt.colorbar(im1, ax=axes[0, 2])
    
    # –ò–º–∏—Ç–∞—Ü–∏—è attention –≤–µ—Å–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ –º–æ–¥–µ–ª–∏)
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ
    time_attention = np.random.random(SEQUENCE_LENGTH)
    time_attention = time_attention / time_attention.sum()
    
    axes[1, 0].plot(time_attention)
    axes[1, 0].set_title('Temporal Attention Weights')
    axes[1, 0].set_ylabel('Attention Weight')
    axes[1, 0].set_xlabel('Time Step')
    
    # –ö–∞–Ω–∞–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ
    channel_attention = np.random.random(N_CHANNELS)
    channel_attention = channel_attention / channel_attention.sum()
    
    axes[1, 1].bar(range(N_CHANNELS), channel_attention)
    axes[1, 1].set_title('Channel Attention Weights')
    axes[1, 1].set_ylabel('Attention Weight')
    axes[1, 1].set_xlabel('Channel')
    
    # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    spatial_attention = np.random.random((IMAGE_SIZE//16, IMAGE_SIZE//16))
    spatial_attention = spatial_attention / spatial_attention.sum()
    
    im2 = axes[1, 2].imshow(spatial_attention, cmap='viridis')
    axes[1, 2].set_title('Spatial Attention (Patches)')
    axes[1, 2].axis('off')
    plt.colorbar(im2, ax=axes[1, 2])
    
    plt.tight_layout()
    plt.show()
    
    return prediction

# –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
print("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è attention –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤...")

for state in range(N_CLASSES):
    state_indices = np.where(y_test == state)[0]
    if len(state_indices) > 0:
        example_idx = state_indices[0]
        visualize_attention_patterns(
            multimodal_model, 
            X_time_test, 
            X_thermal_test_expanded, 
            example_idx
        )

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*60)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï")
print("="*60)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—É—Ä–±–∏–Ω—ã
turbine_power = 50  # –ú–í—Ç
electricity_price = 4.5  # —Ä—É–±/–∫–í—Ç¬∑—á
capacity_factor = 0.9
annual_hours = 8760

# –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
current_availability = 0.85  # 85% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
current_mtbf = 1500  # —á–∞—Å–æ–≤
current_mttr = 72    # —á–∞—Å–æ–≤
failure_cost_per_hour = turbine_power * 1000 * electricity_price * capacity_factor

print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–æ–≤–æ–π —Ç—É—Ä–±–∏–Ω—ã:")
print(f"  –ú–æ—â–Ω–æ—Å—Ç—å: {turbine_power} –ú–í—Ç")
print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ—è: {failure_cost_per_hour:,.0f} —Ä—É–±/—á–∞—Å")
print(f"  –¢–µ–∫—É—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {current_availability*100:.0f}%")
print(f"  MTBF: {current_mtbf} —á–∞—Å–æ–≤")
print(f"  MTTR: {current_mttr} —á–∞—Å–æ–≤")

# –¢–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏
annual_failures = annual_hours / current_mtbf
annual_downtime_hours = annual_failures * current_mttr
annual_downtime_cost = annual_downtime_hours * failure_cost_per_hour

print(f"\\n–¢–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏:")
print(f"  –û—Ç–∫–∞–∑–æ–≤ –≤ –≥–æ–¥: {annual_failures:.1f}")
print(f"  –ß–∞—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ—è –≤ –≥–æ–¥: {annual_downtime_hours:.0f}")
print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ—Å—Ç–æ–µ–≤: {annual_downtime_cost:,.0f} —Ä—É–±/–≥–æ–¥")

# –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
print(f"\\n–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è Transformer —Å–∏—Å—Ç–µ–º—ã:")

# 1. –†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
early_detection_improvement = 0.8  # 80% –ø—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ
planned_mttr = 24  # –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –±—ã—Å—Ç—Ä–µ–µ

# 2. –°–Ω–∏–∂–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥
false_alarm_reduction = 0.9  # 90% —Å–Ω–∏–∂–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥
current_false_alarms = 50  # –≤ –≥–æ–¥
false_alarm_cost = 8 * failure_cost_per_hour  # 8 —á–∞—Å–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

# 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
maintenance_optimization = 0.3  # 30% —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –¢–û
annual_maintenance_cost = 25_000_000  # —Ä—É–±

# –†–∞—Å—á–µ—Ç –≤—ã–≥–æ–¥
# –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤
emergency_downtime_reduction = annual_downtime_hours * early_detection_improvement
emergency_cost_savings = emergency_downtime_reduction * failure_cost_per_hour

# –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥
false_alarm_savings = current_false_alarms * false_alarm_reduction * false_alarm_cost

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¢–û
maintenance_savings = annual_maintenance_cost * maintenance_optimization

# –û–±—â–∏–µ –≤—ã–≥–æ–¥—ã
total_annual_benefits = emergency_cost_savings + false_alarm_savings + maintenance_savings

print(f"\\n1. –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤:")
print(f"   –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–Ω—ã–µ —á–∞—Å—ã –ø—Ä–æ—Å—Ç–æ—è: {emergency_downtime_reduction:.0f}")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {emergency_cost_savings:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n2. –°–Ω–∏–∂–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥:")
print(f"   –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–Ω—ã–µ –ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏: {current_false_alarms * false_alarm_reduction:.0f}")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {false_alarm_savings:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:")
print(f"   –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –¢–û: {maintenance_optimization*100:.0f}%")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {maintenance_savings:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n–û–±—â–∏–µ –≤—ã–≥–æ–¥—ã: {total_annual_benefits:,.0f} —Ä—É–±/–≥–æ–¥")

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç
development_cost = 18_000_000      # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Transformer —Å–∏—Å—Ç–µ–º—ã
hardware_cost = 15_000_000         # –°–µ—Ä–≤–µ—Ä—ã, GPU, –¥–∞—Ç—á–∏–∫–∏
integration_cost = 5_000_000       # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA
training_cost = 2_000_000          # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
total_project_cost = development_cost + hardware_cost + integration_cost + training_cost

# –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
annual_cloud_costs = 3_000_000     # –û–±–ª–∞—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
annual_maintenance = 4_000_000     # –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
annual_energy_costs = 2_000_000    # –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
total_annual_operating = annual_cloud_costs + annual_maintenance + annual_energy_costs

print(f"\\n–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
print(f"  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Transformer —Å–∏—Å—Ç–µ–º—ã: {development_cost:,.0f} —Ä—É–±")
print(f"  –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (GPU, —Å–µ—Ä–≤–µ—Ä—ã): {hardware_cost:,.0f} —Ä—É–±")
print(f"  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration_cost:,.0f} —Ä—É–±")
print(f"  –û–±—É—á–µ–Ω–∏–µ: {training_cost:,.0f} —Ä—É–±")
print(f"  –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_project_cost:,.0f} —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_annual_operating:,.0f} —Ä—É–±/–≥–æ–¥")

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
net_annual_benefit = total_annual_benefits - total_annual_operating
roi = (net_annual_benefit - total_project_cost) / total_project_cost * 100
payback_months = total_project_cost / (net_annual_benefit / 12)

print(f"\\n–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,.0f} —Ä—É–±")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# NPV —Ä–∞—Å—á–µ—Ç
discount_rate = 0.12
years = 7
npv = -total_project_cost
for year in range(1, years + 1):
    npv += net_annual_benefit / (1 + discount_rate) ** year

print(f"  NPV (7 –ª–µ—Ç, 12%): {npv:,.0f} —Ä—É–±")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print("\\n" + "="*60)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ")
print("="*60)

print("\\n1. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨:")
if test_accuracy >= 0.95:
    print("   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
else:
    print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏")

print("\\n2. –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´:")
print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
print("   - –î–∞—Ç—á–∏–∫–∏: 24-–∫–∞–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–±—Ä–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ + —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä")
print("   - –í—ã—á–∏—Å–ª–µ–Ω–∏—è: GPU –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è Transformer inference")
print("   - –•—Ä–∞–Ω–µ–Ω–∏–µ: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –≤ ClickHouse, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3")
print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: REST API –¥–ª—è SCADA —Å–∏—Å—Ç–µ–º")

print("\\n3. –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø:")
print("   –§–∞–∑–∞ 1 (3 –º–µ—Å—è—Ü–∞): –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
print("   –§–∞–∑–∞ 2 (2 –º–µ—Å—è—Ü–∞): –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
print("   –§–∞–∑–∞ 3 (2 –º–µ—Å—è—Ü–∞): –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
print("   –§–∞–∑–∞ 4 (1 –º–µ—Å—è—Ü): –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è")

print("\\n4. –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê TRANSFORMER:")
print("   - –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
print("   - –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è attention –≤–µ—Å–æ–≤")
print("   - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
print("   - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å: –æ–¥–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á")

print("\\n" + "="*80)
print("–ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–ê–Ø TRANSFORMER –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {test_accuracy:.1%}")
print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_annual_benefit:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months:.1f} –º–µ—Å—è—Ü–∞")
print("="*80)`
  },

  17: {
    title: "–ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π",
    duration: "140 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π</h3>
      <p>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã –º–æ–≥—É—Ç —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏:</p>
      <ul>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</strong> –≤—ã—è–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –±–µ–∑ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</strong> —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π</li>
        <li><strong>–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</strong> –≤—ã—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö</li>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö</li>
        <li><strong>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</strong> –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–µ—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–∫–∞–∑–æ–≤</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤—ã –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤</h3>
      
      <h4>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞</h4>
      
      <p>–ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä - —ç—Ç–æ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å, –æ–±—É—á–µ–Ω–Ω–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Å–≤–æ–π –≤—Ö–æ–¥ –Ω–∞ –≤—ã—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ (bottleneck).</p>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞:</strong></p>
      <ul>
        <li><strong>Encoder (–∫–æ–¥–∏—Ä–æ–≤—â–∏–∫):</strong> —Å–∂–∏–º–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ</li>
        <li><strong>Latent space (–ª–∞—Ç–µ–Ω—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ):</strong> —Å–∂–∞—Ç–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Decoder (–¥–µ–∫–æ–¥–∏—Ä–æ–≤—â–∏–∫):</strong> –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong></p>
      <pre><code>
Encoder: z = f_Œ∏(x)
Decoder: xÃÇ = g_œÜ(z)
Loss: L = ||x - xÃÇ||¬≤
      </code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>x:</strong> –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li><strong>z:</strong> –ª–∞—Ç–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ</li>
        <li><strong>xÃÇ:</strong> –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li><strong>Œ∏, œÜ:</strong> –ø–∞—Ä–∞–º–µ—Ç—Ä—ã encoder –∏ decoder</li>
      </ul>
      
      <h4>–¢–∏–ø—ã –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤</h4>
      
      <p><strong>1. Vanilla Autoencoder:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–∂–∞—Ç–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> –º–æ–∂–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ–±–æ–±—â–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>2. Denoising Autoencoder:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∑–∞—à—É–º–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —á–∏—Å—Ç—ã—Ö</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –±–æ–ª–µ–µ —Ä–æ–±–∞—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –æ—á–∏—Å—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É</li>
      </ul>
      
      <p><strong>3. Sparse Autoencoder:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> feature learning, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å</li>
      </ul>
      
      <p><strong>4. Contractive Autoencoder:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –º–∞–ª—ã–º –≤–æ–∑–º—É—â–µ–Ω–∏—è–º</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Ä–æ–±–∞—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h3>–ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π</h3>
      
      <h4>–ü—Ä–∏–Ω—Ü–∏–ø –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π</h4>
      
      <p>–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:</p>
      
      <ol>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</strong> –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä —É—á–∏—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ" –æ–±—Ä–∞–∑—Ü—ã</li>
        <li><strong>–í—ã—Å–æ–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–æ—Ö–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</li>
        <li><strong>–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</strong> –æ–±—Ä–∞–∑—Ü—ã —Å –æ—à–∏–±–∫–æ–π –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏</li>
      </ol>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏:</strong></p>
      
      <p><strong>1. Reconstruction Error:</strong></p>
      <pre><code>
RE(x) = ||x - xÃÇ||¬≤
      </code></pre>
      
      <p><strong>2. Mahalanobis Distance:</strong></p>
      <pre><code>
MD(x) = ‚àö((x - Œº)·µÄ Œ£‚Åª¬π (x - Œº))
      </code></pre>
      
      <p><strong>3. Latent Space Distance:</strong></p>
      <pre><code>
LD(x) = ||z - z_normal||¬≤
      </code></pre>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤:</strong></p>
      <ul>
        <li><strong>LSTM Autoencoder:</strong> –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>CNN Autoencoder:</strong> –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</li>
        <li><strong>Transformer Autoencoder:</strong> –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
      </ul>
      
      <p><strong>–î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</strong></p>
      <ul>
        <li><strong>Convolutional Autoencoder:</strong> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</li>
        <li><strong>U-Net Autoencoder:</strong> skip connections –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</li>
        <li><strong>Vision Transformer Autoencoder:</strong> patch-based –æ–±—Ä–∞–±–æ—Ç–∫–∞</li>
      </ul>
      
      <p><strong>–î–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>Multi-modal Autoencoder:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Cross-modal Autoencoder:</strong> –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –¥—Ä—É–≥–æ–π</li>
        <li><strong>Hierarchical Autoencoder:</strong> –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ</li>
      </ul>
      
      <h3>Variational Autoencoders (VAE)</h3>
      
      <h4>–ü—Ä–∏–Ω—Ü–∏–ø—ã VAE</h4>
      
      <p>Variational Autoencoder —Ä–∞—Å—à–∏—Ä—è–µ—Ç –æ–±—ã—á–Ω—ã–π –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä, –¥–æ–±–∞–≤–ª—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –æ—Ç–ª–∏—á–∏—è VAE:</strong></p>
      <ul>
        <li><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> encoder –≤—ã–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</li>
        <li><strong>Reparameterization trick:</strong> –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ backpropagation</li>
        <li><strong>KL-divergence —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong> –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</li>
        <li><strong>–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ VAE:</strong></p>
      
      <p><strong>Encoder (Recognition Model):</strong></p>
      <pre><code>
q_œÜ(z|x) = N(Œº_œÜ(x), œÉ¬≤_œÜ(x))
      </code></pre>
      
      <p><strong>Decoder (Generative Model):</strong></p>
      <pre><code>
p_Œ∏(x|z) = N(Œº_Œ∏(z), œÉ¬≤_Œ∏(z))
      </code></pre>
      
      <p><strong>Loss Function (ELBO):</strong></p>
      <pre><code>
L = E_q[log p_Œ∏(x|z)] - KL(q_œÜ(z|x) || p(z))
  = Reconstruction Loss + KL Regularization
      </code></pre>
      
      <p><strong>Reparameterization Trick:</strong></p>
      <pre><code>
z = Œº + œÉ ‚äô Œµ, –≥–¥–µ Œµ ~ N(0, I)
      </code></pre>
      
      <h4>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VAE –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:</strong></p>
      <ul>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è:</strong> –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏</li>
        <li><strong>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:</strong> –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã</li>
      </ul>
      
      <p><strong>2. –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Data augmentation:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞</li>
        <li><strong>–°–∏–º—É–ª—è—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</li>
      </ul>
      
      <p><strong>3. Uncertainty quantification:</strong></p>
      <ul>
        <li><strong>–ê–ª–µ–∞—Ç–æ—Ä–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å:</strong> —à—É–º –≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–≠–ø–∏—Å—Ç–µ–º–∏—á–µ—Å–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å:</strong> –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏</li>
        <li><strong>Confidence intervals:</strong> –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
      </ul>
      
      <h3>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</h3>
      
      <h4>Œ≤-VAE</h4>
      
      <p>Œ≤-VAE –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π VAE, –¥–æ–±–∞–≤–ª—è—è –≤–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç Œ≤ –∫ KL-divergence:</p>
      
      <pre><code>
L = E_q[log p_Œ∏(x|z)] - Œ≤¬∑KL(q_œÜ(z|x) || p(z))
      </code></pre>
      
      <p><strong>–≠—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π Œ≤:</strong></p>
      <ul>
        <li><strong>Œ≤ < 1:</strong> –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</li>
        <li><strong>Œ≤ = 1:</strong> —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π VAE</li>
        <li><strong>Œ≤ > 1:</strong> –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>Disentangled representations:</strong> —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–∞—Ä–∏–∞—Ü–∏–∏</li>
        <li><strong>Controllable generation:</strong> —É–ø—Ä–∞–≤–ª—è–µ–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Feature discovery:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
      </ul>
      
      <h4>Conditional VAE (CVAE)</h4>
      
      <p>CVAE —Ä–∞—Å—à–∏—Ä—è–µ—Ç VAE, –¥–æ–±–∞–≤–ª—è—è —É—Å–ª–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</p>
      
      <pre><code>
q_œÜ(z|x,c) = N(Œº_œÜ(x,c), œÉ¬≤_œÜ(x,c))
p_Œ∏(x|z,c) = N(Œº_Œ∏(z,c), œÉ¬≤_Œ∏(z,c))
      </code></pre>
      
      <p>–≥–¥–µ c - —É—Å–ª–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–ª–∞—Å—Å, —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞).</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–†–µ–∂–∏–º-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</li>
        <li><strong>Transfer learning:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–æ–≤—ã–º —É—Å–ª–æ–≤–∏—è–º</li>
      </ul>
      
      <h4>Adversarial Autoencoders (AAE)</h4>
      
      <p>AAE –∏—Å–ø–æ–ª—å–∑—É–µ—Ç adversarial training –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:</p>
      
      <ul>
        <li><strong>Generator:</strong> encoder + decoder</li>
        <li><strong>Discriminator:</strong> —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∞—Ç–µ–Ω—Ç–Ω—ã–µ –∫–æ–¥—ã</li>
        <li><strong>Adversarial loss:</strong> –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å prior</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ AAE:</strong></p>
      <ul>
        <li><strong>–ì–∏–±–∫–æ—Å—Ç—å prior:</strong> –ª—é–±–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</li>
        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:</strong> –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ KL collapse</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</strong> –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
      </ul>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</h3>
      
      <h4>–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</h4>
      
      <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞:</strong></p>
      <ul>
        <li><strong>–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:</strong> –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li><strong>–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏:</strong> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</strong> –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ inference –≤—Ä–µ–º—è</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:</strong> –Ω–∞–ª–∏—á–∏–µ —à—É–º–∞, –ø—Ä–æ–ø—É—Å–∫–æ–≤, –≤—ã–±—Ä–æ—Å–æ–≤</li>
      </ul>
      
      <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ:</strong></p>
      
      <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr>
          <th>–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö</th>
          <th>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</th>
          <th>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</th>
        </tr>
        <tr>
          <td>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã</td>
          <td>LSTM/GRU Autoencoder</td>
          <td>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</td>
        </tr>
        <tr>
          <td>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</td>
          <td>Convolutional Autoencoder</td>
          <td>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</td>
        </tr>
        <tr>
          <td>–¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</td>
          <td>Dense Autoencoder</td>
          <td>–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ</td>
          <td>Multi-modal VAE</td>
          <td>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤</td>
        </tr>
        <tr>
          <td>–í—ã—Å–æ–∫–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–µ</td>
          <td>Hierarchical Autoencoder</td>
          <td>–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Å–∂–∞—Ç–∏–µ</td>
        </tr>
      </table>
      
      <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h4>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong></p>
      
      <p><strong>1. –†–∞–∑–º–µ—Ä –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π:</strong> –ø–æ—Ç–µ—Ä—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–ª–æ—Ö–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</li>
        <li><strong>–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:</strong> –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ, –ø–ª–æ—Ö–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ</li>
        <li><strong>–ü—Ä–∞–≤–∏–ª–æ –±–æ–ª—å—à–æ–≥–æ –ø–∞–ª—å—Ü–∞:</strong> 10-50% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤—Ö–æ–¥–∞</li>
      </ul>
      
      <p><strong>2. Learning rate:</strong></p>
      <ul>
        <li><strong>Encoder –∏ decoder:</strong> –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ learning rates</li>
        <li><strong>Adaptive scheduling:</strong> —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Warm-up:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ</li>
      </ul>
      
      <p><strong>3. Regularization:</strong></p>
      <ul>
        <li><strong>Dropout:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Batch normalization:</strong> —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Weight decay:</strong> L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤</li>
      </ul>
      
      <h4>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã:</strong></p>
      
      <p><strong>1. Percentile-based threshold:</strong></p>
      <pre><code>
threshold = percentile(reconstruction_errors, 95)
      </code></pre>
      
      <p><strong>2. Standard deviation-based:</strong></p>
      <pre><code>
threshold = mean + k * std, –≥–¥–µ k = 2-3
      </code></pre>
      
      <p><strong>3. Isolation Forest:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ reconstruction errors</strong></li>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞</strong></li>
        <li><strong>–†–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å –∫ –≤—ã–±—Ä–æ—Å–∞–º</strong></li>
      </ul>
      
      <p><strong>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏:</strong></p>
      <ul>
        <li><strong>Sliding window:</strong> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –ø–æ —Å–∫–æ–ª—å–∑—è—â–µ–º—É –æ–∫–Ω—É</li>
        <li><strong>Seasonal adjustment:</strong> —É—á–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π</li>
        <li><strong>Contextual thresholds:</strong> —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† –ò–°–û 13374-2016 "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω"</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</strong></p>
      <ul>
        <li><strong>–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</strong> 24/7 —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º</li>
        <li><strong>–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</strong> –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</li>
        <li><strong>–¢—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞:</strong> —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞–º:</strong></p>
      <ul>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ drift:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π:</strong> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏</li>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π</li>
        <li><strong>–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º</li>
      </ul>
      
      <h4>–ì–û–°–¢ 27.002-2015 "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —Ç–µ—Ö–Ω–∏–∫–µ"</h4>
      
      <p><strong>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã P(t)</strong></li>
        <li><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤ Œª(t)</strong></li>
        <li><strong>–°—Ä–µ–¥–Ω—è—è –Ω–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–æ –æ—Ç–∫–∞–∑–∞ MTBF</strong></li>
        <li><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ K_–≥</strong></li>
      </ul>
      
      <p><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞–º–∏:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ P(t):</strong> –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>–û—Ü–µ–Ω–∫–∞ Œª(t):</strong> –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–æ–≤</li>
        <li><strong>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ MTBF:</strong> —á–µ—Ä–µ–∑ —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ</li>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ K_–≥:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–≤</li>
      </ul>
      
      <h4>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è</h4>
      
      <p><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –ë–∞–π–∫–∞–ª:</strong> –¥–ª—è edge inference –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤</li>
        <li><strong>–ú–¶–°–¢ –≠–ª—å–±—Ä—É—Å:</strong> –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è</li>
        <li><strong>–ù–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ —á–∏–ø—ã:</strong> —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π inference</li>
        <li><strong>FPGA —Ä–µ—à–µ–Ω–∏—è:</strong> –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Astra Linux:</strong> —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</li>
        <li><strong>PostgresPro:</strong> —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫</li>
        <li><strong>ClickHouse:</strong> –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Tarantool:</strong> –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞</h3>
      
      <h4>–ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>Lambda –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li><strong>Batch layer:</strong> –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Speed layer:</strong> real-time –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π</li>
        <li><strong>Serving layer:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ batch –∏ speed —Å–ª–æ–µ–≤</li>
      </ul>
      
      <p><strong>Kappa –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong></p>
      <ul>
        <li><strong>–ï–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><strong>Event sourcing:</strong> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π</li>
        <li><strong>Reprocessing:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:</strong></p>
      <ul>
        <li><strong>Apache Kafka:</strong> –ø–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Apache Flink:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><strong>Apache Spark:</strong> batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Redis:</strong> –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
      </ul>
      
      <h4>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h4>
      
      <p><strong>–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>Model parallelism:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–∑–ª–∞–º</li>
        <li><strong>Data parallelism:</strong> –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Pipeline parallelism:</strong> –∫–æ–Ω–≤–µ–π–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</li>
        <li><strong>Ensemble methods:</strong> –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤</li>
      </ul>
      
      <p><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è inference:</strong></p>
      <ul>
        <li><strong>Model quantization:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è</li>
        <li><strong>Pruning:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–∂–Ω—ã—Ö –≤–µ—Å–æ–≤</li>
        <li><strong>Knowledge distillation:</strong> —Å–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>ONNX optimization:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</li>
      </ul>
      
      <h4>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>Reconstruction error distribution:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫</li>
        <li><strong>False positive rate:</strong> –¥–æ–ª—è –ª–æ–∂–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥</li>
        <li><strong>False negative rate:</strong> –¥–æ–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π</li>
        <li><strong>Precision/Recall:</strong> —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –ø–æ–ª–Ω–æ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ drift:</strong></p>
      <ul>
        <li><strong>Data drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Concept drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏—è "–Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏"</li>
        <li><strong>Model drift:</strong> –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏</li>
        <li><strong>Prediction drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</li>
      </ul>
      
      <p><strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>Trigger conditions:</strong> —É—Å–ª–æ–≤–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>Incremental learning:</strong> –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>A/B testing:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏</li>
        <li><strong>Rollback mechanism:</strong> –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</h3>
      
      <h4>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤</h4>
      
      <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>Unsupervised learning:</strong> –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö</li>
        <li><strong>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–æ–≤—ã–º —Ç–∏–ø–∞–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å:</strong> –ø—Ä–∏–º–µ–Ω–∏–º—ã –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ç–∫—É:</strong> –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–µ</li>
        <li><strong>–†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏—Ö –æ—Ç–∫–∞–∑–æ–≤</li>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª</li>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –∏ –ø–µ—Ä–µ–¥–µ–ª–æ–∫</li>
      </ul>
      
      <h4>–ú–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–∞ ROI</h4>
      
      <p><strong>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</strong></p>
      <ul>
        <li><strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</strong> –∫–æ–º–∞–Ω–¥–∞ ML –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤</li>
        <li><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> —Å–µ—Ä–≤–µ—Ä—ã, GPU, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–∏—Å—Ç–µ–º–∞–º</li>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:</strong> –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</li>
      </ul>
      
      <p><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤:</strong> —ç–∫–æ–Ω–æ–º–∏—è –æ—Ç –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–µ–≤</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞:</strong> —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</strong> –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–º—É –¢–û</li>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</h3>
      
      <h4>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–ß–∏—Å—Ç–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> –æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ "–Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö" –æ–±—Ä–∞–∑—Ü–∞—Ö</li>
        <li><strong>–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:</strong> –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤</li>
        <li><strong>–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º:</strong> –º–∏–Ω–∏–º—É–º 1000-10000 –æ–±—Ä–∞–∑—Ü–æ–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong></p>
      <ul>
        <li><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –µ–¥–∏–Ω–æ–º—É –º–∞—Å—à—Ç–∞–±—É</li>
        <li><strong>–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤:</strong> –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
        <li><strong>Feature engineering:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>Handling missing values:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
      </ul>
      
      <h4>–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>Time-based split:</strong> —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤</li>
        <li><strong>Cross-validation:</strong> –¥–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Holdout validation:</strong> –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞</li>
        <li><strong>Adversarial testing:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ edge cases</li>
      </ul>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏:</strong></p>
      <ul>
        <li><strong>Reconstruction error:</strong> –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</li>
        <li><strong>AUC-ROC:</strong> —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏</li>
        <li><strong>Precision@K:</strong> —Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ —Ç–æ–ø-K –∞–Ω–æ–º–∞–ª–∏–π</li>
        <li><strong>F1-score:</strong> –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã</li>
      </ul>
      
      <h4>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h4>
      
      <p><strong>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Feature-wise errors:</strong> –æ—à–∏–±–∫–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º</li>
        <li><strong>Temporal patterns:</strong> –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–Ω–æ–º–∞–ª–∏–π</li>
        <li><strong>Spatial patterns:</strong> –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>Correlation analysis:</strong> —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏</li>
      </ul>
      
      <p><strong>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>t-SNE/UMAP:</strong> –¥–≤—É–º–µ—Ä–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è –ª–∞—Ç–µ–Ω—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤</li>
        <li><strong>PCA analysis:</strong> –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</li>
        <li><strong>Interpolation:</strong> –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏</li>
        <li><strong>Clustering:</strong> –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      
      <p>–ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –û–Ω–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:</p>
      
      <ul>
        <li><strong>Unsupervised –æ–±—É—á–µ–Ω–∏–µ:</strong> —Ä–∞–±–æ—Ç–∞ –±–µ–∑ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö</li>
        <li><strong>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –∞–Ω–æ–º–∞–ª–∏–π —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –≤—ã—Å–æ–∫–∏–π ROI —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤</li>
      </ul>
      
      <p>–ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.</p>
      
      <p>–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö.</p>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.</p>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> 15 —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ—Å—Ç—å, –≤–∏–±—Ä–∞—Ü–∏—è)</li>
        <li><strong>–¢–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π:</strong> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞, –¥–µ—Ñ–µ–∫—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> False Positive Rate < 5%, True Positive Rate > 90%</li>
        <li><strong>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –∞–Ω–æ–º–∞–ª–∏–π</li>
      </ul>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h4>
      <ul>
        <li><strong>Dense Autoencoder:</strong> –±–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>LSTM Autoencoder:</strong> –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        <li><strong>Variational Autoencoder:</strong> –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ uncertainty quantification</li>
        <li><strong>Ensemble Autoencoder:</strong> –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
      <ol>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤</li>
        <li>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤</li>
        <li>–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏</li>
        <li>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li>–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import seaborn as sns
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("–°–ò–°–¢–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ê–ù–û–ú–ê–õ–ò–ô –í –ü–†–û–ò–ó–í–û–î–°–¢–í–ï –ü–û–î–®–ò–ü–ù–ò–ö–û–í")
print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤")
print("="*80)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
N_FEATURES = 15          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
SEQUENCE_LENGTH = 50     # –î–ª–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –¥–ª—è LSTM
N_NORMAL_SAMPLES = 8000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
N_ANOMALY_SAMPLES = 800  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
LATENT_DIM = 8          # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

print(f"\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {N_FEATURES}")
print(f"  –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {N_NORMAL_SAMPLES}")
print(f"  –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {N_ANOMALY_SAMPLES}")
print(f"  –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {LATENT_DIM}")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
def generate_bearing_production_data(n_normal, n_anomaly, n_features, seq_len):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤
    —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏
    """
    print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
    feature_names = [
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–ø–µ—á–∏', '–î–∞–≤–ª–µ–Ω–∏–µ_–ø—Ä–µ—Å—Å–æ–≤–∞–Ω–∏—è', '–°–∫–æ—Ä–æ—Å—Ç—å_–≤—Ä–∞—â–µ–Ω–∏—è',
        '–í–∏–±—Ä–∞—Ü–∏—è_X', '–í–∏–±—Ä–∞—Ü–∏—è_Y', '–í–∏–±—Ä–∞—Ü–∏—è_Z',
        '–¢–æ–∫_–¥–≤–∏–≥–∞—Ç–µ–ª—è', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ_–ø–∏—Ç–∞–Ω–∏—è', '–ß–∞—Å—Ç–æ—Ç–∞_—Å–µ—Ç–∏',
        '–†–∞—Å—Ö–æ–¥_–°–û–ñ', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_–°–û–ñ', '–î–∞–≤–ª–µ–Ω–∏–µ_–≥–∏–¥—Ä–æ—Å–∏—Å—Ç–µ–º—ã',
        '–°–∫–æ—Ä–æ—Å—Ç—å_–ø–æ–¥–∞—á–∏', '–£—Å–∏–ª–∏–µ_—Ä–µ–∑–∞–Ω–∏—è', '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å_–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏'
    ]
    
    # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
    normal_means = np.array([
        850,    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–µ—á–∏ (¬∞C)
        120,    # –î–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å—Å–æ–≤–∞–Ω–∏—è (–ú–ü–∞)
        1500,   # –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è (–æ–±/–º–∏–Ω)
        0.5,    # –í–∏–±—Ä–∞—Ü–∏—è X (–º–º/—Å)
        0.4,    # –í–∏–±—Ä–∞—Ü–∏—è Y (–º–º/—Å)
        0.3,    # –í–∏–±—Ä–∞—Ü–∏—è Z (–º–º/—Å)
        15.5,   # –¢–æ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ê)
        380,    # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è (–í)
        50.0,   # –ß–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ç–∏ (–ì—Ü)
        8.5,    # –†–∞—Å—Ö–æ–¥ –°–û–ñ (–ª/–º–∏–Ω)
        25,     # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –°–û–ñ (¬∞C)
        6.5,    # –î–∞–≤–ª–µ–Ω–∏–µ –≥–∏–¥—Ä–æ—Å–∏—Å—Ç–µ–º—ã (–ú–ü–∞)
        0.15,   # –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∞—á–∏ (–º–º/–æ–±)
        250,    # –£—Å–∏–ª–∏–µ —Ä–µ–∑–∞–Ω–∏—è (–ù)
        1.6     # –®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–º–∫–º)
    ])
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    normal_stds = normal_means * 0.05  # 5% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    normal_data = []
    normal_sequences = []
    
    for i in range(n_normal):
        if i % 1000 == 0:
            print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ {i}/{n_normal}")
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        base_values = np.random.normal(normal_means, normal_stds)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        sequence = np.zeros((seq_len, n_features))
        
        for t in range(seq_len):
            # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
            trend_factor = 1 + 0.02 * np.sin(2 * np.pi * t / seq_len)
            
            # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            noise_factor = 1 + 0.01 * np.random.normal(0, 1, n_features)
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∏–±—Ä–∞—Ü–∏—é
            if base_values[0] > normal_means[0]:  # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                base_values[3:6] *= 1.1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏
            
            # –°–∫–æ—Ä–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ–∫
            if base_values[2] > normal_means[2]:  # –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                base_values[6] *= 1.05  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–æ–∫–∞
            
            sequence[t] = base_values * trend_factor * noise_factor
        
        normal_data.append(base_values)
        normal_sequences.append(sequence)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    anomaly_data = []
    anomaly_sequences = []
    anomaly_types = []
    
    anomaly_type_names = [
        '–ü–µ—Ä–µ–≥—Ä–µ–≤_–ø–µ—á–∏', '–ò–∑–Ω–æ—Å_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞', '–†–∞–∑–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞',
        '–£—Ç–µ—á–∫–∞_–≥–∏–¥—Ä–æ—Å–∏—Å—Ç–µ–º—ã', '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å_–ø–∏—Ç–∞–Ω–∏—è'
    ]
    
    for i in range(n_anomaly):
        if i % 100 == 0:
            print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ {i}/{n_anomaly}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∞–Ω–æ–º–∞–ª–∏–∏
        anomaly_type = np.random.randint(0, 5)
        anomaly_types.append(anomaly_type)
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        base_values = np.random.normal(normal_means, normal_stds)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–æ–º–∞–ª–∏—é
        if anomaly_type == 0:  # –ü–µ—Ä–µ–≥—Ä–µ–≤ –ø–µ—á–∏
            base_values[0] *= np.random.uniform(1.2, 1.5)  # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            base_values[3:6] *= np.random.uniform(1.3, 1.8)  # –í—ã—Å–æ–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
            base_values[6] *= np.random.uniform(1.1, 1.3)  # –í—ã—Å–æ–∫–∏–π —Ç–æ–∫
            
        elif anomaly_type == 1:  # –ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            base_values[13] *= np.random.uniform(1.5, 2.5)  # –í—ã—Å–æ–∫–æ–µ —É—Å–∏–ª–∏–µ —Ä–µ–∑–∞–Ω–∏—è
            base_values[14] *= np.random.uniform(1.8, 3.0)  # –í—ã—Å–æ–∫–∞—è —à–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å
            base_values[6] *= np.random.uniform(1.2, 1.6)  # –í—ã—Å–æ–∫–∏–π —Ç–æ–∫
            
        elif anomaly_type == 2:  # –†–∞–∑–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
            base_values[3] *= np.random.uniform(2.0, 4.0)  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è X
            base_values[4] *= np.random.uniform(1.5, 2.5)  # –í—ã—Å–æ–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è Y
            base_values[5] *= np.random.uniform(1.2, 1.8)  # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è Z
            
        elif anomaly_type == 3:  # –£—Ç–µ—á–∫–∞ –≥–∏–¥—Ä–æ—Å–∏—Å—Ç–µ–º—ã
            base_values[11] *= np.random.uniform(0.3, 0.7)  # –ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
            base_values[12] *= np.random.uniform(0.5, 0.8)  # –ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∞—á–∏
            base_values[13] *= np.random.uniform(1.3, 1.8)  # –í—ã—Å–æ–∫–æ–µ —É—Å–∏–ª–∏–µ
            
        elif anomaly_type == 4:  # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è
            base_values[7] *= np.random.uniform(0.8, 1.2)  # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
            base_values[8] *= np.random.uniform(0.95, 1.05)  # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
            base_values[6] *= np.random.uniform(0.7, 1.4)  # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–æ–∫
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∞–Ω–æ–º–∞–ª–∏–µ–π
        sequence = np.zeros((seq_len, n_features))
        
        for t in range(seq_len):
            # –ê–Ω–æ–º–∞–ª–∏–∏ –º–æ–≥—É—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
            anomaly_progression = 1 + 0.1 * t / seq_len
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —à—É–º–∞ –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
            noise_factor = 1 + 0.05 * np.random.normal(0, 1, n_features)
            
            sequence[t] = base_values * anomaly_progression * noise_factor
        
        anomaly_data.append(base_values)
        anomaly_sequences.append(sequence)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    all_data = np.vstack([normal_data, anomaly_data])
    all_sequences = np.array(normal_sequences + anomaly_sequences)
    labels = np.hstack([np.zeros(n_normal), np.ones(n_anomaly)])
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    df = pd.DataFrame(all_data, columns=feature_names)
    df['anomaly'] = labels
    df['anomaly_type'] = ['normal'] * n_normal + [anomaly_type_names[t] for t in anomaly_types]
    
    return df, all_sequences, labels, feature_names

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
df, sequences, labels, feature_names = generate_bearing_production_data(
    N_NORMAL_SAMPLES, N_ANOMALY_SAMPLES, N_FEATURES, SEQUENCE_LENGTH
)

print(f"\\n–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω:")
print(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {df.shape}")
print(f"  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {sequences.shape}")
print(f"  –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {np.sum(labels == 0)}")
print(f"  –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {np.sum(labels == 1)}")

# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
print("="*60)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–æ–º–∞–ª–∏–π
anomaly_counts = df[df['anomaly'] == 1]['anomaly_type'].value_counts()
print("\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π:")
for anomaly_type, count in anomaly_counts.items():
    print(f"  {anomaly_type}: {count}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
print("\\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")

fig, axes = plt.subplots(3, 5, figsize=(20, 12))
fig.suptitle('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', fontsize=16)

for i, feature in enumerate(feature_names):
    row = i // 5
    col = i % 5
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    normal_data = df[df['anomaly'] == 0][feature]
    anomaly_data = df[df['anomaly'] == 1][feature]
    
    axes[row, col].hist(normal_data, bins=30, alpha=0.7, label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ', color='blue')
    axes[row, col].hist(anomaly_data, bins=30, alpha=0.7, label='–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ', color='red')
    axes[row, col].set_title(feature, fontsize=10)
    axes[row, col].legend()
    axes[row, col].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
print("\\n–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...")
correlation_matrix = df[feature_names].corr()

plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, 
            square=True, fmt='.2f', cbar_kws={'label': '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'})
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
plt.tight_layout()
plt.show()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
print("\\n" + "="*60)
print("–ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•")
print("="*60)

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
# –í–∞–∂–Ω–æ: –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
normal_indices = np.where(labels == 0)[0]
anomaly_indices = np.where(labels == 1)[0]

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ train/validation
normal_train_idx, normal_val_idx = train_test_split(
    normal_indices, test_size=0.2, random_state=42
)

# –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ, –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
test_indices = np.concatenate([normal_val_idx, anomaly_indices])

# –¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
X_train_tabular = df.iloc[normal_train_idx][feature_names].values
X_test_tabular = df.iloc[test_indices][feature_names].values
y_test = labels[test_indices]

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
X_train_sequences = sequences[normal_train_idx]
X_test_sequences = sequences[test_indices]

print(f"–†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞ (—Ç–∞–±–ª–∏—á–Ω—ã–µ): {X_train_tabular.shape}")
print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏): {X_train_sequences.shape}")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ (—Ç–∞–±–ª–∏—á–Ω—ã–µ): {X_test_tabular.shape}")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏): {X_test_sequences.shape}")
print(f"  –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏: {y_test.shape}")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
print("\\n–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")

# –î–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
scaler_tabular = StandardScaler()
X_train_tabular_scaled = scaler_tabular.fit_transform(X_train_tabular)
X_test_tabular_scaled = scaler_tabular.transform(X_test_tabular)

# –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
scaler_sequences = StandardScaler()
X_train_sequences_scaled = scaler_sequences.fit_transform(
    X_train_sequences.reshape(-1, N_FEATURES)
).reshape(X_train_sequences.shape)
X_test_sequences_scaled = scaler_sequences.transform(
    X_test_sequences.reshape(-1, N_FEATURES)
).reshape(X_test_sequences.shape)

print("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤
print("\\n" + "="*60)
print("–°–û–ó–î–ê–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–† –ê–í–¢–û–≠–ù–ö–û–î–ï–†–û–í")
print("="*60)

# 1. Dense Autoencoder
def create_dense_autoencoder(input_dim, latent_dim):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ã—á–Ω—ã–π –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä —Å –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–º–∏ —Å–ª–æ—è–º–∏
    """
    # Encoder
    encoder_input = layers.Input(shape=(input_dim,))
    x = layers.Dense(64, activation='relu')(encoder_input)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.2)(x)
    x = layers.Dense(32, activation='relu')(x)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.2)(x)
    encoded = layers.Dense(latent_dim, activation='relu', name='encoded')(x)
    
    # Decoder
    x = layers.Dense(32, activation='relu')(encoded)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.2)(x)
    x = layers.Dense(64, activation='relu')(x)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.2)(x)
    decoded = layers.Dense(input_dim, activation='linear')(x)
    
    autoencoder = keras.Model(encoder_input, decoded, name='dense_autoencoder')
    encoder = keras.Model(encoder_input, encoded, name='dense_encoder')
    
    return autoencoder, encoder

# 2. LSTM Autoencoder
def create_lstm_autoencoder(seq_len, n_features, latent_dim):
    """
    –°–æ–∑–¥–∞–µ—Ç LSTM –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    """
    # Encoder
    encoder_input = layers.Input(shape=(seq_len, n_features))
    x = layers.LSTM(64, return_sequences=True)(encoder_input)
    x = layers.Dropout(0.2)(x)
    x = layers.LSTM(32, return_sequences=False)(x)
    x = layers.Dropout(0.2)(x)
    encoded = layers.Dense(latent_dim, activation='relu', name='encoded')(x)
    
    # Decoder
    x = layers.RepeatVector(seq_len)(encoded)
    x = layers.LSTM(32, return_sequences=True)(x)
    x = layers.Dropout(0.2)(x)
    x = layers.LSTM(64, return_sequences=True)(x)
    x = layers.Dropout(0.2)(x)
    decoded = layers.TimeDistributed(layers.Dense(n_features))(x)
    
    autoencoder = keras.Model(encoder_input, decoded, name='lstm_autoencoder')
    encoder = keras.Model(encoder_input, encoded, name='lstm_encoder')
    
    return autoencoder, encoder

# 3. Variational Autoencoder
class VAELoss(keras.losses.Loss):
    """
    –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å –¥–ª—è VAE
    """
    def __init__(self, beta=1.0, **kwargs):
        super().__init__(**kwargs)
        self.beta = beta
    
    def call(self, y_true, y_pred):
        # Reconstruction loss
        reconstruction_loss = keras.losses.mse(y_true, y_pred)
        
        # KL divergence loss (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–¥–µ–ª–∏)
        kl_loss = -0.5 * tf.reduce_mean(
            1 + self.z_log_var - tf.square(self.z_mean) - tf.exp(self.z_log_var)
        )
        
        return reconstruction_loss + self.beta * kl_loss

def sampling(args):
    """
    Reparameterization trick –¥–ª—è VAE
    """
    z_mean, z_log_var = args
    batch = tf.shape(z_mean)[0]
    dim = tf.shape(z_mean)[1]
    epsilon = tf.random.normal(shape=(batch, dim))
    return z_mean + tf.exp(0.5 * z_log_var) * epsilon

def create_vae(input_dim, latent_dim, beta=1.0):
    """
    –°–æ–∑–¥–∞–µ—Ç Variational Autoencoder
    """
    # Encoder
    encoder_input = layers.Input(shape=(input_dim,))
    x = layers.Dense(64, activation='relu')(encoder_input)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.2)(x)
    x = layers.Dense(32, activation='relu')(x)
    x = layers.BatchNormalization()(x)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    z_mean = layers.Dense(latent_dim, name='z_mean')(x)
    z_log_var = layers.Dense(latent_dim, name='z_log_var')(x)
    
    # Sampling layer
    z = layers.Lambda(sampling, name='z')([z_mean, z_log_var])
    
    # Decoder
    decoder_input = layers.Input(shape=(latent_dim,))
    x = layers.Dense(32, activation='relu')(decoder_input)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.2)(x)
    x = layers.Dense(64, activation='relu')(x)
    x = layers.BatchNormalization()(x)
    x = layers.Dropout(0.2)(x)
    decoded = layers.Dense(input_dim, activation='linear')(x)
    
    # –ú–æ–¥–µ–ª–∏
    encoder = keras.Model(encoder_input, [z_mean, z_log_var, z], name='vae_encoder')
    decoder = keras.Model(decoder_input, decoded, name='vae_decoder')
    
    # VAE
    vae_output = decoder(encoder(encoder_input)[2])
    vae = keras.Model(encoder_input, vae_output, name='vae')
    
    # –î–æ–±–∞–≤–ª—è–µ–º KL loss
    kl_loss = -0.5 * tf.reduce_mean(
        1 + z_log_var - tf.square(z_mean) - tf.exp(z_log_var)
    )
    vae.add_loss(beta * kl_loss)
    
    return vae, encoder, decoder

# 4. Ensemble Autoencoder
def create_ensemble_autoencoder(input_dim, latent_dim, n_models=3):
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–Ω—Å–∞–º–±–ª—å –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤
    """
    models = []
    encoders = []
    
    for i in range(n_models):
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
        encoder_input = layers.Input(shape=(input_dim,))
        
        # –í–∞—Ä—å–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        if i == 0:
            x = layers.Dense(64, activation='relu')(encoder_input)
            x = layers.Dense(32, activation='relu')(x)
        elif i == 1:
            x = layers.Dense(80, activation='relu')(encoder_input)
            x = layers.Dense(40, activation='relu')(x)
            x = layers.Dense(20, activation='relu')(x)
        else:
            x = layers.Dense(48, activation='relu')(encoder_input)
            x = layers.Dense(24, activation='relu')(x)
        
        encoded = layers.Dense(latent_dim, activation='relu')(x)
        
        # Decoder (—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π)
        if i == 0:
            x = layers.Dense(32, activation='relu')(encoded)
            x = layers.Dense(64, activation='relu')(x)
        elif i == 1:
            x = layers.Dense(20, activation='relu')(encoded)
            x = layers.Dense(40, activation='relu')(x)
            x = layers.Dense(80, activation='relu')(x)
        else:
            x = layers.Dense(24, activation='relu')(encoded)
            x = layers.Dense(48, activation='relu')(x)
        
        decoded = layers.Dense(input_dim, activation='linear')(x)
        
        autoencoder = keras.Model(encoder_input, decoded, name=f'ensemble_ae_{i}')
        encoder = keras.Model(encoder_input, encoded, name=f'ensemble_enc_{i}')
        
        models.append(autoencoder)
        encoders.append(encoder)
    
    return models, encoders

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
print("–°–æ–∑–¥–∞–Ω–∏–µ Dense Autoencoder...")
dense_ae, dense_encoder = create_dense_autoencoder(N_FEATURES, LATENT_DIM)

print("–°–æ–∑–¥–∞–Ω–∏–µ LSTM Autoencoder...")
lstm_ae, lstm_encoder = create_lstm_autoencoder(SEQUENCE_LENGTH, N_FEATURES, LATENT_DIM)

print("–°–æ–∑–¥–∞–Ω–∏–µ Variational Autoencoder...")
vae, vae_encoder, vae_decoder = create_vae(N_FEATURES, LATENT_DIM, beta=1.0)

print("–°–æ–∑–¥–∞–Ω–∏–µ Ensemble Autoencoder...")
ensemble_models, ensemble_encoders = create_ensemble_autoencoder(N_FEATURES, LATENT_DIM)

print("\\n–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã:")
print(f"  Dense Autoencoder: {dense_ae.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  LSTM Autoencoder: {lstm_ae.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  VAE: {vae.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  Ensemble: {sum(model.count_params() for model in ensemble_models):,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
print("\\n" + "="*60)
print("–û–ë–£–ß–ï–ù–ò–ï –ê–í–¢–û–≠–ù–ö–û–î–ï–†–û–í")
print("="*60)

# –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
EPOCHS = 50
BATCH_SIZE = 32
PATIENCE = 10

# Callbacks
def get_callbacks(model_name):
    return [
        keras.callbacks.EarlyStopping(
            monitor='val_loss',
            patience=PATIENCE,
            restore_best_weights=True,
            verbose=0
        ),
        keras.callbacks.ReduceLROnPlateau(
            monitor='val_loss',
            factor=0.5,
            patience=5,
            min_lr=1e-7,
            verbose=0
        )
    ]

# 1. –û–±—É—á–µ–Ω–∏–µ Dense Autoencoder
print("\\n1. –û–±—É—á–µ–Ω–∏–µ Dense Autoencoder...")
dense_ae.compile(optimizer='adam', loss='mse', metrics=['mae'])

history_dense = dense_ae.fit(
    X_train_tabular_scaled, X_train_tabular_scaled,
    epochs=EPOCHS,
    batch_size=BATCH_SIZE,
    validation_split=0.2,
    callbacks=get_callbacks('dense'),
    verbose=0
)

print(f"Dense AE –æ–±—É—á–µ–Ω. –§–∏–Ω–∞–ª—å–Ω–∞—è loss: {history_dense.history['loss'][-1]:.4f}")

# 2. –û–±—É—á–µ–Ω–∏–µ LSTM Autoencoder
print("\\n2. –û–±—É—á–µ–Ω–∏–µ LSTM Autoencoder...")
lstm_ae.compile(optimizer='adam', loss='mse', metrics=['mae'])

history_lstm = lstm_ae.fit(
    X_train_sequences_scaled, X_train_sequences_scaled,
    epochs=EPOCHS,
    batch_size=BATCH_SIZE,
    validation_split=0.2,
    callbacks=get_callbacks('lstm'),
    verbose=0
)

print(f"LSTM AE –æ–±—É—á–µ–Ω. –§–∏–Ω–∞–ª—å–Ω–∞—è loss: {history_lstm.history['loss'][-1]:.4f}")

# 3. –û–±—É—á–µ–Ω–∏–µ VAE
print("\\n3. –û–±—É—á–µ–Ω–∏–µ Variational Autoencoder...")
vae.compile(optimizer='adam', loss='mse', metrics=['mae'])

history_vae = vae.fit(
    X_train_tabular_scaled, X_train_tabular_scaled,
    epochs=EPOCHS,
    batch_size=BATCH_SIZE,
    validation_split=0.2,
    callbacks=get_callbacks('vae'),
    verbose=0
)

print(f"VAE –æ–±—É—á–µ–Ω. –§–∏–Ω–∞–ª—å–Ω–∞—è loss: {history_vae.history['loss'][-1]:.4f}")

# 4. –û–±—É—á–µ–Ω–∏–µ Ensemble
print("\\n4. –û–±—É—á–µ–Ω–∏–µ Ensemble Autoencoder...")
ensemble_histories = []

for i, model in enumerate(ensemble_models):
    print(f"  –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {i+1}/3...")
    model.compile(optimizer='adam', loss='mse', metrics=['mae'])
    
    history = model.fit(
        X_train_tabular_scaled, X_train_tabular_scaled,
        epochs=EPOCHS,
        batch_size=BATCH_SIZE,
        validation_split=0.2,
        callbacks=get_callbacks(f'ensemble_{i}'),
        verbose=0
    )
    ensemble_histories.append(history)

print("Ensemble –æ–±—É—á–µ–Ω")

print("\\n–í—Å–µ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã!")

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π
print("\\n" + "="*60)
print("–û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ê–ù–û–ú–ê–õ–ò–ô")
print("="*60)

def calculate_reconstruction_error(model, X_test, X_train=None):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –æ—à–∏–±–∫—É —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    """
    X_pred = model.predict(X_test, verbose=0)
    
    if len(X_pred.shape) == 3:  # –î–ª—è LSTM (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        error = np.mean(np.square(X_test - X_pred), axis=(1, 2))
    else:  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤
        error = np.mean(np.square(X_test - X_pred), axis=1)
    
    return error

def evaluate_anomaly_detection(errors, y_true, model_name):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –∫–∞–∫ 95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å –æ—à–∏–±–æ–∫ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    normal_errors = errors[y_true == 0]
    threshold = np.percentile(normal_errors, 95)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_pred = (errors > threshold).astype(int)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    tn = np.sum((y_true == 0) & (y_pred == 0))
    fp = np.sum((y_true == 0) & (y_pred == 1))
    fn = np.sum((y_true == 1) & (y_pred == 0))
    tp = np.sum((y_true == 1) & (y_pred == 1))
    
    precision = tp / (tp + fp) if (tp + fp) > 0 else 0
    recall = tp / (tp + fn) if (tp + fn) > 0 else 0
    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0
    fpr = fp / (fp + tn) if (fp + tn) > 0 else 0
    
    # AUC-ROC
    try:
        auc = roc_auc_score(y_true, errors)
    except:
        auc = 0.5
    
    print(f"\\n{model_name}:")
    print(f"  –ü–æ—Ä–æ–≥: {threshold:.4f}")
    print(f"  Precision: {precision:.4f}")
    print(f"  Recall: {recall:.4f}")
    print(f"  F1-score: {f1:.4f}")
    print(f"  False Positive Rate: {fpr:.4f}")
    print(f"  AUC-ROC: {auc:.4f}")
    
    return {
        'threshold': threshold,
        'precision': precision,
        'recall': recall,
        'f1': f1,
        'fpr': fpr,
        'auc': auc,
        'errors': errors,
        'predictions': y_pred
    }

# –û—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
results = {}

# 1. Dense Autoencoder
print("\\n–û—Ü–µ–Ω–∫–∞ Dense Autoencoder...")
dense_errors = calculate_reconstruction_error(dense_ae, X_test_tabular_scaled)
results['Dense AE'] = evaluate_anomaly_detection(dense_errors, y_test, "Dense Autoencoder")

# 2. LSTM Autoencoder
print("\\n–û—Ü–µ–Ω–∫–∞ LSTM Autoencoder...")
lstm_errors = calculate_reconstruction_error(lstm_ae, X_test_sequences_scaled)
results['LSTM AE'] = evaluate_anomaly_detection(lstm_errors, y_test, "LSTM Autoencoder")

# 3. VAE
print("\\n–û—Ü–µ–Ω–∫–∞ Variational Autoencoder...")
vae_errors = calculate_reconstruction_error(vae, X_test_tabular_scaled)
results['VAE'] = evaluate_anomaly_detection(vae_errors, y_test, "Variational Autoencoder")

# 4. Ensemble
print("\\n–û—Ü–µ–Ω–∫–∞ Ensemble Autoencoder...")
ensemble_errors_list = []
for model in ensemble_models:
    errors = calculate_reconstruction_error(model, X_test_tabular_scaled)
    ensemble_errors_list.append(errors)

# –£—Å—Ä–µ–¥–Ω—è–µ–º –æ—à–∏–±–∫–∏ –∞–Ω—Å–∞–º–±–ª—è
ensemble_errors = np.mean(ensemble_errors_list, axis=0)
results['Ensemble'] = evaluate_anomaly_detection(ensemble_errors, y_test, "Ensemble Autoencoder")

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\\n" + "="*60)
print("–°–†–ê–í–ù–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†")
print("="*60)

comparison_df = pd.DataFrame({
    'Model': list(results.keys()),
    'Precision': [results[model]['precision'] for model in results.keys()],
    'Recall': [results[model]['recall'] for model in results.keys()],
    'F1-Score': [results[model]['f1'] for model in results.keys()],
    'FPR': [results[model]['fpr'] for model in results.keys()],
    'AUC-ROC': [results[model]['auc'] for model in results.keys()]
})

print("\\n–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:")
print(comparison_df.round(4).to_string(index=False))

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")

# ROC –∫—Ä–∏–≤—ã–µ
plt.figure(figsize=(15, 10))

# ROC –∫—Ä–∏–≤—ã–µ
plt.subplot(2, 3, 1)
for model_name in results.keys():
    fpr, tpr, _ = roc_curve(y_test, results[model_name]['errors'])
    auc = results[model_name]['auc']
    plt.plot(fpr, tpr, label=f'{model_name} (AUC = {auc:.3f})')

plt.plot([0, 1], [0, 1], 'k--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curves')
plt.legend()
plt.grid(True, alpha=0.3)

# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
plt.subplot(2, 3, 2)
for model_name in results.keys():
    errors = results[model_name]['errors']
    normal_errors = errors[y_test == 0]
    anomaly_errors = errors[y_test == 1]
    
    plt.hist(normal_errors, bins=30, alpha=0.5, label=f'{model_name} Normal')
    plt.hist(anomaly_errors, bins=30, alpha=0.5, label=f'{model_name} Anomaly')

plt.xlabel('Reconstruction Error')
plt.ylabel('Frequency')
plt.title('Error Distributions')
plt.legend()
plt.grid(True, alpha=0.3)

# –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
plt.subplot(2, 3, 3)
metrics = ['Precision', 'Recall', 'F1-Score', 'AUC-ROC']
x = np.arange(len(metrics))
width = 0.2

for i, model_name in enumerate(results.keys()):
    values = [
        results[model_name]['precision'],
        results[model_name]['recall'],
        results[model_name]['f1'],
        results[model_name]['auc']
    ]
    plt.bar(x + i*width, values, width, label=model_name)

plt.xlabel('Metrics')
plt.ylabel('Score')
plt.title('Performance Comparison')
plt.xticks(x + width*1.5, metrics)
plt.legend()
plt.grid(True, alpha=0.3)

# Confusion matrices
for i, model_name in enumerate(results.keys()):
    plt.subplot(2, 3, 4+i)
    
    y_pred = results[model_name]['predictions']
    cm = confusion_matrix(y_test, y_pred)
    
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'{model_name} Confusion Matrix')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')

plt.tight_layout()
plt.show()

# –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–†–ü–†–ï–¢–ò–†–£–ï–ú–û–°–¢–ò")
print("="*60)

def analyze_feature_importance(model, X_test, y_test, feature_names):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —á–µ—Ä–µ–∑ –æ—à–∏–±–∫–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    """
    X_pred = model.predict(X_test, verbose=0)
    
    if len(X_pred.shape) == 3:  # LSTM
        feature_errors = np.mean(np.square(X_test - X_pred), axis=(0, 1))
    else:  # Dense/VAE
        feature_errors = np.mean(np.square(X_test - X_pred), axis=0)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—à–∏–±–∫–∏
    feature_errors = feature_errors / np.sum(feature_errors)
    
    return feature_errors

# –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
best_model_name = comparison_df.loc[comparison_df['F1-Score'].idxmax(), 'Model']
print(f"\\n–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name}")

if best_model_name == 'Dense AE':
    best_model = dense_ae
    X_test_best = X_test_tabular_scaled
elif best_model_name == 'LSTM AE':
    best_model = lstm_ae
    X_test_best = X_test_sequences_scaled
elif best_model_name == 'VAE':
    best_model = vae
    X_test_best = X_test_tabular_scaled
else:  # Ensemble
    best_model = ensemble_models[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –∞–Ω—Å–∞–º–±–ª—è
    X_test_best = X_test_tabular_scaled

if best_model_name != 'LSTM AE':  # –î–ª—è LSTM –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–µ–µ
    feature_importance = analyze_feature_importance(best_model, X_test_best, y_test, feature_names)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    plt.figure(figsize=(12, 8))
    
    plt.subplot(2, 1, 1)
    sorted_idx = np.argsort(feature_importance)[::-1]
    plt.bar(range(len(feature_importance)), feature_importance[sorted_idx])
    plt.xticks(range(len(feature_importance)), 
               [feature_names[i] for i in sorted_idx], rotation=45)
    plt.title(f'–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ({best_model_name})')
    plt.ylabel('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å')
    plt.grid(True, alpha=0.3)
    
    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–æ–º–∞–ª–∏–π
    plt.subplot(2, 1, 2)
    test_df = df.iloc[test_indices].copy()
    test_df['reconstruction_error'] = results[best_model_name]['errors']
    
    anomaly_types = test_df[test_df['anomaly'] == 1]['anomaly_type'].unique()
    for anomaly_type in anomaly_types:
        errors = test_df[test_df['anomaly_type'] == anomaly_type]['reconstruction_error']
        plt.hist(errors, bins=20, alpha=0.7, label=anomaly_type)
    
    normal_errors = test_df[test_df['anomaly'] == 0]['reconstruction_error']
    plt.hist(normal_errors, bins=20, alpha=0.7, label='Normal')
    
    plt.xlabel('Reconstruction Error')
    plt.ylabel('Frequency')
    plt.title('–û—à–∏–±–∫–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–æ–º–∞–ª–∏–π')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    print("\\n–¢–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for i, idx in enumerate(sorted_idx[:5]):
        print(f"  {i+1}. {feature_names[idx]}: {feature_importance[idx]:.4f}")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*60)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï")
print("="*60)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
production_rate = 10000  # –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –≤ –¥–µ–Ω—å
working_days = 250       # —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É
defect_cost = 150        # —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞ (—Ä—É–±)
downtime_cost_per_hour = 500000  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ—è –ª–∏–Ω–∏–∏ (—Ä—É–±/—á–∞—Å)

# –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–±–µ–∑ —Å–∏—Å—Ç–µ–º—ã)
current_defect_rate = 0.03  # 3% –±—Ä–∞–∫–∞
current_unplanned_downtime = 48  # —á–∞—Å–æ–≤ –≤ –≥–æ–¥
current_detection_time = 4  # —á–∞—Å–∞ –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã

print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
print(f"  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {production_rate:,} –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤/–¥–µ–Ω—å")
print(f"  –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É: {working_days}")
print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è: {defect_cost:,} —Ä—É–±")
print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ—è: {downtime_cost_per_hour:,} —Ä—É–±/—á–∞—Å")

# –¢–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏
annual_production = production_rate * working_days
annual_defects = annual_production * current_defect_rate
annual_defect_cost = annual_defects * defect_cost
annual_downtime_cost = current_unplanned_downtime * downtime_cost_per_hour

print(f"\\n–¢–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏:")
print(f"  –ì–æ–¥–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {annual_production:,} –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤")
print(f"  –î–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –≤ –≥–æ–¥: {annual_defects:,.0f}")
print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –±—Ä–∞–∫–∞: {annual_defect_cost:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ—Å—Ç–æ–µ–≤: {annual_downtime_cost:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –û–±—â–∏–µ –ø–æ—Ç–µ—Ä–∏: {annual_defect_cost + annual_downtime_cost:,.0f} —Ä—É–±/–≥–æ–¥")

# –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
best_recall = results[best_model_name]['recall']
best_fpr = results[best_model_name]['fpr']

# –°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞
defect_reduction = best_recall * 0.8  # 80% –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç—Å—è
new_defect_rate = current_defect_rate * (1 - defect_reduction)
defect_savings = (current_defect_rate - new_defect_rate) * annual_production * defect_cost

# –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤
downtime_reduction = best_recall * 0.6  # 60% –ø—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ
new_downtime = current_unplanned_downtime * (1 - downtime_reduction)
downtime_savings = (current_unplanned_downtime - new_downtime) * downtime_cost_per_hour

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏
false_alarms_per_year = annual_production * best_fpr * 0.001  # 0.1% –æ—Ç FPR
false_alarm_cost = false_alarms_per_year * 2 * downtime_cost_per_hour / 24  # 2 —á–∞—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

# –û–±—â–∏–µ –≤—ã–≥–æ–¥—ã
total_savings = defect_savings + downtime_savings - false_alarm_cost

print(f"\\n–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã ({best_model_name}):")
print(f"  Recall: {best_recall:.1%}")
print(f"  False Positive Rate: {best_fpr:.1%}")

print(f"\\n1. –°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞:")
print(f"   –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –±—Ä–∞–∫–∞: {new_defect_rate:.1%}")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {defect_savings:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n2. –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤:")
print(f"   –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ–µ–≤: {new_downtime:.0f} —á–∞—Å–æ–≤/–≥–æ–¥")
print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {downtime_savings:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n3. –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏:")
print(f"   –õ–æ–∂–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –≤ –≥–æ–¥: {false_alarms_per_year:.0f}")
print(f"   –ó–∞—Ç—Ä–∞—Ç—ã: {false_alarm_cost:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n–û–±—â–∏–µ –≤—ã–≥–æ–¥—ã: {total_savings:,.0f} —Ä—É–±/–≥–æ–¥")

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç
development_cost = 8_000_000       # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
hardware_cost = 5_000_000          # –°–µ—Ä–≤–µ—Ä—ã, –¥–∞—Ç—á–∏–∫–∏
integration_cost = 3_000_000       # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA
training_cost = 1_000_000          # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
total_project_cost = development_cost + hardware_cost + integration_cost + training_cost

# –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
annual_maintenance = 2_000_000     # –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
annual_cloud_costs = 1_500_000     # –û–±–ª–∞—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
annual_energy = 800_000            # –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è
total_annual_operating = annual_maintenance + annual_cloud_costs + annual_energy

print(f"\\n–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
print(f"  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {development_cost:,.0f} —Ä—É–±")
print(f"  –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {hardware_cost:,.0f} —Ä—É–±")
print(f"  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {integration_cost:,.0f} —Ä—É–±")
print(f"  –û–±—É—á–µ–Ω–∏–µ: {training_cost:,.0f} —Ä—É–±")
print(f"  –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_project_cost:,.0f} —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_annual_operating:,.0f} —Ä—É–±/–≥–æ–¥")

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
net_annual_benefit = total_savings - total_annual_operating
roi = (net_annual_benefit - total_project_cost) / total_project_cost * 100
payback_months = total_project_cost / (net_annual_benefit / 12)

print(f"\\n–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,.0f} —Ä—É–±")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# NPV —Ä–∞—Å—á–µ—Ç
discount_rate = 0.12
years = 5
npv = -total_project_cost
for year in range(1, years + 1):
    npv += net_annual_benefit / (1 + discount_rate) ** year

print(f"  NPV (5 –ª–µ—Ç, 12%): {npv:,.0f} —Ä—É–±")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print("\\n" + "="*60)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ")
print("="*60)

print(f"\\n1. –í–´–ë–û–† –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {best_model_name}")
print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ª—É—á—à–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

print(f"\\n2. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:")
print(f"   - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö")
print(f"   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA —á–µ—Ä–µ–∑ OPC UA")
print(f"   - Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–æ—Ä–æ–≥–æ–º {results[best_model_name]['threshold']:.4f}")
print(f"   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü")

print(f"\\n3. –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø:")
print(f"   –§–∞–∑–∞ 1 (2 –º–µ—Å—è—Ü–∞): –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
print(f"   –§–∞–∑–∞ 2 (1 –º–µ—Å—è—Ü): –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
print(f"   –§–∞–∑–∞ 3 (1 –º–µ—Å—è—Ü): –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
print(f"   –§–∞–∑–∞ 4 (1 –º–µ—Å—è—Ü): –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è")

print(f"\\n4. –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
print(f"   - Unsupervised –æ–±—É—á–µ–Ω–∏–µ: –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π")
print(f"   - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º")
print(f"   - –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å: –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –∞–Ω–æ–º–∞–ª–∏–π")
print(f"   - –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ROI {roi:.0f}%")

print("\\n" + "="*80)
print("–°–ò–°–¢–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ê–ù–û–ú–ê–õ–ò–ô –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name}")
print(f"F1-Score: {results[best_model_name]['f1']:.1%}")
print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_annual_benefit:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months:.1f} –º–µ—Å—è—Ü–∞")
print("="*80)`
  },

  18: {
    title: "–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ",
    duration: "130 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–º –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–∏</h3>
      <p>–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è:</p>
      <ul>
        <li><strong>–°–∏–Ω—Ç–µ–∑–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML-–º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–°–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–¥–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö</li>
        <li><strong>–î–∏–∑–∞–π–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Ñ–æ—Ä–º</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é</li>
        <li><strong>–¶–∏—Ñ—Ä–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤—ã –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h3>
      
      <h4>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h4>
      
      <p>–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:</p>
      
      <p><strong>–ü–æ —Å–ø–æ—Å–æ–±—É –æ–±—É—á–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Explicit density models:</strong> —è–≤–Ω–æ –º–æ–¥–µ–ª–∏—Ä—É—é—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Implicit density models:</strong> –Ω–µ—è–≤–Ω–æ –∏–∑—É—á–∞—é—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sampling</li>
      </ul>
      
      <p><strong>–ü–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ:</strong></p>
      <ul>
        <li><strong>Autoregressive models:</strong> –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (PixelRNN, WaveNet)</li>
        <li><strong>Variational models:</strong> –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã (VAE)</li>
        <li><strong>Adversarial models:</strong> –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ-—Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (GAN)</li>
        <li><strong>Diffusion models:</strong> –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ (DDPM, DDIM)</li>
        <li><strong>Flow-based models:</strong> –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—â–∏–µ –ø–æ—Ç–æ–∫–∏ (RealNVP, Glow)</li>
      </ul>
      
      <p><strong>–ü–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> DCGAN, StyleGAN, DALL-E</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã:</strong> TimeGAN, C-RNN-GAN</li>
        <li><strong>–¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> CTGAN, TableGAN</li>
        <li><strong>–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ:</strong> CLIP, DALL-E 2</li>
      </ul>
      
      <h3>–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ-—Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (GAN)</h3>
      
      <h4>–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã GAN</h4>
      
      <p>GAN —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, –æ–±—É—á–∞—é—â–∏—Ö—Å—è –≤ —Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ:</p>
      
      <p><strong>Generator (–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä):</strong></p>
      <ul>
        <li><strong>–¶–µ–ª—å:</strong> —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ–æ—Ç–ª–∏—á–∏–º—ã–µ –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö</li>
        <li><strong>–í—Ö–æ–¥:</strong> —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º z ~ p(z)</li>
        <li><strong>–í—ã—Ö–æ–¥:</strong> —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ G(z)</li>
      </ul>
      
      <p><strong>Discriminator (–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä):</strong></p>
      <ul>
        <li><strong>–¶–µ–ª—å:</strong> —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li><strong>–í—Ö–æ–¥:</strong> —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ x –∏–ª–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ G(z)</li>
        <li><strong>–í—ã—Ö–æ–¥:</strong> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ</li>
      </ul>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong></p>
      <pre><code>
min_G max_D V(D,G) = E_x[log D(x)] + E_z[log(1 - D(G(z)))]
      </code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>G:</strong> –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä</li>
        <li><strong>D:</strong> –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä</li>
        <li><strong>x:</strong> —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
        <li><strong>z:</strong> —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º</li>
      </ul>
      
      <h4>–≠–≤–æ–ª—é—Ü–∏—è GAN –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</h4>
      
      <p><strong>1. Vanilla GAN (2014):</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏</li>
        <li><strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> mode collapse, training instability</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –ø—Ä–æ—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, proof of concept</li>
      </ul>
      
      <p><strong>2. DCGAN (2015):</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–ª–æ–∏, batch normalization</li>
        <li><strong>–£–ª—É—á—à–µ–Ω–∏—è:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è, –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞</li>
      </ul>
      
      <p><strong>3. WGAN (2017):</strong></p>
      <ul>
        <li><strong>–¢–µ–æ—Ä–∏—è:</strong> Wasserstein distance –≤–º–µ—Å—Ç–æ JS divergence</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, meaningful loss</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</li>
      </ul>
      
      <p><strong>4. StyleGAN (2018-2021):</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> style-based generator, progressive growing</li>
        <li><strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong> –∫–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç–∏–ª—è, –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –¥–∏–∑–∞–π–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>5. Conditional GAN:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
        <li><strong>–§–æ—Ä–º—É–ª–∞:</strong> G(z, c), D(x, c), –≥–¥–µ c - —É—Å–ª–æ–≤–∏–µ</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤/—Ä–µ–∂–∏–º–æ–≤</li>
      </ul>
      
      <h4>GAN –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (TimeGAN):</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> RNN-based generator –∏ discriminator</li>
        <li><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–∏–Ω—Ç–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤, —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
      </ul>
      
      <p><strong>–¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CTGAN):</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤</li>
        <li><strong>–†–µ—à–µ–Ω–∏—è:</strong> conditional sampling, mode-specific normalization</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–∏–Ω—Ç–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong></p>
      <ul>
        <li><strong>–ó–∞–¥–∞—á–∞:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> DCGAN —Å conditional generation</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞</li>
      </ul>
      
      <h3>–î–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏</h3>
      
      <h4>–ü—Ä–∏–Ω—Ü–∏–ø—ã –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h4>
      
      <p>–î–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞:</p>
      
      <p><strong>Forward process (–ø—Ä—è–º–æ–π –ø—Ä–æ—Ü–µ—Å—Å):</strong></p>
      <ul>
        <li><strong>–¶–µ–ª—å:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ –∫ –¥–∞–Ω–Ω—ã–º</li>
        <li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∏—Å—Ç—ã–π —à—É–º</li>
        <li><strong>–§–æ—Ä–º—É–ª–∞:</strong> q(x_t|x_{t-1}) = N(‚àö(1-Œ≤_t)x_{t-1}, Œ≤_t I)</li>
      </ul>
      
      <p><strong>Reverse process (–æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å):</strong></p>
      <ul>
        <li><strong>–¶–µ–ª—å:</strong> –æ–±—É—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—é —à—É–º–∞</li>
        <li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —à—É–º–∞</li>
        <li><strong>–§–æ—Ä–º—É–ª–∞:</strong> p_Œ∏(x_{t-1}|x_t) = N(Œº_Œ∏(x_t,t), Œ£_Œ∏(x_t,t))</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:</strong></p>
      <ul>
        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:</strong> –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ mode collapse</li>
        <li><strong>–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:</strong> state-of-the-art —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
        <li><strong>–ì–∏–±–∫–æ—Å—Ç—å:</strong> –ª–µ–≥–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∑–∞–¥–∞—á–∞–º</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å guided generation</li>
      </ul>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h4>
      
      <p><strong>DDPM (Denoising Diffusion Probabilistic Models):</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> U-Net —Å attention –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏</li>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ:</strong> –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —à—É–º–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>DDIM (Denoising Diffusion Implicit Models):</strong></p>
      <ul>
        <li><strong>–£–ª—É—á—à–µ–Ω–∏–µ:</strong> —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–º–µ–Ω—å—à–µ —à–∞–≥–æ–≤)</li>
        <li><strong>–î–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º:</strong> –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</li>
      </ul>
      
      <p><strong>Conditional Diffusion:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º —É—Å–ª–æ–≤–∏–π</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã:</strong> classifier guidance, classifier-free guidance</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏—è–º</li>
      </ul>
      
      <h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>–°–∏–Ω—Ç–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</h4>
      
      <p><strong>–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–†–µ–¥–∫–∏–µ —Å–æ–±—ã—Ç–∏—è:</strong> –∞–≤–∞—Ä–∏–∏, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–∞–∑—ã</li>
        <li><strong>–î–æ—Ä–æ–≥–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã:</strong> —Ä–∞–∑—Ä—É—à–∞—é—â–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è</li>
        <li><strong>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–î–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤:</strong> –º–∞–ª–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–†–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>Data augmentation:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞</li>
        <li><strong>Synthetic data generation:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Rare event simulation:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π</li>
        <li><strong>Privacy-preserving data sharing:</strong> –æ–±–º–µ–Ω —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏</li>
      </ul>
      
      <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h4>
      
      <p><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong></p>
      <ul>
        <li><strong>–¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> —Ç—Ä–µ—â–∏–Ω—ã, —Ü–∞—Ä–∞–ø–∏–Ω—ã, –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–∫–ª—é—á–µ–Ω–∏—è</li>
        <li><strong>–í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, —Ñ–æ—Ä–º—ã, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è</li>
        <li><strong>–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</strong></p>
      <pre><code>
Conditional DCGAN:
- Generator: noise + defect_type ‚Üí defect_image
- Discriminator: image + defect_type ‚Üí real/fake
- Training: real defect images + synthetic augmentation
      </code></pre>
      
      <h4>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤:</strong></p>
      <ul>
        <li><strong>–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞:</strong> —Å–∏–Ω—Ç–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑–Ω–æ—Å–∞</li>
        <li><strong>–û—Ç–∫–∞–∑—ã:</strong> —Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–∫–∞–∑–æ–≤</li>
        <li><strong>–°—Ü–µ–Ω–∞—Ä–∏–∏:</strong> —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>TimeGAN –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <pre><code>
Architecture:
- Embedder: real_sequence ‚Üí latent_sequence
- Recovery: latent_sequence ‚Üí reconstructed_sequence
- Generator: noise + condition ‚Üí synthetic_latent
- Discriminator: latent_sequence ‚Üí real/fake
      </code></pre>
      
      <h4>–î–∏–∑–∞–π–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</h4>
      
      <p><strong>–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω:</strong></p>
      <ul>
        <li><strong>–¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</strong> –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º</li>
        <li><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</li>
        <li><strong>–ú—É–ª—å—Ç–∏–æ–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</strong> –±–∞–ª–∞–Ω—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ –≤–µ—Å–∞</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong> —É—á–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π</li>
      </ul>
      
      <p><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong></p>
      <ul>
        <li><strong>–ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫</li>
        <li><strong>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:</strong> –≤—ã–±–æ—Ä —Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
        <li><strong>–°–∏–º—É–ª—è—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</li>
        <li><strong>–†–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å:</strong> –ø–æ–∏—Å–∫ —É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π</li>
      </ul>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</h3>
      
      <h4>–í—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</h4>
      
      <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞:</strong></p>
      
      <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr>
          <th>–ö—Ä–∏—Ç–µ—Ä–∏–π</th>
          <th>GAN</th>
          <th>VAE</th>
          <th>Diffusion</th>
          <th>Flow</th>
        </tr>
        <tr>
          <td>–ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</td>
          <td>–í—ã—Å–æ–∫–æ–µ</td>
          <td>–°—Ä–µ–¥–Ω–µ–µ</td>
          <td>–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ</td>
          <td>–í—ã—Å–æ–∫–æ–µ</td>
        </tr>
        <tr>
          <td>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è</td>
          <td>–ù–∏–∑–∫–∞—è</td>
          <td>–í—ã—Å–æ–∫–∞—è</td>
          <td>–í—ã—Å–æ–∫–∞—è</td>
          <td>–í—ã—Å–æ–∫–∞—è</td>
        </tr>
        <tr>
          <td>–°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</td>
          <td>–ë—ã—Å—Ç—Ä–∞—è</td>
          <td>–ë—ã—Å—Ç—Ä–∞—è</td>
          <td>–ú–µ–¥–ª–µ–Ω–Ω–∞—è</td>
          <td>–ë—ã—Å—Ç—Ä–∞—è</td>
        </tr>
        <tr>
          <td>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ</td>
          <td>–°—Ä–µ–¥–Ω–µ–µ</td>
          <td>–í—ã—Å–æ–∫–æ–µ</td>
          <td>–í—ã—Å–æ–∫–æ–µ</td>
          <td>–í—ã—Å–æ–∫–æ–µ</td>
        </tr>
        <tr>
          <td>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ—Å—Ç—å</td>
          <td>–°—Ä–µ–¥–Ω—è—è</td>
          <td>–í—ã—Å–æ–∫–∞—è</td>
          <td>–í—ã—Å–æ–∫–∞—è</td>
          <td>–°—Ä–µ–¥–Ω—è—è</td>
        </tr>
      </table>
      
      <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É:</strong></p>
      <ul>
        <li><strong>GAN:</strong> –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</li>
        <li><strong>VAE:</strong> –∫–æ–≥–¥–∞ –≤–∞–∂–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å</li>
        <li><strong>Diffusion:</strong> –∫–æ–≥–¥–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–Ω–æ, –≤—Ä–µ–º—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ</li>
        <li><strong>Flow:</strong> –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ —Ç–æ—á–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h4>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h4>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</strong></p>
      
      <p><strong>1. Inception Score (IS):</strong></p>
      <pre><code>
IS = exp(E_x[KL(p(y|x) || p(y))])
      </code></pre>
      <ul>
        <li><strong>–ò–∑–º–µ—Ä—è–µ—Ç:</strong> –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ</li>
        <li><strong>–î–∏–∞–ø–∞–∑–æ–Ω:</strong> –≤—ã—à–µ = –ª—É—á—à–µ</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <p><strong>2. Fr√©chet Inception Distance (FID):</strong></p>
      <pre><code>
FID = ||Œº_r - Œº_g||¬≤ + Tr(Œ£_r + Œ£_g - 2(Œ£_r Œ£_g)^(1/2))
      </code></pre>
      <ul>
        <li><strong>–ò–∑–º–µ—Ä—è–µ—Ç:</strong> —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏</li>
        <li><strong>–î–∏–∞–ø–∞–∑–æ–Ω:</strong> –Ω–∏–∂–µ = –ª—É—á—à–µ</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞</li>
      </ul>
      
      <p><strong>3. Precision and Recall:</strong></p>
      <ul>
        <li><strong>Precision:</strong> –¥–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤</li>
        <li><strong>Recall:</strong> –ø–æ–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∞–Ω–∞–ª–∏–∑ trade-off –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è</li>
      </ul>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤:</strong></p>
      
      <p><strong>1. Discriminative Score:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –æ–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ real/synthetic</li>
        <li><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</strong> 0.5 = –∏–¥–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</li>
      </ul>
      
      <p><strong>2. Predictive Score:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ú–µ—Ç—Ä–∏–∫–∞:</strong> MAE –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –Ω–∞ real/synthetic</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –¥–ª—è ML –∑–∞–¥–∞—á</li>
      </ul>
      
      <h4>–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º, Q-Q plots</li>
        <li><strong>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:</strong> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</li>
        <li><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã:</strong> Kolmogorov-Smirnov, Anderson-Darling</li>
        <li><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:</strong> –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å</li>
      </ul>
      
      <p><strong>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>–§–∏–∑–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–∞–º —Ñ–∏–∑–∏–∫–∏</li>
        <li><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</li>
        <li><strong>–í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:</strong> —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ downstream –∑–∞–¥–∞—á–∞—Ö</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† 57700.37-2021 "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏"</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –º–æ–¥–µ–ª—è–º:</strong></p>
      <ul>
        <li><strong>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º</li>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</li>
        <li><strong>–¢—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –º–æ–¥–µ–ª—è–º:</strong></p>
      <ul>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> –æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏:</strong> –æ–±–ª–∞—Å—Ç–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏</li>
        <li><strong>–í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <h4>152-–§–ó "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"</h4>
      
      <p><strong>–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</strong></p>
      <ul>
        <li><strong>–î–µ–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
        <li><strong>–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</strong> –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏</li>
        <li><strong>–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:</strong> –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ä–µ–∞–ª—å–Ω—ã–º</li>
        <li><strong>–ê—É–¥–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>DP-GAN:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é</li>
        <li><strong>Membership inference attacks:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ç–µ—á–∫–∏</li>
        <li><strong>Attribute inference attacks:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤</li>
        <li><strong>Privacy budget:</strong> —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h4>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è</h4>
      
      <p><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong></p>
      <ul>
        <li><strong>–°—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä—ã:</strong> –õ–æ–º–æ–Ω–æ—Å–æ–≤-2, –ñ–æ—Ä–µ—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>GPU –∫–ª–∞—Å—Ç–µ—Ä—ã:</strong> —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –±–∞–∑–µ –≠–ª—å–±—Ä—É—Å</li>
        <li><strong>–û–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong> –Ø–Ω–¥–µ–∫—Å.–û–±–ª–∞–∫–æ, VK Cloud –¥–ª—è inference</li>
        <li><strong>Edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> –ë–∞–π–∫–∞–ª-–ú –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è TensorFlow/PyTorch –ø–æ–¥ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</strong> –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã –¥–ª—è –≠–ª—å–±—Ä—É—Å –∏ –ë–∞–π–∫–∞–ª</li>
        <li><strong>–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</strong> PostgresPro –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML pipeline</li>
      </ul>
      
      <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞</h3>
      
      <h4>–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</h4>
      
      <p><strong>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>Data parallelism:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞—Ç—á–µ–π –ø–æ GPU</li>
        <li><strong>Model parallelism:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º</li>
        <li><strong>Pipeline parallelism:</strong> –∫–æ–Ω–≤–µ–π–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</li>
        <li><strong>Gradient accumulation:</strong> —ç–º—É–ª—è—Ü–∏—è –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–µ–π</li>
      </ul>
      
      <p><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏:</strong></p>
      <ul>
        <li><strong>MLflow:</strong> —Ç—Ä–µ–∫–∏–Ω–≥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
        <li><strong>Weights & Biases:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
        <li><strong>DVC:</strong> –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Kubeflow:</strong> –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è ML pipeline –≤ Kubernetes</li>
      </ul>
      
      <h4>–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è inference</h4>
      
      <p><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π:</strong></p>
      <ul>
        <li><strong>Quantization:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è</li>
        <li><strong>Pruning:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–∂–Ω—ã—Ö –≤–µ—Å–æ–≤</li>
        <li><strong>Knowledge distillation:</strong> —Å–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>ONNX optimization:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>Serving –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:</strong></p>
      <ul>
        <li><strong>TensorFlow Serving:</strong> –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π inference</li>
        <li><strong>TorchServe:</strong> serving –¥–ª—è PyTorch –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Triton Inference Server:</strong> –º—É–ª—å—Ç–∏—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤—ã–π serving</li>
        <li><strong>Custom solutions:</strong> —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</li>
      </ul>
      
      <h4>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>Generation quality:</strong> FID, IS, LPIPS –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>Diversity metrics:</strong> coverage, precision, recall</li>
        <li><strong>Consistency metrics:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</li>
        <li><strong>Business metrics:</strong> –≤–ª–∏—è–Ω–∏–µ –Ω–∞ downstream –∑–∞–¥–∞—á–∏</li>
      </ul>
      
      <p><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ drift:</strong></p>
      <ul>
        <li><strong>Data drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Model drift:</strong> –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</li>
        <li><strong>Concept drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</li>
        <li><strong>Adversarial drift:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏</li>
      </ul>
      
      <h3>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</h3>
      
      <h4>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h4>
      
      <p><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–µ:</strong></p>
      <ul>
        <li><strong>–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:</strong> –∑–∞–º–µ–Ω–∞ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤</li>
        <li><strong>–†–∞–∑–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–æ–∫</li>
        <li><strong>–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é</li>
        <li><strong>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é</li>
      </ul>
      
      <p><strong>–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ MVP</li>
        <li><strong>A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤</li>
        <li><strong>–°–∏–º—É–ª—è—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ edge cases</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è –≥–∏–ø–æ—Ç–µ–∑:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤</li>
      </ul>
      
      <p><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:</strong> –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö = –ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏</li>
        <li><strong>–†–µ–¥–∫–∏–µ —Å–æ–±—ã—Ç–∏—è:</strong> –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–µ—à—Ç–∞—Ç–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º</li>
        <li><strong>–†–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</strong> –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é</li>
      </ul>
      
      <h4>–ú–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–∞ ROI</h4>
      
      <p><strong>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</strong></p>
      <ul>
        <li><strong>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</strong> –∫–æ–º–∞–Ω–¥–∞ ML –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π</li>
        <li><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</strong> GPU –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:</strong> —Å–∏—Å—Ç–µ–º—ã –¥–ª—è serving –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</li>
        <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–∏—Å—Ç–µ–º–∞–º</li>
      </ul>
      
      <p><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤—ã–≥–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Å–±–æ—Ä –∏ —Ä–∞–∑–º–µ—Ç–∫—É</li>
        <li><strong>–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</strong> —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ time-to-market</li>
        <li><strong>–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> —É–ª—É—á—à–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
        <li><strong>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong> —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</h3>
      
      <h4>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–ß–∏—Å—Ç–æ—Ç–∞:</strong> —É–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤</li>
        <li><strong>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ:</strong> –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤</li>
        <li><strong>–ë–∞–ª–∞–Ω—Å:</strong> —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤</li>
        <li><strong>–†–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong></p>
      <ul>
        <li><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É</li>
        <li><strong>–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤</li>
        <li><strong>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –≥—Ä—É–ø–ø—ã</li>
      </ul>
      
      <h4>–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</h4>
      
      <p><strong>–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è GAN:</strong></p>
      <ul>
        <li><strong>Learning rates:</strong> —Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è G –∏ D</li>
        <li><strong>Training schedule:</strong> —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è G –∏ D</li>
        <li><strong>Regularization:</strong> spectral normalization, gradient penalty</li>
        <li><strong>Architecture choices:</strong> self-attention, progressive growing</li>
      </ul>
      
      <p><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Loss curves:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏</li>
        <li><strong>Generated samples:</strong> –≤–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>Metrics tracking:</strong> FID, IS, diversity metrics</li>
        <li><strong>Mode collapse detection:</strong> —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</li>
      </ul>
      
      <h4>–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h4>
      
      <p><strong>–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π</li>
        <li><strong>–í–∏–∑—É–∞–ª—å–Ω–∞—è:</strong> —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞</li>
        <li><strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ downstream –∑–∞–¥–∞—á–∞—Ö</li>
        <li><strong>–§–∏–∑–∏—á–µ—Å–∫–∞—è:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–∞–º –ø—Ä–∏—Ä–æ–¥—ã</li>
      </ul>
      
      <p><strong>Continuous validation:</strong></p>
      <ul>
        <li><strong>Automated testing:</strong> —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>A/B testing:</strong> —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline</li>
        <li><strong>User feedback:</strong> –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
        <li><strong>Performance monitoring:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      
      <p>–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</p>
      
      <ul>
        <li><strong>–°–∏–Ω—Ç–µ–∑ –¥–∞–Ω–Ω—ã—Ö:</strong> —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π</li>
        <li><strong>–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</strong> —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ</li>
      </ul>
      
      <p>–ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.</p>
      
      <p>–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º Transfer Learning –∏ Fine-tuning - –º–µ—Ç–æ–¥—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.</p>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ç–µ–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞. –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.</p>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> —Ç—Ä–µ—â–∏–Ω—ã, –ø–æ—Ä—ã, –Ω–µ–ø—Ä–æ–≤–∞—Ä—ã, –ø–æ–¥—Ä–µ–∑—ã, –≤–∫–ª—é—á–µ–Ω–∏—è</li>
        <li><strong>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</strong> 256x256 –ø–∏–∫—Å–µ–ª–µ–π</li>
        <li><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> FID < 50, IS > 3.0</li>
        <li><strong>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ:</strong> –º–∏–Ω–∏–º—É–º 1000 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∫–ª–∞—Å—Å</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h4>
      <ul>
        <li><strong>DCGAN:</strong> –±–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>Conditional GAN:</strong> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –¥–µ—Ñ–µ–∫—Ç–∞</li>
        <li><strong>WGAN-GP:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å gradient penalty</li>
        <li><strong>StyleGAN2:</strong> –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</li>
      </ul>
      
      <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
      <ol>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö GAN –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li>–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (FID, IS, –≤–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)</li>
        <li>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</li>
        <li>–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ downstream –∑–∞–¥–∞—á–µ</li>
        <li>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ç–µ–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import cv2
from PIL import Image, ImageDraw
import seaborn as sns
from scipy import linalg
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("–°–ò–°–¢–ï–ú–ê –°–ò–ù–¢–ï–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê –°–í–ê–†–ù–´–• –®–í–û–í")
print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
print("="*80)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
IMG_SIZE = 64  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
CHANNELS = 1   # Grayscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
LATENT_DIM = 100
BATCH_SIZE = 32
EPOCHS = 100
N_SAMPLES_PER_CLASS = 500  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

# –¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤
DEFECT_TYPES = [
    'normal',      # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —à–æ–≤
    'crack',       # –¢—Ä–µ—â–∏–Ω—ã
    'porosity',    # –ü–æ—Ä—ã
    'incomplete',  # –ù–µ–ø—Ä–æ–≤–∞—Ä—ã
    'undercut',    # –ü–æ–¥—Ä–µ–∑—ã
    'inclusion'    # –í–∫–ª—é—á–µ–Ω–∏—è
]

print(f"\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {IMG_SIZE}x{IMG_SIZE}")
print(f"  –ö–∞–Ω–∞–ª—ã: {CHANNELS}")
print(f"  –†–∞–∑–º–µ—Ä –ª–∞—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {LATENT_DIM}")
print(f"  –û–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å: {N_SAMPLES_PER_CLASS}")
print(f"  –¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤: {len(DEFECT_TYPES)}")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤
def generate_synthetic_weld_images(n_samples_per_class, img_size, defect_types):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤
    """
    print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤...")
    
    images = []
    labels = []
    
    for class_idx, defect_type in enumerate(defect_types):
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {defect_type}: {n_samples_per_class} –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        for i in range(n_samples_per_class):
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞
            img = np.ones((img_size, img_size), dtype=np.uint8) * 128
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞
            for y in range(img_size):
                for x in range(img_size):
                    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —à–≤–∞
                    center_distance = abs(x - img_size//2)
                    if center_distance < img_size//4:
                        base_intensity = 180 + np.random.normal(0, 10)
                    else:
                        base_intensity = 120 + np.random.normal(0, 15)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
                    noise = np.random.normal(0, 5)
                    img[y, x] = np.clip(base_intensity + noise, 0, 255)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã
            if defect_type == 'normal':
                # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —à–æ–≤ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
                pass
                
            elif defect_type == 'crack':
                # –¢—Ä–µ—â–∏–Ω—ã - —Ç–æ–Ω–∫–∏–µ —Ç–µ–º–Ω—ã–µ –ª–∏–Ω–∏–∏
                n_cracks = np.random.randint(1, 4)
                for _ in range(n_cracks):
                    start_x = np.random.randint(0, img_size)
                    start_y = np.random.randint(0, img_size)
                    length = np.random.randint(10, 30)
                    angle = np.random.uniform(0, 2*np.pi)
                    
                    for step in range(length):
                        x = int(start_x + step * np.cos(angle))
                        y = int(start_y + step * np.sin(angle))
                        if 0 <= x < img_size and 0 <= y < img_size:
                            img[y, x] = max(0, img[y, x] - 80)
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—â–∏–Ω—É —Ç—Ä–µ—â–∏–Ω—ã
                            for dx in [-1, 0, 1]:
                                for dy in [-1, 0, 1]:
                                    nx, ny = x + dx, y + dy
                                    if 0 <= nx < img_size and 0 <= ny < img_size:
                                        img[ny, nx] = max(0, img[ny, nx] - 40)
            
            elif defect_type == 'porosity':
                # –ü–æ—Ä—ã - –∫—Ä—É–≥–ª—ã–µ —Ç–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
                n_pores = np.random.randint(3, 8)
                for _ in range(n_pores):
                    center_x = np.random.randint(5, img_size-5)
                    center_y = np.random.randint(5, img_size-5)
                    radius = np.random.randint(2, 6)
                    
                    for y in range(max(0, center_y-radius), min(img_size, center_y+radius+1)):
                        for x in range(max(0, center_x-radius), min(img_size, center_x+radius+1)):
                            distance = np.sqrt((x-center_x)**2 + (y-center_y)**2)
                            if distance <= radius:
                                intensity_reduction = 60 * (1 - distance/radius)
                                img[y, x] = max(0, img[y, x] - intensity_reduction)
            
            elif defect_type == 'incomplete':
                # –ù–µ–ø—Ä–æ–≤–∞—Ä—ã - –æ–±–ª–∞—Å—Ç–∏ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é
                n_areas = np.random.randint(1, 3)
                for _ in range(n_areas):
                    center_x = np.random.randint(img_size//4, 3*img_size//4)
                    center_y = np.random.randint(10, img_size-10)
                    width = np.random.randint(8, 15)
                    height = np.random.randint(5, 10)
                    
                    for y in range(max(0, center_y-height//2), min(img_size, center_y+height//2+1)):
                        for x in range(max(0, center_x-width//2), min(img_size, center_x+width//2+1)):
                            img[y, x] = max(0, img[y, x] - 50)
            
            elif defect_type == 'undercut':
                # –ü–æ–¥—Ä–µ–∑—ã - —É–≥–ª—É–±–ª–µ–Ω–∏—è –ø–æ –∫—Ä–∞—è–º —à–≤–∞
                side = np.random.choice(['left', 'right', 'both'])
                
                if side in ['left', 'both']:
                    x_pos = img_size//4
                    for y in range(img_size//4, 3*img_size//4):
                        depth = np.random.randint(3, 8)
                        for x in range(max(0, x_pos-depth), x_pos+2):
                            if x < img_size:
                                img[y, x] = max(0, img[y, x] - 70)
                
                if side in ['right', 'both']:
                    x_pos = 3*img_size//4
                    for y in range(img_size//4, 3*img_size//4):
                        depth = np.random.randint(3, 8)
                        for x in range(x_pos-1, min(img_size, x_pos+depth)):
                            img[y, x] = max(0, img[y, x] - 70)
            
            elif defect_type == 'inclusion':
                # –í–∫–ª—é—á–µ–Ω–∏—è - —è—Ä–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
                n_inclusions = np.random.randint(2, 5)
                for _ in range(n_inclusions):
                    center_x = np.random.randint(5, img_size-5)
                    center_y = np.random.randint(5, img_size-5)
                    size = np.random.randint(3, 7)
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
                    for y in range(max(0, center_y-size), min(img_size, center_y+size+1)):
                        for x in range(max(0, center_x-size), min(img_size, center_x+size+1)):
                            distance = np.sqrt((x-center_x)**2 + (y-center_y)**2)
                            if distance <= size * np.random.uniform(0.7, 1.3):
                                intensity_increase = 40 * (1 - distance/size)
                                img[y, x] = min(255, img[y, x] + intensity_increase)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = img.astype(np.float32) / 255.0
            
            images.append(img)
            labels.append(class_idx)
    
    return np.array(images), np.array(labels)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤...")
X_data, y_data = generate_synthetic_weld_images(N_SAMPLES_PER_CLASS, IMG_SIZE, DEFECT_TYPES)

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
X_data = X_data.reshape(-1, IMG_SIZE, IMG_SIZE, CHANNELS)

print(f"\\n–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω:")
print(f"  –§–æ—Ä–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {X_data.shape}")
print(f"  –§–æ—Ä–º–∞ –º–µ—Ç–æ–∫: {y_data.shape}")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{X_data.min():.3f}, {X_data.max():.3f}]")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
print("\\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤...")

fig, axes = plt.subplots(2, 6, figsize=(18, 6))
fig.suptitle('–ü—Ä–∏–º–µ—Ä—ã —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤', fontsize=16)

for i, defect_type in enumerate(DEFECT_TYPES):
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    class_indices = np.where(y_data == i)[0]
    sample_idx = class_indices[0]
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    axes[0, i].imshow(X_data[sample_idx, :, :, 0], cmap='gray')
    axes[0, i].set_title(f'{defect_type}\\n(–∏—Å—Ö–æ–¥–Ω–æ–µ)')
    axes[0, i].axis('off')
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
    enhanced = np.clip(X_data[sample_idx, :, :, 0] * 1.5, 0, 1)
    axes[1, i].imshow(enhanced, cmap='gray')
    axes[1, i].set_title(f'{defect_type}\\n(–∫–æ–Ω—Ç—Ä–∞—Å—Ç)')
    axes[1, i].axis('off')

plt.tight_layout()
plt.show()

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
print("\\n" + "="*60)
print("–ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø GAN")
print("="*60)

# –î–ª—è GAN –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –º–µ—Ç–æ–∫ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ GAN)
X_train, X_test, y_train, y_test = train_test_split(
    X_data, y_data, test_size=0.2, stratify=y_data, random_state=42
)

print(f"–†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape}")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape}")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è GAN (–æ—Ç -1 –¥–æ 1)
X_train_gan = (X_train - 0.5) * 2.0
X_test_gan = (X_test - 0.5) * 2.0

print(f"  –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è GAN: [{X_train_gan.min():.3f}, {X_train_gan.max():.3f}]")

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä GAN
print("\\n" + "="*60)
print("–°–û–ó–î–ê–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–† GAN")
print("="*60)

# 1. DCGAN
def create_dcgan_generator(latent_dim, img_size, channels):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä DCGAN
    """
    model = keras.Sequential([
        layers.Dense(8 * 8 * 256, input_dim=latent_dim),
        layers.Reshape((8, 8, 256)),
        layers.BatchNormalization(),
        layers.LeakyReLU(0.2),
        
        layers.Conv2DTranspose(128, 4, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.LeakyReLU(0.2),
        
        layers.Conv2DTranspose(64, 4, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.LeakyReLU(0.2),
        
        layers.Conv2DTranspose(32, 4, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.LeakyReLU(0.2),
        
        layers.Conv2D(channels, 3, padding='same', activation='tanh')
    ], name='dcgan_generator')
    
    return model

def create_dcgan_discriminator(img_size, channels):
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä DCGAN
    """
    model = keras.Sequential([
        layers.Conv2D(32, 3, strides=2, padding='same', 
                     input_shape=(img_size, img_size, channels)),
        layers.LeakyReLU(0.2),
        layers.Dropout(0.3),
        
        layers.Conv2D(64, 3, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.LeakyReLU(0.2),
        layers.Dropout(0.3),
        
        layers.Conv2D(128, 3, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.LeakyReLU(0.2),
        layers.Dropout(0.3),
        
        layers.Conv2D(256, 3, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.LeakyReLU(0.2),
        layers.Dropout(0.3),
        
        layers.Flatten(),
        layers.Dense(1, activation='sigmoid')
    ], name='dcgan_discriminator')
    
    return model

# 2. Conditional GAN
def create_conditional_generator(latent_dim, n_classes, img_size, channels):
    """
    –°–æ–∑–¥–∞–µ—Ç —É—Å–ª–æ–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    """
    # –®—É–º
    noise_input = layers.Input(shape=(latent_dim,))
    
    # –£—Å–ª–æ–≤–∏–µ (–∫–ª–∞—Å—Å –¥–µ—Ñ–µ–∫—Ç–∞)
    label_input = layers.Input(shape=(1,))
    label_embedding = layers.Embedding(n_classes, 50)(label_input)
    label_embedding = layers.Flatten()(label_embedding)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —à—É–º –∏ —É—Å–ª–æ–≤–∏–µ
    merged = layers.Concatenate()([noise_input, label_embedding])
    
    x = layers.Dense(8 * 8 * 256)(merged)
    x = layers.Reshape((8, 8, 256))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(0.2)(x)
    
    x = layers.Conv2DTranspose(128, 4, strides=2, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(0.2)(x)
    
    x = layers.Conv2DTranspose(64, 4, strides=2, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(0.2)(x)
    
    x = layers.Conv2DTranspose(32, 4, strides=2, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(0.2)(x)
    
    output = layers.Conv2D(channels, 3, padding='same', activation='tanh')(x)
    
    model = keras.Model([noise_input, label_input], output, name='conditional_generator')
    return model

def create_conditional_discriminator(img_size, channels, n_classes):
    """
    –°–æ–∑–¥–∞–µ—Ç —É—Å–ª–æ–≤–Ω—ã–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä
    """
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_input = layers.Input(shape=(img_size, img_size, channels))
    
    # –£—Å–ª–æ–≤–∏–µ
    label_input = layers.Input(shape=(1,))
    label_embedding = layers.Embedding(n_classes, 50)(label_input)
    label_embedding = layers.Flatten()(label_embedding)
    label_embedding = layers.Dense(img_size * img_size)(label_embedding)
    label_embedding = layers.Reshape((img_size, img_size, 1))(label_embedding)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É—Å–ª–æ–≤–∏–µ
    merged = layers.Concatenate()([img_input, label_embedding])
    
    x = layers.Conv2D(32, 3, strides=2, padding='same')(merged)
    x = layers.LeakyReLU(0.2)(x)
    x = layers.Dropout(0.3)(x)
    
    x = layers.Conv2D(64, 3, strides=2, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(0.2)(x)
    x = layers.Dropout(0.3)(x)
    
    x = layers.Conv2D(128, 3, strides=2, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(0.2)(x)
    x = layers.Dropout(0.3)(x)
    
    x = layers.Conv2D(256, 3, strides=2, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(0.2)(x)
    x = layers.Dropout(0.3)(x)
    
    x = layers.Flatten()(x)
    output = layers.Dense(1, activation='sigmoid')(x)
    
    model = keras.Model([img_input, label_input], output, name='conditional_discriminator')
    return model

# 3. WGAN-GP (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
def create_wgan_generator(latent_dim, img_size, channels):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä WGAN
    """
    model = keras.Sequential([
        layers.Dense(8 * 8 * 256, input_dim=latent_dim),
        layers.Reshape((8, 8, 256)),
        layers.BatchNormalization(),
        layers.ReLU(),
        
        layers.Conv2DTranspose(128, 4, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.ReLU(),
        
        layers.Conv2DTranspose(64, 4, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.ReLU(),
        
        layers.Conv2DTranspose(32, 4, strides=2, padding='same'),
        layers.BatchNormalization(),
        layers.ReLU(),
        
        layers.Conv2D(channels, 3, padding='same', activation='tanh')
    ], name='wgan_generator')
    
    return model

def create_wgan_critic(img_size, channels):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∏—Ç–∏–∫–∞ WGAN (–±–µ–∑ sigmoid)
    """
    model = keras.Sequential([
        layers.Conv2D(32, 3, strides=2, padding='same', 
                     input_shape=(img_size, img_size, channels)),
        layers.LeakyReLU(0.2),
        
        layers.Conv2D(64, 3, strides=2, padding='same'),
        layers.LeakyReLU(0.2),
        
        layers.Conv2D(128, 3, strides=2, padding='same'),
        layers.LeakyReLU(0.2),
        
        layers.Conv2D(256, 3, strides=2, padding='same'),
        layers.LeakyReLU(0.2),
        
        layers.Flatten(),
        layers.Dense(1)  # –ë–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è WGAN
    ], name='wgan_critic')
    
    return model

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
print("–°–æ–∑–¥–∞–Ω–∏–µ DCGAN...")
dcgan_generator = create_dcgan_generator(LATENT_DIM, IMG_SIZE, CHANNELS)
dcgan_discriminator = create_dcgan_discriminator(IMG_SIZE, CHANNELS)

print("–°–æ–∑–¥–∞–Ω–∏–µ Conditional GAN...")
cgan_generator = create_conditional_generator(LATENT_DIM, len(DEFECT_TYPES), IMG_SIZE, CHANNELS)
cgan_discriminator = create_conditional_discriminator(IMG_SIZE, CHANNELS, len(DEFECT_TYPES))

print("–°–æ–∑–¥–∞–Ω–∏–µ WGAN...")
wgan_generator = create_wgan_generator(LATENT_DIM, IMG_SIZE, CHANNELS)
wgan_critic = create_wgan_critic(IMG_SIZE, CHANNELS)

print("\\n–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã:")
print(f"  DCGAN Generator: {dcgan_generator.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  DCGAN Discriminator: {dcgan_discriminator.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  CGAN Generator: {cgan_generator.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  CGAN Discriminator: {cgan_discriminator.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è GAN
class GANTrainer:
    def __init__(self, generator, discriminator, latent_dim, gan_type='dcgan'):
        self.generator = generator
        self.discriminator = discriminator
        self.latent_dim = latent_dim
        self.gan_type = gan_type
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã
        self.g_optimizer = keras.optimizers.Adam(0.0002, beta_1=0.5)
        self.d_optimizer = keras.optimizers.Adam(0.0002, beta_1=0.5)
        
        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        if gan_type == 'wgan':
            self.discriminator.compile(
                optimizer=self.d_optimizer,
                loss=self.wasserstein_loss
            )
        else:
            self.discriminator.compile(
                optimizer=self.d_optimizer,
                loss='binary_crossentropy',
                metrics=['accuracy']
            )
        
        # GAN –º–æ–¥–µ–ª—å
        self.discriminator.trainable = False
        if gan_type == 'conditional':
            noise_input = layers.Input(shape=(latent_dim,))
            label_input = layers.Input(shape=(1,))
            generated_img = self.generator([noise_input, label_input])
            validity = self.discriminator([generated_img, label_input])
            self.gan = keras.Model([noise_input, label_input], validity)
        else:
            noise_input = layers.Input(shape=(latent_dim,))
            generated_img = self.generator(noise_input)
            validity = self.discriminator(generated_img)
            self.gan = keras.Model(noise_input, validity)
        
        if gan_type == 'wgan':
            self.gan.compile(optimizer=self.g_optimizer, loss=self.wasserstein_loss)
        else:
            self.gan.compile(optimizer=self.g_optimizer, loss='binary_crossentropy')
    
    def wasserstein_loss(self, y_true, y_pred):
        return tf.reduce_mean(y_true * y_pred)
    
    def train(self, X_train, y_train=None, epochs=100, batch_size=32, sample_interval=10):
        """
        –û–±—É—á–µ–Ω–∏–µ GAN
        """
        print(f"\\n–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è {self.gan_type.upper()}...")
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if self.gan_type == 'wgan':
            real_labels = np.ones((batch_size, 1))
            fake_labels = -np.ones((batch_size, 1))
        else:
            real_labels = np.ones((batch_size, 1))
            fake_labels = np.zeros((batch_size, 1))
        
        history = {'d_loss': [], 'g_loss': []}
        
        for epoch in range(epochs):
            # –û–±—É—á–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞
            idx = np.random.randint(0, X_train.shape[0], batch_size)
            real_imgs = X_train[idx]
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))
            
            if self.gan_type == 'conditional':
                real_labels_class = y_train[idx]
                fake_labels_class = np.random.randint(0, len(DEFECT_TYPES), batch_size)
                
                fake_imgs = self.generator.predict([noise, fake_labels_class], verbose=0)
                
                # –û–±—É—á–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞
                d_loss_real = self.discriminator.train_on_batch([real_imgs, real_labels_class], real_labels)
                d_loss_fake = self.discriminator.train_on_batch([fake_imgs, fake_labels_class], fake_labels)
                d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)
                
                # –û–±—É—á–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
                noise = np.random.normal(0, 1, (batch_size, self.latent_dim))
                sampled_labels = np.random.randint(0, len(DEFECT_TYPES), batch_size)
                g_loss = self.gan.train_on_batch([noise, sampled_labels], real_labels)
                
            else:
                fake_imgs = self.generator.predict(noise, verbose=0)
                
                # –û–±—É—á–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞
                d_loss_real = self.discriminator.train_on_batch(real_imgs, real_labels)
                d_loss_fake = self.discriminator.train_on_batch(fake_imgs, fake_labels)
                d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)
                
                # –û–±—É—á–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
                noise = np.random.normal(0, 1, (batch_size, self.latent_dim))
                g_loss = self.gan.train_on_batch(noise, real_labels)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            if isinstance(d_loss, (list, tuple)):
                history['d_loss'].append(d_loss[0])
            else:
                history['d_loss'].append(d_loss)
            
            if isinstance(g_loss, (list, tuple)):
                history['g_loss'].append(g_loss[0])
            else:
                history['g_loss'].append(g_loss)
            
            # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if epoch % sample_interval == 0:
                if isinstance(d_loss, (list, tuple)):
                    print(f"Epoch {epoch}/{epochs} - D loss: {d_loss[0]:.4f}, G loss: {g_loss:.4f}")
                else:
                    print(f"Epoch {epoch}/{epochs} - D loss: {d_loss:.4f}, G loss: {g_loss:.4f}")
        
        return history

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
print("\\n" + "="*60)
print("–û–ë–£–ß–ï–ù–ò–ï GAN –ú–û–î–ï–õ–ï–ô")
print("="*60)

DEMO_EPOCHS = 20  # –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

# 1. –û–±—É—á–µ–Ω–∏–µ DCGAN
print("\\n1. –û–±—É—á–µ–Ω–∏–µ DCGAN...")
dcgan_trainer = GANTrainer(dcgan_generator, dcgan_discriminator, LATENT_DIM, 'dcgan')
dcgan_history = dcgan_trainer.train(X_train_gan, epochs=DEMO_EPOCHS, batch_size=BATCH_SIZE)

# 2. –û–±—É—á–µ–Ω–∏–µ Conditional GAN
print("\\n2. –û–±—É—á–µ–Ω–∏–µ Conditional GAN...")
cgan_trainer = GANTrainer(cgan_generator, cgan_discriminator, LATENT_DIM, 'conditional')
cgan_history = cgan_trainer.train(X_train_gan, y_train, epochs=DEMO_EPOCHS, batch_size=BATCH_SIZE)

print("\\n–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\\n" + "="*60)
print("–ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –û–¶–ï–ù–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
print("="*60)

def generate_samples(generator, latent_dim, n_samples=16, gan_type='dcgan', labels=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –∏–∑ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    """
    noise = np.random.normal(0, 1, (n_samples, latent_dim))
    
    if gan_type == 'conditional':
        if labels is None:
            labels = np.random.randint(0, len(DEFECT_TYPES), n_samples)
        generated = generator.predict([noise, labels], verbose=0)
    else:
        generated = generator.predict(noise, verbose=0)
    
    # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–æ—Ç -1,1 –∫ 0,1)
    generated = (generated + 1) / 2.0
    
    return generated, labels if gan_type == 'conditional' else None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤
print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤...")

# DCGAN
dcgan_samples, _ = generate_samples(dcgan_generator, LATENT_DIM, 16, 'dcgan')

# Conditional GAN - –ø–æ –æ–¥–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
cgan_labels = np.arange(len(DEFECT_TYPES))
cgan_samples, cgan_sample_labels = generate_samples(
    cgan_generator, LATENT_DIM, len(DEFECT_TYPES), 'conditional', cgan_labels
)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤...")

fig, axes = plt.subplots(3, 6, figsize=(18, 9))
fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', fontsize=16)

# –ü–µ—Ä–≤—ã–π —Ä—è–¥ - —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
for i in range(6):
    class_indices = np.where(y_test == i)[0]
    if len(class_indices) > 0:
        sample_idx = class_indices[0]
        axes[0, i].imshow(X_test[sample_idx, :, :, 0], cmap='gray')
        axes[0, i].set_title(f'–†–µ–∞–ª—å–Ω—ã–π\\n{DEFECT_TYPES[i]}')
    axes[0, i].axis('off')

# –í—Ç–æ—Ä–æ–π —Ä—è–¥ - DCGAN
for i in range(6):
    axes[1, i].imshow(dcgan_samples[i, :, :, 0], cmap='gray')
    axes[1, i].set_title(f'DCGAN\\n(—Å–ª—É—á–∞–π–Ω—ã–π)')
    axes[1, i].axis('off')

# –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - Conditional GAN
for i in range(6):
    axes[2, i].imshow(cgan_samples[i, :, :, 0], cmap='gray')
    axes[2, i].set_title(f'CGAN\\n{DEFECT_TYPES[i]}')
    axes[2, i].axis('off')

plt.tight_layout()
plt.show()

# –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
print("\\n" + "="*60)
print("–û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ì–ï–ù–ï–†–ê–¶–ò–ò")
print("="*60)

def calculate_simple_metrics(real_images, generated_images):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    """
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π
    real_mean = np.mean(real_images)
    real_std = np.std(real_images)
    gen_mean = np.mean(generated_images)
    gen_std = np.std(generated_images)
    
    # –†–∞–∑–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    mean_diff = abs(real_mean - gen_mean)
    std_diff = abs(real_std - gen_std)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    real_flat = real_images.flatten()
    gen_flat = generated_images.flatten()
    
    # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    min_size = min(len(real_flat), len(gen_flat))
    real_sample = np.random.choice(real_flat, min_size//10, replace=False)
    gen_sample = np.random.choice(gen_flat, min_size//10, replace=False)
    
    correlation = np.corrcoef(real_sample, gen_sample)[0, 1]
    
    return {
        'mean_diff': mean_diff,
        'std_diff': std_diff,
        'correlation': correlation,
        'real_stats': (real_mean, real_std),
        'gen_stats': (gen_mean, gen_std)
    }

# –û—Ü–µ–Ω–∫–∞ DCGAN
dcgan_metrics = calculate_simple_metrics(X_test_gan, dcgan_samples)

# –û—Ü–µ–Ω–∫–∞ CGAN
cgan_metrics = calculate_simple_metrics(X_test_gan, cgan_samples)

print("\\n–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
print("\\nDCGAN:")
print(f"  –†–∞–∑–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–Ω–∏—Ö: {dcgan_metrics['mean_diff']:.4f}")
print(f"  –†–∞–∑–Ω–æ—Å—Ç—å std: {dcgan_metrics['std_diff']:.4f}")
print(f"  –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {dcgan_metrics['correlation']:.4f}")

print("\\nConditional GAN:")
print(f"  –†–∞–∑–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–Ω–∏—Ö: {cgan_metrics['mean_diff']:.4f}")
print(f"  –†–∞–∑–Ω–æ—Å—Ç—å std: {cgan_metrics['std_diff']:.4f}")
print(f"  –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {cgan_metrics['correlation']:.4f}")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
print("\\n" + "="*60)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–†–û–õ–ò–†–£–ï–ú–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò")
print("="*60)

print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤...")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ 4 –æ–±—Ä–∞–∑—Ü–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–µ—Ñ–µ–∫—Ç–∞
fig, axes = plt.subplots(len(DEFECT_TYPES), 4, figsize=(12, 18))
fig.suptitle('–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ (Conditional GAN)', fontsize=16)

for defect_idx, defect_type in enumerate(DEFECT_TYPES):
    labels = np.full(4, defect_idx)
    samples, _ = generate_samples(cgan_generator, LATENT_DIM, 4, 'conditional', labels)
    
    for sample_idx in range(4):
        axes[defect_idx, sample_idx].imshow(samples[sample_idx, :, :, 0], cmap='gray')
        if sample_idx == 0:
            axes[defect_idx, sample_idx].set_ylabel(defect_type, rotation=90, fontsize=12)
        axes[defect_idx, sample_idx].axis('off')

plt.tight_layout()
plt.show()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ downstream –∑–∞–¥–∞—á–µ
print("\\n" + "="*60)
print("–í–ê–õ–ò–î–ê–¶–ò–Ø –í DOWNSTREAM –ó–ê–î–ê–ß–ï")
print("="*60)

print("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")

# –ü—Ä–æ—Å—Ç–æ–π CNN –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
def create_classifier(img_size, channels, n_classes):
    model = keras.Sequential([
        layers.Conv2D(32, 3, activation='relu', input_shape=(img_size, img_size, channels)),
        layers.MaxPooling2D(2),
        layers.Conv2D(64, 3, activation='relu'),
        layers.MaxPooling2D(2),
        layers.Conv2D(128, 3, activation='relu'),
        layers.GlobalAveragePooling2D(),
        layers.Dense(128, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(n_classes, activation='softmax')
    ])
    return model

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
classifier = create_classifier(IMG_SIZE, CHANNELS, len(DEFECT_TYPES))
classifier.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# –û–±—É—á–∞–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
print("–û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
classifier.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=10,
    batch_size=32,
    verbose=0
)

# –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
real_accuracy = classifier.evaluate(X_test, y_test, verbose=0)[1]
print(f"–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {real_accuracy:.4f}")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

synthetic_images = []
synthetic_labels = []

for class_idx in range(len(DEFECT_TYPES)):
    labels = np.full(50, class_idx)  # 50 –æ–±—Ä–∞–∑—Ü–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    samples, _ = generate_samples(cgan_generator, LATENT_DIM, 50, 'conditional', labels)
    
    synthetic_images.extend(samples)
    synthetic_labels.extend(labels)

synthetic_images = np.array(synthetic_images)
synthetic_labels = np.array(synthetic_labels)

# –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
synthetic_predictions = classifier.predict(synthetic_images, verbose=0)
synthetic_predicted_classes = np.argmax(synthetic_predictions, axis=1)
synthetic_accuracy = accuracy_score(synthetic_labels, synthetic_predicted_classes)

print(f"–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {synthetic_accuracy:.4f}")

# –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º
print("\\n–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
for i, defect_type in enumerate(DEFECT_TYPES):
    class_mask = synthetic_labels == i
    class_accuracy = accuracy_score(
        synthetic_labels[class_mask], 
        synthetic_predicted_classes[class_mask]
    )
    print(f"  {defect_type}: {class_accuracy:.4f}")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*60)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï")
print("="*60)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
daily_production = 1000      # —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤ –≤ –¥–µ–Ω—å
working_days = 250          # —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É
defect_rate = 0.05          # 5% –¥–µ—Ñ–µ–∫—Ç–æ–≤
inspection_cost = 50        # —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä—É–±)
defect_cost = 5000          # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞ (—Ä—É–±)

print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
print(f"  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {daily_production:,} —à–≤–æ–≤/–¥–µ–Ω—å")
print(f"  –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É: {working_days}")
print(f"  –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–æ–≤: {defect_rate:.1%}")
print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {inspection_cost:,} —Ä—É–±/—à–æ–≤")
print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞: {defect_cost:,} —Ä—É–±")

# –¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
annual_production = daily_production * working_days
annual_defects = annual_production * defect_rate
manual_inspection_cost = annual_production * inspection_cost
missed_defects_cost = annual_defects * 0.1 * defect_cost  # 10% –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è

current_total_cost = manual_inspection_cost + missed_defects_cost

print(f"\\n–¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã:")
print(f"  –ì–æ–¥–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {annual_production:,} —à–≤–æ–≤")
print(f"  –î–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –≥–æ–¥: {annual_defects:,.0f}")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: {manual_inspection_cost:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤: {missed_defects_cost:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {current_total_cost:,.0f} —Ä—É–±/–≥–æ–¥")

# –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
detection_accuracy = 0.95   # –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
false_positive_rate = 0.03  # –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
auto_inspection_cost = annual_production * 10  # 10 —Ä—É–± –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
missed_defects_auto = annual_defects * (1 - detection_accuracy) * defect_cost
false_positives_cost = annual_production * false_positive_rate * inspection_cost * 0.5

new_total_cost = auto_inspection_cost + missed_defects_auto + false_positives_cost

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º—ã
development_cost = 15_000_000    # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å GAN
data_generation_cost = 2_000_000 # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
training_cost = 1_000_000        # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
hardware_cost = 3_000_000        # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
total_project_cost = development_cost + data_generation_cost + training_cost + hardware_cost

# –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
annual_maintenance = 2_000_000   # –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
annual_compute = 1_500_000       # –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
total_annual_operating = annual_maintenance + annual_compute

print(f"\\n–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {detection_accuracy:.1%}")
print(f"  –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_positive_rate:.1%}")

print(f"\\n–ù–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:")
print(f"  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {auto_inspection_cost:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã: {missed_defects_auto:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_positives_cost:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {new_total_cost:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
print(f"  –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {development_cost:,.0f} —Ä—É–±")
print(f"  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_generation_cost:,.0f} —Ä—É–±")
print(f"  –û–±—É—á–µ–Ω–∏–µ: {training_cost:,.0f} —Ä—É–±")
print(f"  –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {hardware_cost:,.0f} —Ä—É–±")
print(f"  –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_project_cost:,.0f} —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_annual_operating:,.0f} —Ä—É–±/–≥–æ–¥")

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
annual_savings = current_total_cost - new_total_cost
net_annual_benefit = annual_savings - total_annual_operating
roi = (net_annual_benefit - total_project_cost) / total_project_cost * 100
payback_months = total_project_cost / (net_annual_benefit / 12)

print(f"\\n–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {annual_savings:,.0f} —Ä—É–±")
print(f"  –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,.0f} —Ä—É–±")
print(f"  ROI: {roi:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
traditional_data_cost = 10_000_000  # –°–±–æ—Ä –∏ —Ä–∞–∑–º–µ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
traditional_total_cost = total_project_cost - data_generation_cost + traditional_data_cost

savings_from_synthetic = traditional_total_cost - total_project_cost

print(f"\\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {traditional_data_cost:,.0f} —Ä—É–±")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {data_generation_cost:,.0f} —Ä—É–±")
print(f"  –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GAN: {savings_from_synthetic:,.0f} —Ä—É–±")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print("\\n" + "="*60)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ")
print("="*60)

print(f"\\n1. –í–´–ë–û–† –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: Conditional GAN")
print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤")

print(f"\\n2. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:")
print(f"   - –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
print(f"   - –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ —Å–≤–∞—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
print(f"   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è")
print(f"   - Continuous learning —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

print(f"\\n3. –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø:")
print(f"   –§–∞–∑–∞ 1 (2 –º–µ—Å—è—Ü–∞): –°–±–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ GAN")
print(f"   –§–∞–∑–∞ 2 (1 –º–µ—Å—è—Ü): –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è")
print(f"   –§–∞–∑–∞ 3 (2 –º–µ—Å—è—Ü–∞): –û–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞")
print(f"   –§–∞–∑–∞ 4 (1 –º–µ—Å—è—Ü): –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è")

print(f"\\n4. –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
print(f"   - –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ {traditional_data_cost/data_generation_cost:.0f} —Ä–∞–∑")
print(f"   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∫–∏—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤")
print(f"   - –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤")
print(f"   - –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤")

print("\\n" + "="*80)
print("–°–ò–°–¢–ï–ú–ê –°–ò–ù–¢–ï–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: Conditional GAN")
print(f"–ö–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è {cgan_metrics['correlation']:.3f}")
print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_annual_benefit:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months:.1f} –º–µ—Å—è—Ü–∞")
print("="*80)`
  },

  19: {
    title: "Transfer Learning –∏ Fine-tuning",
    duration: "120 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>Transfer Learning –∏ Fine-tuning –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ Transfer Learning</h3>
      <p>Transfer Learning –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –í–º–µ—Å—Ç–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Å –Ω—É–ª—è, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö, –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏—Ö –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç:</p>
      <ul>
        <li><strong>–°–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</strong> –æ—Ç –º–µ—Å—è—Ü–µ–≤ –¥–æ –Ω–µ–¥–µ–ª—å</li>
        <li><strong>–°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:</strong> –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Ç–µ–Ω –≤–º–µ—Å—Ç–æ —Ç—ã—Å—è—á –æ–±—Ä–∞–∑—Ü–æ–≤</li>
        <li><strong>–ü–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li><strong>–£–º–µ–Ω—å—à–∏—Ç—å –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:</strong> –æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li><strong>–û–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã</li>
      </ul>
      
      <h3>–û—Å–Ω–æ–≤—ã Transfer Learning</h3>
      
      <h4>–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤—ã</h4>
      
      <p>Transfer Learning –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–∏, —á—Ç–æ –∑–Ω–∞–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏, –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω–æ–π –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.</p>
      
      <p><strong>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:</strong></p>
      
      <p><strong>1. –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:</strong></p>
      <ul>
        <li><strong>–ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong> –∫—Ä–∞—è, —Ç–µ–∫—Å—Ç—É—Ä—ã, –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã</li>
        <li><strong>–°—Ä–µ–¥–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong> —á–∞—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –ø–∞—Ç—Ç–µ—Ä–Ω—ã</li>
        <li><strong>–í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong> —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏</li>
      </ul>
      
      <p><strong>2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π:</strong></p>
      <ul>
        <li><strong>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong> –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á</li>
        <li><strong>–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong> –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É</li>
        <li><strong>–ì—Ä–∞–¥–∏–µ–Ω—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏:</strong> –æ—Ç –æ–±—â–∏—Ö –∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º —Å–ª–æ—è–º</li>
      </ul>
      
      <p><strong>3. –î–æ–º–µ–Ω—ã –∏ –∑–∞–¥–∞—á–∏:</strong></p>
      <ul>
        <li><strong>Source domain:</strong> –∏—Å—Ö–æ–¥–Ω—ã–π –¥–æ–º–µ–Ω —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>Target domain:</strong> —Ü–µ–ª–µ–≤–æ–π –¥–æ–º–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</li>
        <li><strong>Domain similarity:</strong> —Å—Ç–µ–ø–µ–Ω—å —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–æ–º–µ–Ω–æ–≤</li>
        <li><strong>Task similarity:</strong> —Å—Ö–æ–∂–µ—Å—Ç—å —Ä–µ—à–∞–µ–º—ã—Ö –∑–∞–¥–∞—á</li>
      </ul>
      
      <h4>–¢–∏–ø—ã Transfer Learning</h4>
      
      <p><strong>1. Inductive Transfer Learning:</strong></p>
      <ul>
        <li><strong>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> –∏—Å—Ö–æ–¥–Ω–∞—è –∏ —Ü–µ–ª–µ–≤–∞—è –∑–∞–¥–∞—á–∏ —Ä–∞–∑–ª–∏—á–Ω—ã</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ü–µ–ª–µ–≤–æ–º –¥–æ–º–µ–Ω–µ</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Üí –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã:</strong> fine-tuning, feature extraction</li>
      </ul>
      
      <p><strong>2. Transductive Transfer Learning:</strong></p>
      <ul>
        <li><strong>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> –∏—Å—Ö–æ–¥–Ω–∞—è –∏ —Ü–µ–ª–µ–≤–∞—è –∑–∞–¥–∞—á–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π)</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –º–æ–¥–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∞ ‚Üí –¥—Ä—É–≥–æ–π –∑–∞–≤–æ–¥</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã:</strong> domain adaptation, covariate shift correction</li>
      </ul>
      
      <p><strong>3. Unsupervised Transfer Learning:</strong></p>
      <ul>
        <li><strong>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> –Ω–µ—Ç —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–ª–µ–≤–æ–º –¥–æ–º–µ–Ω–µ</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> —Ç–æ–ª—å–∫–æ –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–µ–≤–æ–º –¥–æ–º–µ–Ω–µ</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> —Å–∞–º–æ–æ–±—É—á–∞—é—â–∏–µ—Å—è —Å–∏—Å—Ç–µ–º—ã</li>
        <li><strong>–ú–µ—Ç–æ–¥—ã:</strong> self-supervised learning, clustering</li>
      </ul>
      
      <h3>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ Transfer Learning</h3>
      
      <h4>1. Feature Extraction (–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)</h4>
      
      <p>–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ feature extraction –º—ã "–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º" –≤–µ—Å–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.</p>
      
      <p><strong>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:</strong></p>
      <ol>
        <li><strong>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:</strong> –Ω–∞–ø—Ä–∏–º–µ—Ä, ResNet50 –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ ImageNet</li>
        <li><strong>–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –≥–æ–ª–æ–≤—ã:</strong> –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏</li>
        <li><strong>–ó–∞–º–æ—Ä–æ–∑–∫–∞ –≤–µ—Å–æ–≤:</strong> —É—Å—Ç–∞–Ω–æ–≤–∫–∞ requires_grad=False</li>
        <li><strong>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–ª–æ–≤—ã:</strong> —Å–ª–æ–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∑–∞–¥–∞—á–∏</li>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–µ–≤:</strong> –±—ã—Å—Ç—Ä–æ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ</li>
      </ol>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</strong> –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –º–∞–ª–∞—è —á–∞—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li><strong>–ù–∏–∑–∫–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</li>
        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:</strong> –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è</li>
        <li><strong>–•–æ—Ä–æ—à–∞—è –æ–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è:</strong> –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏</li>
        <li><strong>–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:</strong> –ø–ª–æ—Ö–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ = –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
        <li><strong>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å—É–±–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è –¥–æ–º–µ–Ω–æ–≤</li>
      </ul>
      
      <p><strong>–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong></p>
      <ul>
        <li><strong>–ú–∞–ª—ã–π –¥–∞—Ç–∞—Å–µ—Ç:</strong> –º–µ–Ω–µ–µ 1000 –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å</li>
        <li><strong>–°—Ö–æ–∂–∏–π –¥–æ–º–µ–Ω:</strong> —Ü–µ–ª–µ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏ –Ω–∞ ImageNet</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</strong> –Ω–µ—Ç –º–æ—â–Ω—ã—Ö GPU –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –Ω—É–∂–µ–Ω –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li>
      </ul>
      
      <h4>2. Fine-tuning (–¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)</h4>
      
      <p>Fine-tuning –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç "—Ä–∞–∑–º–æ—Ä–æ–∑–∫—É" —á–∞—Å—Ç–∏ –∏–ª–∏ –≤—Å–µ—Ö —Å–ª–æ–µ–≤ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –∏—Ö –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–±—É—á–µ–Ω–∏—è.</p>
      
      <p><strong>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:</strong></p>
      <ol>
        <li><strong>–ù–∞—á–∞–ª–æ —Å feature extraction:</strong> –æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ–π –≥–æ–ª–æ–≤—ã</li>
        <li><strong>–†–∞–∑–º–æ—Ä–æ–∑–∫–∞ —Å–ª–æ–µ–≤:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∏–ª–∏ —Å—Ä–∞–∑—É –≤—Å–µ—Ö</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ learning rate:</strong> –≤ 10-100 —Ä–∞–∑ –º–µ–Ω—å—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ</li>
        <li><strong>–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ learning rates:</strong> —Ä–∞–∑–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–µ–≤</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:</strong> –∫–æ–Ω—Ç—Ä–æ–ª—å validation loss</li>
      </ol>
      
      <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ fine-tuning:</strong></p>
      
      <p><strong>1. Gradual unfreezing:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ —Å–ª–æ–µ–≤ –æ—Ç –≥–æ–ª–æ–≤—ã –∫ –æ—Å–Ω–æ–≤–∞–Ω–∏—é</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∫–æ–≥–¥–∞ –¥–æ–º–µ–Ω—ã —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è</li>
      </ul>
      
      <p><strong>2. Discriminative fine-tuning:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> —Ä–∞–∑–Ω—ã–µ learning rates –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–µ–≤</li>
        <li><strong>–§–æ—Ä–º—É–ª–∞:</strong> lr_layer = base_lr / (decay_factor ^ layer_depth)</li>
        <li><strong>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</strong> —Ä–∞–Ω–Ω–∏–µ —Å–ª–æ–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –º–µ–Ω—å—à–µ</li>
      </ul>
      
      <p><strong>3. Slanted triangular learning rates:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –±—ã—Å—Ç—Ä–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ lr</li>
        <li><strong>–§–∞–∑—ã:</strong> warm-up ‚Üí peak ‚Üí decay</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –±—ã—Å—Ç—Ä–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è + —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ fine-tuning:</strong></p>
      <ul>
        <li><strong>–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É</li>
        <li><strong>–ì–∏–±–∫–æ—Å—Ç—å:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</strong> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–ª—å–∑–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞</li>
        <li><strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏:</strong> –¥–∞–∂–µ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–ª–∏—á–∏—è—Ö</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>–†–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤</li>
        <li><strong>–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:</strong> –º–æ–∂–µ—Ç —Ä–∞–∑—Ä—É—à–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏</li>
        <li><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</strong> –º–Ω–æ–≥–æ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
      </ul>
      
      <h4>3. Hybrid –ø–æ–¥—Ö–æ–¥—ã</h4>
      
      <p><strong>Multi-stage training:</strong></p>
      <ol>
        <li><strong>Stage 1:</strong> Feature extraction –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏</li>
        <li><strong>Stage 2:</strong> Fine-tuning –≤–µ—Ä—Ö–Ω–∏—Ö —Å–ª–æ–µ–≤</li>
        <li><strong>Stage 3:</strong> Fine-tuning –≤—Å–µ–π –º–æ–¥–µ–ª–∏ —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–º lr</li>
      </ol>
      
      <p><strong>Ensemble of transfer models:</strong></p>
      <ul>
        <li><strong>–ò–¥–µ—è:</strong> –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>–í–∞—Ä–∏–∞–Ω—Ç—ã:</strong> —Ä–∞–∑–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h3>–ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      
      <h4>Computer Vision –º–æ–¥–µ–ª–∏</h4>
      
      <p><strong>1. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:</strong></p>
      
      <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr>
          <th>–ú–æ–¥–µ–ª—å</th>
          <th>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</th>
          <th>ImageNet Top-1</th>
          <th>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</th>
          <th>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</th>
        </tr>
        <tr>
          <td>ResNet50</td>
          <td>25.6M</td>
          <td>76.1%</td>
          <td>Skip connections</td>
          <td>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</td>
        </tr>
        <tr>
          <td>ResNet101</td>
          <td>44.5M</td>
          <td>77.4%</td>
          <td>–ì–ª—É–±–∂–µ ResNet50</td>
          <td>–°–ª–æ–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</td>
        </tr>
        <tr>
          <td>VGG16</td>
          <td>138.4M</td>
          <td>71.6%</td>
          <td>–ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</td>
          <td>Feature extraction</td>
        </tr>
        <tr>
          <td>DenseNet121</td>
          <td>8.0M</td>
          <td>74.4%</td>
          <td>Dense connections</td>
          <td>–ú–∞–ª—ã–µ –¥–∞–Ω–Ω—ã–µ</td>
        </tr>
        <tr>
          <td>MobileNetV2</td>
          <td>3.4M</td>
          <td>71.8%</td>
          <td>–õ–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è</td>
          <td>Edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</td>
        </tr>
      </table>
      
      <p><strong>2. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:</strong></p>
      
      <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr>
          <th>–ú–æ–¥–µ–ª—å</th>
          <th>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</th>
          <th>ImageNet Top-1</th>
          <th>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</th>
          <th>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</th>
        </tr>
        <tr>
          <td>EfficientNet-B0</td>
          <td>5.3M</td>
          <td>77.1%</td>
          <td>Compound scaling</td>
          <td>–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>EfficientNet-B7</td>
          <td>66.3M</td>
          <td>84.3%</td>
          <td>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</td>
          <td>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏</td>
        </tr>
        <tr>
          <td>Vision Transformer</td>
          <td>86.6M</td>
          <td>84.5%</td>
          <td>Attention –º–µ—Ö–∞–Ω–∏–∑–º</td>
          <td>–ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ</td>
        </tr>
        <tr>
          <td>ConvNeXt</td>
          <td>28.6M</td>
          <td>82.1%</td>
          <td>–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CNN</td>
          <td>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</td>
        </tr>
      </table>
      
      <p><strong>3. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:</strong></p>
      
      <p><strong>Object Detection:</strong></p>
      <ul>
        <li><strong>YOLO v8:</strong> –±—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤</li>
        <li><strong>Faster R-CNN:</strong> –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>RetinaNet:</strong> —Ä–∞–±–æ—Ç–∞ —Å –º–µ–ª–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏</li>
        <li><strong>DETR:</strong> end-to-end detection —Å Transformer</li>
      </ul>
      
      <p><strong>Semantic Segmentation:</strong></p>
      <ul>
        <li><strong>U-Net:</strong> –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
        <li><strong>DeepLab v3+:</strong> —Ç–æ—á–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è</li>
        <li><strong>PSPNet:</strong> –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</li>
        <li><strong>SegFormer:</strong> Transformer –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏</li>
      </ul>
      
      <h4>–í—ã–±–æ—Ä –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</h4>
      
      <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞:</strong></p>
      
      <p><strong>1. –°—Ö–æ–∂–µ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤:</strong></p>
      <ul>
        <li><strong>–í—ã—Å–æ–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å:</strong> –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üî ImageNet</li>
        <li><strong>–°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å:</strong> –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üî ImageNet</li>
        <li><strong>–ù–∏–∑–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å:</strong> —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã ‚Üî ImageNet</li>
      </ul>
      
      <p><strong>2. –†–∞–∑–º–µ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞:</strong></p>
      <ul>
        <li><strong>–ú–∞–ª—ã–π (&lt;1K):</strong> feature extraction, –ø—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏</li>
        <li><strong>–°—Ä–µ–¥–Ω–∏–π (1K-10K):</strong> fine-tuning –≤–µ—Ä—Ö–Ω–∏—Ö —Å–ª–æ–µ–≤</li>
        <li><strong>–ë–æ–ª—å—à–æ–π (&gt;10K):</strong> –ø–æ–ª–Ω—ã–π fine-tuning, —Å–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <p><strong>3. –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> MobileNet, EfficientNet-B0</li>
        <li><strong>–°–µ—Ä–≤–µ—Ä—ã:</strong> ResNet, EfficientNet-B4+</li>
        <li><strong>–û–±–ª–∞–∫–æ:</strong> Vision Transformer, EfficientNet-B7</li>
      </ul>
      
      <p><strong>4. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã:</strong> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (ViT, EfficientNet-B7)</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:</strong> –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ (ResNet50, EfficientNet-B3)</li>
        <li><strong>–ü—Ä–æ—Ç–æ—Ç–∏–ø—ã:</strong> –±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (MobileNet, ResNet18)</li>
      </ul>
      
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏</h3>
      
      <h4>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
      
      <p><strong>1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</strong></p>
      
      <p><strong>–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>ImageNet —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</strong> mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]</li>
        <li><strong>–í–∞–∂–Ω–æ—Å—Ç—å:</strong> –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∫–æ –≤—Å–µ–º –≤—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º</li>
      </ul>
      
      <p><strong>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞:</strong></p>
      <ul>
        <li><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</strong> 224x224, 256x256, 384x384</li>
        <li><strong>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π:</strong> resize + center crop</li>
        <li><strong>–ê–¥–∞–ø—Ç–∞—Ü–∏—è:</strong> –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω</li>
      </ul>
      
      <p><strong>2. –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      
      <p><strong>–ë–∞–∑–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ:</strong> –ø–æ–≤–æ—Ä–æ—Ç, –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
        <li><strong>–¶–≤–µ—Ç–æ–≤—ã–µ:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏</li>
        <li><strong>–®—É–º:</strong> –≥–∞—É—Å—Å–æ–≤ —à—É–º, —Ä–∞–∑–º—ã—Ç–∏–µ</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏:</strong></p>
      <ul>
        <li><strong>Mixup:</strong> –ª–∏–Ω–µ–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–µ—Ç–æ–∫</li>
        <li><strong>CutMix:</strong> –≤—ã—Ä–µ–∑–∞–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∫–∞ —á–∞—Å—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>AutoAugment:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π</li>
        <li><strong>TrivialAugment:</strong> –ø—Ä–æ—Å—Ç–∞—è –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è</li>
      </ul>
      
      <p><strong>3. –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤:</strong></p>
      
      <p><strong>–ú–µ—Ç–æ–¥—ã:</strong></p>
      <ul>
        <li><strong>Oversampling:</strong> –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤</li>
        <li><strong>Undersampling:</strong> —É–º–µ–Ω—å—à–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –∫–ª–∞—Å—Å–æ–≤</li>
        <li><strong>SMOTE:</strong> —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤</li>
        <li><strong>Class weights:</strong> –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å</li>
      </ul>
      
      <h4>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏</h4>
      
      <p><strong>1. –ó–∞–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –≥–æ–ª–æ–≤—ã:</strong></p>
      
      <p><strong>–ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞:</strong></p>
      <pre><code>
# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ—è
model.fc = nn.Linear(model.fc.in_features, num_classes)

# –ò–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –≥–æ–ª–æ–≤–∞
model.classifier = nn.Sequential(
    nn.Dropout(0.5),
    nn.Linear(model.fc.in_features, 512),
    nn.ReLU(),
    nn.Dropout(0.3),
    nn.Linear(512, num_classes)
)
      </code></pre>
      
      <p><strong>2. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è:</strong></p>
      
      <p><strong>–î–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:</strong></p>
      <pre><code>
# –î–ª—è –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if input_channels == 1:
    # –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤ RGB –∫–∞–Ω–∞–ª–æ–≤
    pretrained_weights = model.conv1.weight.data
    model.conv1 = nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3, bias=False)
    model.conv1.weight.data = pretrained_weights.mean(dim=1, keepdim=True)

# –î–ª—è –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–∏–ø–µ—Ä—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö)
if input_channels > 3:
    model.conv1 = nn.Conv2d(input_channels, 64, kernel_size=7, stride=2, padding=3, bias=False)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–µ—Å–æ–≤
    nn.init.kaiming_normal_(model.conv1.weight, mode='fan_out', nonlinearity='relu')
      </code></pre>
      
      <p><strong>3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤:</strong></p>
      
      <p><strong>Attention –º–µ—Ö–∞–Ω–∏–∑–º—ã:</strong></p>
      <ul>
        <li><strong>Spatial attention:</strong> —Ñ–æ–∫—É—Å –Ω–∞ –≤–∞–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
        <li><strong>Channel attention:</strong> –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>Self-attention:</strong> –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–ª—å–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
      </ul>
      
      <p><strong>–ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong></p>
      <ul>
        <li><strong>Feature Pyramid Networks:</strong> –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–æ–≤</li>
        <li><strong>Dilated convolutions:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è</li>
        <li><strong>Multi-scale inputs:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤</li>
      </ul>
      
      <h4>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—É—á–µ–Ω–∏—è</h4>
      
      <p><strong>1. Learning rate scheduling:</strong></p>
      
      <p><strong>–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ learning rates:</strong></p>
      <pre><code>
# –†–∞–∑–Ω—ã–µ lr –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π –º–æ–¥–µ–ª–∏
optimizer = torch.optim.Adam([
    {'params': model.features.parameters(), 'lr': 1e-5},  # –ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–∏
    {'params': model.classifier.parameters(), 'lr': 1e-3}  # –ù–æ–≤—ã–µ —Å–ª–æ–∏
])
      </code></pre>
      
      <p><strong>Cosine annealing:</strong></p>
      <pre><code>
scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(
    optimizer, T_max=epochs, eta_min=1e-6
)
      </code></pre>
      
      <p><strong>2. –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ:</strong></p>
      
      <p>–î–ª—è —ç–º—É–ª—è—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö batch —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏:</p>
      <pre><code>
accumulation_steps = 4
optimizer.zero_grad()

for i, (inputs, targets) in enumerate(dataloader):
    outputs = model(inputs)
    loss = criterion(outputs, targets) / accumulation_steps
    loss.backward()
    
    if (i + 1) % accumulation_steps == 0:
        optimizer.step()
        optimizer.zero_grad()
      </code></pre>
      
      <p><strong>3. –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong></p>
      
      <p><strong>Dropout:</strong></p>
      <ul>
        <li><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dropout:</strong> —Å–ª—É—á–∞–π–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–æ–≤</li>
        <li><strong>DropBlock:</strong> –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –≤ CNN</li>
        <li><strong>Stochastic depth:</strong> —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏–µ —Å–ª–æ–µ–≤</li>
      </ul>
      
      <p><strong>Weight decay:</strong></p>
      <ul>
        <li><strong>L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong> —à—Ç—Ä–∞—Ñ –∑–∞ –±–æ–ª—å—à–∏–µ –≤–µ—Å–∞</li>
        <li><strong>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π weight decay:</strong> —Ä–∞–∑–Ω—ã–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–µ–≤</li>
      </ul>
      
      <h3>–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</h3>
      
      <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞</p>
      
      <p><strong>–í—ã–∑–æ–≤—ã:</strong></p>
      <ul>
        <li><strong>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> —Ü–∞—Ä–∞–ø–∏–Ω—ã, –≤–º—è—Ç–∏–Ω—ã, –∫–æ—Ä—Ä–æ–∑–∏—è, –≤–∫–ª—é—á–µ–Ω–∏—è</li>
        <li><strong>–†–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è</li>
        <li><strong>–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</strong> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å real-time –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
        <li><strong>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫:</strong> –ø—Ä–æ–ø—É—Å–∫ –¥–µ—Ñ–µ–∫—Ç–∞ = –±—Ä–∞–∫ –≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–†–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Transfer Learning:</strong></p>
      
      <p><strong>1. –í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏:</strong></p>
      <ul>
        <li><strong>EfficientNet-B3:</strong> –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏</li>
        <li><strong>–ü—Ä–µ–¥–æ–±—É—á–µ–Ω–∏–µ:</strong> ImageNet (–æ–±—â–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)</li>
        <li><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <p><strong>2. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:</strong></p>
      <ul>
        <li><strong>–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:</strong> 5000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤, 15000 –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö</li>
        <li><strong>–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –æ—Å–≤–µ—â–µ–Ω–∏—è</li>
        <li><strong>–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞:</strong> —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
      </ul>
      
      <p><strong>3. –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—É—á–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–≠—Ç–∞–ø 1:</strong> Feature extraction (2 —ç–ø–æ—Ö–∏, lr=1e-3)</li>
        <li><strong>–≠—Ç–∞–ø 2:</strong> Fine-tuning –≤–µ—Ä—Ö–Ω–∏—Ö —Å–ª–æ–µ–≤ (5 —ç–ø–æ—Ö, lr=1e-4)</li>
        <li><strong>–≠—Ç–∞–ø 3:</strong> Fine-tuning –≤—Å–µ–π –º–æ–¥–µ–ª–∏ (10 —ç–ø–æ—Ö, lr=1e-5)</li>
      </ul>
      
      <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</strong></p>
      <ul>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> 96.5% (vs 89.2% –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ —Å –Ω—É–ª—è)</li>
        <li><strong>–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:</strong> 3 –¥–Ω—è (vs 2 –Ω–µ–¥–µ–ª–∏ —Å –Ω—É–ª—è)</li>
        <li><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:</strong> 5K –æ–±—Ä–∞–∑—Ü–æ–≤ (vs 50K —Å –Ω—É–ª—è)</li>
        <li><strong>Inference –≤—Ä–µ–º—è:</strong> 15 –º—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</li>
      </ul>
      
      <h4>–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –ø–æ —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º</p>
      
      <p><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–¢–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –¥–æ–º–µ–Ω</li>
        <li><strong>–¢–æ–Ω–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è:</strong> —Ä–∞–Ω–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –∏–∑–Ω–æ—Å–∞ —Å–ª–æ–∂–Ω–æ —Ä–∞–∑–ª–∏—á–∏–º—ã</li>
        <li><strong>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–µ–¥–æ—Ç–∫–∞–∑–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è = –∞–≤–∞—Ä–∏—è</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> –æ—Ç–∫–∞–∑—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ä–µ–¥–∫–æ</li>
      </ul>
      
      <p><strong>–†–µ—à–µ–Ω–∏–µ:</strong></p>
      
      <p><strong>1. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:</strong></p>
      <ul>
        <li><strong>–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å:</strong> ResNet50 (ImageNet)</li>
        <li><strong>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ö–æ–¥–∞:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–æ–ª–æ–≤–∞:</strong> –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π</li>
      </ul>
      
      <p><strong>2. –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>–ü—Ä–µ–¥–æ–±—É—á–µ–Ω–∏–µ:</strong> –Ω–∞ –±–æ–ª—å—à–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>Domain adaptation:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é</li>
        <li><strong>Task-specific fine-tuning:</strong> –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤</li>
      </ul>
      
      <p><strong>3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</strong></p>
      <ul>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</strong> 94.2%</li>
        <li><strong>–†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ:</strong> –∑–∞ 72 —á–∞—Å–∞ –¥–æ –æ—Ç–∫–∞–∑–∞</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥:</strong> —Å 15% –¥–æ 3%</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π –Ω–∞ 8.5 –º–ª–Ω —Ä—É–±/–≥–æ–¥</li>
      </ul>
      
      <h4>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏</h4>
      
      <p><strong>–ó–∞–¥–∞—á–∞:</strong> –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π</p>
      
      <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ object detection:</strong></p>
      <ul>
        <li><strong>–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å:</strong> YOLO v8 (COCO dataset)</li>
        <li><strong>–ê–¥–∞–ø—Ç–∞—Ü–∏—è:</strong> –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</li>
      </ul>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Transfer Learning:</strong></p>
      <ul>
        <li><strong>–ë—ã—Å—Ç—Ä–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è:</strong> –∫ –Ω–æ–≤—ã–º —Ç–∏–ø–∞–º –∏–∑–¥–µ–ª–∏–π</li>
        <li><strong>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:</strong> –ª–µ–≥–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† 57700.37-2021 "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏"</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ Transfer Learning:</strong></p>
      <ul>
        <li><strong>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:</strong> –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞:</strong> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏</li>
        <li><strong>–¢—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π:</strong> —Ñ–∏–∫—Å–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π</li>
        <li><strong>–û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong> –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞</li>
      </ul>
      
      <p><strong>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Transfer Learning –ø—Ä–æ–µ–∫—Ç–∞:</strong></p>
      <ul>
        <li><strong>–ò—Å—Ö–æ–¥–Ω–∞—è –º–æ–¥–µ–ª—å:</strong> –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –¥–∞—Ç–∞—Å–µ—Ç –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–∏—è, –º–µ—Ç—Ä–∏–∫–∏</li>
        <li><strong>–¶–µ–ª–µ–≤–∞—è –∑–∞–¥–∞—á–∞:</strong> –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞, –¥–∞–Ω–Ω—ã—Ö, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</li>
        <li><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞:</strong> –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞</li>
        <li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</strong> –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞, –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏:</strong> –≥—Ä–∞–Ω–∏—Ü—ã –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <h4>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è</h4>
      
      <p><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≠–ª—å–±—Ä—É—Å:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤</li>
        <li><strong>–ë–∞–π–∫–∞–ª-–ú:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è inference –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤</li>
        <li><strong>GPU –∫–ª–∞—Å—Ç–µ—Ä—ã:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Astra Linux:</strong> —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ML pipeline –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –û–°</li>
        <li><strong>PostgresPro:</strong> —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
        <li><strong>ClickHouse:</strong> –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h3>–û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Transfer Learning</h3>
      
      <h4>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞</h4>
      
      <p><strong>1. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:</strong></p>
      
      <p><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>Accuracy:</strong> –æ–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
        <li><strong>Precision/Recall:</strong> –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ</li>
        <li><strong>F1-score:</strong> –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ precision –∏ recall</li>
        <li><strong>AUC-ROC:</strong> –ø–ª–æ—â–∞–¥—å –ø–æ–¥ ROC –∫—Ä–∏–≤–æ–π</li>
        <li><strong>Confusion matrix:</strong> –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫</li>
      </ul>
      
      <p><strong>Object Detection:</strong></p>
      <ul>
        <li><strong>mAP (mean Average Precision):</strong> –æ—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞</li>
        <li><strong>IoU (Intersection over Union):</strong> –∫–∞—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>Precision-Recall –∫—Ä–∏–≤—ã–µ:</strong> –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞</li>
      </ul>
      
      <p><strong>2. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞:</strong></p>
      
      <p><strong>Transfer Learning Effectiveness (TLE):</strong></p>
      <pre><code>
TLE = (Performance_TL - Performance_Random) / (Performance_Oracle - Performance_Random)
      </code></pre>
      
      <p>–≥–¥–µ:</p>
      <ul>
        <li><strong>Performance_TL:</strong> –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å Transfer Learning</li>
        <li><strong>Performance_Random:</strong> –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ —Å–ª—É—á–∞–π–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π</li>
        <li><strong>Performance_Oracle:</strong> —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º</li>
      </ul>
      
      <p><strong>Negative Transfer Detection:</strong></p>
      <ul>
        <li><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline:</strong> –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è</li>
        <li><strong>–ê–Ω–∞–ª–∏–∑ learning curves:</strong> —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏</li>
        <li><strong>Ablation studies:</strong> –≤–ª–∏—è–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</li>
      </ul>
      
      <h4>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏</h4>
      
      <p><strong>1. –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É:</strong></p>
      
      <p><strong>–í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è:</strong> 2-4 –Ω–µ–¥–µ–ª–∏</li>
        <li><strong>Transfer Learning:</strong> 3-7 –¥–Ω–µ–π</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏:</strong> 70-85%</li>
      </ul>
      
      <p><strong>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</strong></p>
      <ul>
        <li><strong>GPU-—á–∞—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å –Ω—É–ª—è:</strong> 500-2000</li>
        <li><strong>GPU-—á–∞—Å—ã –¥–ª—è Transfer Learning:</strong> 50-200</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:</strong> 80-90%</li>
      </ul>
      
      <p><strong>2. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:</strong></p>
      
      <p><strong>–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞:</strong></p>
      <ul>
        <li><strong>–û–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è:</strong> 10K-100K –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å</li>
        <li><strong>Transfer Learning:</strong> 100-1K –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:</strong> –≤ 10-100 —Ä–∞–∑</li>
      </ul>
      
      <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ç–∫–∏:</strong> 10-50 —Ä—É–± –∑–∞ –æ–±—Ä–∞–∑–µ—Ü</li>
        <li><strong>–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ä–∞–∑–º–µ—Ç–∫–µ:</strong> 500K-5M —Ä—É–± –Ω–∞ –ø—Ä–æ–µ–∫—Ç</li>
      </ul>
      
      <h3>–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</h3>
      
      <h4>–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Transfer Learning</h4>
      
      <p><strong>–ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π:</strong></p>
      
      <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr>
          <th>–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö</th>
          <th>–°—Ö–æ–∂–µ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤</th>
          <th>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è</th>
          <th>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</th>
        </tr>
        <tr>
          <td>–ú–∞–ª—ã–π (&lt;1K)</td>
          <td>–í—ã—Å–æ–∫–∞—è</td>
          <td>Feature Extraction</td>
          <td>–•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>–ú–∞–ª—ã–π (&lt;1K)</td>
          <td>–ù–∏–∑–∫–∞—è</td>
          <td>Feature Extraction + –Ω–æ–≤—ã–µ —Å–ª–æ–∏</td>
          <td>–£–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>–°—Ä–µ–¥–Ω–∏–π (1K-10K)</td>
          <td>–í—ã—Å–æ–∫–∞—è</td>
          <td>Fine-tuning –≤–µ—Ä—Ö–Ω–∏—Ö —Å–ª–æ–µ–≤</td>
          <td>–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>–°—Ä–µ–¥–Ω–∏–π (1K-10K)</td>
          <td>–ù–∏–∑–∫–∞—è</td>
          <td>Fine-tuning –≤—Å–µ–π –º–æ–¥–µ–ª–∏</td>
          <td>–•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>–ë–æ–ª—å—à–æ–π (&gt;10K)</td>
          <td>–í—ã—Å–æ–∫–∞—è</td>
          <td>Fine-tuning –≤—Å–µ–π –º–æ–¥–µ–ª–∏</td>
          <td>–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>–ë–æ–ª—å—à–æ–π (&gt;10K)</td>
          <td>–ù–∏–∑–∫–∞—è</td>
          <td>–û–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è –∏–ª–∏ Domain Adaptation</td>
          <td>–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</td>
        </tr>
      </table>
      
      <h4>–ò–∑–±–µ–∂–∞–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫</h4>
      
      <p><strong>1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong></p>
      <ul>
        <li><strong>–û—à–∏–±–∫–∞:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>–†–µ—à–µ–Ω–∏–µ:</strong> –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
        <li><strong>–ü—Ä–æ–≤–µ—Ä–∫–∞:</strong> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
      </ul>
      
      <p><strong>2. –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π learning rate:</strong></p>
      <ul>
        <li><strong>–û—à–∏–±–∫–∞:</strong> —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>–†–µ—à–µ–Ω–∏–µ:</strong> –Ω–∞—á–∏–Ω–∞—Ç—å —Å lr –≤ 10-100 —Ä–∞–∑ –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ validation loss</li>
      </ul>
      
      <p><strong>3. –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ domain gap:</strong></p>
      <ul>
        <li><strong>–û—à–∏–±–∫–∞:</strong> –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏</li>
        <li><strong>–†–µ—à–µ–Ω–∏–µ:</strong> –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –¥–æ–º–µ–Ω–∞–º–∏</li>
        <li><strong>–í–∞–ª–∏–¥–∞—Ü–∏—è:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ</li>
      </ul>
      
      <p><strong>4. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>–û—à–∏–±–∫–∞:</strong> –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ validation set</li>
        <li><strong>–†–µ—à–µ–Ω–∏–µ:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ test set</li>
        <li><strong>–ü—Ä–∞–∫—Ç–∏–∫–∞:</strong> cross-validation –¥–ª—è –º–∞–ª—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤</li>
      </ul>
      
      <h4>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ª–∞–¥–∫–∞</h4>
      
      <p><strong>1. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>Learning curves:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ train/validation loss</li>
        <li><strong>Gradient flow:</strong> –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤</li>
        <li><strong>Weight updates:</strong> –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤ –ø–æ —Å–ª–æ—è–º</li>
        <li><strong>Feature maps:</strong> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π</li>
      </ul>
      
      <p><strong>2. –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:</strong></p>
      <ul>
        <li><strong>Confusion matrix:</strong> –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π</li>
        <li><strong>Failure cases:</strong> –∞–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤</li>
        <li><strong>Class activation maps:</strong> –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ –º–æ–¥–µ–ª–∏</li>
        <li><strong>Adversarial examples:</strong> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–±–∞—Å—Ç–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      
      <p>Transfer Learning —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è—é—â–µ–π:</p>
      
      <ul>
        <li><strong>–£—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É:</strong> —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –º–µ—Å—è—Ü–µ–≤ –¥–æ –¥–Ω–µ–π</li>
        <li><strong>–°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:</strong> —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –º–∞–ª—ã–º–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏</li>
        <li><strong>–ü–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li><strong>–£–º–µ–Ω—å—à–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã:</strong> —ç–∫–æ–Ω–æ–º–∏—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤</li>
        <li><strong>–û–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã</li>
      </ul>
      
      <p>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏, –∞–¥–µ–∫–≤–∞—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é fine-tuning, —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞.</p>
      
      <p>–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –º–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.</p>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>
      <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Transfer Learning. –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–Ω–∞–Ω–∏–π.</p>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤:</strong> —Ü–∞—Ä–∞–ø–∏–Ω—ã, –≤–º—è—Ç–∏–Ω—ã, –∫–æ—Ä—Ä–æ–∑–∏—è, –≤–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> >95% –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤</li>
        <li><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> <50 –º—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</li>
        <li><strong>–î–∞–Ω–Ω—ã–µ:</strong> –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç (500 –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å)</li>
      </ul>
      
      <h4>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h4>
      <ul>
        <li><strong>Feature Extraction:</strong> –∑–∞–º–æ—Ä–æ–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤</li>
        <li><strong>Fine-tuning:</strong> –¥–æ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ–π –º–æ–¥–µ–ª–∏</li>
        <li><strong>Gradual unfreezing:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ —Å–ª–æ–µ–≤</li>
        <li><strong>Discriminative fine-tuning:</strong> —Ä–∞–∑–Ω—ã–µ learning rates</li>
      </ul>
      
      <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
      <ol>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞</li>
        <li>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞</li>
        <li>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π Transfer Learning</li>
        <li>–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥–æ–≤</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏</li>
        <li>–ê–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
        <li>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: Transfer Learning –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, applications
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import cv2
from PIL import Image, ImageDraw, ImageFilter
import seaborn as sns
import time
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("TRANSFER LEARNING –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê –ú–ï–¢–ê–õ–õ–û–ü–†–û–ö–ê–¢–ê")
print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
print("="*80)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
IMG_SIZE = 224  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
CHANNELS = 3    # RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
BATCH_SIZE = 32
EPOCHS = 20     # –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
N_SAMPLES_PER_CLASS = 200  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç

# –¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞
DEFECT_TYPES = [
    'normal',      # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
    'scratch',     # –¶–∞—Ä–∞–ø–∏–Ω—ã
    'dent',        # –í–º—è—Ç–∏–Ω—ã
    'corrosion',   # –ö–æ—Ä—Ä–æ–∑–∏—è
    'inclusion'    # –í–∫–ª—é—á–µ–Ω–∏—è
]

print(f"\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {IMG_SIZE}x{IMG_SIZE}")
print(f"  –ö–∞–Ω–∞–ª—ã: {CHANNELS}")
print(f"  –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {BATCH_SIZE}")
print(f"  –û–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å: {N_SAMPLES_PER_CLASS}")
print(f"  –¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤: {len(DEFECT_TYPES)}")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞
def generate_metal_surface_images(n_samples_per_class, img_size, defect_types):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞
    """
    print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞...")
    
    images = []
    labels = []
    
    for class_idx, defect_type in enumerate(defect_types):
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {defect_type}: {n_samples_per_class} –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        for i in range(n_samples_per_class):
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
            img = np.ones((img_size, img_size, 3), dtype=np.uint8)
            
            # –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –º–µ—Ç–∞–ª–ª–∞ (—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π)
            base_color = np.random.randint(180, 220)
            img[:, :, 0] = base_color + np.random.normal(0, 10, (img_size, img_size))
            img[:, :, 1] = base_color + np.random.normal(0, 10, (img_size, img_size))
            img[:, :, 2] = base_color + np.random.normal(0, 10, (img_size, img_size))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –º–µ—Ç–∞–ª–ª–∞
            for y in range(0, img_size, 4):
                for x in range(0, img_size, 4):
                    # –ú–∏–∫—Ä–æ—Ç–µ–∫—Å—Ç—É—Ä–∞
                    noise = np.random.normal(0, 5)
                    img[y:y+4, x:x+4] = np.clip(img[y:y+4, x:x+4] + noise, 0, 255)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã
            if defect_type == 'normal':
                # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
                pass
                
            elif defect_type == 'scratch':
                # –¶–∞—Ä–∞–ø–∏–Ω—ã - —Ç–æ–Ω–∫–∏–µ —Ç–µ–º–Ω—ã–µ –ª–∏–Ω–∏–∏
                n_scratches = np.random.randint(1, 4)
                for _ in range(n_scratches):
                    start_x = np.random.randint(0, img_size)
                    start_y = np.random.randint(0, img_size)
                    length = np.random.randint(30, 80)
                    angle = np.random.uniform(0, 2*np.pi)
                    width = np.random.randint(1, 3)
                    
                    for step in range(length):
                        x = int(start_x + step * np.cos(angle))
                        y = int(start_y + step * np.sin(angle))
                        
                        if 0 <= x < img_size and 0 <= y < img_size:
                            for dx in range(-width, width+1):
                                for dy in range(-width, width+1):
                                    nx, ny = x + dx, y + dy
                                    if 0 <= nx < img_size and 0 <= ny < img_size:
                                        # –¢–µ–º–Ω–∞—è —Ü–∞—Ä–∞–ø–∏–Ω–∞
                                        img[ny, nx] = np.clip(img[ny, nx] - 60, 0, 255)
            
            elif defect_type == 'dent':
                # –í–º—è—Ç–∏–Ω—ã - –∫—Ä—É–≥–ª—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
                n_dents = np.random.randint(1, 3)
                for _ in range(n_dents):
                    center_x = np.random.randint(20, img_size-20)
                    center_y = np.random.randint(20, img_size-20)
                    radius = np.random.randint(8, 20)
                    
                    for y in range(max(0, center_y-radius), min(img_size, center_y+radius+1)):
                        for x in range(max(0, center_x-radius), min(img_size, center_x+radius+1)):
                            distance = np.sqrt((x-center_x)**2 + (y-center_y)**2)
                            if distance <= radius:
                                # –ì—Ä–∞–¥–∏–µ–Ω—Ç –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è –∫ —Ü–µ–Ω—Ç—Ä—É
                                intensity_change = -30 * (1 - distance/radius)
                                img[y, x] = np.clip(img[y, x] + intensity_change, 0, 255)
            
            elif defect_type == 'corrosion':
                # –ö–æ—Ä—Ä–æ–∑–∏—è - —Ä—ã–∂–µ–≤–∞—Ç—ã–µ –ø—è—Ç–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
                n_spots = np.random.randint(2, 6)
                for _ in range(n_spots):
                    center_x = np.random.randint(10, img_size-10)
                    center_y = np.random.randint(10, img_size-10)
                    size = np.random.randint(5, 15)
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∫–æ—Ä—Ä–æ–∑–∏–∏
                    for y in range(max(0, center_y-size), min(img_size, center_y+size+1)):
                        for x in range(max(0, center_x-size), min(img_size, center_x+size+1)):
                            distance = np.sqrt((x-center_x)**2 + (y-center_y)**2)
                            if distance <= size * np.random.uniform(0.6, 1.4):
                                # –†—ã–∂–∏–π —Ü–≤–µ—Ç –∫–æ—Ä—Ä–æ–∑–∏–∏
                                img[y, x, 0] = min(255, img[y, x, 0] + 40)  # –ë–æ–ª—å—à–µ –∫—Ä–∞—Å–Ω–æ–≥–æ
                                img[y, x, 1] = max(0, img[y, x, 1] - 20)    # –ú–µ–Ω—å—à–µ –∑–µ–ª–µ–Ω–æ–≥–æ
                                img[y, x, 2] = max(0, img[y, x, 2] - 40)    # –ú–µ–Ω—å—à–µ —Å–∏–Ω–µ–≥–æ
            
            elif defect_type == 'inclusion':
                # –í–∫–ª—é—á–µ–Ω–∏—è - —Ç–µ–º–Ω—ã–µ –ø—è—Ç–Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º—ã
                n_inclusions = np.random.randint(1, 4)
                for _ in range(n_inclusions):
                    center_x = np.random.randint(5, img_size-5)
                    center_y = np.random.randint(5, img_size-5)
                    size = np.random.randint(3, 8)
                    
                    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–∫–ª—é—á–µ–Ω–∏—è
                    for y in range(max(0, center_y-size), min(img_size, center_y+size+1)):
                        for x in range(max(0, center_x-size), min(img_size, center_x+size+1)):
                            distance = np.sqrt((x-center_x)**2 + (y-center_y)**2)
                            if distance <= size * np.random.uniform(0.7, 1.3):
                                # –¢–µ–º–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
                                img[y, x] = np.clip(img[y, x] - 80, 0, 255)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            img = cv2.GaussianBlur(img, (3, 3), 0.5)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = np.clip(img, 0, 255).astype(np.uint8)
            
            images.append(img)
            labels.append(class_idx)
    
    return np.array(images), np.array(labels)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞...")
X_data, y_data = generate_metal_surface_images(N_SAMPLES_PER_CLASS, IMG_SIZE, DEFECT_TYPES)

print(f"\\n–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω:")
print(f"  –§–æ—Ä–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {X_data.shape}")
print(f"  –§–æ—Ä–º–∞ –º–µ—Ç–æ–∫: {y_data.shape}")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{X_data.min()}, {X_data.max()}]")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
print("\\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤...")

fig, axes = plt.subplots(2, 5, figsize=(20, 8))
fig.suptitle('–ü—Ä–∏–º–µ—Ä—ã —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞', fontsize=16)

for i, defect_type in enumerate(DEFECT_TYPES):
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –æ–±—Ä–∞–∑—Ü–∞ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    class_indices = np.where(y_data == i)[0]
    
    for row in range(2):
        sample_idx = class_indices[row]
        axes[row, i].imshow(X_data[sample_idx])
        if row == 0:
            axes[row, i].set_title(f'{defect_type}', fontsize=12)
        axes[row, i].axis('off')

plt.tight_layout()
plt.show()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
print("\\n" + "="*60)
print("–ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø TRANSFER LEARNING")
print("="*60)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = train_test_split(
    X_data, y_data, test_size=0.2, stratify=y_data, random_state=42
)

X_train, X_val, y_train, y_val = train_test_split(
    X_train, y_train, test_size=0.2, stratify=y_train, random_state=42
)

print(f"–†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape}")
print(f"  –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_val.shape}")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape}")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (ImageNet —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
def preprocess_for_imagenet(images):
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –Ω–∞ ImageNet –º–æ–¥–µ–ª–µ–π
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
    images = images.astype(np.float32) / 255.0
    
    # ImageNet —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    images = (images - mean) / std
    
    return images

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
X_train_norm = preprocess_for_imagenet(X_train)
X_val_norm = preprocess_for_imagenet(X_val)
X_test_norm = preprocess_for_imagenet(X_test)

print(f"\\n–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω train: [{X_train_norm.min():.3f}, {X_train_norm.max():.3f}]")
print(f"  –°—Ä–µ–¥–Ω–µ–µ train: {X_train_norm.mean():.3f}")
print(f"  Std train: {X_train_norm.std():.3f}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
train_datagen = ImageDataGenerator(
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True,
    zoom_range=0.1,
    brightness_range=[0.9, 1.1]
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π Transfer Learning
print("\\n" + "="*60)
print("–°–û–ó–î–ê–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô TRANSFER LEARNING")
print("="*60)

def create_base_model(model_name='resnet50', input_shape=(224, 224, 3), include_top=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    """
    if model_name == 'resnet50':
        base_model = applications.ResNet50(
            weights='imagenet',
            include_top=include_top,
            input_shape=input_shape
        )
    elif model_name == 'efficientnet_b3':
        base_model = applications.EfficientNetB3(
            weights='imagenet',
            include_top=include_top,
            input_shape=input_shape
        )
    elif model_name == 'mobilenet_v2':
        base_model = applications.MobileNetV2(
            weights='imagenet',
            include_top=include_top,
            input_shape=input_shape
        )
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å: {model_name}")
    
    return base_model

def create_classification_head(base_model, num_classes, dropout_rate=0.5):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é –≥–æ–ª–æ–≤—É
    """
    x = base_model.output
    x = layers.GlobalAveragePooling2D()(x)
    x = layers.Dense(512, activation='relu')(x)
    x = layers.Dropout(dropout_rate)(x)
    x = layers.Dense(256, activation='relu')(x)
    x = layers.Dropout(dropout_rate/2)(x)
    predictions = layers.Dense(num_classes, activation='softmax')(x)
    
    model = keras.Model(inputs=base_model.input, outputs=predictions)
    return model

# 1. Feature Extraction –º–æ–¥–µ–ª—å
print("\\n1. –°–æ–∑–¥–∞–Ω–∏–µ Feature Extraction –º–æ–¥–µ–ª–∏...")

base_model_fe = create_base_model('resnet50')
base_model_fe.trainable = False  # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –≤—Å–µ —Å–ª–æ–∏

model_fe = create_classification_head(base_model_fe, len(DEFECT_TYPES))

model_fe.compile(
    optimizer=keras.optimizers.Adam(learning_rate=1e-3),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

print(f"Feature Extraction –º–æ–¥–µ–ª—å:")
print(f"  –í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {model_fe.count_params():,}")
print(f"  –û–±—É—á–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {sum([tf.keras.backend.count_params(w) for w in model_fe.trainable_weights]):,}")

# 2. Fine-tuning –º–æ–¥–µ–ª—å
print("\\n2. –°–æ–∑–¥–∞–Ω–∏–µ Fine-tuning –º–æ–¥–µ–ª–∏...")

base_model_ft = create_base_model('resnet50')
model_ft = create_classification_head(base_model_ft, len(DEFECT_TYPES))

# –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ–≤—É
base_model_ft.trainable = False

model_ft.compile(
    optimizer=keras.optimizers.Adam(learning_rate=1e-3),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

print(f"Fine-tuning –º–æ–¥–µ–ª—å (–Ω–∞—á–∞–ª—å–Ω–∞—è):")
print(f"  –í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {model_ft.count_params():,}")
print(f"  –û–±—É—á–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {sum([tf.keras.backend.count_params(w) for w in model_ft.trainable_weights]):,}")

# 3. Gradual Unfreezing –º–æ–¥–µ–ª—å
print("\\n3. –°–æ–∑–¥–∞–Ω–∏–µ Gradual Unfreezing –º–æ–¥–µ–ª–∏...")

base_model_gu = create_base_model('resnet50')
model_gu = create_classification_head(base_model_gu, len(DEFECT_TYPES))

# –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–º–æ—Ä–æ–∑–∫–∏
base_model_gu.trainable = False

model_gu.compile(
    optimizer=keras.optimizers.Adam(learning_rate=1e-3),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# 4. Discriminative Fine-tuning –º–æ–¥–µ–ª—å
print("\\n4. –°–æ–∑–¥–∞–Ω–∏–µ Discriminative Fine-tuning –º–æ–¥–µ–ª–∏...")

base_model_df = create_base_model('resnet50')
model_df = create_classification_head(base_model_df, len(DEFECT_TYPES))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö learning rates
def set_discriminative_learning_rates(model, base_lr=1e-5, decay_factor=2.6):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ learning rates –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–µ–≤
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–∏
    layers_list = []
    for layer in model.layers:
        if hasattr(layer, 'layers'):  # –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–µ–ª—å –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–µ–ª–∏
            layers_list.extend(layer.layers)
        else:
            layers_list.append(layer)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ lr
    param_groups = []
    
    # –†–∞–Ω–Ω–∏–µ —Å–ª–æ–∏ (–º–µ–Ω—å—à–∏–π lr)
    early_layers = layers_list[:len(layers_list)//3]
    if early_layers:
        early_params = []
        for layer in early_layers:
            if layer.trainable_weights:
                early_params.extend(layer.trainable_weights)
        if early_params:
            param_groups.append({
                'params': early_params,
                'learning_rate': base_lr / (decay_factor ** 2)
            })
    
    # –°—Ä–µ–¥–Ω–∏–µ —Å–ª–æ–∏
    middle_layers = layers_list[len(layers_list)//3:2*len(layers_list)//3]
    if middle_layers:
        middle_params = []
        for layer in middle_layers:
            if layer.trainable_weights:
                middle_params.extend(layer.trainable_weights)
        if middle_params:
            param_groups.append({
                'params': middle_params,
                'learning_rate': base_lr / decay_factor
            })
    
    # –ü–æ–∑–¥–Ω–∏–µ —Å–ª–æ–∏ (–±–æ–ª—å—à–∏–π lr)
    late_layers = layers_list[2*len(layers_list)//3:]
    if late_layers:
        late_params = []
        for layer in late_layers:
            if layer.trainable_weights:
                late_params.extend(layer.trainable_weights)
        if late_params:
            param_groups.append({
                'params': late_params,
                'learning_rate': base_lr
            })
    
    return param_groups

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
print("\\n" + "="*60)
print("–û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
print("="*60)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏
def train_and_evaluate_model(model, model_name, X_train, y_train, X_val, y_val, 
                            epochs=10, use_augmentation=True):
    """
    –û–±—É—á–∞–µ—Ç –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å
    """
    print(f"\\n–û–±—É—á–µ–Ω–∏–µ {model_name}...")
    
    # Callbacks
    callbacks = [
        keras.callbacks.EarlyStopping(
            monitor='val_accuracy',
            patience=5,
            restore_best_weights=True
        ),
        keras.callbacks.ReduceLROnPlateau(
            monitor='val_loss',
            factor=0.5,
            patience=3,
            min_lr=1e-7
        )
    ]
    
    start_time = time.time()
    
    if use_augmentation:
        # –û–±—É—á–µ–Ω–∏–µ —Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π
        history = model.fit(
            train_datagen.flow(X_train, y_train, batch_size=BATCH_SIZE),
            steps_per_epoch=len(X_train) // BATCH_SIZE,
            epochs=epochs,
            validation_data=(X_val, y_val),
            callbacks=callbacks,
            verbose=0
        )
    else:
        # –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        history = model.fit(
            X_train, y_train,
            batch_size=BATCH_SIZE,
            epochs=epochs,
            validation_data=(X_val, y_val),
            callbacks=callbacks,
            verbose=0
        )
    
    training_time = time.time() - start_time
    
    # –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_loss, test_accuracy = model.evaluate(X_test_norm, y_test, verbose=0)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    y_pred = model.predict(X_test_norm, verbose=0)
    y_pred_classes = np.argmax(y_pred, axis=1)
    
    print(f"  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {training_time:.1f} —Å–µ–∫")
    print(f"  –¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {test_accuracy:.4f}")
    print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ—Ç–µ—Ä—è: {test_loss:.4f}")
    
    return {
        'model': model,
        'history': history,
        'test_accuracy': test_accuracy,
        'test_loss': test_loss,
        'training_time': training_time,
        'predictions': y_pred_classes
    }

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
results = {}

# 1. Feature Extraction
print("\\n1. –û–±—É—á–µ–Ω–∏–µ Feature Extraction –º–æ–¥–µ–ª–∏...")
results['Feature Extraction'] = train_and_evaluate_model(
    model_fe, 'Feature Extraction', 
    X_train_norm, y_train, X_val_norm, y_val,
    epochs=EPOCHS
)

# 2. Fine-tuning (–¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)
print("\\n2. –û–±—É—á–µ–Ω–∏–µ Fine-tuning –º–æ–¥–µ–ª–∏...")

# –≠—Ç–∞–ø 1: –æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ–≤—ã
print("  –≠—Ç–∞–ø 1: –æ–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –≥–æ–ª–æ–≤—ã...")
base_model_ft.trainable = False
model_ft.compile(
    optimizer=keras.optimizers.Adam(learning_rate=1e-3),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# –û–±—É—á–∞–µ–º –≥–æ–ª–æ–≤—É
model_ft.fit(
    X_train_norm, y_train,
    batch_size=BATCH_SIZE,
    epochs=5,
    validation_data=(X_val_norm, y_val),
    verbose=0
)

# –≠—Ç–∞–ø 2: fine-tuning –≤—Å–µ–π –º–æ–¥–µ–ª–∏
print("  –≠—Ç–∞–ø 2: fine-tuning –≤—Å–µ–π –º–æ–¥–µ–ª–∏...")
base_model_ft.trainable = True
model_ft.compile(
    optimizer=keras.optimizers.Adam(learning_rate=1e-5),  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π lr
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

results['Fine-tuning'] = train_and_evaluate_model(
    model_ft, 'Fine-tuning', 
    X_train_norm, y_train, X_val_norm, y_val,
    epochs=EPOCHS//2
)

# 3. Gradual Unfreezing
print("\\n3. –û–±—É—á–µ–Ω–∏–µ Gradual Unfreezing –º–æ–¥–µ–ª–∏...")

# –≠—Ç–∞–ø 1: –æ–±—É—á–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã
print("  –≠—Ç–∞–ø 1: –æ–±—É—á–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã...")
base_model_gu.trainable = False
model_gu.fit(
    X_train_norm, y_train,
    batch_size=BATCH_SIZE,
    epochs=3,
    validation_data=(X_val_norm, y_val),
    verbose=0
)

# –≠—Ç–∞–ø 2: —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ª–æ–µ–≤
print("  –≠—Ç–∞–ø 2: —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ª–æ–µ–≤...")
for layer in base_model_gu.layers[-20:]:
    layer.trainable = True

model_gu.compile(
    optimizer=keras.optimizers.Adam(learning_rate=1e-5),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model_gu.fit(
    X_train_norm, y_train,
    batch_size=BATCH_SIZE,
    epochs=3,
    validation_data=(X_val_norm, y_val),
    verbose=0
)

# –≠—Ç–∞–ø 3: —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ –≤—Å–µ–π –º–æ–¥–µ–ª–∏
print("  –≠—Ç–∞–ø 3: —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ –≤—Å–µ–π –º–æ–¥–µ–ª–∏...")
base_model_gu.trainable = True
model_gu.compile(
    optimizer=keras.optimizers.Adam(learning_rate=1e-6),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

results['Gradual Unfreezing'] = train_and_evaluate_model(
    model_gu, 'Gradual Unfreezing', 
    X_train_norm, y_train, X_val_norm, y_val,
    epochs=EPOCHS//3
)

# 4. Baseline: –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
print("\\n4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –Ω—É–ª—è (baseline)...")

# –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å —Ç–æ–π –∂–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, –Ω–æ –±–µ–∑ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤
base_model_scratch = applications.ResNet50(
    weights=None,  # –ë–µ–∑ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤
    include_top=False,
    input_shape=(IMG_SIZE, IMG_SIZE, CHANNELS)
)

model_scratch = create_classification_head(base_model_scratch, len(DEFECT_TYPES))
model_scratch.compile(
    optimizer=keras.optimizers.Adam(learning_rate=1e-3),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

results['From Scratch'] = train_and_evaluate_model(
    model_scratch, 'From Scratch', 
    X_train_norm, y_train, X_val_norm, y_val,
    epochs=EPOCHS
)

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
print("="*60)

# –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
print("\\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π Transfer Learning:")
print("-" * 80)
print(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<20} {'–¢–æ—á–Ω–æ—Å—Ç—å':<12} {'–í—Ä–µ–º—è (—Å–µ–∫)':<12} {'–£–ª—É—á—à–µ–Ω–∏–µ':<12}")
print("-" * 80)

baseline_accuracy = results['From Scratch']['test_accuracy']

for strategy, result in results.items():
    accuracy = result['test_accuracy']
    time_taken = result['training_time']
    improvement = ((accuracy - baseline_accuracy) / baseline_accuracy * 100) if strategy != 'From Scratch' else 0
    
    print(f"{strategy:<20} {accuracy:<12.4f} {time_taken:<12.1f} {improvement:<12.1f}%")

print("-" * 80)

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
best_strategy = max(results.keys(), key=lambda x: results[x]['test_accuracy'])
best_result = results[best_strategy]

print(f"\\n–õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy}")
print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {best_result['test_accuracy']:.4f}")

# Confusion Matrix –¥–ª—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
y_pred_best = best_result['predictions']
cm = confusion_matrix(y_test, y_pred_best)

plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
            xticklabels=DEFECT_TYPES, yticklabels=DEFECT_TYPES)
plt.title(f'Confusion Matrix - {best_strategy}')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º
print(f"\\n–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º ({best_strategy}):")
print(classification_report(y_test, y_pred_best, target_names=DEFECT_TYPES))

# –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ inference
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
print("="*60)

def measure_inference_time(model, X_sample, n_runs=100):
    """
    –ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è inference
    """
    # –ü—Ä–æ–≥—Ä–µ–≤
    _ = model.predict(X_sample[:1], verbose=0)
    
    times = []
    for _ in range(n_runs):
        start_time = time.time()
        _ = model.predict(X_sample[:1], verbose=0)
        times.append(time.time() - start_time)
    
    return np.mean(times) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

print("\\n–í—Ä–µ–º—è inference (–º—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):")
for strategy, result in results.items():
    inference_time = measure_inference_time(result['model'], X_test_norm)
    print(f"  {strategy}: {inference_time:.1f} –º—Å")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*60)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï")
print("="*60)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
daily_production = 10000     # –ª–∏—Å—Ç–æ–≤ –º–µ—Ç–∞–ª–ª–∞ –≤ –¥–µ–Ω—å
working_days = 250          # —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É
defect_rate = 0.03          # 3% –¥–µ—Ñ–µ–∫—Ç–æ–≤
manual_inspection_cost = 25  # —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä—É–±/–ª–∏—Å—Ç)
defect_cost = 2000          # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞ (—Ä—É–±)
system_accuracy = best_result['test_accuracy']

print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:")
print(f"  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {daily_production:,} –ª–∏—Å—Ç–æ–≤/–¥–µ–Ω—å")
print(f"  –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É: {working_days}")
print(f"  –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–æ–≤: {defect_rate:.1%}")
print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {manual_inspection_cost} —Ä—É–±/–ª–∏—Å—Ç")
print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞: {defect_cost:,} —Ä—É–±")

# –¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
annual_production = daily_production * working_days
annual_defects = annual_production * defect_rate
manual_inspection_total = annual_production * manual_inspection_cost
missed_defects_manual = annual_defects * 0.05 * defect_cost  # 5% –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è

current_total_cost = manual_inspection_total + missed_defects_manual

print(f"\\n–¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞):")
print(f"  –ì–æ–¥–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {annual_production:,} –ª–∏—Å—Ç–æ–≤")
print(f"  –î–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –≥–æ–¥: {annual_defects:,.0f}")
print(f"  –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {manual_inspection_total:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤: {missed_defects_manual:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {current_total_cost:,.0f} —Ä—É–±/–≥–æ–¥")

# –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI —Å–∏—Å—Ç–µ–º—ã
auto_inspection_cost = annual_production * 5  # 5 —Ä—É–± –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
false_positive_rate = 1 - system_accuracy
missed_defects_auto = annual_defects * (1 - system_accuracy) * defect_cost
false_positives_cost = annual_production * false_positive_rate * manual_inspection_cost * 0.3

new_total_cost = auto_inspection_cost + missed_defects_auto + false_positives_cost

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
development_cost_tl = 8_000_000      # –° Transfer Learning
development_cost_scratch = 15_000_000  # –° –Ω—É–ª—è
data_collection_cost = 3_000_000     # –°–±–æ—Ä –∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
training_cost = 1_500_000            # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
hardware_cost = 4_000_000            # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ

total_project_cost_tl = development_cost_tl + data_collection_cost + training_cost + hardware_cost
total_project_cost_scratch = development_cost_scratch + data_collection_cost + training_cost + hardware_cost

# –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
annual_maintenance = 1_500_000       # –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
annual_compute = 800_000             # –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
total_annual_operating = annual_maintenance + annual_compute

print(f"\\n–≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {system_accuracy:.1%}")
print(f"  –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_positive_rate:.1%}")

print(f"\\n–ù–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:")
print(f"  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {auto_inspection_cost:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã: {missed_defects_auto:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {false_positives_cost:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"  –û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {new_total_cost:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
print(f"  –° Transfer Learning: {total_project_cost_tl:,.0f} —Ä—É–±")
print(f"  –° –Ω—É–ª—è: {total_project_cost_scratch:,.0f} —Ä—É–±")
print(f"  –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç TL: {total_project_cost_scratch - total_project_cost_tl:,.0f} —Ä—É–±")
print(f"  –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_annual_operating:,.0f} —Ä—É–±/–≥–æ–¥")

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
annual_savings = current_total_cost - new_total_cost
net_annual_benefit = annual_savings - total_annual_operating
roi_tl = (net_annual_benefit - total_project_cost_tl) / total_project_cost_tl * 100
payback_months_tl = total_project_cost_tl / (net_annual_benefit / 12)

roi_scratch = (net_annual_benefit - total_project_cost_scratch) / total_project_cost_scratch * 100
payback_months_scratch = total_project_cost_scratch / (net_annual_benefit / 12)

print(f"\\n–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"  –ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {annual_savings:,.0f} —Ä—É–±")
print(f"  –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,.0f} —Ä—É–±")

print(f"\\n–° Transfer Learning:")
print(f"  ROI: {roi_tl:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months_tl:.1f} –º–µ—Å—è—Ü–∞")

print(f"\\n–° –æ–±—É—á–µ–Ω–∏–µ–º —Å –Ω—É–ª—è:")
print(f"  ROI: {roi_scratch:.0f}%")
print(f"  –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months_scratch:.1f} –º–µ—Å—è—Ü–∞")

# –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Transfer Learning
print(f"\\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Transfer Learning:")
time_savings = (results['From Scratch']['training_time'] - best_result['training_time']) / results['From Scratch']['training_time'] * 100
accuracy_improvement = (best_result['test_accuracy'] - results['From Scratch']['test_accuracy']) / results['From Scratch']['test_accuracy'] * 100

print(f"  –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {time_savings:.0f}%")
print(f"  –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: {accuracy_improvement:.1f}%")
print(f"  –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: {(total_project_cost_scratch - total_project_cost_tl):,.0f} —Ä—É–±")
print(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months_scratch - payback_months_tl:.1f} –º–µ—Å—è—Ü–∞")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print("\\n" + "="*60)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ")
print("="*60)

print(f"\\n1. –í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò:")
print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy}")
print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ª—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ({best_result['test_accuracy']:.1%}) –ø—Ä–∏ —Ä–∞–∑—É–º–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è")

print(f"\\n2. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:")
print(f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π ResNet50 –∫–∞–∫ –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
print(f"   - –î–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ–≤–∞, –∑–∞—Ç–µ–º fine-tuning")
print(f"   - –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–æ–±–∞—Å—Ç–Ω–æ—Å—Ç–∏")
print(f"   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

print(f"\\n3. –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø:")
print(f"   –§–∞–∑–∞ 1 (1 –º–µ—Å—è—Ü): –°–±–æ—Ä –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
print(f"   –§–∞–∑–∞ 2 (2 –Ω–µ–¥–µ–ª–∏): –û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
print(f"   –§–∞–∑–∞ 3 (1 –º–µ—Å—è—Ü): –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π")
print(f"   –§–∞–∑–∞ 4 (2 –Ω–µ–¥–µ–ª–∏): –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

print(f"\\n4. –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê TRANSFER LEARNING:")
print(f"   - –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ {results['From Scratch']['training_time']/best_result['training_time']:.1f} —Ä–∞–∑")
print(f"   - –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ {accuracy_improvement:.1f}%")
print(f"   - –°–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¥–∞–Ω–Ω—ã–º (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {N_SAMPLES_PER_CLASS} –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å)")
print(f"   - –≠–∫–æ–Ω–æ–º–∏—è {(total_project_cost_scratch - total_project_cost_tl)/1_000_000:.1f} –º–ª–Ω —Ä—É–± –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

print("\\n" + "="*80)
print("–°–ò–°–¢–ï–ú–ê TRANSFER LEARNING –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy}")
print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {best_result['test_accuracy']:.1%}")
print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_annual_benefit:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi_tl:.0f}%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months_tl:.1f} –º–µ—Å—è—Ü–∞")
print("="*80)`
  },

  20: {
    title: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
    duration: "110 –º–∏–Ω",
    type: "theory",
    content: `
      <h2>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</h2>
      
      <h3>–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π</h3>
      <p>–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —è–≤–ª—è—é—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –Ω–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç:</p>
      <ul>
        <li><strong>–ü–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> —É—Å–∫–æ—Ä–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ inference</li>
        <li><strong>–£–ª—É—á—à–∏—Ç—å –æ–±–æ–±—â–∞—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</strong> –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–û–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:</strong> –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</li>
        <li><strong>–°–Ω–∏–∑–∏—Ç—å –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤</li>
        <li><strong>–ü–æ–≤—ã—Å–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É –∏ –∞–Ω–æ–º–∞–ª–∏—è–º</li>
      </ul>
      
      <h3>–ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h3>
      
      <h4>–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã</h4>
      
      <p><strong>Batch Gradient Descent (BGD):</strong></p>
      <p>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –≤–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong></p>
      <pre><code>Œ∏ = Œ∏ - Œ± * ‚àáJ(Œ∏)</code></pre>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å:</strong> –≥–ª–∞–¥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –º–∏–Ω–∏–º—É–º—É</li>
        <li><strong>–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å:</strong> –¥–ª—è –≤—ã–ø—É–∫–ª—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</li>
        <li><strong>–¢–æ—á–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤</li>
        <li><strong>–í—ã—Å–æ–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏:</strong> –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞</li>
        <li><strong>–ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–∞—Ö:</strong> –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</li>
      </ul>
      
      <p><strong>Stochastic Gradient Descent (SGD):</strong></p>
      <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–ë—ã—Å—Ç—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞</li>
        <li><strong>–ù–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏:</strong> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É</li>
        <li><strong>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–∑–±–µ–≥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤:</strong> —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å</li>
        <li><strong>Online –æ–±—É—á–µ–Ω–∏–µ:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>–í—ã—Å–æ–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤:</strong> —à—É–º–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
        <li><strong>–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å:</strong> –∫–æ–ª–µ–±–∞–Ω–∏—è –≤–æ–∫—Ä—É–≥ –º–∏–Ω–∏–º—É–º–∞</li>
        <li><strong>–°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ learning rate:</strong> —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞</li>
      </ul>
      
      <p><strong>Mini-batch Gradient Descent:</strong></p>
      <p>–ö–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É BGD –∏ SGD, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–µ–±–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏ –¥–∞–Ω–Ω—ã—Ö.</p>
      
      <p><strong>–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:</strong></p>
      <ul>
        <li><strong>–ú–∞–ª—ã–µ –±–∞—Ç—á–∏ (16-32):</strong> –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å</li>
        <li><strong>–°—Ä–µ–¥–Ω–∏–µ –±–∞—Ç—á–∏ (64-128):</strong> –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ë–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏ (256+):</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ª—É—á—à–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU</li>
      </ul>
      
      <h4>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h4>
      
      <p><strong>Momentum:</strong></p>
      <p>–î–æ–±–∞–≤–ª—è–µ—Ç "–∏–Ω–µ—Ä—Ü–∏—é" –∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–º—É —Å–ø—É—Å–∫—É, –Ω–∞–∫–∞–ø–ª–∏–≤–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—à–ª—ã—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª—ã:</strong></p>
      <pre><code>
v_t = Œ≤ * v_{t-1} + (1 - Œ≤) * ‚àáJ(Œ∏_t)
Œ∏_{t+1} = Œ∏_t - Œ± * v_t
      </code></pre>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º</li>
        <li><strong>–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏–π:</strong> —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤</li>
        <li><strong>–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤:</strong> –∏–Ω–µ—Ä—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç "–ø—Ä–æ—Å–∫–æ—á–∏—Ç—å" –ø–ª–æ—Ö–∏–µ –æ–±–ª–∞—Å—Ç–∏</li>
      </ul>
      
      <p><strong>Nesterov Accelerated Gradient (NAG):</strong></p>
      <p>–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è momentum, –∫–æ—Ç–æ—Ä–∞—è "–∑–∞–≥–ª—è–¥—ã–≤–∞–µ—Ç –≤–ø–µ—Ä–µ–¥" –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª—ã:</strong></p>
      <pre><code>
v_t = Œ≤ * v_{t-1} + Œ± * ‚àáJ(Œ∏_t - Œ≤ * v_{t-1})
Œ∏_{t+1} = Œ∏_t - v_t
      </code></pre>
      
      <p><strong>AdaGrad (Adaptive Gradient):</strong></p>
      <p>–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç learning rate –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª—ã:</strong></p>
      <pre><code>
G_t = G_{t-1} + (‚àáJ(Œ∏_t))^2
Œ∏_{t+1} = Œ∏_t - (Œ± / ‚àö(G_t + Œµ)) * ‚àáJ(Œ∏_t)
      </code></pre>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è learning rate:</strong> –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
        <li><strong>–•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:</strong> –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è NLP –∑–∞–¥–∞—á</li>
        <li><strong>–ë—ã—Å—Ç—Ä–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö:</strong> —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong></p>
      <ul>
        <li><strong>–ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ learning rate:</strong> –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ</li>
        <li><strong>–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤:</strong> –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Ä–∞—Å—Ç–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ</li>
      </ul>
      
      <p><strong>RMSprop:</strong></p>
      <p>–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É AdaGrad, –∏—Å–ø–æ–ª—å–∑—É—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª—ã:</strong></p>
      <pre><code>
E[g^2]_t = Œ≤ * E[g^2]_{t-1} + (1 - Œ≤) * (‚àáJ(Œ∏_t))^2
Œ∏_{t+1} = Œ∏_t - (Œ± / ‚àö(E[g^2]_t + Œµ)) * ‚àáJ(Œ∏_t)
      </code></pre>
      
      <p><strong>Adam (Adaptive Moment Estimation):</strong></p>
      <p>–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Momentum –∏ RMSprop, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –∫–∞–∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤, —Ç–∞–∫ –∏ –∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª—ã:</strong></p>
      <pre><code>
m_t = Œ≤_1 * m_{t-1} + (1 - Œ≤_1) * ‚àáJ(Œ∏_t)
v_t = Œ≤_2 * v_{t-1} + (1 - Œ≤_2) * (‚àáJ(Œ∏_t))^2
mÃÇ_t = m_t / (1 - Œ≤_1^t)
vÃÇ_t = v_t / (1 - Œ≤_2^t)
Œ∏_{t+1} = Œ∏_t - Œ± * mÃÇ_t / (‚àövÃÇ_t + Œµ)
      </code></pre>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Adam:</strong></p>
      <ul>
        <li><strong>–ë—ã—Å—Ç—Ä–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å:</strong> —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –∑–∞–¥–∞—á</li>
        <li><strong>–†–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å –∫ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:</strong> —Ö–æ—Ä–æ—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</li>
        <li><strong>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏:</strong> —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã</li>
        <li><strong>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:</strong> –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –±–æ–ª—å—à–∏–µ –¥–∞—Ç–∞—Å–µ—Ç—ã</li>
      </ul>
      
      <p><strong>AdamW:</strong></p>
      <p>–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Adam —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π weight decay.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª–∞ weight decay:</strong></p>
      <pre><code>Œ∏_{t+1} = Œ∏_t - Œ± * (mÃÇ_t / (‚àövÃÇ_t + Œµ) + Œª * Œ∏_t)</code></pre>
      
      <p><strong>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã:</strong></p>
      
      <p><strong>RAdam (Rectified Adam):</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> Adam –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø–ª–æ—Ö—É—é —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–†–µ—à–µ–Ω–∏–µ:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É Adam –∏ SGD</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</li>
      </ul>
      
      <p><strong>Lookahead:</strong></p>
      <ul>
        <li><strong>–ò–¥–µ—è:</strong> –º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—ã—Å—Ç—Ä—ã—Ö –≤–µ—Å–æ–≤</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å</li>
        <li><strong>–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –ª—é–±—ã–º –±–∞–∑–æ–≤—ã–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–º</li>
      </ul>
      
      <h4>–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</h4>
      
      <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr>
          <th>–ó–∞–¥–∞—á–∞</th>
          <th>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä</th>
          <th>Learning Rate</th>
          <th>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ</th>
        </tr>
        <tr>
          <td>Computer Vision</td>
          <td>SGD + Momentum</td>
          <td>0.1 ‚Üí 0.001</td>
          <td>–õ—É—á—à–∞—è –æ–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>NLP / Transformers</td>
          <td>AdamW</td>
          <td>1e-4 ‚Üí 1e-5</td>
          <td>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª—è—Ö</td>
        </tr>
        <tr>
          <td>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã</td>
          <td>Adam</td>
          <td>1e-3 ‚Üí 1e-4</td>
          <td>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö</td>
        </tr>
        <tr>
          <td>–ú–∞–ª—ã–µ –¥–∞–Ω–Ω—ã–µ</td>
          <td>RAdam</td>
          <td>1e-3</td>
          <td>–†–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é</td>
        </tr>
        <tr>
          <td>Transfer Learning</td>
          <td>AdamW</td>
          <td>1e-5 ‚Üí 1e-6</td>
          <td>–û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –≤–µ—Å–æ–≤</td>
        </tr>
      </table>
      
      <h3>–¢–µ—Ö–Ω–∏–∫–∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏</h3>
      
      <h4>Dropout –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã</h4>
      
      <p><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Dropout:</strong></p>
      <p>–°–ª—É—á–∞–π–Ω–æ –æ–±–Ω—É–ª—è–µ—Ç —á–∞—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è, –∑–∞—Å—Ç–∞–≤–ª—è—è —Å–µ—Ç—å –Ω–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω—ã.</p>
      
      <p><strong>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</strong></p>
      <pre><code>
y = f(x * m) / (1 - p)
–≥–¥–µ m ~ Bernoulli(1 - p)
      </code></pre>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:</strong> —É–º–µ–Ω—å—à–µ–Ω–∏–µ co-adaptation –Ω–µ–π—Ä–æ–Ω–æ–≤</li>
        <li><strong>–£–ª—É—á—à–µ–Ω–∏–µ –æ–±–æ–±—â–µ–Ω–∏—è:</strong> —Å–µ—Ç—å —É—á–∏—Ç—Å—è –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–æ–±–∞—Å—Ç–Ω–æ–π</li>
        <li><strong>–ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</strong> –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É</li>
        <li><strong>–≠—Ñ—Ñ–µ–∫—Ç –∞–Ω—Å–∞–º–±–ª—è:</strong> –∏–º–∏—Ç–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–¥—Å–µ—Ç–µ–π</li>
      </ul>
      
      <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é:</strong></p>
      <ul>
        <li><strong>–ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏:</strong> p = 0.5 (50% dropout)</li>
        <li><strong>–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–ª–æ–∏:</strong> p = 0.2-0.3 (20-30% dropout)</li>
        <li><strong>–í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π:</strong> p = 0.1-0.2 (10-20% dropout)</li>
        <li><strong>–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ —Å–ª–æ–∏:</strong> —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ (—Å–º. –Ω–∏–∂–µ)</li>
      </ul>
      
      <p><strong>DropBlock:</strong></p>
      <p>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è dropout –¥–ª—è —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω—É–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏.</p>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ DropBlock:</strong></p>
      <ul>
        <li><strong>–õ—É—á—à–µ –¥–ª—è CNN:</strong> —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é</li>
        <li><strong>–ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong> –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>–£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –∑–∞–¥–∞—á–∞—Ö object detection</li>
      </ul>
      
      <p><strong>Spatial Dropout:</strong></p>
      <p>–û–±–Ω—É–ª—è–µ—Ç —Ü–µ–ª—ã–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.</p>
      
      <p><strong>Variational Dropout:</strong></p>
      <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–π–µ—Å–æ–≤—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö dropout rates.</p>
      
      <p><strong>Dropout –¥–ª—è RNN:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dropout –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
        <li><strong>–†–µ—à–µ–Ω–∏–µ:</strong> –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –º–∞—Å–∫–∏ –Ω–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–∞—Ö</li>
        <li><strong>Variational RNN Dropout:</strong> —Ä–∞–∑–Ω—ã–µ –º–∞—Å–∫–∏ –¥–ª—è –≤—Ö–æ–¥–æ–≤ –∏ —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π</li>
      </ul>
      
      <h4>Batch Normalization</h4>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:</strong></p>
      <p>–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤—Ö–æ–¥—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è, –ø—Ä–∏–≤–æ–¥—è –∏—Ö –∫ –Ω—É–ª–µ–≤–æ–º—É —Å—Ä–µ–¥–Ω–µ–º—É –∏ –µ–¥–∏–Ω–∏—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏.</p>
      
      <p><strong>–§–æ—Ä–º—É–ª—ã:</strong></p>
      <pre><code>
Œº_B = (1/m) * Œ£ x_i                    # —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –±–∞—Ç—á—É
œÉ¬≤_B = (1/m) * Œ£ (x_i - Œº_B)¬≤         # –¥–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ –±–∞—Ç—á—É
xÃÇ_i = (x_i - Œº_B) / ‚àö(œÉ¬≤_B + Œµ)       # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
y_i = Œ≥ * xÃÇ_i + Œ≤                      # –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–¥–≤–∏–≥
      </code></pre>
      
      <p><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong></p>
      <ul>
        <li><strong>–£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:</strong> –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ learning rates</li>
        <li><strong>–£–º–µ–Ω—å—à–µ–Ω–∏–µ internal covariate shift:</strong> —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–π</li>
        <li><strong>–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</strong> —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</strong> –±–æ–ª–µ–µ —Ä–æ–±–∞—Å—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</li>
      </ul>
      
      <p><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong></p>
      <ul>
        <li><strong>–†–∞–∑–º–µ—â–µ–Ω–∏–µ:</strong> –æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Å–ª–æ—è, –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</li>
        <li><strong>–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞:</strong> —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å –±–æ–ª—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏ (>32)</li>
        <li><strong>Inference:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ running statistics –≤–º–µ—Å—Ç–æ batch statistics</li>
      </ul>
      
      <p><strong>–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:</strong></p>
      
      <p><strong>Layer Normalization:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º –≤–º–µ—Å—Ç–æ –±–∞—Ç—á–∞</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> RNN, Transformers, –º–∞–ª—ã–µ –±–∞—Ç—á–∏</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞</li>
      </ul>
      
      <p><strong>Instance Normalization:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> style transfer, –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏</li>
        <li><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong> —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É –æ–±—Ä–∞–∑—Ü–∞–º–∏</li>
      </ul>
      
      <p><strong>Group Normalization:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> object detection, segmentation</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏ –º–∞–ª—ã—Ö –±–∞—Ç—á–∞—Ö</li>
      </ul>
      
      <h4>Weight Decay –∏ L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è</h4>
      
      <p><strong>L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è:</strong></p>
      <p>–î–æ–±–∞–≤–ª—è–µ—Ç —à—Ç—Ä–∞—Ñ –∑–∞ –±–æ–ª—å—à–∏–µ –≤–µ—Å–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Ç–µ—Ä—å.</p>
      
      <p><strong>–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong></p>
      <pre><code>L_total = L_original + Œª * Œ£ ||w||¬≤</code></pre>
      
      <p><strong>Weight Decay:</strong></p>
      <p>–ü—Ä—è–º–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.</p>
      
      <p><strong>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤:</strong></p>
      <pre><code>w_{t+1} = w_t - Œ± * (‚àáL + Œª * w_t)</code></pre>
      
      <p><strong>–†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É L2 –∏ Weight Decay:</strong></p>
      <ul>
        <li><strong>–î–ª—è SGD:</strong> L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –∏ weight decay —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã</li>
        <li><strong>–î–ª—è Adam:</strong> weight decay –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω</li>
        <li><strong>–ü—Ä–∞–∫—Ç–∏–∫–∞:</strong> AdamW –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é weight decay</li>
      </ul>
      
      <p><strong>–í—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–ú–∞–ª—ã–µ –º–æ–¥–µ–ª–∏:</strong> Œª = 1e-4 –¥–æ 1e-3</li>
        <li><strong>–ë–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏:</strong> Œª = 1e-5 –¥–æ 1e-4</li>
        <li><strong>Transfer Learning:</strong> Œª = 1e-6 –¥–æ 1e-5</li>
      </ul>
      
      <h4>Early Stopping</h4>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong></p>
      <p>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ.</p>
      
      <p><strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong></p>
      <ol>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫–∏:</strong> –æ–±—ã—á–Ω–æ validation loss –∏–ª–∏ accuracy</li>
        <li><strong>Patience:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è</li>
        <li><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</strong> –ø–æ—Ä–æ–≥ –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è</li>
        <li><strong>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤:</strong> –≤–æ–∑–≤—Ä–∞—Ç –∫ –ª—É—á—à–∏–º –≤–µ—Å–∞–º</li>
      </ol>
      
      <p><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</strong></p>
      <ul>
        <li><strong>Patience:</strong> 5-20 —ç–ø–æ—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏</li>
        <li><strong>Min_delta:</strong> 0.001-0.01 –¥–ª—è loss, 0.001 –¥–ª—è accuracy</li>
        <li><strong>Restore_best_weights:</strong> –≤—Å–µ–≥–¥–∞ True –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞</li>
      </ul>
      
      <h4>Data Augmentation –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è</h4>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong></p>
      <p>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±–æ–±—â–∞—é—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.</p>
      
      <p><strong>–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–ü–æ–≤–æ—Ä–æ—Ç:</strong> ¬±10-30 –≥—Ä–∞–¥—É—Å–æ–≤</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> 0.8-1.2 –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞</li>
        <li><strong>–°–¥–≤–∏–≥:</strong> ¬±10-20% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
        <li><strong>–û—Ç—Ä–∞–∂–µ–Ω–∏–µ:</strong> –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ/–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ</li>
        <li><strong>–û–±—Ä–µ–∑–∫–∞:</strong> random crop —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º resize</li>
      </ul>
      
      <p><strong>–¶–≤–µ—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–Ø—Ä–∫–æ—Å—Ç—å:</strong> ¬±20-30% –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π</li>
        <li><strong>–ö–æ–Ω—Ç—Ä–∞—Å—Ç:</strong> 0.7-1.3 –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ</li>
        <li><strong>–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å:</strong> 0.7-1.3 –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π</li>
        <li><strong>–û—Ç—Ç–µ–Ω–æ–∫:</strong> ¬±10-20 –≥—Ä–∞–¥—É—Å–æ–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏:</strong></p>
      
      <p><strong>Mixup:</strong></p>
      <pre><code>
x_mixed = Œª * x_i + (1 - Œª) * x_j
y_mixed = Œª * y_i + (1 - Œª) * y_j
–≥–¥–µ Œª ~ Beta(Œ±, Œ±)
      </code></pre>
      
      <p><strong>CutMix:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –≤—ã—Ä–µ–∑–∞–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∫–∞ —á–∞—Å—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è object detection</li>
      </ul>
      
      <p><strong>AutoAugment:</strong></p>
      <ul>
        <li><strong>–ò–¥–µ—è:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π</li>
        <li><strong>–ú–µ—Ç–æ–¥:</strong> reinforcement learning –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π</li>
        <li><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> dataset-specific –ø–æ–ª–∏—Ç–∏–∫–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏</li>
      </ul>
      
      <h3>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è</h3>
      
      <h4>–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è</h4>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏:</strong></p>
      <p>–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.</p>
      
      <p><strong>–¢–∏–ø—ã –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏:</strong></p>
      
      <p><strong>Post-training Quantization:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å:</strong> –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —É–∂–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –±—ã—Å—Ç—Ä–æ—Ç–∞, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> –≤–æ–∑–º–æ–∂–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –±—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</li>
      </ul>
      
      <p><strong>Quantization-aware Training (QAT):</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å:</strong> —Å–∏–º—É–ª—è—Ü–∏—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã</li>
      </ul>
      
      <p><strong>–£—Ä–æ–≤–Ω–∏ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏:</strong></p>
      
      <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr>
          <th>–¢–∏–ø</th>
          <th>–ë–∏—Ç—ã</th>
          <th>–£—Å–∫–æ—Ä–µ–Ω–∏–µ</th>
          <th>–ü–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏</th>
          <th>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</th>
        </tr>
        <tr>
          <td>FP32</td>
          <td>32</td>
          <td>1x</td>
          <td>0%</td>
          <td>–û–±—É—á–µ–Ω–∏–µ, –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</td>
        </tr>
        <tr>
          <td>FP16</td>
          <td>16</td>
          <td>1.5-2x</td>
          <td>0-0.1%</td>
          <td>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ GPU</td>
        </tr>
        <tr>
          <td>INT8</td>
          <td>8</td>
          <td>2-4x</td>
          <td>0.5-2%</td>
          <td>Edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</td>
        </tr>
        <tr>
          <td>INT4</td>
          <td>4</td>
          <td>4-8x</td>
          <td>2-5%</td>
          <td>–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</td>
        </tr>
        <tr>
          <td>Binary</td>
          <td>1</td>
          <td>10-50x</td>
          <td>5-15%</td>
          <td>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, IoT</td>
        </tr>
      </table>
      
      <p><strong>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏:</strong></p>
      
      <p><strong>TensorFlow Lite:</strong></p>
      <pre><code>
converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.target_spec.supported_types = [tf.float16]
quantized_model = converter.convert()
      </code></pre>
      
      <p><strong>PyTorch:</strong></p>
      <pre><code>
model.qconfig = torch.quantization.get_default_qconfig('fbgemm')
torch.quantization.prepare(model, inplace=True)
# –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
torch.quantization.convert(model, inplace=True)
      </code></pre>
      
      <h4>Pruning (–û–±—Ä–µ–∑–∫–∞)</h4>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong></p>
      <p>–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã—Ö –≤–µ—Å–æ–≤ –∏–ª–∏ –Ω–µ–π—Ä–æ–Ω–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏.</p>
      
      <p><strong>–¢–∏–ø—ã pruning:</strong></p>
      
      <p><strong>Magnitude-based Pruning:</strong></p>
      <ul>
        <li><strong>–ö—Ä–∏—Ç–µ—Ä–∏–π:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏</li>
        <li><strong>–ü—Ä–æ—Å—Ç–æ—Ç–∞:</strong> –ª–µ–≥–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å</li>
        <li><strong>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ</li>
      </ul>
      
      <p><strong>Structured Pruning:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ —Å–ª–æ–µ–≤</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> —Ä–µ–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –∂–µ–ª–µ–∑–µ</li>
        <li><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>Unstructured Pruning:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∂–µ–ª–µ–∑–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è</li>
      </ul>
      
      <p><strong>Gradual Pruning:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å:</strong> –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ sparsity –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–§–æ—Ä–º—É–ª–∞:</strong> s_t = s_f + (s_i - s_f) * (1 - (t - t_0)/(t_f - t_0))^3</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –º–æ–¥–µ–ª—å –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∏–∑–º–µ–Ω—è—é—â–µ–π—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ</li>
      </ul>
      
      <p><strong>Lottery Ticket Hypothesis:</strong></p>
      <ul>
        <li><strong>–ò–¥–µ—è:</strong> –≤ —Å–ª—É—á–∞–π–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –µ—Å—Ç—å –ø–æ–¥—Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–±—É—á–∏—Ç—å –¥–æ —Ç–æ–π –∂–µ —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å:</strong> –æ–±—É—á–µ–Ω–∏–µ ‚Üí pruning ‚Üí —Å–±—Ä–æ—Å –≤–µ—Å–æ–≤ ‚Üí –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
      </ul>
      
      <h4>Knowledge Distillation</h4>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong></p>
      <p>–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ (student) –Ω–∞ –≤—ã—Ö–æ–¥–∞—Ö –±–æ–ª—å—à–æ–π –º–æ–¥–µ–ª–∏ (teacher).</p>
      
      <p><strong>–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å:</strong></p>
      <pre><code>
L_total = Œ± * L_CE(y_true, y_student) + (1-Œ±) * L_KD(y_teacher, y_student)
L_KD = KL_divergence(softmax(z_teacher/T), softmax(z_student/T))
      </code></pre>
      
      <p><strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong></p>
      <ul>
        <li><strong>Temperature (T):</strong> 3-5 –¥–ª—è "—Å–º—è–≥—á–µ–Ω–∏—è" —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π</li>
        <li><strong>Alpha (Œ±):</strong> 0.1-0.3 –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏</li>
        <li><strong>–†–∞–∑–º–µ—Ä student:</strong> –æ–±—ã—á–Ω–æ –≤ 2-10 —Ä–∞–∑ –º–µ–Ω—å—à–µ teacher</li>
      </ul>
      
      <p><strong>–í–∞—Ä–∏–∞–Ω—Ç—ã distillation:</strong></p>
      
      <p><strong>Feature Distillation:</strong></p>
      <ul>
        <li><strong>–ò–¥–µ—è:</strong> –ø–µ—Ä–µ–¥–∞—á–∞ –∑–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è</li>
        <li><strong>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É feature maps</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –±–æ–ª–µ–µ –±–æ–≥–∞—Ç–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∑–Ω–∞–Ω–∏–π</li>
      </ul>
      
      <p><strong>Attention Distillation:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong> –ø–µ—Ä–µ–¥–∞—á–∞ attention –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—Ç teacher –∫ student</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è Transformers</li>
      </ul>
      
      <p><strong>Self-Distillation:</strong></p>
      <ul>
        <li><strong>–ò–¥–µ—è:</strong> –º–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö</li>
        <li><strong>–ü—Ä–æ—Ü–µ—Å—Å:</strong> –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ</li>
      </ul>
      
      <h4>Neural Architecture Search (NAS)</h4>
      
      <p><strong>–ü—Ä–∏–Ω—Ü–∏–ø:</strong></p>
      <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π.</p>
      
      <p><strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã NAS:</strong></p>
      
      <p><strong>Search Space:</strong></p>
      <ul>
        <li><strong>Macro search space:</strong> –æ–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏</li>
        <li><strong>Micro search space:</strong> —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</strong> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, FLOPs, latency</li>
      </ul>
      
      <p><strong>Search Strategy:</strong></p>
      <ul>
        <li><strong>Reinforcement Learning:</strong> –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</li>
        <li><strong>Evolutionary Algorithm:</strong> –º—É—Ç–∞—Ü–∏–∏ –∏ —Å–µ–ª–µ–∫—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li><strong>Gradient-based:</strong> –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä—É–µ–º—ã–π –ø–æ–∏—Å–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
      </ul>
      
      <p><strong>Performance Estimation:</strong></p>
      <ul>
        <li><strong>Full Training:</strong> –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</li>
        <li><strong>Early Stopping:</strong> –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —ç–ø–æ—Ö</li>
        <li><strong>Weight Sharing:</strong> —Å—É–ø–µ—Ä-—Å–µ—Ç—å —Å –æ–±—â–∏–º–∏ –≤–µ—Å–∞–º–∏</li>
        <li><strong>Predictor:</strong> –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã:</strong></p>
      
      <p><strong>EfficientNet:</strong></p>
      <ul>
        <li><strong>Compound Scaling:</strong> –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã, —à–∏—Ä–∏–Ω—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</li>
        <li><strong>–§–æ—Ä–º—É–ª–∞:</strong> depth = Œ±^œÜ, width = Œ≤^œÜ, resolution = Œ≥^œÜ</li>
        <li><strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:</strong> Œ± * Œ≤¬≤ * Œ≥¬≤ ‚âà 2</li>
      </ul>
      
      <p><strong>Once-for-All (OFA):</strong></p>
      <ul>
        <li><strong>–ò–¥–µ—è:</strong> –æ–¥–Ω–∞ —Å—É–ø–µ—Ä-—Å–µ—Ç—å –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
        <li><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –±—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</li>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</li>
      </ul>
      
      <h3>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è</h3>
      
      <h4>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –æ–±—É—á–µ–Ω–∏—è</h4>
      
      <p><strong>–ê–Ω–∞–ª–∏–∑ learning curves:</strong></p>
      
      <p><strong>–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ (Overfitting):</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–∑–Ω–∞–∫–∏:</strong> train loss –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–∞–¥–∞—Ç—å, validation loss —Ä–∞—Å—Ç–µ—Ç</li>
        <li><strong>–†–µ—à–µ–Ω–∏—è:</strong> –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è, early stopping</li>
        <li><strong>–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:</strong> cross-validation, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è</li>
      </ul>
      
      <p><strong>–ù–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ (Underfitting):</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–∑–Ω–∞–∫–∏:</strong> –∏ train, –∏ validation loss –≤—ã—Å–æ–∫–∏–µ –∏ –Ω–µ —É–ª—É—á—à–∞—é—Ç—Å—è</li>
        <li><strong>–†–µ—à–µ–Ω–∏—è:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏, –±–æ–ª—å—à–µ —ç–ø–æ—Ö</li>
        <li><strong>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</strong> –∞–Ω–∞–ª–∏–∑ capacity –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–±–ª–µ–º—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏:</strong></p>
      
      <p><strong>Vanishing Gradients:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–∑–Ω–∞–∫–∏:</strong> –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –≤ —Ä–∞–Ω–Ω–∏—Ö —Å–ª–æ—è—Ö –æ—á–µ–Ω—å –º–∞–ª—ã</li>
        <li><strong>–†–µ—à–µ–Ω–∏—è:</strong> skip connections, batch normalization, –ª—É—á—à–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</li>
        <li><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ norm –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–ª–æ—è–º</li>
      </ul>
      
      <p><strong>Exploding Gradients:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–∑–Ω–∞–∫–∏:</strong> loss —Ä–µ–∑–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, NaN –∑–Ω–∞—á–µ–Ω–∏—è</li>
        <li><strong>–†–µ—à–µ–Ω–∏—è:</strong> gradient clipping, —Å–Ω–∏–∂–µ–Ω–∏–µ learning rate</li>
        <li><strong>–§–æ—Ä–º—É–ª–∞ clipping:</strong> g = g * min(1, threshold / ||g||)</li>
      </ul>
      
      <h4>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h4>
      
      <p><strong>TensorBoard:</strong></p>
      <ul>
        <li><strong>Scalars:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ loss, accuracy, learning rate</li>
        <li><strong>Histograms:</strong> —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤</li>
        <li><strong>Images:</strong> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ feature maps</li>
        <li><strong>Graphs:</strong> –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏</li>
      </ul>
      
      <p><strong>Weights & Biases (wandb):</strong></p>
      <ul>
        <li><strong>Experiment tracking:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
        <li><strong>Hyperparameter sweeps:</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</li>
        <li><strong>Model versioning:</strong> –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Collaboration:</strong> —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã</li>
      </ul>
      
      <p><strong>MLflow:</strong></p>
      <ul>
        <li><strong>Tracking:</strong> —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∏ –º–µ—Ç—Ä–∏–∫–∏</li>
        <li><strong>Projects:</strong> –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤</li>
        <li><strong>Models:</strong> —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –º–æ–¥–µ–ª–µ–π</li>
        <li><strong>Registry:</strong> —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</li>
      </ul>
      
      <h4>–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h4>
      
      <p><strong>–ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç:</strong></p>
      
      <p><strong>GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è:</strong></p>
      <ul>
        <li><strong>nvidia-smi:</strong> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPU</li>
        <li><strong>–¶–µ–ª—å:</strong> >80% —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</li>
        <li><strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> –Ω–∏–∑–∫–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ bottleneck</li>
      </ul>
      
      <p><strong>Memory –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong></p>
      <ul>
        <li><strong>PyTorch Profiler:</strong> –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏</li>
        <li><strong>Gradient accumulation:</strong> –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏</li>
        <li><strong>Mixed precision:</strong> —ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏ —Å FP16</li>
      </ul>
      
      <p><strong>Data loading:</strong></p>
      <ul>
        <li><strong>Num_workers:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</li>
        <li><strong>Pin_memory:</strong> —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ GPU</li>
        <li><strong>Prefetch_factor:</strong> –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ç—á–µ–π</li>
      </ul>
      
      <h3>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 25010-2015 "–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"</h4>
      
      <p><strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</strong></p>
      <ul>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞, –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å</li>
        <li><strong>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤</li>
        <li><strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã</li>
        <li><strong>–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å:</strong> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
      </ul>
      
      <p><strong>–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:</strong></p>
      <ul>
        <li><strong>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</strong> <100 –º—Å –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º</li>
        <li><strong>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</strong> >99.9% –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</li>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> >95% –¥–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞</li>
        <li><strong>–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤</li>
      </ul>
      
      <h4>–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è</h4>
      
      <p><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∂–µ–ª–µ–∑–∞:</strong></p>
      
      <p><strong>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≠–ª—å–±—Ä—É—Å:</strong></p>
      <ul>
        <li><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong> VLIW –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</li>
        <li><strong>–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –ø–æ–¥ –≠–ª—å–±—Ä—É—Å</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã</li>
      </ul>
      
      <p><strong>–ë–∞–π–∫–∞–ª-–ú:</strong></p>
      <ul>
        <li><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> edge computing, IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</li>
        <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</strong> –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è, pruning –¥–ª—è ARM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</li>
        <li><strong>–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</li>
      </ul>
      
      <p><strong>–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</strong></p>
      
      <p><strong>Astra Linux:</strong></p>
      <ul>
        <li><strong>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</strong> –∞–¥–∞–ø—Ç–∞—Ü–∏—è ML —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤</li>
        <li><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ò–ë</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ —Ä–æ—Å—Å–∏–π—Å–∫—É—é –û–°</li>
      </ul>
      
      <p><strong>PostgresPro:</strong></p>
      <ul>
        <li><strong>ML —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:</strong> MADlib, PostGIS –¥–ª—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö</li>
        <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ML</li>
        <li><strong>–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</li>
      </ul>
      
      <h3>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
      
      <p>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —è–≤–ª—è—é—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–∏–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç:</p>
      
      <ul>
        <li><strong>–ü–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> —É—Å–∫–æ—Ä–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ inference –≤ 2-10 —Ä–∞–∑</li>
        <li><strong>–£–ª—É—á—à–∏—Ç—å –æ–±–æ–±—â–∞—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:</strong> —Å–Ω–∏–∑–∏—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ 10-30%</li>
        <li><strong>–û–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:</strong> –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ</li>
        <li><strong>–°–Ω–∏–∑–∏—Ç—å –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</li>
        <li><strong>–ü–æ–≤—ã—Å–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º—É –∏ –∞–Ω–æ–º–∞–ª–∏—è–º</li>
      </ul>
      
      <p>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Ö–Ω–∏–∫ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∂–µ–ª–µ–∑–∞.</p>
      
      <p>–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏—Ö –º–æ–¥–µ–ª–µ–π, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI —Å–∏—Å—Ç–µ–º.</p>
    `,
    practiceContent: `
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h3>
      
      <h4>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h4>
      <p>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ü–µ–ª—å—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏.</p>
      
      <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</h4>
      <ul>
        <li><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> >92% (–Ω–µ –º–µ–Ω–µ–µ –∏—Å—Ö–æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏)</li>
        <li><strong>–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏:</strong> <10 –ú–ë (—Å–∂–∞—Ç–∏–µ –≤ 5+ —Ä–∞–∑)</li>
        <li><strong>–í—Ä–µ–º—è inference:</strong> <50 –º—Å –Ω–∞ CPU</li>
        <li><strong>–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ:</strong> –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤</li>
      </ul>
      
      <h4>–ú–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h4>
      <ul>
        <li><strong>–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è:</strong> FP32 ‚Üí INT8</li>
        <li><strong>Pruning:</strong> structured –∏ unstructured</li>
        <li><strong>Knowledge Distillation:</strong> teacher-student –æ–±—É—á–µ–Ω–∏–µ</li>
        <li><strong>Architecture optimization:</strong> –ø–æ–∏—Å–∫ –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä</li>
      </ul>
      
      <h4>–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h4>
      <ol>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏</li>
        <li>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏</li>
        <li>–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
        <li>–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç</li>
        <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∂–µ–ª–µ–∑–∞</li>
        <li>–í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö, –±–ª–∏–∑–∫–∏—Ö –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º</li>
        <li>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é</li>
      </ol>
    `,
    hasCodeEditor: true,
    initialCode: `# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, optimizers, callbacks
import time
import os
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –†–ï–ì–£–õ–Ø–†–ò–ó–ê–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ï–ô")
print("–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
print("="*80)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ random seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
tf.random.set_seed(42)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
N_SAMPLES = 5000        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤
N_FEATURES = 35         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–¥–∞—Ç—á–∏–∫–∏)
SEQUENCE_LENGTH = 100   # –î–ª–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
N_CLASSES = 4           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
BATCH_SIZE = 64
EPOCHS = 50

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
STATES = [
    'normal',           # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    'warning',          # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    'critical',         # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    'failure'           # –û—Ç–∫–∞–∑
]

print(f"\\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –û–±—Ä–∞–∑—Ü–æ–≤: {N_SAMPLES}")
print(f"  –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {N_FEATURES}")
print(f"  –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {SEQUENCE_LENGTH}")
print(f"  –ö–ª–∞—Å—Å–æ–≤: {N_CLASSES}")
print(f"  –°–æ—Å—Ç–æ—è–Ω–∏—è: {STATES}")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
def generate_turbine_data(n_samples, n_features, sequence_length, n_classes):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    """
    print("\\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    
    X = []
    y = []
    
    for i in range(n_samples):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = np.random.choice(n_classes, p=[0.6, 0.25, 0.1, 0.05])  # –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state == 0:  # Normal
            base_vibration = np.random.normal(2.0, 0.3)
            base_temperature = np.random.normal(85, 5)
            base_pressure = np.random.normal(15.5, 0.5)
            noise_level = 0.1
        elif state == 1:  # Warning
            base_vibration = np.random.normal(4.5, 0.8)
            base_temperature = np.random.normal(95, 8)
            base_pressure = np.random.normal(14.8, 0.8)
            noise_level = 0.2
        elif state == 2:  # Critical
            base_vibration = np.random.normal(8.0, 1.5)
            base_temperature = np.random.normal(110, 12)
            base_pressure = np.random.normal(13.5, 1.2)
            noise_level = 0.3
        else:  # Failure
            base_vibration = np.random.normal(15.0, 3.0)
            base_temperature = np.random.normal(130, 20)
            base_pressure = np.random.normal(11.0, 2.0)
            noise_level = 0.5
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        sequence = np.zeros((sequence_length, n_features))
        
        for t in range(sequence_length):
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
            time_factor = t / sequence_length
            
            # –í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ (–ø–µ—Ä–≤—ã–µ 12 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
            for j in range(12):
                if state >= 2:  # Critical –∏–ª–∏ Failure
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
                    vibration = base_vibration * (1 + 0.3 * np.sin(2 * np.pi * t / 20))
                else:
                    vibration = base_vibration
                
                sequence[t, j] = vibration + np.random.normal(0, noise_level)
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ (–ø—Ä–∏–∑–Ω–∞–∫–∏ 12-20)
            for j in range(12, 20):
                if state >= 1:  # Warning –∏ –≤—ã—à–µ
                    # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    temp = base_temperature * (1 + 0.2 * time_factor)
                else:
                    temp = base_temperature
                
                sequence[t, j] = temp + np.random.normal(0, noise_level * 5)
            
            # –î–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–∏–∑–Ω–∞–∫–∏ 20-25)
            for j in range(20, 25):
                if state >= 2:  # Critical –∏ Failure
                    # –ü–∞–¥–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
                    pressure = base_pressure * (1 - 0.3 * time_factor)
                else:
                    pressure = base_pressure
                
                sequence[t, j] = pressure + np.random.normal(0, noise_level * 0.5)
            
            # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø—Ä–∏–∑–Ω–∞–∫–∏ 25-30)
            for j in range(25, 30):
                if state == 3:  # Failure
                    # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    electrical = 220 + 50 * np.sin(2 * np.pi * t / 10) * np.random.random()
                else:
                    electrical = 220 + np.random.normal(0, 2)
                
                sequence[t, j] = electrical + np.random.normal(0, noise_level * 2)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ (–ø—Ä–∏–∑–Ω–∞–∫–∏ 30-35)
            for j in range(30, 35):
                sequence[t, j] = np.random.normal(0, 1) + state * 0.5
        
        X.append(sequence)
        y.append(state)
    
    return np.array(X), np.array(y)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
X_data, y_data = generate_turbine_data(N_SAMPLES, N_FEATURES, SEQUENCE_LENGTH, N_CLASSES)

print(f"\\n–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω:")
print(f"  –§–æ—Ä–º–∞ X: {X_data.shape}")
print(f"  –§–æ—Ä–º–∞ y: {y_data.shape}")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω X: [{X_data.min():.2f}, {X_data.max():.2f}]")

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
unique, counts = np.unique(y_data, return_counts=True)
print(f"\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
for i, (state, count) in enumerate(zip(STATES, counts)):
    print(f"  {state}: {count} ({count/len(y_data)*100:.1f}%)")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
print("\\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤...")

fig, axes = plt.subplots(2, 2, figsize=(15, 10))
fig.suptitle('–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞', fontsize=16)

for i, state in enumerate(STATES):
    row, col = i // 2, i % 2
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
    state_indices = np.where(y_data == i)[0]
    sample_idx = state_indices[0]
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    axes[row, col].plot(X_data[sample_idx, :, 0], label='–í–∏–±—Ä–∞—Ü–∏—è X', alpha=0.7)
    axes[row, col].plot(X_data[sample_idx, :, 12], label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', alpha=0.7)
    axes[row, col].plot(X_data[sample_idx, :, 20], label='–î–∞–≤–ª–µ–Ω–∏–µ', alpha=0.7)
    
    axes[row, col].set_title(f'{state.capitalize()}')
    axes[row, col].set_xlabel('–í—Ä–µ–º—è')
    axes[row, col].set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)')
    axes[row, col].legend()
    axes[row, col].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
print("\\n" + "="*60)
print("–ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•")
print("="*60)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def normalize_data(X_train, X_val, X_test):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É
    """
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
    mean = X_train.mean(axis=(0, 1), keepdims=True)
    std = X_train.std(axis=(0, 1), keepdims=True) + 1e-8
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    X_train_norm = (X_train - mean) / std
    X_val_norm = (X_val - mean) / std
    X_test_norm = (X_test - mean) / std
    
    return X_train_norm, X_val_norm, X_test_norm, mean, std

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = train_test_split(
    X_data, y_data, test_size=0.2, stratify=y_data, random_state=42
)

X_train, X_val, y_train, y_val = train_test_split(
    X_train, y_train, test_size=0.2, stratify=y_train, random_state=42
)

print(f"–†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape}")
print(f"  –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_val.shape}")
print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape}")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
X_train_norm, X_val_norm, X_test_norm, data_mean, data_std = normalize_data(X_train, X_val, X_test)

print(f"\\n–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
print(f"  –°—Ä–µ–¥–Ω–µ–µ: {X_train_norm.mean():.6f}")
print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {X_train_norm.std():.6f}")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò")
print("="*60)

def create_base_model(input_shape, n_classes, dropout_rate=0.3, l2_reg=1e-4):
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é LSTM –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    model = keras.Sequential([
        # –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        layers.Input(shape=input_shape),
        
        # LSTM —Å–ª–æ–∏ —Å dropout
        layers.LSTM(128, return_sequences=True, dropout=dropout_rate, 
                   recurrent_dropout=dropout_rate,
                   kernel_regularizer=keras.regularizers.l2(l2_reg)),
        layers.BatchNormalization(),
        
        layers.LSTM(64, return_sequences=True, dropout=dropout_rate,
                   recurrent_dropout=dropout_rate,
                   kernel_regularizer=keras.regularizers.l2(l2_reg)),
        layers.BatchNormalization(),
        
        layers.LSTM(32, dropout=dropout_rate,
                   kernel_regularizer=keras.regularizers.l2(l2_reg)),
        layers.BatchNormalization(),
        
        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏
        layers.Dense(64, activation='relu',
                    kernel_regularizer=keras.regularizers.l2(l2_reg)),
        layers.Dropout(dropout_rate),
        layers.BatchNormalization(),
        
        layers.Dense(32, activation='relu',
                    kernel_regularizer=keras.regularizers.l2(l2_reg)),
        layers.Dropout(dropout_rate/2),
        
        # –í—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
        layers.Dense(n_classes, activation='softmax')
    ])
    
    return model

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
input_shape = (SEQUENCE_LENGTH, N_FEATURES)
base_model = create_base_model(input_shape, N_CLASSES)

print(f"–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞:")
print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {base_model.count_params():,}")

base_model.summary()

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞–º–∏
print("\\n" + "="*60)
print("–°–†–ê–í–ù–ï–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–û–í")
print("="*60)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
optimizers_config = {
    'SGD': optimizers.SGD(learning_rate=0.01, momentum=0.9, nesterov=True),
    'Adam': optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999),
    'AdamW': optimizers.AdamW(learning_rate=0.001, weight_decay=1e-4),
    'RMSprop': optimizers.RMSprop(learning_rate=0.001, rho=0.9)
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–º
def train_with_optimizer(optimizer_name, optimizer, X_train, y_train, X_val, y_val, epochs=20):
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–º
    """
    print(f"\\n–û–±—É—á–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–º {optimizer_name}...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    model = create_base_model(input_shape, N_CLASSES)
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º
    model.compile(
        optimizer=optimizer,
        loss='sparse_categorical_crossentropy',
        metrics=['accuracy']
    )
    
    # Callbacks
    callbacks_list = [
        callbacks.EarlyStopping(
            monitor='val_accuracy',
            patience=5,
            restore_best_weights=True,
            verbose=0
        ),
        callbacks.ReduceLROnPlateau(
            monitor='val_loss',
            factor=0.5,
            patience=3,
            min_lr=1e-7,
            verbose=0
        )
    ]
    
    # –û–±—É—á–µ–Ω–∏–µ
    start_time = time.time()
    history = model.fit(
        X_train, y_train,
        batch_size=BATCH_SIZE,
        epochs=epochs,
        validation_data=(X_val, y_val),
        callbacks=callbacks_list,
        verbose=0
    )
    training_time = time.time() - start_time
    
    # –û—Ü–µ–Ω–∫–∞
    val_loss, val_accuracy = model.evaluate(X_val, y_val, verbose=0)
    
    print(f"  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {training_time:.1f} —Å–µ–∫")
    print(f"  –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {val_accuracy:.4f}")
    
    return {
        'model': model,
        'history': history,
        'training_time': training_time,
        'val_accuracy': val_accuracy
    }

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤
optimizer_results = {}

for opt_name, optimizer in optimizers_config.items():
    optimizer_results[opt_name] = train_with_optimizer(
        opt_name, optimizer, X_train_norm, y_train, X_val_norm, y_val, epochs=25
    )

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤
print("\\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤:")
print("-" * 60)
print(f"{'–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä':<12} {'–¢–æ—á–Ω–æ—Å—Ç—å':<12} {'–í—Ä–µ–º—è (—Å–µ–∫)':<12}")
print("-" * 60)

best_optimizer = None
best_accuracy = 0

for opt_name, result in optimizer_results.items():
    accuracy = result['val_accuracy']
    time_taken = result['training_time']
    
    print(f"{opt_name:<12} {accuracy:<12.4f} {time_taken:<12.1f}")
    
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_optimizer = opt_name

print("-" * 60)
print(f"–õ—É—á—à–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: {best_optimizer} (—Ç–æ—á–Ω–æ—Å—Ç—å: {best_accuracy:.4f})")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
best_model = optimizer_results[best_optimizer]['model']

# –ú–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–ú–ï–¢–û–î–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ú–û–î–ï–õ–ò")
print("="*60)

# 1. –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è
print("\\n1. –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")

def quantize_model(model, X_representative):
    """
    –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ INT8
    """
    # –°–æ–∑–¥–∞–µ–º TFLite –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    converter = tf.lite.TFLiteConverter.from_keras_model(model)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    converter.optimizations = [tf.lite.Optimize.DEFAULT]
    
    # –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    def representative_dataset():
        for i in range(min(100, len(X_representative))):
            yield [X_representative[i:i+1].astype(np.float32)]
    
    converter.representative_dataset = representative_dataset
    converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]
    converter.inference_input_type = tf.int8
    converter.inference_output_type = tf.int8
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    quantized_tflite_model = converter.convert()
    
    return quantized_tflite_model

# –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è
quantized_model = quantize_model(best_model, X_train_norm[:100])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
with open('quantized_model.tflite', 'wb') as f:
    f.write(quantized_model)

print(f"  –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏: {len(tf.keras.utils.serialize_keras_object(best_model))/1024/1024:.2f} –ú–ë")
print(f"  –†–∞–∑–º–µ—Ä –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: {len(quantized_model)/1024/1024:.2f} –ú–ë")
print(f"  –°–∂–∞—Ç–∏–µ: {len(tf.keras.utils.serialize_keras_object(best_model))/len(quantized_model):.1f}x")

# 2. Pruning (–æ–±—Ä–µ–∑–∫–∞)
print("\\n2. Pruning –º–æ–¥–µ–ª–∏...")

import tensorflow_model_optimization as tfmot

def create_pruned_model(base_model, target_sparsity=0.5):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å —Å pruning
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pruning
    pruning_params = {
        'pruning_schedule': tfmot.sparsity.keras.PolynomialDecay(
            initial_sparsity=0.0,
            final_sparsity=target_sparsity,
            begin_step=0,
            end_step=1000
        )
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º pruning –∫ –º–æ–¥–µ–ª–∏
    model_for_pruning = tfmot.sparsity.keras.prune_low_magnitude(
        base_model, **pruning_params
    )
    
    return model_for_pruning

# –°–æ–∑–¥–∞–Ω–∏–µ pruned –º–æ–¥–µ–ª–∏
try:
    pruned_model = create_pruned_model(best_model, target_sparsity=0.6)
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è
    pruned_model.compile(
        optimizer=optimizers_config[best_optimizer],
        loss='sparse_categorical_crossentropy',
        metrics=['accuracy']
    )
    
    # –û–±—É—á–µ–Ω–∏–µ —Å pruning
    pruning_callbacks = [
        tfmot.sparsity.keras.UpdatePruningStep(),
        callbacks.EarlyStopping(monitor='val_accuracy', patience=3, restore_best_weights=True)
    ]
    
    print("  –û–±—É—á–µ–Ω–∏–µ pruned –º–æ–¥–µ–ª–∏...")
    pruned_history = pruned_model.fit(
        X_train_norm, y_train,
        batch_size=BATCH_SIZE,
        epochs=15,
        validation_data=(X_val_norm, y_val),
        callbacks=pruning_callbacks,
        verbose=0
    )
    
    # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è pruning
    final_pruned_model = tfmot.sparsity.keras.strip_pruning(pruned_model)
    
    # –û—Ü–µ–Ω–∫–∞
    pruned_accuracy = final_pruned_model.evaluate(X_val_norm, y_val, verbose=0)[1]
    print(f"  –¢–æ—á–Ω–æ—Å—Ç—å pruned –º–æ–¥–µ–ª–∏: {pruned_accuracy:.4f}")
    print(f"  –ü–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏: {(best_accuracy - pruned_accuracy)*100:.2f}%")
    
except Exception as e:
    print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ pruning: {e}")
    final_pruned_model = best_model
    pruned_accuracy = best_accuracy

# 3. Knowledge Distillation
print("\\n3. Knowledge Distillation...")

def create_student_model(input_shape, n_classes):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é student –º–æ–¥–µ–ª—å
    """
    model = keras.Sequential([
        layers.Input(shape=input_shape),
        
        # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        layers.LSTM(32, return_sequences=True, dropout=0.2),
        layers.LSTM(16, dropout=0.2),
        
        layers.Dense(16, activation='relu'),
        layers.Dropout(0.3),
        layers.Dense(n_classes, activation='softmax')
    ])
    
    return model

def distillation_loss(y_true, y_pred, teacher_pred, temperature=3.0, alpha=0.3):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å –¥–ª—è knowledge distillation
    """
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è categorical crossentropy
    student_loss = keras.losses.sparse_categorical_crossentropy(y_true, y_pred)
    
    # Distillation loss
    teacher_soft = tf.nn.softmax(teacher_pred / temperature)
    student_soft = tf.nn.softmax(y_pred / temperature)
    distill_loss = keras.losses.categorical_crossentropy(teacher_soft, student_soft)
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è
    return alpha * student_loss + (1 - alpha) * distill_loss * (temperature ** 2)

# –°–æ–∑–¥–∞–Ω–∏–µ student –º–æ–¥–µ–ª–∏
student_model = create_student_model(input_shape, N_CLASSES)

print(f"  Teacher –º–æ–¥–µ–ª—å: {best_model.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  Student –º–æ–¥–µ–ª—å: {student_model.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  –°–∂–∞—Ç–∏–µ: {best_model.count_params()/student_model.count_params():.1f}x")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π teacher –º–æ–¥–µ–ª–∏
teacher_predictions = best_model.predict(X_train_norm, verbose=0)

# –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å –¥–ª—è student –º–æ–¥–µ–ª–∏
class DistillationLoss(keras.losses.Loss):
    def __init__(self, teacher_model, temperature=3.0, alpha=0.3):
        super().__init__()
        self.teacher_model = teacher_model
        self.temperature = temperature
        self.alpha = alpha
    
    def call(self, y_true, y_pred):
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è teacher –º–æ–¥–µ–ª–∏
        teacher_pred = self.teacher_model(y_pred, training=False)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Ç–µ—Ä—è
        student_loss = keras.losses.sparse_categorical_crossentropy(y_true, y_pred)
        
        # Distillation –ø–æ—Ç–µ—Ä—è
        teacher_soft = tf.nn.softmax(teacher_pred / self.temperature)
        student_soft = tf.nn.softmax(y_pred / self.temperature)
        distill_loss = keras.losses.categorical_crossentropy(teacher_soft, student_soft)
        
        return self.alpha * student_loss + (1 - self.alpha) * distill_loss * (self.temperature ** 2)

# –ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ student –º–æ–¥–µ–ª–∏ –Ω–∞ hard targets
student_model.compile(
    optimizer=optimizers.Adam(learning_rate=0.001),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

print("  –û–±—É—á–µ–Ω–∏–µ student –º–æ–¥–µ–ª–∏...")
student_history = student_model.fit(
    X_train_norm, y_train,
    batch_size=BATCH_SIZE,
    epochs=20,
    validation_data=(X_val_norm, y_val),
    callbacks=[callbacks.EarlyStopping(monitor='val_accuracy', patience=5, restore_best_weights=True)],
    verbose=0
)

student_accuracy = student_model.evaluate(X_val_norm, y_val, verbose=0)[1]
print(f"  –¢–æ—á–Ω–æ—Å—Ç—å student –º–æ–¥–µ–ª–∏: {student_accuracy:.4f}")
print(f"  –ü–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏: {(best_accuracy - student_accuracy)*100:.2f}%")

# 4. –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
print("\\n4. –£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å...")

def create_tiny_model(input_shape, n_classes):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    """
    model = keras.Sequential([
        layers.Input(shape=input_shape),
        
        # –°–∏–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        layers.Conv1D(16, 5, strides=2, activation='relu'),
        layers.MaxPooling1D(2),
        layers.Conv1D(8, 3, activation='relu'),
        layers.GlobalAveragePooling1D(),
        
        layers.Dense(8, activation='relu'),
        layers.Dense(n_classes, activation='softmax')
    ])
    
    return model

tiny_model = create_tiny_model(input_shape, N_CLASSES)

tiny_model.compile(
    optimizer=optimizers.Adam(learning_rate=0.001),
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

print(f"  –£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {tiny_model.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
print(f"  –°–∂–∞—Ç–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π: {best_model.count_params()/tiny_model.count_params():.1f}x")

# –û–±—É—á–µ–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
print("  –û–±—É—á–µ–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏...")
tiny_history = tiny_model.fit(
    X_train_norm, y_train,
    batch_size=BATCH_SIZE,
    epochs=30,
    validation_data=(X_val_norm, y_val),
    callbacks=[callbacks.EarlyStopping(monitor='val_accuracy', patience=7, restore_best_weights=True)],
    verbose=0
)

tiny_accuracy = tiny_model.evaluate(X_val_norm, y_val, verbose=0)[1]
print(f"  –¢–æ—á–Ω–æ—Å—Ç—å —É–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏: {tiny_accuracy:.4f}")
print(f"  –ü–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏: {(best_accuracy - tiny_accuracy)*100:.2f}%")

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print("\\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
print("="*60)

def measure_inference_time(model, X_sample, n_runs=100, model_type='keras'):
    """
    –ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è inference
    """
    if model_type == 'tflite':
        # –î–ª—è TFLite –º–æ–¥–µ–ª–∏
        interpreter = tf.lite.Interpreter(model_content=model)
        interpreter.allocate_tensors()
        
        input_details = interpreter.get_input_details()
        output_details = interpreter.get_output_details()
        
        # –ü—Ä–æ–≥—Ä–µ–≤
        test_input = X_sample[:1].astype(np.float32)
        interpreter.set_tensor(input_details[0]['index'], test_input)
        interpreter.invoke()
        
        times = []
        for _ in range(n_runs):
            start_time = time.time()
            interpreter.set_tensor(input_details[0]['index'], test_input)
            interpreter.invoke()
            times.append(time.time() - start_time)
    else:
        # –î–ª—è Keras –º–æ–¥–µ–ª–∏
        # –ü—Ä–æ–≥—Ä–µ–≤
        _ = model.predict(X_sample[:1], verbose=0)
        
        times = []
        for _ in range(n_runs):
            start_time = time.time()
            _ = model.predict(X_sample[:1], verbose=0)
            times.append(time.time() - start_time)
    
    return np.mean(times) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

# –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ inference
models_to_test = {
    '–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å': (best_model, 'keras'),
    'Student –º–æ–¥–µ–ª—å': (student_model, 'keras'),
    '–£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è': (tiny_model, 'keras'),
    '–ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è': (quantized_model, 'tflite')
}

print("\\n–í—Ä–µ–º—è inference (–º—Å –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü):")
print("-" * 50)

inference_results = {}
for model_name, (model, model_type) in models_to_test.items():
    try:
        inference_time = measure_inference_time(model, X_test_norm, model_type=model_type)
        inference_results[model_name] = inference_time
        print(f"{model_name:<20}: {inference_time:.2f} –º—Å")
    except Exception as e:
        print(f"{model_name:<20}: –û—à–∏–±–∫–∞ - {e}")
        inference_results[model_name] = float('inf')

# –†–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π
print("\\n–†–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π:")
print("-" * 50)

def get_model_size(model, model_type='keras'):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ –≤ –ú–ë
    """
    if model_type == 'tflite':
        return len(model) / 1024 / 1024
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = 'temp_model.h5'
        model.save(temp_file)
        size = os.path.getsize(temp_file) / 1024 / 1024
        os.remove(temp_file)
        return size

model_sizes = {}
for model_name, (model, model_type) in models_to_test.items():
    try:
        size = get_model_size(model, model_type)
        model_sizes[model_name] = size
        print(f"{model_name:<20}: {size:.2f} –ú–ë")
    except Exception as e:
        print(f"{model_name:<20}: –û—à–∏–±–∫–∞ - {e}")
        model_sizes[model_name] = float('inf')

# –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
print("\\n" + "="*60)
print("–ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
print("="*60)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
test_accuracies = {}

# –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
test_accuracies['–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å'] = best_model.evaluate(X_test_norm, y_test, verbose=0)[1]

# Student –º–æ–¥–µ–ª—å
test_accuracies['Student –º–æ–¥–µ–ª—å'] = student_model.evaluate(X_test_norm, y_test, verbose=0)[1]

# –£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
test_accuracies['–£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è'] = tiny_model.evaluate(X_test_norm, y_test, verbose=0)[1]

# –ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
test_accuracies['–ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è'] = test_accuracies['–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å'] * 0.98  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞

print("\\n–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:")
print("-" * 80)
print(f"{'–ú–æ–¥–µ–ª—å':<20} {'–¢–æ—á–Ω–æ—Å—Ç—å':<12} {'–†–∞–∑–º–µ—Ä (–ú–ë)':<12} {'–í—Ä–µ–º—è (–º—Å)':<12} {'–°–∂–∞—Ç–∏–µ':<10}")
print("-" * 80)

base_size = model_sizes.get('–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å', 1)
base_params = best_model.count_params()

for model_name in ['–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å', 'Student –º–æ–¥–µ–ª—å', '–£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è', '–ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è']:
    accuracy = test_accuracies.get(model_name, 0)
    size = model_sizes.get(model_name, 0)
    inference_time = inference_results.get(model_name, 0)
    compression = base_size / size if size > 0 else 0
    
    print(f"{model_name:<20} {accuracy:<12.4f} {size:<12.2f} {inference_time:<12.2f} {compression:<10.1f}x")

print("-" * 80)

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
print("\\n" + "="*60)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–´–ë–û–†–£ –ú–û–î–ï–õ–ò")
print("="*60)

print("\\n1. –î–õ–Ø –†–ê–ó–õ–ò–ß–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í:")

print("\\n   üè≠ –ü–†–û–ú–´–®–õ–ï–ù–ù–´–ï –°–ï–†–í–ï–†–´:")
print("   - –ú–æ–¥–µ–ª—å: –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å")
print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å: {test_accuracies['–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å']:.1%}")
print("   - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º")

print("\\n   üíª EDGE –£–°–¢–†–û–ô–°–¢–í–ê (—Å—Ä–µ–¥–Ω–µ–π –º–æ—â–Ω–æ—Å—Ç–∏):")
print("   - –ú–æ–¥–µ–ª—å: Student –º–æ–¥–µ–ª—å")
print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å: {test_accuracies['Student –º–æ–¥–µ–ª—å']:.1%}")
print(f"   - –°–∂–∞—Ç–∏–µ: {base_params/student_model.count_params():.1f}x")
print("   - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ë–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

print("\\n   üì± IoT –£–°–¢–†–û–ô–°–¢–í–ê (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã):")
print("   - –ú–æ–¥–µ–ª—å: –£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è")
print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å: {test_accuracies['–£–ª—å—Ç—Ä–∞-–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è']:.1%}")
print(f"   - –°–∂–∞—Ç–∏–µ: {base_params/tiny_model.count_params():.1f}x")
print("   - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å–∞–º")

print("\\n   ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ö–û–†–û–°–¢–¨:")
print("   - –ú–æ–¥–µ–ª—å: –ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è")
print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å: ~{test_accuracies['–ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è']:.1%}")
print(f"   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ~{inference_results['–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å']/inference_results.get('–ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è', 1):.1f}x")
print("   - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å inference")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n2. –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
turbines_count = 50          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
monitoring_cost_manual = 500000  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –≥–æ–¥ –Ω–∞ —Ç—É—Ä–±–∏–Ω—É
failure_cost = 50000000     # –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤–∞—Ä–∏–∏ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
accuracy_improvement = (test_accuracies['–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å'] - 0.85) / 0.85  # –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è

# –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI —Å–∏—Å—Ç–µ–º—ã
annual_monitoring_savings = turbines_count * monitoring_cost_manual * 0.7  # 70% —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
failure_prevention_savings = failure_cost * 0.1 * accuracy_improvement  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ 10% –∞–≤–∞—Ä–∏–π

total_annual_savings = annual_monitoring_savings + failure_prevention_savings

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ
development_cost = 15000000      # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
hardware_cost = 5000000         # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤
deployment_cost = 3000000       # –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
annual_maintenance = 2000000    # –ì–æ–¥–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

total_project_cost = development_cost + hardware_cost + deployment_cost

print(f"\\n   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–±–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤: {turbines_count}")
print(f"   - –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {accuracy_improvement*100:.1f}%")

print(f"\\n   –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"   - –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {annual_monitoring_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"   - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π: {failure_prevention_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"   - –û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_annual_savings:,.0f} —Ä—É–±/–≥–æ–¥")

print(f"\\n   –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
print(f"   - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {development_cost:,.0f} —Ä—É–±")
print(f"   - –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {hardware_cost:,.0f} —Ä—É–±")
print(f"   - –í–Ω–µ–¥—Ä–µ–Ω–∏–µ: {deployment_cost:,.0f} —Ä—É–±")
print(f"   - –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_project_cost:,.0f} —Ä—É–±")
print(f"   - –ì–æ–¥–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {annual_maintenance:,.0f} —Ä—É–±")

# ROI –∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å
net_annual_benefit = total_annual_savings - annual_maintenance
roi = (net_annual_benefit - total_project_cost) / total_project_cost * 100
payback_months = total_project_cost / (net_annual_benefit / 12)

print(f"\\n   –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
print(f"   - –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {net_annual_benefit:,.0f} —Ä—É–±")
print(f"   - ROI: {roi:.0f}%")
print(f"   - –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–∞")

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print("\\n3. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

print(f"\\n   üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
print(f"   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
print(f"   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ drift –¥–∞–Ω–Ω—ã—Ö")
print(f"   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
print(f"   - A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–µ–π")

print(f"\\n   üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø –†–û–°–°–ò–ô–°–ö–û–ì–û –ñ–ï–õ–ï–ó–ê:")
print(f"   - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≠–ª—å–±—Ä—É—Å")
print(f"   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ë–∞–π–∫–∞–ª-–ú –≤ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
print(f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Astra Linux –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
print(f"   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PostgresPro –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

print(f"\\n   üõ°Ô∏è –û–ë–ï–°–ü–ï–ß–ï–ù–ò–ï –ù–ê–î–ï–ñ–ù–û–°–¢–ò:")
print(f"   - –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
print(f"   - Graceful degradation –ø—Ä–∏ –æ—Ç–∫–∞–∑–∞—Ö")
print(f"   - –†–µ–≥—É–ª—è—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
print(f"   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

print("\\n" + "="*80)
print("–°–ò–°–¢–ï–ú–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ù–ï–ô–†–û–°–ï–¢–ï–ô –ì–û–¢–û–í–ê!")
print(f"–õ—É—á—à–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: {best_optimizer}")
print(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å –¥–ª—è edge: Student –º–æ–¥–µ–ª—å")
print(f"–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_annual_benefit:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months:.1f} –º–µ—Å—è—Ü–∞")
print("="*80)`
  },

  21: {
    id: 21,
    title: "AI –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏",
    duration: 140,
    content: `
# AI –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏

## –í–≤–µ–¥–µ–Ω–∏–µ

–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —ç—Ç–∏—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç.

–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

## –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ —Å—Ä–µ–¥–∞–º–∏ –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º:

**–í—ã—Å–æ–∫–æ—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:** –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –¥–æ–º–µ–Ω–Ω—ã—Ö –ø–µ—á–∞—Ö –¥–æ—Å—Ç–∏–≥–∞—é—Ç 2000¬∞C, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

**–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:** –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä—è–º –≤ –º–∏–ª–ª–∏–æ–Ω—ã —Ä—É–±–ª–µ–π, –ø–æ—ç—Ç–æ–º—É AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å.

**–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** –ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∏—Ö –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è.

### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º —Å—Ç–∞–ª–∏:** AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤, –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ—Ç–∞–ª–ª–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢.

**–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:** –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–Ω–æ—Å–∞ —Ñ—É—Ç–µ—Ä–æ–≤–∫–∏ –ø–µ—á–µ–π, —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–∫–∞—Ç–Ω—ã—Ö –≤–∞–ª–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:** –ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –¥–æ 30% –≤—Å–µ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ –†–æ—Å—Å–∏–∏, –ø–æ—ç—Ç–æ–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞.

**–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:** AI –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∞–≥—Ä–µ–≥–∞—Ç–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–º–æ–Ω—Ç—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∞—Å–∞–º–∏ —Å—ã—Ä—å—è.

## AI –≤ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏

### –¶–∏—Ñ—Ä–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–≤–∏–∂–µ—Ç—Å—è –∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Industry 4.0, –≥–¥–µ AI –∏–≥—Ä–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ä–æ–ª—å:

**–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏:** –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑–¥–µ–ª–∏–π –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

**–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:** –°–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.

**–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:** –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤.

### –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞

AI —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏:

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ñ–µ–∫—Ç–æ—Å–∫–æ–ø–∏—è:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ –¥–µ—Ç–∞–ª—è—Ö –∏ —Å–±–æ—Ä–æ—á–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö.

**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:** –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–æ—Ç–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.

**–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:** –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ.

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã

### –ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è

**–ì–û–°–¢ 380-2005 "–°—Ç–∞–ª—å —É–≥–ª–µ—Ä–æ–¥–∏—Å—Ç–∞—è –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"** —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ö–∏–º–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–∞–≤—É –∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–º —Å–≤–æ–π—Å—Ç–≤–∞–º —Å—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ AI-—Å–∏—Å—Ç–µ–º–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º.

**–ì–û–°–¢ 1050-2013 "–ú–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–∑ –Ω–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–ª–µ–π"** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

**–ì–û–°–¢ –† 54570-2011 "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è. –°–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"** —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—ã –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º, –≥–¥–µ AI –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å.

### –ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ

**–ì–û–°–¢ –† –ò–°–û 9001-2015 "–°–∏—Å—Ç–µ–º—ã –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞"** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å AI-—Ä–µ—à–µ–Ω–∏—è–º–∏.

**–ì–û–°–¢ 2.052-2015 "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∏–∑–¥–µ–ª–∏—è"** —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ü–∏—Ñ—Ä–æ–≤—ã–º –º–æ–¥–µ–ª—è–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –≤ AI-—Å–∏—Å—Ç–µ–º–∞—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

**–ì–û–°–¢ –† 57700.37-2021 "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"** —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∫–ª—é—á–∞—è AI-–º–µ—Ç–æ–¥—ã.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç: –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–∫–∞—Ç–∞

### –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏

–†–∞–∑—Ä–∞–±–æ—Ç–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é AI-—Å–∏—Å—Ç–µ–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –≥–æ—Ä—è—á–µ–∫–∞—Ç–∞–Ω–æ–≥–æ –ª–∏—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–∫–∞—Ç–∞ –Ω–∞ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–º –∫–æ–º–±–∏–Ω–∞—Ç–µ. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞:

1. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–∫–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∫–∏
2. –û–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
3. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫–∞—Ç–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
4. –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢ 19903-2015

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

**–ú–æ–¥—É–ª—å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:**
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –¥–∞–≤–ª–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–∫–∞—Ç–∫–∏
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–∞–º–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏

**–ú–æ–¥—É–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤:**
- –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–µ–¥–µ–ª–∞ —Ç–µ–∫—É—á–µ—Å—Ç–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–ª–∏–Ω–µ–Ω–∏—è
- –ú–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏

**–ú–æ–¥—É–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤:**
- –°–≤–µ—Ä—Ç–æ—á–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
- –°–∏—Å—Ç–µ–º–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤

**–ú–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
- –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
- –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤

### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è

\`\`\`python
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.preprocessing import StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten
import matplotlib.pyplot as plt
import seaborn as sns

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–∫–∞—Ç–∞
np.random.seed(42)

def generate_steel_data(n_samples=5000):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ö–∏–º–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–∞–≤–µ —Å—Ç–∞–ª–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø—Ä–æ–∫–∞—Ç–∫–∏
    """
    data = {}
    
    # –•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ (% –ø–æ –º–∞—Å—Å–µ)
    data['C'] = np.random.normal(0.15, 0.05, n_samples)  # –£–≥–ª–µ—Ä–æ–¥
    data['Mn'] = np.random.normal(0.8, 0.2, n_samples)   # –ú–∞—Ä–≥–∞–Ω–µ—Ü
    data['Si'] = np.random.normal(0.25, 0.1, n_samples)  # –ö—Ä–µ–º–Ω–∏–π
    data['P'] = np.random.normal(0.02, 0.01, n_samples)  # –§–æ—Å—Ñ–æ—Ä
    data['S'] = np.random.normal(0.015, 0.005, n_samples) # –°–µ—Ä–∞
    data['Cr'] = np.random.normal(0.1, 0.05, n_samples)  # –•—Ä–æ–º
    data['Ni'] = np.random.normal(0.05, 0.02, n_samples) # –ù–∏–∫–µ–ª—å
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫–∞—Ç–∫–∏
    data['temp_start'] = np.random.normal(1150, 50, n_samples)  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∫–∞—Ç–∫–∏, ¬∞C
    data['temp_end'] = np.random.normal(850, 30, n_samples)     # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–∫–∞—Ç–∫–∏, ¬∞C
    data['reduction'] = np.random.normal(85, 10, n_samples)     # –û–±—â–µ–µ –æ–±–∂–∞—Ç–∏–µ, %
    data['speed'] = np.random.normal(8, 2, n_samples)           # –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫–∞—Ç–∫–∏, –º/—Å
    data['thickness'] = np.random.normal(12, 3, n_samples)      # –¢–æ–ª—â–∏–Ω–∞ –ª–∏—Å—Ç–∞, –º–º
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–≤
    # –ü—Ä–µ–¥–µ–ª —Ç–µ–∫—É—á–µ—Å—Ç–∏ (–ú–ü–∞)
    yield_strength = (
        300 + 
        1500 * data['C'] + 
        200 * data['Mn'] + 
        100 * data['Si'] - 
        50 * data['P'] - 
        30 * data['S'] +
        0.1 * (data['temp_start'] - 1100) -
        0.05 * data['temp_end'] +
        2 * data['reduction'] +
        np.random.normal(0, 20, n_samples)
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–ú–ü–∞)
    tensile_strength = (
        yield_strength * 1.3 + 
        100 * data['C'] + 
        50 * data['Mn'] +
        np.random.normal(0, 25, n_samples)
    )
    
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–ª–∏–Ω–µ–Ω–∏–µ (%)
    elongation = (
        30 - 
        50 * data['C'] - 
        5 * data['Mn'] + 
        0.01 * (data['temp_end'] - 850) +
        np.random.normal(0, 2, n_samples)
    )
    
    # –¢–≤–µ—Ä–¥–æ—Å—Ç—å HB
    hardness = (
        150 + 
        800 * data['C'] + 
        100 * data['Mn'] + 
        50 * data['Si'] +
        np.random.normal(0, 15, n_samples)
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    df = pd.DataFrame(data)
    df['yield_strength'] = np.clip(yield_strength, 200, 800)
    df['tensile_strength'] = np.clip(tensile_strength, 300, 1000)
    df['elongation'] = np.clip(elongation, 10, 40)
    df['hardness'] = np.clip(hardness, 100, 400)
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ì–û–°–¢ 19903-2015
    df['grade'] = '–°—Ç3—Å–ø'  # –ë–∞–∑–æ–≤–∞—è –º–∞—Ä–∫–∞
    df.loc[(df['yield_strength'] >= 245) & (df['tensile_strength'] >= 370), 'grade'] = '–°—Ç3–ø—Å'
    df.loc[(df['yield_strength'] >= 275) & (df['tensile_strength'] >= 430), 'grade'] = '–°—Ç4—Å–ø'
    df.loc[(df['yield_strength'] >= 295) & (df['tensile_strength'] >= 490), 'grade'] = '–°—Ç5—Å–ø'
    
    return df

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
steel_data = generate_steel_data(5000)
print("–î–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
print(steel_data.head())
print(f"\\n–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {steel_data.shape}")
print(f"\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–æ–∫ —Å—Ç–∞–ª–∏:")
print(steel_data['grade'].value_counts())

# –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
plt.figure(figsize=(12, 10))
correlation_matrix = steel_data.select_dtypes(include=[np.number]).corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, fmt='.2f')
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç–∞–ª–∏')
plt.tight_layout()
plt.show()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
feature_columns = ['C', 'Mn', 'Si', 'P', 'S', 'Cr', 'Ni', 'temp_start', 'temp_end', 'reduction', 'speed', 'thickness']
X = steel_data[feature_columns]
y_yield = steel_data['yield_strength']
y_tensile = steel_data['tensile_strength']
y_elongation = steel_data['elongation']
y_hardness = steel_data['hardness']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_yield_train, y_yield_test = train_test_split(X, y_yield, test_size=0.2, random_state=42)
_, _, y_tensile_train, y_tensile_test = train_test_split(X, y_tensile, test_size=0.2, random_state=42)
_, _, y_elongation_train, y_elongation_test = train_test_split(X, y_elongation, test_size=0.2, random_state=42)
_, _, y_hardness_train, y_hardness_test = train_test_split(X, y_hardness, test_size=0.2, random_state=42)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

class SteelQualityPredictor:
    """
    –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤ —Å—Ç–∞–ª–∏
    """
    
    def __init__(self):
        self.models = {}
        self.scaler = StandardScaler()
        self.feature_names = feature_columns
        
    def train_models(self, X_train, y_dict):
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        """
        X_train_scaled = self.scaler.fit_transform(X_train)
        
        for property_name, y_train in y_dict.items():
            print(f"\\n–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {property_name}...")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            models = {
                'RandomForest': RandomForestRegressor(n_estimators=100, random_state=42),
                'GradientBoosting': GradientBoostingRegressor(n_estimators=100, random_state=42),
                'NeuralNetwork': MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=1000, random_state=42)
            }
            
            best_score = -np.inf
            best_model = None
            best_name = None
            
            for name, model in models.items():
                scores = cross_val_score(model, X_train_scaled, y_train, cv=5, scoring='r2')
                mean_score = scores.mean()
                print(f"{name}: R¬≤ = {mean_score:.3f} ¬± {scores.std():.3f}")
                
                if mean_score > best_score:
                    best_score = mean_score
                    best_model = model
                    best_name = name
            
            # –û–±—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
            best_model.fit(X_train_scaled, y_train)
            self.models[property_name] = best_model
            print(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è {property_name}: {best_name} (R¬≤ = {best_score:.3f})")
    
    def predict(self, X):
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —Å—Ç–∞–ª–∏
        """
        X_scaled = self.scaler.transform(X)
        predictions = {}
        
        for property_name, model in self.models.items():
            predictions[property_name] = model.predict(X_scaled)
        
        return predictions
    
    def evaluate(self, X_test, y_dict):
        """
        –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π
        """
        predictions = self.predict(X_test)
        results = {}
        
        for property_name, y_true in y_dict.items():
            y_pred = predictions[property_name]
            mae = mean_absolute_error(y_true, y_pred)
            r2 = r2_score(y_true, y_pred)
            results[property_name] = {'MAE': mae, 'R¬≤': r2}
            
        return results
    
    def check_gost_compliance(self, predictions, grade='–°—Ç3—Å–ø'):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢ 19903-2015
        """
        gost_requirements = {
            '–°—Ç3—Å–ø': {'yield_strength': (235, None), 'tensile_strength': (370, 490)},
            '–°—Ç3–ø—Å': {'yield_strength': (245, None), 'tensile_strength': (370, 490)},
            '–°—Ç4—Å–ø': {'yield_strength': (275, None), 'tensile_strength': (430, 570)},
            '–°—Ç5—Å–ø': {'yield_strength': (295, None), 'tensile_strength': (490, 640)}
        }
        
        requirements = gost_requirements.get(grade, gost_requirements['–°—Ç3—Å–ø'])
        compliance = {}
        
        for prop, (min_val, max_val) in requirements.items():
            if prop in predictions:
                values = predictions[prop]
                if min_val is not None:
                    compliance[f'{prop}_min'] = np.all(values >= min_val)
                if max_val is not None:
                    compliance[f'{prop}_max'] = np.all(values <= max_val)
        
        return compliance

# –û–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
predictor = SteelQualityPredictor()
y_train_dict = {
    'yield_strength': y_yield_train,
    'tensile_strength': y_tensile_train,
    'elongation': y_elongation_train,
    'hardness': y_hardness_train
}

predictor.train_models(X_train, y_train_dict)

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π
y_test_dict = {
    'yield_strength': y_yield_test,
    'tensile_strength': y_tensile_test,
    'elongation': y_elongation_test,
    'hardness': y_hardness_test
}

results = predictor.evaluate(X_test, y_test_dict)
print("\\n" + "="*50)
print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¶–ï–ù–ö–ò –ú–û–î–ï–õ–ï–ô")
print("="*50)
for prop, metrics in results.items():
    print(f"{prop}:")
    print(f"  MAE: {metrics['MAE']:.2f}")
    print(f"  R¬≤:  {metrics['R¬≤']:.3f}")

# –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
def generate_defect_images(n_samples=1000, image_size=(64, 64)):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    """
    images = []
    labels = []
    
    defect_types = ['normal', 'scratch', 'pit', 'scale', 'crack']
    
    for i in range(n_samples):
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
        image = np.random.normal(128, 20, image_size)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
        x, y = np.meshgrid(np.arange(image_size[0]), np.arange(image_size[1]))
        texture = 10 * np.sin(x/5) * np.cos(y/7)
        image += texture
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–µ—Ñ–µ–∫—Ç–∞
        defect_type = np.random.choice(defect_types)
        
        if defect_type == 'normal':
            # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
            pass
        elif defect_type == 'scratch':
            # –¶–∞—Ä–∞–ø–∏–Ω–∞
            start_x = np.random.randint(0, image_size[0])
            start_y = np.random.randint(0, image_size[1]//2)
            length = np.random.randint(10, 30)
            for j in range(length):
                if start_x + j < image_size[0] and start_y + j//2 < image_size[1]:
                    image[start_x + j, start_y + j//2] = 50
        elif defect_type == 'pit':
            # –†–∞–∫–æ–≤–∏–Ω–∞
            center_x = np.random.randint(10, image_size[0]-10)
            center_y = np.random.randint(10, image_size[1]-10)
            radius = np.random.randint(3, 8)
            for dx in range(-radius, radius+1):
                for dy in range(-radius, radius+1):
                    if dx*dx + dy*dy <= radius*radius:
                        if 0 <= center_x+dx < image_size[0] and 0 <= center_y+dy < image_size[1]:
                            image[center_x+dx, center_y+dy] = 80
        elif defect_type == 'scale':
            # –û–∫–∞–ª–∏–Ω–∞
            for _ in range(np.random.randint(5, 15)):
                x = np.random.randint(0, image_size[0])
                y = np.random.randint(0, image_size[1])
                size = np.random.randint(2, 5)
                image[max(0,x-size):min(image_size[0],x+size), 
                     max(0,y-size):min(image_size[1],y+size)] = 200
        elif defect_type == 'crack':
            # –¢—Ä–µ—â–∏–Ω–∞
            start_x = np.random.randint(0, image_size[0])
            start_y = np.random.randint(0, image_size[1])
            direction = np.random.choice(['horizontal', 'vertical', 'diagonal'])
            length = np.random.randint(15, 25)
            
            for j in range(length):
                if direction == 'horizontal':
                    x, y = start_x, min(start_y + j, image_size[1]-1)
                elif direction == 'vertical':
                    x, y = min(start_x + j, image_size[0]-1), start_y
                else:  # diagonal
                    x, y = min(start_x + j, image_size[0]-1), min(start_y + j, image_size[1]-1)
                
                if 0 <= x < image_size[0] and 0 <= y < image_size[1]:
                    image[x, y] = 30
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = np.clip(image, 0, 255)
        images.append(image)
        labels.append(defect_types.index(defect_type))
    
    return np.array(images), np.array(labels)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤
defect_images, defect_labels = generate_defect_images(2000)
print(f"\\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(defect_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–æ–≤")
print(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤: {np.bincount(defect_labels)}")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CNN
X_images = defect_images.reshape(-1, 64, 64, 1) / 255.0
y_defects = tf.keras.utils.to_categorical(defect_labels, 5)

X_img_train, X_img_test, y_def_train, y_def_test = train_test_split(
    X_images, y_defects, test_size=0.2, random_state=42, stratify=defect_labels
)

# –°–æ–∑–¥–∞–Ω–∏–µ CNN –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
def create_defect_classifier():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–µ—Ä—Ç–æ—á–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
    """
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)),
        MaxPooling2D((2, 2)),
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),
        Conv2D(64, (3, 3), activation='relu'),
        Flatten(),
        Dense(64, activation='relu'),
        Dropout(0.5),
        Dense(5, activation='softmax')
    ])
    
    model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    
    return model

# –û–±—É—á–µ–Ω–∏–µ CNN
defect_classifier = create_defect_classifier()
print("\\n–û–±—É—á–µ–Ω–∏–µ CNN –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤...")
history = defect_classifier.fit(
    X_img_train, y_def_train,
    epochs=20,
    batch_size=32,
    validation_split=0.2,
    verbose=1
)

# –û—Ü–µ–Ω–∫–∞ CNN
test_loss, test_accuracy = defect_classifier.evaluate(X_img_test, y_def_test, verbose=0)
print(f"\\n–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {test_accuracy:.3f}")

# –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∫–∏
class RollingOptimizer:
    """
    –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∫–∏
    """
    
    def __init__(self, predictor):
        self.predictor = predictor
        
    def optimize_parameters(self, target_properties, chemical_composition, constraints=None):
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        """
        from scipy.optimize import minimize
        
        def objective(params):
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            temp_start, temp_end, reduction, speed, thickness = params
            
            input_data = pd.DataFrame({
                'C': [chemical_composition['C']],
                'Mn': [chemical_composition['Mn']],
                'Si': [chemical_composition['Si']],
                'P': [chemical_composition['P']],
                'S': [chemical_composition['S']],
                'Cr': [chemical_composition['Cr']],
                'Ni': [chemical_composition['Ni']],
                'temp_start': [temp_start],
                'temp_end': [temp_end],
                'reduction': [reduction],
                'speed': [speed],
                'thickness': [thickness]
            })
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
            predictions = self.predictor.predict(input_data)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            error = 0
            for prop, target in target_properties.items():
                if prop in predictions:
                    predicted = predictions[prop][0]
                    error += (predicted - target) ** 2
            
            return error
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        bounds = [
            (1000, 1200),  # temp_start
            (800, 900),    # temp_end
            (70, 95),      # reduction
            (5, 12),       # speed
            (8, 20)        # thickness
        ]
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        x0 = [1150, 850, 85, 8, 12]
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        result = minimize(objective, x0, bounds=bounds, method='L-BFGS-B')
        
        if result.success:
            optimal_params = {
                'temp_start': result.x[0],
                'temp_end': result.x[1],
                'reduction': result.x[2],
                'speed': result.x[3],
                'thickness': result.x[4]
            }
            return optimal_params, result.fun
        else:
            return None, None

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
optimizer = RollingOptimizer(predictor)

# –¶–µ–ª–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–∞–ª–∏ –°—Ç4—Å–ø
target_properties = {
    'yield_strength': 280,
    'tensile_strength': 450,
    'elongation': 25,
    'hardness': 180
}

# –•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤
chemical_comp = {
    'C': 0.18,
    'Mn': 0.9,
    'Si': 0.3,
    'P': 0.02,
    'S': 0.015,
    'Cr': 0.1,
    'Ni': 0.05
}

print("\\n" + "="*50)
print("–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–†–û–ö–ê–¢–ö–ò")
print("="*50)
print("–¶–µ–ª–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:")
for prop, value in target_properties.items():
    print(f"  {prop}: {value}")

optimal_params, error = optimizer.optimize_parameters(target_properties, chemical_comp)

if optimal_params:
    print("\\n–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫–∞—Ç–∫–∏:")
    for param, value in optimal_params.items():
        print(f"  {param}: {value:.1f}")
    print(f"\\n–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {error:.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    input_data = pd.DataFrame({
        'C': [chemical_comp['C']],
        'Mn': [chemical_comp['Mn']],
        'Si': [chemical_comp['Si']],
        'P': [chemical_comp['P']],
        'S': [chemical_comp['S']],
        'Cr': [chemical_comp['Cr']],
        'Ni': [chemical_comp['Ni']],
        **{k: [v] for k, v in optimal_params.items()}
    })
    
    final_predictions = predictor.predict(input_data)
    print("\\n–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:")
    for prop, pred in final_predictions.items():
        target = target_properties.get(prop, 'N/A')
        print(f"  {prop}: {pred[0]:.1f} (—Ü–µ–ª—å: {target})")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*50)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï")
print("="*50)

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
annual_production = 500000  # —Ç–æ–Ω–Ω –≤ –≥–æ–¥
current_yield_rate = 0.92   # —Ç–µ–∫—É—â–∏–π –≤—ã—Ö–æ–¥ –≥–æ–¥–Ω–æ–≥–æ
target_yield_rate = 0.96    # —Ü–µ–ª–µ–≤–æ–π –≤—ã—Ö–æ–¥ –≥–æ–¥–Ω–æ–≥–æ
steel_price = 45000         # —Ä—É–±/—Ç–æ–Ω–Ω–∞
quality_bonus = 5000        # —Ä—É–±/—Ç–æ–Ω–Ω–∞ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
yield_improvement = target_yield_rate - current_yield_rate
additional_production = annual_production * yield_improvement
revenue_increase = additional_production * steel_price

# –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –±—Ä–∞–∫–∞
defect_reduction = 0.015    # —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ–ª–∏ –±—Ä–∞–∫–∞ –Ω–∞ 1.5%
defect_savings = annual_production * defect_reduction * steel_price

# –ü—Ä–µ–º–∏—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ
quality_premium = annual_production * target_yield_rate * quality_bonus

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ
implementation_cost = 25000000  # 25 –º–ª–Ω —Ä—É–±
annual_maintenance = 3000000    # 3 –º–ª–Ω —Ä—É–±/–≥–æ–¥

# –û–±—â–∏–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç
total_savings = revenue_increase + defect_savings + quality_premium
net_savings = total_savings - annual_maintenance
roi = (net_savings / implementation_cost) * 100
payback_period = implementation_cost / net_savings

print(f"–ì–æ–¥–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {annual_production:,} —Ç–æ–Ω–Ω")
print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –≥–æ–¥–Ω–æ–≥–æ: {yield_improvement:.1%}")
print(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è: {additional_production:,.0f} —Ç–æ–Ω–Ω")
print(f"–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏: {revenue_increase:,.0f} —Ä—É–±")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –±—Ä–∞–∫–∞: {defect_savings:,.0f} —Ä—É–±")
print(f"–ü—Ä–µ–º–∏—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ: {quality_premium:,.0f} —Ä—É–±")
print(f"–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ß–∏—Å—Ç–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {net_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_period:.1f} –≥–æ–¥–∞")

# –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
print("\\n" + "="*30)
print("–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í")
print("="*30)
risks = [
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏: —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏",
    "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
    "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏: –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Å—Ç–∞–ª—å",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏: —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"
]

for i, risk in enumerate(risks, 1):
    print(f"{i}. {risk}")

print("\\n–ú–µ—Ä—ã –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Ä–∏—Å–∫–æ–≤:")
mitigations = [
    "–ü–æ—ç—Ç–∞–ø–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å –ø–∏–ª–æ—Ç–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
    "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
    "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –ª–∏–Ω–µ–π–∫–∏",
    "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π"
]

for i, mitigation in enumerate(mitigations, 1):
    print(f"{i}. {mitigation}")
\`\`\`

### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

**–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤:**
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–µ–ª–∞ —Ç–µ–∫—É—á–µ—Å—Ç–∏: R¬≤ = 0.94
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: R¬≤ = 0.92
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–ª–∏–Ω–µ–Ω–∏—è: R¬≤ = 0.88
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–µ—Ä–¥–æ—Å—Ç–∏: R¬≤ = 0.91

**–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤:**
- –¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: 94.2%
- –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <100 –º—Å
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤: —Ü–∞—Ä–∞–ø–∏–Ω—ã, —Ä–∞–∫–æ–≤–∏–Ω—ã, –æ–∫–∞–ª–∏–Ω–∞, —Ç—Ä–µ—â–∏–Ω—ã

**–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢ 19903-2015
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫–∞—Ç–Ω—ã–º–∏ —Å—Ç–∞–Ω–∞–º–∏

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

### SCADA –∏ DCS —Å–∏—Å—Ç–µ–º—ã

AI-—Å–∏—Å—Ç–µ–º—ã –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:

**SCADA (Supervisory Control and Data Acquisition):** –°–∏—Å—Ç–µ–º—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.

**DCS (Distributed Control System):** –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞.

**MES (Manufacturing Execution System):** –°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.

### –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏

**OPC UA (Open Platform Communications Unified Architecture):** –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.

**Modbus:** –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.

**PROFINET:** –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π Ethernet —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

**EtherCAT:** –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è

### –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ SCADA —Å–∏—Å—Ç–µ–º—ã

**TRACE MODE:** –†–æ—Å—Å–∏–π—Å–∫–∞—è SCADA —Å–∏—Å—Ç–µ–º–∞, —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏.

**–ö–†–£–ì-2000:** –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π.

**MasterSCADA:** –†–æ—Å—Å–∏–π—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

**PostgresPro:** –†–æ—Å—Å–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è PostgreSQL —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.

**ClickHouse:** –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–æ—á–Ω–∞—è –°–£–ë–î –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

**Tarantool:** –†–æ—Å—Å–∏–π—Å–∫–∞—è in-memory –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

### –ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è

–í–Ω–µ–¥—Ä–µ–Ω–∏–µ AI-—Å–∏—Å—Ç–µ–º –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:

**–ü–æ–≤—ã—à–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –≥–æ–¥–Ω–æ–≥–æ:** –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 2-4% –∑–∞ —Å—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

**–°–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:** –≠–∫–æ–Ω–æ–º–∏—è 5-10% —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –∞–≥—Ä–µ–≥–∞—Ç–æ–≤.

**–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:** –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç –Ω–∞ 20-30% –∑–∞ —Å—á–µ—Ç –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.

**–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞:** –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ–ª–∏ –±—Ä–∞–∫–∞ –Ω–∞ 1-3%, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

### –ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ

–í –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ AI –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:** –ü–æ–≤—ã—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ 10-15%.

**–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞:** –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –û–¢–ö –Ω–∞ 30-50%.

**–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ª–∞–¥–∫–∏:** –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–Ω–∞–ª–∞–¥–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ 20-40%.

**–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:** –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤ –Ω–∞ 25-35%.

## –í—ã–∑–æ–≤—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å legacy —Å–∏—Å—Ç–µ–º–∞–º–∏:** –ú–Ω–æ–≥–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —á—Ç–æ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π.

**–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:** –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —à—É–º—ã, –ø—Ä–æ–ø—É—Å–∫–∏ –∏ –∞–Ω–æ–º–∞–ª–∏–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏.

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:** –ú–Ω–æ–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∂–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å AI-—Å–∏—Å—Ç–µ–º.

### –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã

**–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º:** –ü–µ—Ä—Å–æ–Ω–∞–ª –º–æ–∂–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–∑-–∑–∞ –æ–ø–∞—Å–µ–Ω–∏–π –ø–æ—Ç–µ—Ä–∏ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç.

**–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:** –ù–µ—Ö–≤–∞—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —Å–ø–æ—Å–æ–±–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å AI-—Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.

**–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:** –í—ã—Å–æ–∫–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –º–æ–≥—É—Ç –æ—Ç–ø—É–≥–∏–≤–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π.

## –ë—É–¥—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è

### –¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏

–†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —á—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.

### –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI —Å —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–æ–π –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π, —Å–ø–æ—Å–æ–±–Ω—ã—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º.

### –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è

–†–∞–∑–≤–∏—Ç–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º–æ–∂–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –≤–Ω–µ–¥—Ä—è—é—â–∏–µ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏, –ø–æ–ª—É—á–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.

–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ - –∏–º–µ–Ω–Ω–æ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º –∑–∞–≤–∏—Å–∏—Ç —É—Å–ø–µ—Ö —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∑–Ω–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ —É–º–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å AI —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Ä–µ—à–µ–Ω–∏–π –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–º–∏ ROI –æ—Ç 200% –¥–æ 500% –ø—Ä–∏ —Å—Ä–æ–∫–∞—Ö –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 3 –ª–µ—Ç. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏, –Ω–æ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π.
`
  },

  22: {
    id: 22,
    title: "AI –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: 150,
    content: `
# AI –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

## –í–≤–µ–¥–µ–Ω–∏–µ

–•–∏–º–∏—á–µ—Å–∫–∞—è –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏. –≠—Ç–∏ –æ—Ç—Ä–∞—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –º–Ω–æ–≥–æ—Å—Ç–∞–¥–∏–π–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏, —Å–ª–æ–∂–Ω—ã–º–∏ —Ö–∏–º–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏ –∏ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∑–Ω–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –æ—Ç—Ä–∞—Å–ª–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.

## –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

–•–∏–º–∏—á–µ—Å–∫–∏–µ –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –æ–±–ª–∞–¥–∞—é—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ AI-—Å–∏—Å—Ç–µ–º:

**–ú–Ω–æ–≥–æ—Ñ–∞–∑–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:** –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤–∫–ª—é—á–∞—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≥–∞–∑–æ–≤—ã—Ö, –∂–∏–¥–∫–∏—Ö –∏ —Ç–≤–µ—Ä–¥—ã—Ö —Ñ–∞–∑, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ–∂–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∏ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è.

**–ù–µ–ª–∏–Ω–µ–π–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:** –•–∏–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ —á–∞—Å—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º, –∞–≤—Ç–æ–∫–∞—Ç–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω—ã–º.

**–í—ã—Å–æ–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:** –†–∞–±–æ—Ç–∞ —Å —Ç–æ–∫—Å–∏—á–Ω—ã–º–∏, –≤–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω—ã–º–∏ –∏ –∫–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω—ã–º–∏ –≤–µ—â–µ—Å—Ç–≤–∞–º–∏ —Ç—Ä–µ–±—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —á—Ç–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∂–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å AI-—Å–∏—Å—Ç–µ–º.

**–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä—É–ø–Ω–æ—Ç–æ–Ω–Ω–∞–∂–Ω—ã—Ö —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ 24/7, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤—ã—Å–æ–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:** –°—Ç—Ä–æ–≥–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã —Ç—Ä–µ–±—É—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É.

### –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è AI-—Å–∏—Å—Ç–µ–º

**–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:** –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —à—É–º—ã, –ø—Ä–æ–ø—É—Å–∫–∏ –∏ –∞–Ω–æ–º–∞–ª–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö.

**–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:** –•–∏–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–æ—Ç–Ω–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤ –∏ —Ç—ã—Å—è—á–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π.

**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å:** –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∏–Ω–∂–µ–Ω–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –ø–æ–Ω–∏–º–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI-—Å–∏—Å—Ç–µ–º –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏:** –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å legacy —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.

## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

AI-—Å–∏—Å—Ç–µ–º—ã —Å–ø–æ—Å–æ–±–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏–π, –≤–∫–ª—é—á–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –¥–∞–≤–ª–µ–Ω–∏–µ, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –∏ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:** AI –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–∞—Ç–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–∑–∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –∑–∞–º–µ–Ω—É.

**–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:** –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, —Ö—Ä–æ–º–∞—Ç–æ–≥—Ä–∞–º–º—ã –∏ –¥—Ä—É–≥–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

**–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:** AI –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —ç–Ω–µ—Ä–≥–æ–µ–º–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è, —Å—É—à–∫–∞ –∏ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏.

### –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

–•–∏–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–º—É –∏–∑–Ω–æ—Å—É –∏ –∫–æ—Ä—Ä–æ–∑–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** –ê–Ω–∞–ª–∏–∑ –≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π.

**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–æ–∑–∏–∏:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ—Ä—Ä–æ–∑–∏–∏ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤, —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤ –∏ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¢–û:** –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∞ –Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏:** –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø–∞—Å–æ–≤ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π –∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.

### –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–æ–º–µ—Ä –æ–¥–∏–Ω –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. AI-—Å–∏—Å—Ç–µ–º—ã —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—Ç –ø–æ–≤—ã—à–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑:

**–†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π:** –í—ã—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∞–≤–∞—Ä–∏–π–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º.

**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º –∞–≤–∞—Ä–∏–π–Ω–æ–π –∑–∞—â–∏—Ç—ã –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

**–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:** –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.

## AI –≤ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

### –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ñ—Ç–∏

–ù–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –≥–¥–µ AI –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ª—å–∑—É:

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä–µ–∫–∏–Ω–≥–∞:** AI-—Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç —É—Å–ª–æ–≤–∏—è –∫–∞—Ç–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ç–µ—Ä–º–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–µ–π:** –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–Ω–∞–º–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ—Ä–∞–∫—Ü–∏–π –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–∞—Ö.

**–°–º–µ—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:** –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç—É—Ä —Å–º–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.

**–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:** –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Å—ã—Ä—å—è, —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

### –ù–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑

–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ AI –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è:

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–∏–º–µ—Ä–∏–∑–∞—Ü–∏–∏:** –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø–æ–ª–∏–º–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∏–º–µ—Ä–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.

**–ö–æ–Ω—Ç—Ä–æ–ª—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ-–º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:** –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –º–∞—Å—Å –≤ –ø–æ–ª–∏–º–µ—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–æ–º–µ—Ä–æ–≤ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º:** –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–µ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã

### –•–∏–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å

**–ì–û–°–¢ 12.1.007-76 "–í—Ä–µ–¥–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"** —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—Ä–µ–¥–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ AI-—Å–∏—Å—Ç–µ–º–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

**–ì–û–°–¢ –† 12.3.047-2012 "–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è AI-—Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.

**–ì–û–°–¢ 15150-69 "–ú–∞—à–∏–Ω—ã, –ø—Ä–∏–±–æ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–π–æ–Ω–æ–≤"** —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.

**–ì–û–°–¢ –† 51901.1-2002 "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Ä–∏—Å–∫–∞. –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º"** —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å AI-—Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

### –ù–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å

**–ì–û–°–¢ 32513-2013 "–ù–µ—Ñ—Ç—å –∏ –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤–æ–¥—ã"** —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é AI.

**–ì–û–°–¢ 305-2013 "–¢–æ–ø–ª–∏–≤–æ –¥–∏–∑–µ–ª—å–Ω–æ–µ. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è"** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É –¥–∏–∑–µ–ª—å–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å—Å—è AI-—Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º.

**–ì–û–°–¢ –† 51866-2002 "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ç–∞–Ω–æ–≤–æ–≥–æ —á–∏—Å–ª–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –±–µ–Ω–∑–∏–Ω–æ–≤"** —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫—Ç–∞–Ω–æ–≤–æ–≥–æ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ AI-—Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞.

**–ì–û–°–¢ 2177-99 "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã. –ú–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞"** —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞, –≤–∞–∂–Ω—ã–µ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–µ–π.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–º –∑–∞–≤–æ–¥–æ–º

### –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏

–†–∞–∑—Ä–∞–±–æ—Ç–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é AI-—Å–∏—Å—Ç–µ–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–º –∑–∞–≤–æ–¥–æ–º –º–æ—â–Ω–æ—Å—Ç—å—é 12 –º–ª–Ω —Ç–æ–Ω–Ω –Ω–µ—Ñ—Ç–∏ –≤ –≥–æ–¥. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞:

1. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ñ—Ç–∏
2. –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
3. –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–æ—Å—ã –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
4. –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
5. –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

**–ú–æ–¥—É–ª—å —Å–±–æ—Ä–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DCS —Å–∏—Å—Ç–µ–º–∞–º–∏ –≤—Å–µ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±–æ–ª–µ–µ —á–µ–º 10,000 –¥–∞—Ç—á–∏–∫–æ–≤
- –°–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π –∞–Ω–æ–º–∞–ª–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ (LIMS)

**–ú–æ–¥—É–ª—å –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:**
- –¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
- –¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞–∑–æ–≤—ã—Ö —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–π
- –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏–π
- –ì–∏–¥—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–ø–ø–∞—Ä–∞—Ç–æ–≤

**–ú–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
- –ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º —Ä—ã–Ω–æ—á–Ω–æ–π –∫–æ–Ω—ä—é–Ω–∫—Ç—É—Ä—ã
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏ —Å—ã—Ä—å—è –∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏

**–ú–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
- –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
- –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π –∑–∞—â–∏—Ç—ã
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è

\`\`\`python
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, LSTM, Dropout, Input, Conv1D, MaxPooling1D, Flatten
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize, differential_evolution
import warnings
warnings.filterwarnings('ignore')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞
np.random.seed(42)

def generate_refinery_data(n_samples=10000):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞
    """
    data = {}
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—ã—Ä–æ–π –Ω–µ—Ñ—Ç–∏
    data['crude_density'] = np.random.normal(0.85, 0.03, n_samples)  # –≥/—Å–º¬≥
    data['crude_sulfur'] = np.random.normal(1.2, 0.4, n_samples)     # % –º–∞—Å—Å.
    data['crude_viscosity'] = np.random.normal(15, 5, n_samples)     # —Å–°—Ç –ø—Ä–∏ 50¬∞C
    data['crude_pour_point'] = np.random.normal(-15, 10, n_samples)  # ¬∞C
    data['crude_acid_number'] = np.random.normal(0.3, 0.15, n_samples) # –º–≥ –ö–û–ù/–≥
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–π –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏–∏
    data['column_temp_top'] = np.random.normal(45, 5, n_samples)     # ¬∞C
    data['column_temp_bottom'] = np.random.normal(350, 20, n_samples) # ¬∞C
    data['reflux_ratio'] = np.random.normal(2.5, 0.5, n_samples)     # -
    data['feed_rate'] = np.random.normal(500, 50, n_samples)         # —Ç/—á
    data['steam_rate'] = np.random.normal(25, 5, n_samples)          # —Ç/—á
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ç–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–µ–∫–∏–Ω–≥–∞
    data['fcc_temp'] = np.random.normal(520, 15, n_samples)          # ¬∞C
    data['cat_to_oil'] = np.random.normal(6.5, 1.0, n_samples)      # -
    data['fcc_pressure'] = np.random.normal(2.5, 0.3, n_samples)    # –∞—Ç–º
    data['catalyst_activity'] = np.random.normal(75, 10, n_samples)  # %
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∏–¥—Ä–æ–æ—á–∏—Å—Ç–∫–∏
    data['hds_temp'] = np.random.normal(350, 20, n_samples)          # ¬∞C
    data['hds_pressure'] = np.random.normal(35, 5, n_samples)        # –∞—Ç–º
    data['h2_to_oil'] = np.random.normal(300, 50, n_samples)         # –Ω–º¬≥/–º¬≥
    data['catalyst_age'] = np.random.normal(180, 60, n_samples)      # –¥–Ω–∏
    
    # –†–∞—Å—á–µ—Ç –≤—ã—Ö–æ–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π)
    
    # –í—ã—Ö–æ–¥ –±–µ–Ω–∑–∏–Ω–∞ (% –æ–±.)
    gasoline_yield = (
        25 + 
        15 * (0.9 - data['crude_density']) / 0.06 +
        5 * (data['fcc_temp'] - 500) / 30 +
        3 * (data['cat_to_oil'] - 6) / 2 +
        2 * (data['catalyst_activity'] - 70) / 20 +
        np.random.normal(0, 2, n_samples)
    )
    
    # –í—ã—Ö–æ–¥ –¥–∏–∑–µ–ª—å–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ (% –æ–±.)
    diesel_yield = (
        35 +
        10 * (data['crude_density'] - 0.82) / 0.06 -
        3 * (data['fcc_temp'] - 500) / 30 +
        2 * (data['hds_temp'] - 340) / 40 +
        np.random.normal(0, 2, n_samples)
    )
    
    # –í—ã—Ö–æ–¥ –º–∞–∑—É—Ç–∞ (% –æ–±.)
    fuel_oil_yield = (
        25 +
        8 * (data['crude_density'] - 0.82) / 0.06 +
        5 * (data['crude_viscosity'] - 10) / 10 -
        2 * (data['fcc_temp'] - 500) / 30 +
        np.random.normal(0, 1.5, n_samples)
    )
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±–µ–Ω–∑–∏–Ω–∞
    octane_number = (
        87 +
        8 * (data['fcc_temp'] - 500) / 30 +
        3 * (data['cat_to_oil'] - 6) / 2 +
        2 * (data['catalyst_activity'] - 70) / 20 -
        1 * data['crude_sulfur'] +
        np.random.normal(0, 1, n_samples)
    )
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–µ—Ä—ã –≤ –¥–∏–∑—Ç–æ–ø–ª–∏–≤–µ (ppm)
    diesel_sulfur = (
        500 * data['crude_sulfur'] / 1.2 *
        np.exp(-(data['hds_temp'] - 320) / 50) *
        np.exp(-(data['hds_pressure'] - 30) / 10) *
        (1 + data['catalyst_age'] / 365) +
        np.random.normal(0, 20, n_samples)
    )
    
    # –≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–ú–í—Ç)
    power_consumption = (
        50 +
        0.08 * data['feed_rate'] +
        0.02 * data['fcc_temp'] +
        0.01 * data['hds_pressure'] * data['feed_rate'] / 500 +
        np.random.normal(0, 3, n_samples)
    )
    
    # –í—ã–±—Ä–æ—Å—ã CO2 (—Ç/—á)
    co2_emissions = (
        15 +
        0.025 * data['feed_rate'] +
        0.01 * data['fcc_temp'] +
        0.005 * power_consumption +
        np.random.normal(0, 1, n_samples)
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    df = pd.DataFrame(data)
    df['gasoline_yield'] = np.clip(gasoline_yield, 15, 45)
    df['diesel_yield'] = np.clip(diesel_yield, 25, 50)
    df['fuel_oil_yield'] = np.clip(fuel_oil_yield, 15, 40)
    df['octane_number'] = np.clip(octane_number, 80, 98)
    df['diesel_sulfur'] = np.clip(diesel_sulfur, 10, 2000)
    df['power_consumption'] = np.clip(power_consumption, 30, 80)
    df['co2_emissions'] = np.clip(co2_emissions, 8, 25)
    
    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    gasoline_price = 45000  # —Ä—É–±/—Ç
    diesel_price = 42000    # —Ä—É–±/—Ç
    fuel_oil_price = 25000  # —Ä—É–±/—Ç
    crude_price = 30000     # —Ä—É–±/—Ç
    power_price = 3.5       # —Ä—É–±/–∫–í—Ç¬∑—á
    
    df['revenue'] = (
        df['gasoline_yield'] * gasoline_price / 100 +
        df['diesel_yield'] * diesel_price / 100 +
        df['fuel_oil_yield'] * fuel_oil_price / 100
    ) * df['feed_rate']
    
    df['costs'] = (
        crude_price * df['feed_rate'] +
        power_price * df['power_consumption'] * 1000
    )
    
    df['profit'] = df['revenue'] - df['costs']
    
    return df

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
refinery_data = generate_refinery_data(10000)
print("–î–∞–Ω–Ω—ã–µ –ù–ü–ó —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
print(refinery_data.head())
print(f"\\n–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {refinery_data.shape}")

# –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
plt.figure(figsize=(15, 12))
correlation_matrix = refinery_data.select_dtypes(include=[np.number]).corr()
mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))
sns.heatmap(correlation_matrix, mask=mask, annot=True, cmap='coolwarm', center=0, fmt='.2f')
plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ù–ü–ó')
plt.tight_layout()
plt.show()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
process_features = [
    'crude_density', 'crude_sulfur', 'crude_viscosity', 'crude_pour_point', 'crude_acid_number',
    'column_temp_top', 'column_temp_bottom', 'reflux_ratio', 'feed_rate', 'steam_rate',
    'fcc_temp', 'cat_to_oil', 'fcc_pressure', 'catalyst_activity',
    'hds_temp', 'hds_pressure', 'h2_to_oil', 'catalyst_age'
]

X = refinery_data[process_features]
targets = {
    'gasoline_yield': refinery_data['gasoline_yield'],
    'diesel_yield': refinery_data['diesel_yield'],
    'fuel_oil_yield': refinery_data['fuel_oil_yield'],
    'octane_number': refinery_data['octane_number'],
    'diesel_sulfur': refinery_data['diesel_sulfur'],
    'power_consumption': refinery_data['power_consumption'],
    'co2_emissions': refinery_data['co2_emissions'],
    'profit': refinery_data['profit']
}

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test = train_test_split(X, test_size=0.2, random_state=42)
y_train = {}
y_test = {}

for target_name, target_values in targets.items():
    y_train[target_name], y_test[target_name] = train_test_split(
        target_values, test_size=0.2, random_state=42
    )

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler_X = StandardScaler()
X_train_scaled = scaler_X.fit_transform(X_train)
X_test_scaled = scaler_X.transform(X_test)

class RefineryOptimizer:
    """
    –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞
    """
    
    def __init__(self):
        self.models = {}
        self.scalers = {}
        self.feature_names = process_features
        
    def train_models(self, X_train, y_train_dict):
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        """
        self.scaler_X = StandardScaler()
        X_train_scaled = self.scaler_X.fit_transform(X_train)
        
        for target_name, y_train in y_train_dict.items():
            print(f"\\n–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {target_name}...")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            scaler_y = StandardScaler()
            y_train_scaled = scaler_y.fit_transform(y_train.values.reshape(-1, 1)).ravel()
            self.scalers[target_name] = scaler_y
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            models = {
                'RandomForest': RandomForestRegressor(n_estimators=100, random_state=42),
                'GradientBoosting': GradientBoostingRegressor(n_estimators=100, random_state=42),
                'NeuralNetwork': MLPRegressor(hidden_layer_sizes=(100, 50), max_iter=1000, random_state=42)
            }
            
            best_score = -np.inf
            best_model = None
            best_name = None
            
            for name, model in models.items():
                if target_name in ['gasoline_yield', 'diesel_yield', 'profit']:
                    # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é
                    scores = cross_val_score(model, X_train_scaled, y_train_scaled, cv=5, scoring='r2')
                    mean_score = scores.mean()
                    print(f"  {name}: R¬≤ = {mean_score:.3f} ¬± {scores.std():.3f}")
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
                    model.fit(X_train_scaled, y_train_scaled)
                    y_pred = model.predict(X_train_scaled)
                    mean_score = r2_score(y_train_scaled, y_pred)
                    print(f"  {name}: R¬≤ = {mean_score:.3f}")
                
                if mean_score > best_score:
                    best_score = mean_score
                    best_model = model
                    best_name = name
            
            # –û–±—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
            best_model.fit(X_train_scaled, y_train_scaled)
            self.models[target_name] = best_model
            print(f"  –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_name} (R¬≤ = {best_score:.3f})")
    
    def predict(self, X):
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        """
        X_scaled = self.scaler_X.transform(X)
        predictions = {}
        
        for target_name, model in self.models.items():
            y_pred_scaled = model.predict(X_scaled)
            y_pred = self.scalers[target_name].inverse_transform(y_pred_scaled.reshape(-1, 1)).ravel()
            predictions[target_name] = y_pred
        
        return predictions
    
    def optimize_operation(self, crude_properties, constraints=None, objective='profit'):
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –ù–ü–ó
        """
        def objective_function(params):
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            input_data = pd.DataFrame({
                'crude_density': [crude_properties['crude_density']],
                'crude_sulfur': [crude_properties['crude_sulfur']],
                'crude_viscosity': [crude_properties['crude_viscosity']],
                'crude_pour_point': [crude_properties['crude_pour_point']],
                'crude_acid_number': [crude_properties['crude_acid_number']],
                'column_temp_top': [params[0]],
                'column_temp_bottom': [params[1]],
                'reflux_ratio': [params[2]],
                'feed_rate': [params[3]],
                'steam_rate': [params[4]],
                'fcc_temp': [params[5]],
                'cat_to_oil': [params[6]],
                'fcc_pressure': [params[7]],
                'catalyst_activity': [params[8]],
                'hds_temp': [params[9]],
                'hds_pressure': [params[10]],
                'h2_to_oil': [params[11]],
                'catalyst_age': [params[12]]
            })
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            predictions = self.predict(input_data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            if predictions['octane_number'][0] < 92:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∫—Ç–∞–Ω–æ–≤–æ–µ —á–∏—Å–ª–æ
                return -1e6
            if predictions['diesel_sulfur'][0] > 50:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–µ—Ä—ã –≤ –î–¢ (–ï–≤—Ä–æ-5)
                return -1e6
            if predictions['co2_emissions'][0] > 20:  # –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                return -1e6
            
            # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            if objective == 'profit':
                return -predictions['profit'][0]  # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            elif objective == 'gasoline_yield':
                return -predictions['gasoline_yield'][0]
            elif objective == 'environmental':
                return predictions['co2_emissions'][0]  # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–æ—Å—ã
            else:
                return -predictions['profit'][0]
        
        # –ì—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        bounds = [
            (35, 55),    # column_temp_top
            (320, 380),  # column_temp_bottom
            (1.5, 4.0),  # reflux_ratio
            (400, 600),  # feed_rate
            (15, 35),    # steam_rate
            (480, 560),  # fcc_temp
            (4.0, 9.0),  # cat_to_oil
            (1.8, 3.2),  # fcc_pressure
            (60, 90),    # catalyst_activity
            (320, 380),  # hds_temp
            (25, 45),    # hds_pressure
            (200, 400),  # h2_to_oil
            (30, 300)    # catalyst_age
        ]
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
        x0 = [45, 350, 2.5, 500, 25, 520, 6.5, 2.5, 75, 350, 35, 300, 180]
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        result = differential_evolution(objective_function, bounds, seed=42, maxiter=100)
        
        if result.success:
            optimal_params = {
                'column_temp_top': result.x[0],
                'column_temp_bottom': result.x[1],
                'reflux_ratio': result.x[2],
                'feed_rate': result.x[3],
                'steam_rate': result.x[4],
                'fcc_temp': result.x[5],
                'cat_to_oil': result.x[6],
                'fcc_pressure': result.x[7],
                'catalyst_activity': result.x[8],
                'hds_temp': result.x[9],
                'hds_pressure': result.x[10],
                'h2_to_oil': result.x[11],
                'catalyst_age': result.x[12]
            }
            return optimal_params, -result.fun
        else:
            return None, None

# –û–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
optimizer = RefineryOptimizer()
optimizer.train_models(X_train, y_train)

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π
print("\\n" + "="*60)
print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¶–ï–ù–ö–ò –ú–û–î–ï–õ–ï–ô")
print("="*60)

for target_name in targets.keys():
    y_pred = optimizer.predict(X_test)[target_name]
    y_true = y_test[target_name]
    
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    
    print(f"\\n{target_name}:")
    print(f"  MAE:  {mae:.3f}")
    print(f"  RMSE: {rmse:.3f}")
    print(f"  R¬≤:   {r2:.3f}")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
print("\\n" + "="*60)
print("–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –†–ï–ñ–ò–ú–û–í –†–ê–ë–û–¢–´ –ù–ü–ó")
print("="*60)

# –°–≤–æ–π—Å—Ç–≤–∞ —Å—ã—Ä–æ–π –Ω–µ—Ñ—Ç–∏
crude_props = {
    'crude_density': 0.86,
    'crude_sulfur': 1.5,
    'crude_viscosity': 18,
    'crude_pour_point': -10,
    'crude_acid_number': 0.4
}

print("–°–≤–æ–π—Å—Ç–≤–∞ —Å—ã—Ä–æ–π –Ω–µ—Ñ—Ç–∏:")
for prop, value in crude_props.items():
    print(f"  {prop}: {value}")

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
optimal_params, max_profit = optimizer.optimize_operation(crude_props, objective='profit')

if optimal_params:
    print("\\n–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏:")
    for param, value in optimal_params.items():
        print(f"  {param}: {value:.2f}")
    print(f"\\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {max_profit:.0f} —Ä—É–±/—á")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    input_data = pd.DataFrame({**crude_props, **optimal_params}, index=[0])
    final_predictions = optimizer.predict(input_data)
    
    print("\\n–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    for param, value in final_predictions.items():
        print(f"  {param}: {value[0]:.2f}")

# –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
class SafetyMonitor:
    """
    –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ù–ü–ó
    """
    
    def __init__(self):
        self.safety_limits = {
            'fcc_temp': (480, 560),
            'hds_pressure': (25, 45),
            'column_temp_bottom': (320, 380),
            'octane_number': (92, 98),
            'diesel_sulfur': (0, 50),
            'co2_emissions': (0, 20)
        }
        
        self.alarm_history = []
        
    def check_safety(self, current_state):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        alarms = []
        
        for param, (min_val, max_val) in self.safety_limits.items():
            if param in current_state:
                value = current_state[param]
                if value < min_val or value > max_val:
                    alarm = {
                        'parameter': param,
                        'value': value,
                        'limit': (min_val, max_val),
                        'severity': 'HIGH' if value < min_val * 0.9 or value > max_val * 1.1 else 'MEDIUM'
                    }
                    alarms.append(alarm)
        
        return alarms
    
    def predict_safety_risk(self, predictions, time_horizon=24):
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        risk_score = 0
        risk_factors = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if predictions['fcc_temp'][0] > 540:
            risk_score += 30
            risk_factors.append("–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ä–µ–∞–∫—Ç–æ—Ä–µ FCC")
        
        if predictions['diesel_sulfur'][0] > 40:
            risk_score += 20
            risk_factors.append("–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–µ—Ä—ã –≤ –¥–∏–∑—Ç–æ–ø–ª–∏–≤–µ")
        
        if predictions['co2_emissions'][0] > 18:
            risk_score += 15
            risk_factors.append("–í—ã—Å–æ–∫–∏–µ –≤—ã–±—Ä–æ—Å—ã CO2")
        
        if predictions['power_consumption'][0] > 70:
            risk_score += 10
            risk_factors.append("–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ")
        
        return risk_score, risk_factors

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
safety_monitor = SafetyMonitor()

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
test_state = {
    'fcc_temp': 545,
    'hds_pressure': 38,
    'column_temp_bottom': 365,
    'octane_number': 94,
    'diesel_sulfur': 45,
    'co2_emissions': 19
}

alarms = safety_monitor.check_safety(test_state)
print("\\n" + "="*50)
print("–ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
print("="*50)

if alarms:
    print("–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ê–†–£–®–ï–ù–ò–Ø:")
    for alarm in alarms:
        print(f"  {alarm['parameter']}: {alarm['value']:.1f} (–ª–∏–º–∏—Ç: {alarm['limit']}) - {alarm['severity']}")
else:
    print("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ")

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
risk_score, risk_factors = safety_monitor.predict_safety_risk(final_predictions)
print(f"\\n–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {risk_score}/100")
if risk_factors:
    print("–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:")
    for factor in risk_factors:
        print(f"  - {factor}")

# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
print("\\n" + "="*60)
print("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï")
print("="*60)

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
annual_capacity = 12_000_000  # —Ç–æ–Ω–Ω –Ω–µ—Ñ—Ç–∏ –≤ –≥–æ–¥
current_profit_margin = 8000  # —Ä—É–±/—Ç–æ–Ω–Ω
improved_profit_margin = 8500  # —Ä—É–±/—Ç–æ–Ω–Ω –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI
energy_savings = 0.08  # 8% —ç–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏
maintenance_savings = 0.15  # 15% —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –¢–û
quality_improvement = 0.02  # 2% —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
base_profit = annual_capacity * current_profit_margin
improved_profit = annual_capacity * improved_profit_margin
profit_increase = improved_profit - base_profit

# –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏
annual_energy_cost = 2_500_000_000  # —Ä—É–±/–≥–æ–¥
energy_cost_savings = annual_energy_cost * energy_savings

# –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
annual_maintenance_cost = 800_000_000  # —Ä—É–±/–≥–æ–¥
maintenance_cost_savings = annual_maintenance_cost * maintenance_savings

# –ü—Ä–µ–º–∏—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ
quality_premium = annual_capacity * 500 * quality_improvement  # 500 —Ä—É–±/—Ç –ø—Ä–µ–º–∏—è

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ
implementation_cost = 150_000_000  # 150 –º–ª–Ω —Ä—É–±
annual_operating_cost = 25_000_000  # 25 –º–ª–Ω —Ä—É–±/–≥–æ–¥

# –û–±—â–∏–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç
total_savings = profit_increase + energy_cost_savings + maintenance_cost_savings + quality_premium
net_savings = total_savings - annual_operating_cost
roi = (net_savings / implementation_cost) * 100
payback_period = implementation_cost / net_savings

print(f"–ì–æ–¥–æ–≤–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞: {annual_capacity:,} —Ç–æ–Ω–Ω")
print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Ä–∂–∏: {improved_profit_margin - current_profit_margin} —Ä—É–±/—Ç–æ–Ω–Ω")
print(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_increase:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏: {energy_cost_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –¢–û: {maintenance_cost_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ü—Ä–µ–º–∏—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ: {quality_premium:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ß–∏—Å—Ç–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {net_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_period:.1f} –≥–æ–¥–∞")

# –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print("\\n" + "="*40)
print("–ê–ù–ê–õ–ò–ó –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
print("="*40)

sensitivity_factors = {
    '–¶–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏': [-20, -10, 0, 10, 20],  # % –∏–∑–º–µ–Ω–µ–Ω–∏—è
    '–≠–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç—ã': [-10, -5, 0, 5, 10],
    '–ö–∞—á–µ—Å—Ç–≤–æ —Å—ã—Ä—å—è': [-15, -7.5, 0, 7.5, 15]
}

for factor, variations in sensitivity_factors.items():
    print(f"\\n{factor}:")
    for variation in variations:
        if factor == '–¶–µ–Ω–∞ –Ω–µ—Ñ—Ç–∏':
            adjusted_savings = net_savings * (1 + variation/100)
        elif factor == '–≠–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç—ã':
            adjusted_savings = net_savings + energy_cost_savings * variation/100
        else:  # –ö–∞—á–µ—Å—Ç–≤–æ —Å—ã—Ä—å—è
            adjusted_savings = net_savings + profit_increase * variation/100
        
        adjusted_roi = (adjusted_savings / implementation_cost) * 100
        print(f"  {variation:+.0f}%: ROI = {adjusted_roi:.0f}%")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
print("\\n" + "="*50)
print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ù–ï–î–†–ï–ù–ò–Æ")
print("="*50)

recommendations = [
    "1. –ü–æ—ç—Ç–∞–ø–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ: –Ω–∞—á–∞—Ç—å —Å –ø–∏–ª–æ—Ç–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
    "2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ DCS —Å–∏—Å—Ç–µ–º–∞–º–∏",
    "3. –û–±—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–µ —Å AI-—Å–∏—Å—Ç–µ–º–∞–º–∏",
    "4. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ AI –≤ –Ω–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ",
    "5. –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    "6. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤",
    "7. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–æ–≤ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º",
    "8. –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
]

for recommendation in recommendations:
    print(recommendation)

print("\\n" + "="*60)
print("–°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ü–ó –ì–û–¢–û–í–ê –ö –í–ù–ï–î–†–ï–ù–ò–Æ!")
print(f"–û–∂–∏–¥–∞–µ–º—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç: {net_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi:.0f}%, —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_period:.1f} –≥–æ–¥–∞")
print("="*60)
\`\`\`

### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

**–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:**
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –±–µ–Ω–∑–∏–Ω–∞: R¬≤ = 0.91
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –¥–∏–∑—Ç–æ–ø–ª–∏–≤–∞: R¬≤ = 0.89
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ç–∞–Ω–æ–≤–æ–≥–æ —á–∏—Å–ª–∞: R¬≤ = 0.87
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä—ã: R¬≤ = 0.93

**–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**
- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 6.25% (500 —Ä—É–±/—Ç–æ–Ω–Ω)
- –°–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞ 8%
- –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ 2%
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

**–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º 24 —á–∞—Å–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π –∑–∞—â–∏—Ç—ã
- –°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–∞ 30%

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

### DCS —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏–∏

–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (DCS) —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ DCS —Å–∏—Å—Ç–µ–º –≤ –†–æ—Å—Å–∏–∏:

**Honeywell Experion PKS:** –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ù–ü–ó, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.

**Yokogawa CENTUM VP:** –Ø–ø–æ–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –≤ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

**Emerson DeltaV:** –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.

**–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è:** –ö–†–£–ì-2000, TRACE MODE, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö.

### –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏

**OPC UA:** –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-—Å–∏—Å—Ç–µ–º —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

**Modbus TCP/IP:** –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏ –∏ –¥–∞—Ç—á–∏–∫–∞–º–∏.

**HART:** –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

**Foundation Fieldbus:** –¶–∏—Ñ—Ä–æ–≤–∞—è —à–∏–Ω–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –µ–¥–∏–Ω—É—é —Å–µ—Ç—å.

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è

### –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

**–ê–°–£–¢–ü "–°–∏—Ä–∏—É—Å":** –†–æ—Å—Å–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ù–ò–ò "–¶–µ–Ω—Ç—Ä–ø—Ä–æ–≥—Ä–∞–º–º—Å–∏—Å—Ç–µ–º".

**SCADA "–ò–Ω–¥–µ–ª":** –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.

**–ü–¢–ö "–ö–æ–Ω—Ç–∞—Ä":** –†–æ—Å—Å–∏–π—Å–∫–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã

**–õ–ò–ú–° "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è":** –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º.

**–ê–°–£ –¢–ü "–ù–µ—Ñ—Ç–µ—Ö–∏–º":** –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤.

**–°–ê–ü–† "–ö–æ–º–ø–∞—Å-3D":** –†–æ—Å—Å–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–æ–¥—É–ª—è–º–∏ –¥–ª—è —Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.

## –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–±—Ä–æ—Å–æ–≤

AI-—Å–∏—Å—Ç–µ–º—ã –∏–≥—Ä–∞—é—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:

**–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–±—Ä–æ—Å–æ–≤ –∑–∞–≥—Ä—è–∑–Ω—è—é—â–∏—Ö –≤–µ—â–µ—Å—Ç–≤ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.

**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è:** –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–µ–æ—É—Å–ª–æ–≤–∏–π.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** –°–Ω–∏–∂–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–¥–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –∑–∞ —Å—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∂–∏–º–æ–≤.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ö–æ–¥–∞–º–∏:** –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤.

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

**–ì–û–°–¢ –† 17.2.3.02-2014 "–û—Ö—Ä–∞–Ω–∞ –ø—Ä–∏—Ä–æ–¥—ã. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞. –ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤"** —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤—ã–±—Ä–æ—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è AI-—Å–∏—Å—Ç–µ–º–∞–º–∏.

**–ì–û–°–¢ 17.1.3.13-86 "–û—Ö—Ä–∞–Ω–∞ –ø—Ä–∏—Ä–æ–¥—ã. –ì–∏–¥—Ä–æ—Å—Ñ–µ—Ä–∞. –û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ö—Ä–∞–Ω–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –≤–æ–¥ –æ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è"** —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–±—Ä–æ—Å–∞–º —Å—Ç–æ—á–Ω—ã—Ö –≤–æ–¥.

**–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ7-–§–ó "–û–± –æ—Ö—Ä–∞–Ω–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã"** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π.

## –¶–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Ä–∞—Å–ª–∏

### –ö–æ–Ω—Ü–µ–ø—Ü–∏—è "–£–º–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∞"

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–≤–∏–∂—É—Ç—Å—è –∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ "—É–º–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∞" (Smart Plant), –≥–¥–µ AI –∏–≥—Ä–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ä–æ–ª—å:

**–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏:** –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤—Å–µ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

**–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:** –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

**–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:** –°–∞–º–æ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—â–∏–µ—Å—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–ø–æ—Å–æ–±–Ω—ã–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º.

**–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:** –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ—Ç —Å—ã—Ä—å—è –¥–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

### –ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏–∏

–ù–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö:

**–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** –ú–∏–ª–ª–∏–æ–Ω—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ —á–∞—Å —Å –¥–∞—Ç—á–∏–∫–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –¥–∞–≤–ª–µ–Ω–∏—è, —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å–æ—Å—Ç–∞–≤–∞.

**–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—ã—Ä—å—è –∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

**–î–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

**–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö, –∑–∞—Ç—Ä–∞—Ç–∞—Ö –∏ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–æ–Ω—ä—é–Ω–∫—Ç—É—Ä–µ.

## –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å AI-—Å–∏—Å—Ç–µ–º

### –£–≥—Ä–æ–∑—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í–Ω–µ–¥—Ä–µ–Ω–∏–µ AI-—Å–∏—Å—Ç–µ–º –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:

**–ê—Ç–∞–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏:** –ü–æ–ø—ã—Ç–∫–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–¥–∞—á—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

**–ö–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:** –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –º–æ–¥–µ–ª–µ–π.

**–û—Ç–∫–∞–∑ –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏:** –ê—Ç–∞–∫–∏, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AI-—Å–∏—Å—Ç–µ–º –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã.

**–£—Ç–µ—á–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:** –†–∏—Å–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ç–∞–π–Ω—ã —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è AI-–º–æ–¥–µ–ª–µ–π.

### –ú–µ—Ä—ã –∑–∞—â–∏—Ç—ã

**–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–µ—Ç–∏:** –ò–∑–æ–ª—è—Ü–∏—è AI-—Å–∏—Å—Ç–µ–º –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ç–µ–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞.

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–Ω–æ–º–∞–ª–∏–π:** –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∞—Ç–∞–∫—É.

**–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ:** –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ AI-—Å–∏—Å—Ç–µ–º.

**–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.

## –ë—É–¥—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è

### –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è

–†–∞–∑–≤–∏—Ç–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º–æ–∂–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏–∏:

**–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:** –¢–æ—á–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** –†–µ—à–µ–Ω–∏–µ –º–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

**–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è:** –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö –≤ AI-—Å–∏—Å—Ç–µ–º–∞—Ö.

### –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã

–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤:

**–°–∞–º–æ–æ–±—É—á–∞—é—â–∏–µ—Å—è —Å–∏—Å—Ç–µ–º—ã:** AI-—Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º —É—Å–ª–æ–≤–∏—è–º.

**–†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:** –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —Ä–µ–º–æ–Ω—Ç–∞.

**–ë–µ–∑–ª—é–¥–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω–∞—Ö.

### –£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ

AI —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:

**–¶–∏—Ä–∫—É–ª—è—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞:** –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

**–ó–µ–ª–µ–Ω–∞—è —Ö–∏–º–∏—è:** –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

**–£–≥–ª–µ—Ä–æ–¥–Ω–∞—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å:** –°–Ω–∏–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –≤–Ω–µ–¥—Ä—è—é—â–∏–µ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –æ—Ç—Ä–∞—Å–ª–∏, –ø–æ–ª—É—á–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ –º–∏—Ä–æ–≤–æ–º —Ä—ã–Ω–∫–µ.

–†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∑–Ω–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –æ—Ç—Ä–∞—Å–ª–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É–¥–µ–ª—è—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Ä–µ—à–µ–Ω–∏–π –≤ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ ROI (300-500%) –∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å—Ä–æ–∫–∞–º–∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (1-2 –≥–æ–¥–∞). –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∫–ª—é—á–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∂–∏–º–æ–≤, —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è, —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.

–ë—É–¥—É—â–µ–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ—Ñ—Ç–µ—Ö–∏–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é—Ç –≤ —Ü–∏—Ñ—Ä–æ–≤—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –∑–∞–≤—Ç—Ä–∞ —Å—Ç–∞–Ω—É—Ç –ª–∏–¥–µ—Ä–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏, —Å–ø–æ—Å–æ–±–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Å–∞–º—ã—Ö —Å—Ç—Ä–æ–≥–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.
`
  }
  },

  21: {
    title: "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –≥–ª—É–±–æ–∫–∏—Ö –º–æ–¥–µ–ª–µ–π",
    duration: 100,
    type: "theory",
    module: 3,
    content: `
# –£—Ä–æ–∫ 21: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –≥–ª—É–±–æ–∫–∏—Ö –º–æ–¥–µ–ª–µ–π

## –í–≤–µ–¥–µ–Ω–∏–µ

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º –ø—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ –≥–ª—É–±–æ–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –≥–ª—É–±–æ–∫–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —á–∞—Å—Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫–∞–∫ "—á–µ—Ä–Ω—ã–µ —è—â–∏–∫–∏", —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏—Ö –º–æ–¥–µ–ª–µ–π —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –Ω–∞–≤—ã–∫–æ–º, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏, –≥–¥–µ –∫–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.

## –†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –Ω–æ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –≥–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –ø–æ–Ω–∏–º–∞—Ç—å, –ø–æ—á–µ–º—É —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è–ª–∞ —Ç–æ –∏–ª–∏ –∏–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–º–µ—à–∞—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π –∏ –∑–∞–¥–∞—á, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π.

## –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏

### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –º–æ–¥–µ–ª—å—é. –≠—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã: –≥–ª–æ–±–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å (–ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ–±—â–µ–π –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏), –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π), –∏ –∫–æ–Ω—Ç—Ä—Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å (–ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç).

### –¢–∏–ø—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏

**–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ —Å–≤–æ–µ–π –ø—Ä–∏—Ä–æ–¥–µ —è–≤–ª—è—é—Ç—Å—è –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞. –ö —Ç–∞–∫–∏–º –º–æ–¥–µ–ª—è–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è –ª–∏–Ω–µ–π–Ω—ã–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, –¥–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π, –∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞. –û–¥–Ω–∞–∫–æ —Ç–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ —á–∞—Å—Ç–æ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–æ–≥—É—Ç –Ω–µ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.

**–ü–æ—Å—Ç-—Ö–æ–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —É–∂–µ –æ–±—É—á–µ–Ω–Ω—ã–º –º–æ–¥–µ–ª—è–º –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è. –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è—è –∫ –Ω–∏–º —Å–ª–æ–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∏–º–µ–Ω–Ω–æ –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

### –£—Ä–æ–≤–Ω–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

–û–±—ä—è—Å–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏. **–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è** –æ–ø–∏—Å—ã–≤–∞—é—Ç –æ–±—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–º–æ–≥–∞—è –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Ü–µ–ª–æ–º –≤–∞–∂–Ω—ã –¥–ª—è –º–æ–¥–µ–ª–∏ –∏ –∫–∞–∫ –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è. **–õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è** —Ñ–æ–∫—É—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö, –æ–±—ä—è—Å–Ω—è—è, –ø–æ—á–µ–º—É –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.

## –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö –º–æ–¥–µ–ª–µ–π

### –ú–µ—Ç–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤

**Saliency Maps** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –æ–¥–∏–Ω –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é. –ú–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –ø–æ –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –ø–∏–∫—Å–µ–ª–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π —Å–∏–≥–Ω–∞–ª –º–æ–¥–µ–ª–∏.

–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏, –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è X –∏ –º–æ–¥–µ–ª–∏ f, –∫–∞—Ä—Ç–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ S –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫:

S = |‚àá_X f(X)|

–≥–¥–µ ‚àá_X –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º X.

**Integrated Gradients** —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –Ω–∞—Å—ã—â–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–∞—è —á–∞—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –≤ –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç—è—Ö. –ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –≤–¥–æ–ª—å –ø—Ä—è–º–æ–≥–æ –ø—É—Ç–∏ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —á–µ—Ä–Ω–æ–≥–æ) –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

IG_i(x) = (x_i - x'_i) √ó ‚à´[Œ±=0 to 1] ‚àÇf(x' + Œ±(x - x'))/‚àÇx_i dŒ±

–≥–¥–µ x' - –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, x - –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, i - –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–∑–Ω–∞–∫–∞.

**Guided Backpropagation** –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞—è —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ ReLU –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–µ–π—Ä–æ–Ω–æ–≤.

### –ú–µ—Ç–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑–º—É—â–µ–Ω–∏–π

**LIME (Local Interpretable Model-agnostic Explanations)** —Å–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—É—Ç–µ–º –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ–π –º–æ–¥–µ–ª–∏ –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä—è—Å–Ω—è–µ–º–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞. –ê–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–∑–º—É—â–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–∏—Ö –≤–µ—Ä—Å–∏–π, –∏ –æ–±—É—á–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.

–î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π LIME —Å–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—É–ø–µ—Ä–ø–∏–∫—Å–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–æ–∑–º—É—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –∏–ª–∏ –∏—Å–∫–ª—é—á–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.

**SHAP (SHapley Additive exPlanations)** –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–æ—Ä–∏–∏ –∏–≥—Ä –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –®–µ–ø–ª–∏. –ú–µ—Ç–æ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç "–≤–∫–ª–∞–¥" –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ —Å—É–º–º–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–≤ —Ä–∞–≤–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –∏ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.

–ó–Ω–∞—á–µ–Ω–∏–µ SHAP –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–∞ i –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫:

œÜ_i = Œ£[S‚äÜF\{i}] (|S|!(|F|-|S|-1)!)/(|F|!) √ó [f(S‚à™{i}) - f(S)]

–≥–¥–µ F - –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, S - –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, f(S) - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ S.

### –ú–µ—Ç–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è

**Class Activation Maps (CAM)** –∏ –∏—Ö –æ–±–æ–±—â–µ–Ω–∏–µ **Grad-CAM** –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ "—Å–º–æ—Ç—Ä–∏—Ç" –º–æ–¥–µ–ª—å –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è. Grad-CAM –≤—ã—á–∏—Å–ª—è–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ feature map –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–≤–µ—Ä—Ç–æ—á–Ω–æ–≥–æ —Å–ª–æ—è.

–î–ª—è –∫–ª–∞—Å—Å–∞ c –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ L^c_Grad-CAM –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫:

L^c_Grad-CAM = ReLU(Œ£_k Œ±^c_k A^k)

–≥–¥–µ Œ±^c_k = (1/Z) Œ£_i Œ£_j ‚àÇy^c/‚àÇA^k_{ij} - –≤–µ—Å–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è feature map k, A^k - –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ k-–≥–æ feature map, Z - –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.

**–ú–µ—Ö–∞–Ω–∏–∑–º—ã –≤–Ω–∏–º–∞–Ω–∏—è (Attention)** –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞—Ö Transformer –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª—è—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏. –í–µ—Å–∞ –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –Ω–∞ –∫–∞–∫–∏–µ —á–∞—Å—Ç–∏ –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª—å "–æ–±—Ä–∞—â–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ" –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

### –ú–µ—Ç–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π

**TCAV (Testing with Concept Activation Vectors)** –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—ã–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º. –ú–µ—Ç–æ–¥ –æ–±—É—á–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º, –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π.

**ACE (Automatic Concept Extraction)** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Ö –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ–º. –ú–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö –º–æ–¥–µ–ª–∏.

## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö

### –°–∏—Å—Ç–µ–º—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑—Ä–µ–Ω–∏—è

–í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–æ–≥–æ, –ø–æ—á–µ–º—É —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∞ –∏–∑–¥–µ–ª–∏–µ –∫–∞–∫ –¥–µ—Ñ–µ–∫—Ç–Ω–æ–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞:

```python
import torch
import torch.nn as nn
import cv2
import numpy as np
from captum.attr import IntegratedGradients, GradCam
from captum.attr import visualization as viz
import matplotlib.pyplot as plt

class QualityControlCNN(nn.Module):
    def __init__(self, num_classes=3):  # OK, Minor_Defect, Major_Defect
        super(QualityControlCNN, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(3, 64, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(64, 128, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(128, 256, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(256, 512, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.AdaptiveAvgPool2d((7, 7))
        )
        self.classifier = nn.Sequential(
            nn.Dropout(0.5),
            nn.Linear(512 * 7 * 7, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(0.5),
            nn.Linear(4096, 1024),
            nn.ReLU(inplace=True),
            nn.Linear(1024, num_classes)
        )
    
    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0), -1)
        x = self.classifier(x)
        return x

class InterpretableQualityControl:
    def __init__(self, model_path):
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.model = QualityControlCNN()
        self.model.load_state_dict(torch.load(model_path, map_location=self.device))
        self.model.eval()
        self.model.to(self.device)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏
        self.integrated_gradients = IntegratedGradients(self.model)
        self.grad_cam = GradCam(self.model, self.model.features[-2])
        
        self.class_names = ['OK', 'Minor_Defect', 'Major_Defect']
        
    def preprocess_image(self, image_path):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏"""
        image = cv2.imread(image_path)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = cv2.resize(image, (224, 224))
        image = image.astype(np.float32) / 255.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ImageNet
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        image = (image - mean) / std
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–Ω–∑–æ—Ä
        image_tensor = torch.FloatTensor(image).permute(2, 0, 1).unsqueeze(0)
        return image_tensor.to(self.device), image
    
    def predict_with_confidence(self, image_tensor):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        with torch.no_grad():
            outputs = self.model(image_tensor)
            probabilities = torch.softmax(outputs, dim=1)
            confidence, predicted = torch.max(probabilities, 1)
            
        return predicted.item(), confidence.item(), probabilities.squeeze().cpu().numpy()
    
    def generate_integrated_gradients_explanation(self, image_tensor, target_class):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º Integrated Gradients"""
        # –ë–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—á–µ—Ä–Ω–æ–µ)
        baseline = torch.zeros_like(image_tensor)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ü–∏–π
        attributions = self.integrated_gradients.attribute(
            image_tensor, 
            baseline, 
            target=target_class,
            n_steps=50
        )
        
        return attributions.squeeze().cpu().detach().numpy()
    
    def generate_grad_cam_explanation(self, image_tensor, target_class):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º Grad-CAM"""
        attributions = self.grad_cam.attribute(image_tensor, target=target_class)
        return attributions.squeeze().cpu().detach().numpy()
    
    def visualize_explanations(self, original_image, attributions_ig, attributions_gc, 
                             predicted_class, confidence, save_path=None):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
        fig, axes = plt.subplots(2, 2, figsize=(12, 10))
        
        # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        axes[0, 0].imshow(original_image)
        axes[0, 0].set_title(f'–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {self.class_names[predicted_class]}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}')
        axes[0, 0].axis('off')
        
        # Integrated Gradients
        ig_viz = np.transpose(attributions_ig, (1, 2, 0))
        ig_viz = np.abs(ig_viz).sum(axis=2)
        im1 = axes[0, 1].imshow(ig_viz, cmap='hot')
        axes[0, 1].set_title('Integrated Gradients')
        axes[0, 1].axis('off')
        plt.colorbar(im1, ax=axes[0, 1])
        
        # Grad-CAM
        im2 = axes[1, 0].imshow(attributions_gc, cmap='hot')
        axes[1, 0].set_title('Grad-CAM')
        axes[1, 0].axis('off')
        plt.colorbar(im2, ax=axes[1, 0])
        
        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ Grad-CAM –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        grad_cam_resized = cv2.resize(attributions_gc, (224, 224))
        grad_cam_normalized = (grad_cam_resized - grad_cam_resized.min()) / (grad_cam_resized.max() - grad_cam_resized.min())
        
        overlay = original_image.copy()
        heatmap = plt.cm.hot(grad_cam_normalized)[:, :, :3]
        overlay = 0.6 * overlay + 0.4 * heatmap
        
        axes[1, 1].imshow(overlay)
        axes[1, 1].set_title('Grad-CAM –Ω–∞–ª–æ–∂–µ–Ω–∏–µ')
        axes[1, 1].axis('off')
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        return fig
    
    def analyze_image(self, image_path, save_explanation=True):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        image_tensor, original_image = self.preprocess_image(image_path)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        predicted_class, confidence, probabilities = self.predict_with_confidence(image_tensor)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        attributions_ig = self.generate_integrated_gradients_explanation(image_tensor, predicted_class)
        attributions_gc = self.generate_grad_cam_explanation(image_tensor, predicted_class)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        if save_explanation:
            save_path = image_path.replace('.jpg', '_explanation.png')
            fig = self.visualize_explanations(
                original_image, attributions_ig, attributions_gc, 
                predicted_class, confidence, save_path
            )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = {
            'image_path': image_path,
            'predicted_class': self.class_names[predicted_class],
            'confidence': confidence,
            'probabilities': {self.class_names[i]: prob for i, prob in enumerate(probabilities)},
            'explanation_saved': save_explanation
        }
        
        return report

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
def demonstrate_interpretable_quality_control():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    qc_system = InterpretableQualityControl('quality_control_model.pth')
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_images = [
        'test_images/product_ok_001.jpg',
        'test_images/product_minor_defect_001.jpg',
        'test_images/product_major_defect_001.jpg'
    ]
    
    results = []
    for image_path in test_images:
        print(f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
        result = qc_system.analyze_image(image_path)
        results.append(result)
        
        print(f"  –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {result['predicted_class']}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")
        print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
        for class_name, prob in result['probabilities'].items():
            print(f"    {class_name}: {prob:.3f}")
        print()
    
    return results

# –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if __name__ == "__main__":
    results = demonstrate_interpretable_quality_control()
```

### –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

–í —Å–∏—Å—Ç–µ–º–∞—Ö –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–π—Å—è –æ—Ç–∫–∞–∑. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.

```python
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
import shap
import matplotlib.pyplot as plt
import seaborn as sns

class InterpretablePredictiveMaintenance:
    def __init__(self):
        self.model = None
        self.scaler = StandardScaler()
        self.feature_names = None
        self.explainer = None
        
    def prepare_data(self, sensor_data):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        features = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        features.extend([
            sensor_data['temperature'].mean(),
            sensor_data['temperature'].std(),
            sensor_data['temperature'].max(),
            sensor_data['temperature'].min(),
            
            sensor_data['vibration'].mean(),
            sensor_data['vibration'].std(),
            sensor_data['vibration'].max(),
            sensor_data['vibration'].min(),
            
            sensor_data['pressure'].mean(),
            sensor_data['pressure'].std(),
            sensor_data['pressure'].max(),
            sensor_data['pressure'].min(),
            
            sensor_data['current'].mean(),
            sensor_data['current'].std(),
            sensor_data['current'].max(),
            sensor_data['current'].min()
        ])
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ç—Ä–µ–Ω–¥–∞
        for column in ['temperature', 'vibration', 'pressure', 'current']:
            trend = np.polyfit(range(len(sensor_data)), sensor_data[column], 1)[0]
            features.append(trend)
        
        # –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π FFT –∞–Ω–∞–ª–∏–∑)
        for column in ['temperature', 'vibration', 'pressure', 'current']:
            fft = np.fft.fft(sensor_data[column])
            dominant_freq = np.argmax(np.abs(fft[1:len(fft)//2])) + 1
            features.append(dominant_freq)
        
        self.feature_names = [
            'temp_mean', 'temp_std', 'temp_max', 'temp_min',
            'vib_mean', 'vib_std', 'vib_max', 'vib_min',
            'press_mean', 'press_std', 'press_max', 'press_min',
            'curr_mean', 'curr_std', 'curr_max', 'curr_min',
            'temp_trend', 'vib_trend', 'press_trend', 'curr_trend',
            'temp_dom_freq', 'vib_dom_freq', 'press_dom_freq', 'curr_dom_freq'
        ]
        
        return np.array(features).reshape(1, -1)
    
    def train_model(self, training_data, target_values):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        X_scaled = self.scaler.fit_transform(training_data)
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        self.model = RandomForestRegressor(
            n_estimators=100,
            max_depth=10,
            random_state=42
        )
        self.model.fit(X_scaled, target_values)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHAP explainer
        self.explainer = shap.TreeExplainer(self.model)
        
        return self.model.score(X_scaled, target_values)
    
    def predict_remaining_life(self, sensor_data):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ä–µ—Å—É—Ä—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = self.prepare_data(sensor_data)
        features_scaled = self.scaler.transform(features)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        remaining_life = self.model.predict(features_scaled)[0]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π SHAP
        shap_values = self.explainer.shap_values(features_scaled)
        
        return remaining_life, shap_values[0], features[0]
    
    def generate_explanation_report(self, sensor_data, save_path=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
        remaining_life, shap_values, features = self.predict_remaining_life(sensor_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        explanation_df = pd.DataFrame({
            'Feature': self.feature_names,
            'Value': features,
            'SHAP_Value': shap_values,
            'Abs_SHAP_Value': np.abs(shap_values)
        })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        explanation_df = explanation_df.sort_values('Abs_SHAP_Value', ascending=False)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        top_features = explanation_df.head(10)
        colors = ['red' if x < 0 else 'green' for x in top_features['SHAP_Value']]
        
        axes[0, 0].barh(range(len(top_features)), top_features['SHAP_Value'], color=colors)
        axes[0, 0].set_yticks(range(len(top_features)))
        axes[0, 0].set_yticklabels(top_features['Feature'])
        axes[0, 0].set_xlabel('SHAP Value')
        axes[0, 0].set_title('–í–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
        axes[0, 0].axvline(x=0, color='black', linestyle='-', alpha=0.3)
        
        # Waterfall plot (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        cumulative = np.cumsum(np.concatenate([[0], top_features['SHAP_Value'].values]))
        axes[0, 1].plot(range(len(cumulative)), cumulative, 'o-')
        axes[0, 1].set_xlabel('–ü—Ä–∏–∑–Ω–∞–∫ (–ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏)')
        axes[0, 1].set_ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π SHAP Value')
        axes[0, 1].set_title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
        axes[0, 1].grid(True, alpha=0.3)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_values = explanation_df['Value'].values
        axes[1, 0].hist(feature_values, bins=20, alpha=0.7, edgecolor='black')
        axes[1, 0].set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞')
        axes[1, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –≤–∞–∂–Ω–æ—Å—Ç—å—é
        axes[1, 1].scatter(explanation_df['Value'], explanation_df['SHAP_Value'], alpha=0.6)
        axes[1, 1].set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞')
        axes[1, 1].set_ylabel('SHAP Value')
        axes[1, 1].set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –∑–Ω–∞—á–µ–Ω–∏–µ vs –≤–∞–∂–Ω–æ—Å—Ç—å')
        axes[1, 1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = f"""
–û–¢–ß–ï–¢ –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–ì–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å: {remaining_life:.1f} —á–∞—Å–æ–≤

–ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´ –í–õ–ò–Ø–ù–ò–Ø:

"""
        
        for i, row in top_features.head(5).iterrows():
            impact = "—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç" if row['SHAP_Value'] > 0 else "—É–º–µ–Ω—å—à–∞–µ—Ç"
            report += f"‚Ä¢ {row['Feature']}: {row['Value']:.3f} ({impact} —Ä–µ—Å—É—Ä—Å –Ω–∞ {abs(row['SHAP_Value']):.2f} —á)\n"
        
        report += f"""

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:

"""
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        critical_features = explanation_df[explanation_df['SHAP_Value'] < -5]  # –°–∏–ª—å–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        
        if len(critical_features) > 0:
            report += "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:\n"
            for i, row in critical_features.iterrows():
                report += f"‚Ä¢ {row['Feature']}: —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
        if remaining_life < 24:
            report += "\n‚ö†Ô∏è  –°–†–û–ß–ù–û: –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
        elif remaining_life < 72:
            report += "\n‚ö° –í–ù–ò–ú–ê–ù–ò–ï: –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π\n"
        else:
            report += "\n‚úÖ –ù–û–†–ú–ê: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏\n"
        
        return {
            'remaining_life': remaining_life,
            'explanation_df': explanation_df,
            'report': report,
            'figure': fig
        }

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
def demonstrate_interpretable_predictive_maintenance():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    np.random.seed(42)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    n_samples = 1000
    n_features = 24
    
    X_train = np.random.randn(n_samples, n_features)
    # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å (—á–∞—Å—ã)
    y_train = 100 + 50 * np.random.randn(n_samples) + np.sum(X_train[:, :5], axis=1) * 10
    y_train = np.clip(y_train, 0, 500)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    pm_system = InterpretablePredictiveMaintenance()
    pm_system.feature_names = [f'feature_{i}' for i in range(n_features)]
    
    score = pm_system.train_model(X_train, y_train)
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (R¬≤): {score:.3f}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
    test_sensor_data = pd.DataFrame({
        'temperature': 75 + 5 * np.sin(np.linspace(0, 4*np.pi, 100)) + np.random.normal(0, 1, 100),
        'vibration': 2.5 + 0.5 * np.sin(np.linspace(0, 8*np.pi, 100)) + np.random.normal(0, 0.1, 100),
        'pressure': 150 + 10 * np.cos(np.linspace(0, 2*np.pi, 100)) + np.random.normal(0, 2, 100),
        'current': 12 + 2 * np.sin(np.linspace(0, 6*np.pi, 100)) + np.random.normal(0, 0.5, 100)
    })
    
    # –ê–Ω–∞–ª–∏–∑ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
    result = pm_system.generate_explanation_report(test_sensor_data, 'maintenance_explanation.png')
    
    print(result['report'])
    
    return result

# –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if __name__ == "__main__":
    result = demonstrate_interpretable_predictive_maintenance()
```

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

### –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 23053-2021

–î–∞–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —á–∞—Å—Ç–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏. –°—Ç–∞–Ω–¥–∞—Ä—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AI-—Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Ä–µ—à–µ–Ω–∏–π –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–æ—Ä–æ–Ω–∞–º.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –≤–∫–ª—é—á–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π AI-—Å–∏—Å—Ç–µ–º–æ–π, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ, –ø–æ–Ω—è—Ç–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å—é.

### –ì–û–°–¢ –† 59277-2020

–°—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö.

### –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

–í —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ AI-—Å–∏—Å—Ç–µ–º. –í –∞—Ç–æ–º–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏ AI-—Å–∏—Å—Ç–µ–º —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è –ù–ü-001-15 "–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—Ç–æ–º–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π". –í –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ê–ü-25 "–ù–æ—Ä–º—ã –ª–µ—Ç–Ω–æ–π –≥–æ–¥–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–ª–µ—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏". –í –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ì–û–°–¢ 32192-2013 "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ".

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

### SHAP (SHapley Additive exPlanations)

SHAP —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ª—é–±–æ–π –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

```python
import shap
import torch
import torch.nn as nn
import numpy as np

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SHAP –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
class SimpleNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(SimpleNN, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.fc3 = nn.Linear(hidden_size, output_size)
        self.relu = nn.ReLU()
        
    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = SimpleNN(10, 50, 1)
X_train = np.random.randn(1000, 10)
y_train = np.sum(X_train[:, :3], axis=1) + np.random.randn(1000) * 0.1

# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è SHAP
def model_predict(x):
    with torch.no_grad():
        return model(torch.FloatTensor(x)).numpy()

# –°–æ–∑–¥–∞–Ω–∏–µ explainer
explainer = shap.Explainer(model_predict, X_train[:100])
shap_values = explainer(X_train[:10])

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
shap.plots.waterfall(shap_values[0])
shap.plots.beeswarm(shap_values)
```

### LIME (Local Interpretable Model-agnostic Explanations)

LIME –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ª—é–±—ã—Ö –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø—É—Ç–µ–º –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä—è—Å–Ω—è–µ–º—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.

```python
import lime
import lime.lime_image
from skimage.segmentation import mark_boundaries
import matplotlib.pyplot as plt

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LIME –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è CNN
def explain_image_prediction(model, image, class_names):
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ LIME explainer
    explainer = lime.lime_image.LimeImageExplainer()
    
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è LIME
    def predict_fn(images):
        batch = torch.FloatTensor(images).permute(0, 3, 1, 2)
        with torch.no_grad():
            outputs = model(batch)
            probabilities = torch.softmax(outputs, dim=1)
        return probabilities.numpy()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    explanation = explainer.explain_instance(
        image, 
        predict_fn, 
        top_labels=len(class_names), 
        hide_color=0, 
        num_samples=1000
    )
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    temp, mask = explanation.get_image_and_mask(
        explanation.top_labels[0], 
        positive_only=True, 
        num_features=5, 
        hide_rest=False
    )
    
    plt.figure(figsize=(12, 4))
    
    plt.subplot(1, 3, 1)
    plt.imshow(image)
    plt.title('–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    plt.axis('off')
    
    plt.subplot(1, 3, 2)
    plt.imshow(mark_boundaries(temp / 2 + 0.5, mask))
    plt.title('LIME –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ')
    plt.axis('off')
    
    plt.subplot(1, 3, 3)
    plt.imshow(mask, cmap='gray')
    plt.title('–ú–∞—Å–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏')
    plt.axis('off')
    
    plt.tight_layout()
    plt.show()
    
    return explanation
```

### Captum

Captum - —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –¥–ª—è PyTorch, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–æ–≥–æ, –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏.

```python
from captum.attr import IntegratedGradients, DeepLift, GradientShap
from captum.attr import NoiseTunnel
from captum.attr import visualization as viz

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ Captum
class CaptumExplainer:
    def __init__(self, model):
        self.model = model
        self.model.eval()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        self.integrated_gradients = IntegratedGradients(model)
        self.deep_lift = DeepLift(model)
        self.gradient_shap = GradientShap(model)
        
    def explain_prediction(self, input_tensor, target_class, baseline=None):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        
        if baseline is None:
            baseline = torch.zeros_like(input_tensor)
        
        # Integrated Gradients
        ig_attr = self.integrated_gradients.attribute(
            input_tensor, baseline, target=target_class
        )
        
        # DeepLift
        dl_attr = self.deep_lift.attribute(
            input_tensor, baseline, target=target_class
        )
        
        # Gradient SHAP
        gs_attr = self.gradient_shap.attribute(
            input_tensor, baseline, target=target_class
        )
        
        # Noise Tunnel –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —à—É–º–∞
        nt = NoiseTunnel(self.integrated_gradients)
        nt_attr = nt.attribute(
            input_tensor, nt_type='smoothgrad_sq', 
            target=target_class, nt_samples=10
        )
        
        return {
            'integrated_gradients': ig_attr,
            'deep_lift': dl_attr,
            'gradient_shap': gs_attr,
            'noise_tunnel': nt_attr
        }
    
    def visualize_attributions(self, input_tensor, attributions, original_image=None):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ü–∏–π"""
        
        fig, axes = plt.subplots(2, 3, figsize=(15, 10))
        
        methods = ['integrated_gradients', 'deep_lift', 'gradient_shap', 'noise_tunnel']
        titles = ['Integrated Gradients', 'DeepLift', 'Gradient SHAP', 'Noise Tunnel']
        
        # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if original_image is not None:
            axes[0, 0].imshow(original_image)
            axes[0, 0].set_title('–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
            axes[0, 0].axis('off')
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ü–∏–π
        for i, (method, title) in enumerate(zip(methods, titles)):
            row = i // 3
            col = (i + 1) % 3
            
            attr = attributions[method].squeeze().cpu().detach().numpy()
            
            if len(attr.shape) == 3:  # RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                attr_sum = np.sum(np.abs(attr), axis=0)
            else:
                attr_sum = np.abs(attr)
            
            im = axes[row, col].imshow(attr_sum, cmap='hot')
            axes[row, col].set_title(title)
            axes[row, col].axis('off')
            plt.colorbar(im, ax=axes[row, col])
        
        plt.tight_layout()
        return fig
```

## –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

### –ú–µ—Ç—Ä–∏–∫–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏

–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –µ–¥–∏–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è "–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏" –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –û–¥–Ω–∞–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Ä—è–¥ –º–µ—Ç—Ä–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.

**Faithfulness (–í–µ—Ä–Ω–æ—Å—Ç—å)** –∏–∑–º–µ—Ä—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–Ω–æ—Å—Ç—å –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏.

**Stability (–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)** –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Ö–æ–∂–∏–º–∏ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –≤—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.

**Comprehensiveness (–ü–æ–ª–Ω–æ—Ç–∞)** –∏–∑–º–µ—Ä—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

```python
import numpy as np
from sklearn.metrics import accuracy_score
import torch

class ExplanationEvaluator:
    def __init__(self, model, explainer):
        self.model = model
        self.explainer = explainer
        
    def evaluate_faithfulness(self, X, y, explanations, top_k=5):
        """–û—Ü–µ–Ω–∫–∞ –≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
        faithfulness_scores = []
        
        for i, (x, explanation) in enumerate(zip(X, explanations)):
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            original_pred = self.model.predict(x.reshape(1, -1))[0]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-k –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            top_features = np.argsort(np.abs(explanation))[-top_k:]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–æ–±–Ω—É–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
            masked_x = x.copy()
            masked_x[top_features] = 0
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            masked_pred = self.model.predict(masked_x.reshape(1, -1))[0]
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            pred_change = abs(original_pred - masked_pred)
            faithfulness_scores.append(pred_change)
        
        return np.mean(faithfulness_scores)
    
    def evaluate_stability(self, X, noise_level=0.1, n_samples=10):
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
        stability_scores = []
        
        for x in X:
            explanations = []
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—à—É–º–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            for _ in range(n_samples):
                noise = np.random.normal(0, noise_level, x.shape)
                noisy_x = x + noise
                explanation = self.explainer.explain_instance(noisy_x)
                explanations.append(explanation)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
            correlations = []
            for i in range(len(explanations)):
                for j in range(i+1, len(explanations)):
                    corr = np.corrcoef(explanations[i], explanations[j])[0, 1]
                    if not np.isnan(corr):
                        correlations.append(corr)
            
            stability_scores.append(np.mean(correlations))
        
        return np.mean(stability_scores)
    
    def evaluate_comprehensiveness(self, X, y, explanations, percentiles=[10, 30, 50, 70, 90]):
        """–û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
        comprehensiveness_scores = []
        
        for percentile in percentiles:
            scores = []
            
            for i, (x, explanation) in enumerate(zip(X, explanations)):
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                original_pred = self.model.predict(x.reshape(1, -1))[0]
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
                threshold = np.percentile(np.abs(explanation), percentile)
                
                # –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
                mask = np.abs(explanation) >= threshold
                masked_x = x.copy()
                masked_x[~mask] = 0
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                masked_pred = self.model.predict(masked_x.reshape(1, -1))[0]
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                preserved_accuracy = 1 - abs(original_pred - masked_pred) / abs(original_pred + 1e-8)
                scores.append(preserved_accuracy)
            
            comprehensiveness_scores.append(np.mean(scores))
        
        return comprehensiveness_scores

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def evaluate_explanation_quality():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    np.random.seed(42)
    X = np.random.randn(100, 20)
    y = np.sum(X[:, :5], axis=1) + np.random.randn(100) * 0.1
    
    # –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏
    from sklearn.linear_model import LinearRegression
    model = LinearRegression()
    model.fit(X, y)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ explainer (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏)
    class SimpleExplainer:
        def __init__(self, model):
            self.model = model
            
        def explain_instance(self, x):
            return self.model.coef_
    
    explainer = SimpleExplainer(model)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
    explanations = [explainer.explain_instance(x) for x in X]
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    evaluator = ExplanationEvaluator(model, explainer)
    
    faithfulness = evaluator.evaluate_faithfulness(X, y, explanations)
    stability = evaluator.evaluate_stability(X[:10])  # –û—Ü–µ–Ω–∫–∞ –Ω–∞ –ø–æ–¥–≤—ã–±–æ—Ä–∫–µ
    comprehensiveness = evaluator.evaluate_comprehensiveness(X, y, explanations)
    
    print(f"–í–µ—Ä–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π: {faithfulness:.3f}")
    print(f"–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π: {stability:.3f}")
    print(f"–ü–æ–ª–Ω–æ—Ç–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π: {comprehensiveness}")
    
    return {
        'faithfulness': faithfulness,
        'stability': stability,
        'comprehensiveness': comprehensiveness
    }

# –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏
if __name__ == "__main__":
    results = evaluate_explanation_quality()
```

## –≠—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

### –ü—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ç–∏—á–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏

–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö AI-—Å–∏—Å—Ç–µ–º –¥–æ–ª–∂–Ω–∞ –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —ç—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è), —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å (–æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤), –ø–æ–¥–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å (–¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ), –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É (—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å, –∞ –Ω–µ –∑–∞–º–µ–Ω—è—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ —Å—É–∂–¥–µ–Ω–∏–µ).

### –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –Ω–µ—Å–µ—Ç –æ—Å–æ–±—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —ç—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ —Å–∏—Å—Ç–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å—é, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–± –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫.

### –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å—é

–û–¥–Ω–æ–π –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª–∏ –∏ –µ–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å—é. –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–∞–≤–¥–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–µ —Ç–æ—á–Ω–æ–π, –Ω–æ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ–π –º–æ–¥–µ–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö, –≥–¥–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –≤–∞–∂–Ω–µ–µ –∏—Ö —Ç–æ—á–Ω–æ—Å—Ç–∏.

## –ë—É–¥—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

–†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-—è–∑—ã–∫–æ–≤—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è —Ä–µ—à–µ–Ω–∏–π AI-—Å–∏—Å—Ç–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –¢–∞–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫ —É—Ä–æ–≤–Ω—é –∑–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

### –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å

–ë—É–¥—É—â–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏, –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Ç–∏–ø–∞ "—á—Ç–æ –µ—Å–ª–∏" –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.

### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–†–∞–∑–≤–∏—Ç–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏, —Å–ø–æ—Å–æ–±–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –≥–ª—É–±–æ–∫–∏—Ö –º–æ–¥–µ–ª–µ–π —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º –∏—Ö —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏, –∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ —É–º–µ—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

–†–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö AI-—Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, —ç—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –Ω–∞–≤—ã–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –¢–æ–ª—å–∫–æ —Ç–∞–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –∏ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –¥–æ–≤–µ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤.

–ë—É–¥—É—â–µ–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ AI –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏. –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏ –æ–±—ä—è—Å–Ω–∏–º—ã—Ö AI-—Å–∏—Å—Ç–µ–º, –∑–∞–≤—Ç—Ä–∞ –ø–æ–ª—É—á–∞—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –æ–±–µ—Å–ø–µ—á–∏–≤ –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–æ –∏ –¥–æ–≤–µ—Ä–∏–µ –≤—Å–µ—Ö –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.
`
  },

  22: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞ - –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –û–¢–ö",
    duration: 200,
    type: "practice",
    module: 3,
    content: `
# –£—Ä–æ–∫ 22: –ü—Ä–∞–∫—Ç–∏–∫–∞ - –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –û–¢–ö

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç

–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–∫–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è (–û–¢–ö) –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Å–ø–æ—Å–æ–±–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º —Å–Ω–∏–∂–µ–Ω–∏–∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä—É—á–Ω—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é.

–ü—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–µ—Ñ–µ–∫—Ç–æ–≤, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

### –û–±—â–∞—è —Å—Ö–µ–º–∞ —Å–∏—Å—Ç–µ–º—ã

–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –û–¢–ö —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞.

**–ú–æ–¥—É–ª—å –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏. –û–Ω –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º, —Å–∏—Å—Ç–µ–º—ã –æ—Å–≤–µ—â–µ–Ω–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç.

**–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏** –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –æ—Å–≤–µ—â–µ–Ω–∏—è, —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —à—É–º–æ–≤, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏.

**–ú–æ–¥—É–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–µ—Ä–¥—Ü–µ —Å–∏—Å—Ç–µ–º—ã - –≥–ª—É–±–æ–∫—É—é –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å, –æ–±—É—á–µ–Ω–Ω—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤. –ú–æ–¥—É–ª—å –Ω–µ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤, –Ω–æ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Ç–∏–ø–∞–º –∏ —Å—Ç–µ–ø–µ–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏.

**–ú–æ–¥—É–ª—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π** –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å—É–¥—å–±–µ –∏–∑–¥–µ–ª–∏—è: –ø—Ä–∏–Ω—è—Ç–∏–µ, –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –†–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.

**–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: ERP, MES, SCADA, —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º –∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞.

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

```python
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
import torchvision.transforms as transforms
import torchvision.models as models
import cv2
import numpy as np
import pandas as pd
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix
import json
import sqlite3
from datetime import datetime
import threading
import queue
import time
import logging
from pathlib import Path

class QualityControlVisionSystem:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –û–¢–ö"""
    
    def __init__(self, config_path="config.json"):
        self.config = self.load_config(config_path)
        self.setup_logging()
        self.initialize_components()
        
    def load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        default_config = {
            "camera": {
                "resolution": [1920, 1080],
                "fps": 30,
                "exposure": "auto",
                "gain": "auto"
            },
            "model": {
                "architecture": "efficientnet_b4",
                "num_classes": 5,
                "input_size": 224,
                "confidence_threshold": 0.85,
                "model_path": "models/quality_control_model.pth"
            },
            "processing": {
                "batch_size": 16,
                "max_queue_size": 100,
                "processing_threads": 4
            },
            "quality_standards": {
                "acceptable_defect_rate": 0.02,
                "critical_defect_threshold": 0.95,
                "minor_defect_threshold": 0.75
            },
            "database": {
                "path": "quality_control.db",
                "backup_interval": 3600
            }
        }
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            for key in default_config:
                if key not in config:
                    config[key] = default_config[key]
            return config
        except FileNotFoundError:
            return default_config
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('quality_control.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        self.model = self.load_model()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.image_queue = queue.Queue(maxsize=self.config["processing"]["max_queue_size"])
        self.result_queue = queue.Queue()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.stats = {
            "total_processed": 0,
            "defects_found": 0,
            "false_positives": 0,
            "processing_time": [],
            "start_time": datetime.now()
        }
        
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        model = QualityControlCNN(
            num_classes=self.config["model"]["num_classes"],
            architecture=self.config["model"]["architecture"]
        )
        
        try:
            model.load_state_dict(torch.load(
                self.config["model"]["model_path"], 
                map_location=self.device
            ))
            self.logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except FileNotFoundError:
            self.logger.warning("–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
        
        model.to(self.device)
        model.eval()
        return model
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        conn = sqlite3.connect(self.config["database"]["path"])
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS inspections (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                image_path TEXT,
                prediction_class INTEGER,
                confidence REAL,
                defect_type TEXT,
                severity TEXT,
                action_taken TEXT,
                operator_id TEXT,
                batch_number TEXT,
                product_id TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS defect_statistics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date DATE,
                total_inspected INTEGER,
                defects_found INTEGER,
                defect_rate REAL,
                most_common_defect TEXT,
                average_confidence REAL
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS model_performance (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                accuracy REAL,
                precision_class_0 REAL,
                precision_class_1 REAL,
                precision_class_2 REAL,
                precision_class_3 REAL,
                precision_class_4 REAL,
                recall_class_0 REAL,
                recall_class_1 REAL,
                recall_class_2 REAL,
                recall_class_3 REAL,
                recall_class_4 REAL,
                f1_score REAL
            )
        ''')
        
        conn.commit()
        conn.close()
        self.logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

class QualityControlCNN(nn.Module):
    """–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    def __init__(self, num_classes=5, architecture="efficientnet_b4"):
        super(QualityControlCNN, self).__init__()
        
        self.num_classes = num_classes
        self.architecture = architecture
        
        if architecture == "efficientnet_b4":
            self.backbone = models.efficientnet_b4(pretrained=True)
            # –ó–∞–º–æ—Ä–æ–∑–∫–∞ —á–∞—Å—Ç–∏ —Å–ª–æ–µ–≤ –¥–ª—è transfer learning
            for param in list(self.backbone.parameters())[:-20]:
                param.requires_grad = False
            
            # –ó–∞–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            num_features = self.backbone.classifier[1].in_features
            self.backbone.classifier = nn.Sequential(
                nn.Dropout(0.4),
                nn.Linear(num_features, 512),
                nn.ReLU(inplace=True),
                nn.Dropout(0.3),
                nn.Linear(512, 256),
                nn.ReLU(inplace=True),
                nn.Dropout(0.2),
                nn.Linear(256, num_classes)
            )
            
        elif architecture == "resnet50":
            self.backbone = models.resnet50(pretrained=True)
            for param in list(self.backbone.parameters())[:-30]:
                param.requires_grad = False
            
            num_features = self.backbone.fc.in_features
            self.backbone.fc = nn.Sequential(
                nn.Dropout(0.5),
                nn.Linear(num_features, 512),
                nn.ReLU(inplace=True),
                nn.Dropout(0.3),
                nn.Linear(512, num_classes)
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤
        self.defect_attention = nn.MultiheadAttention(
            embed_dim=256, num_heads=8, dropout=0.1
        )
        
        self.severity_classifier = nn.Sequential(
            nn.Linear(256, 128),
            nn.ReLU(inplace=True),
            nn.Dropout(0.2),
            nn.Linear(128, 3)  # –ù–∏–∑–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, –≤—ã—Å–æ–∫–∞—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
        )
        
    def forward(self, x):
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        features = self.backbone.features(x) if hasattr(self.backbone, 'features') else x
        
        # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        if len(features.shape) == 4:
            features = torch.mean(features, dim=[2, 3])
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        main_output = self.backbone.classifier(features) if hasattr(self.backbone, 'classifier') else self.backbone.fc(features)
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
        severity_output = self.severity_classifier(features[:, :256] if features.shape[1] > 256 else features)
        
        return {
            'classification': main_output,
            'severity': severity_output,
            'features': features
        }

class ImageProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, config):
        self.config = config
        self.input_size = config["model"]["input_size"]
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.train_transform = transforms.Compose([
            transforms.Resize((self.input_size, self.input_size)),
            transforms.RandomRotation(10),
            transforms.RandomHorizontalFlip(0.5),
            transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        self.inference_transform = transforms.Compose([
            transforms.Resize((self.input_size, self.input_size)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])
        
    def preprocess_image(self, image_path_or_array, for_training=False):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if isinstance(image_path_or_array, str):
            image = Image.open(image_path_or_array).convert('RGB')
        elif isinstance(image_path_or_array, np.ndarray):
            image = Image.fromarray(cv2.cvtColor(image_path_or_array, cv2.COLOR_BGR2RGB))
        else:
            image = image_path_or_array
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
        if for_training:
            return self.train_transform(image)
        else:
            return self.inference_transform(image)
    
    def enhance_image_quality(self, image):
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è
        lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
        l, a, b = cv2.split(lab)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CLAHE –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        l = clahe.apply(l)
        
        enhanced = cv2.merge([l, a, b])
        enhanced = cv2.cvtColor(enhanced, cv2.COLOR_LAB2BGR)
        
        # –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —à—É–º–∞
        enhanced = cv2.bilateralFilter(enhanced, 9, 75, 75)
        
        return enhanced
    
    def detect_roi(self, image):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (ROI) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —à—É–º–∞
        blurred = cv2.GaussianBlur(gray, (5, 5), 0)
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤
        edges = cv2.Canny(blurred, 50, 150)
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        if contours:
            # –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç)
            largest_contour = max(contours, key=cv2.contourArea)
            x, y, w, h = cv2.boundingRect(largest_contour)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤
            margin = 20
            x = max(0, x - margin)
            y = max(0, y - margin)
            w = min(image.shape[1] - x, w + 2 * margin)
            h = min(image.shape[0] - y, h + 2 * margin)
            
            return image[y:y+h, x:x+w], (x, y, w, h)
        
        return image, (0, 0, image.shape[1], image.shape[0])

class DefectClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, model, config):
        self.model = model
        self.config = config
        self.device = next(model.parameters()).device
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤
        self.defect_classes = {
            0: "–ù–æ—Ä–º–∞",
            1: "–¶–∞—Ä–∞–ø–∏–Ω–∞",
            2: "–í–º—è—Ç–∏–Ω–∞", 
            3: "–ü—è—Ç–Ω–æ",
            4: "–¢—Ä–µ—â–∏–Ω–∞"
        }
        
        # –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–æ–≤
        self.severity_levels = {
            0: "–ù–∏–∑–∫–∞—è",
            1: "–°—Ä–µ–¥–Ω—è—è", 
            2: "–í—ã—Å–æ–∫–∞—è"
        }
        
        # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
        self.defect_actions = {
            0: "–ü—Ä–∏–Ω—è—Ç—å",
            1: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
            2: "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞",
            3: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
            4: "–û—Ç–±—Ä–∞–∫–æ–≤–∫–∞"
        }
    
    def classify_defect(self, image_tensor):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        with torch.no_grad():
            image_tensor = image_tensor.unsqueeze(0).to(self.device)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            outputs = self.model(image_tensor)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            classification_probs = torch.softmax(outputs['classification'], dim=1)
            classification_confidence, predicted_class = torch.max(classification_probs, 1)
            
            # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            severity_probs = torch.softmax(outputs['severity'], dim=1)
            severity_confidence, predicted_severity = torch.max(severity_probs, 1)
            
            result = {
                'defect_class': predicted_class.item(),
                'defect_name': self.defect_classes[predicted_class.item()],
                'confidence': classification_confidence.item(),
                'severity_level': predicted_severity.item(),
                'severity_name': self.severity_levels[predicted_severity.item()],
                'severity_confidence': severity_confidence.item(),
                'recommended_action': self.defect_actions[predicted_class.item()],
                'all_probabilities': classification_probs.cpu().numpy()[0],
                'features': outputs['features'].cpu().numpy()[0]
            }
            
            return result
    
    def batch_classify(self, image_tensors):
        """–ü–∞–∫–µ—Ç–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        results = []
        
        with torch.no_grad():
            batch_tensor = torch.stack(image_tensors).to(self.device)
            outputs = self.model(batch_tensor)
            
            classification_probs = torch.softmax(outputs['classification'], dim=1)
            severity_probs = torch.softmax(outputs['severity'], dim=1)
            
            for i in range(len(image_tensors)):
                classification_confidence, predicted_class = torch.max(classification_probs[i], 0)
                severity_confidence, predicted_severity = torch.max(severity_probs[i], 0)
                
                result = {
                    'defect_class': predicted_class.item(),
                    'defect_name': self.defect_classes[predicted_class.item()],
                    'confidence': classification_confidence.item(),
                    'severity_level': predicted_severity.item(),
                    'severity_name': self.severity_levels[predicted_severity.item()],
                    'severity_confidence': severity_confidence.item(),
                    'recommended_action': self.defect_actions[predicted_class.item()],
                    'all_probabilities': classification_probs[i].cpu().numpy(),
                    'features': outputs['features'][i].cpu().numpy()
                }
                
                results.append(result)
        
        return results

class QualityControlDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    def __init__(self, db_path):
        self.db_path = db_path
        
    def save_inspection_result(self, result_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO inspections 
            (image_path, prediction_class, confidence, defect_type, severity, 
             action_taken, operator_id, batch_number, product_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            result_data.get('image_path', ''),
            result_data.get('defect_class', 0),
            result_data.get('confidence', 0.0),
            result_data.get('defect_name', ''),
            result_data.get('severity_name', ''),
            result_data.get('recommended_action', ''),
            result_data.get('operator_id', ''),
            result_data.get('batch_number', ''),
            result_data.get('product_id', '')
        ))
        
        conn.commit()
        conn.close()
    
    def get_daily_statistics(self, date=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å"""
        if date is None:
            date = datetime.now().strftime('%Y-%m-%d')
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT 
                COUNT(*) as total_inspected,
                SUM(CASE WHEN prediction_class > 0 THEN 1 ELSE 0 END) as defects_found,
                AVG(confidence) as avg_confidence,
                defect_type,
                COUNT(defect_type) as defect_count
            FROM inspections 
            WHERE DATE(timestamp) = ?
            GROUP BY defect_type
            ORDER BY defect_count DESC
        ''', (date,))
        
        results = cursor.fetchall()
        conn.close()
        
        return results
    
    def get_defect_trends(self, days=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        conn = sqlite3.connect(self.db_path)
        
        query = '''
            SELECT 
                DATE(timestamp) as date,
                COUNT(*) as total_inspected,
                SUM(CASE WHEN prediction_class > 0 THEN 1 ELSE 0 END) as defects_found,
                ROUND(
                    CAST(SUM(CASE WHEN prediction_class > 0 THEN 1 ELSE 0 END) AS FLOAT) / 
                    COUNT(*) * 100, 2
                ) as defect_rate
            FROM inspections 
            WHERE timestamp >= datetime('now', '-{} days')
            GROUP BY DATE(timestamp)
            ORDER BY date
        '''.format(days)
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        return df

class ProductionLineIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π"""
    
    def __init__(self, config):
        self.config = config
        self.is_running = False
        self.processing_threads = []
        
    def start_monitoring(self, vision_system):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏"""
        self.is_running = True
        
        # –ü–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        capture_thread = threading.Thread(
            target=self._image_capture_worker, 
            args=(vision_system,)
        )
        capture_thread.start()
        
        # –ü–æ—Ç–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        for i in range(self.config["processing"]["processing_threads"]):
            process_thread = threading.Thread(
                target=self._image_processing_worker,
                args=(vision_system, i)
            )
            process_thread.start()
            self.processing_threads.append(process_thread)
        
        # –ü–æ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_thread = threading.Thread(
            target=self._result_saving_worker,
            args=(vision_system,)
        )
        save_thread.start()
        
        vision_system.logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –∑–∞–ø—É—â–µ–Ω")
    
    def _image_capture_worker(self, vision_system):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–∞–º–µ—Ä—ã
        image_counter = 0
        
        while self.is_running:
            try:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞—Ö–≤–∞—Ç —Å –∫–∞–º–µ—Ä—ã
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                image_data = {
                    'image_id': f"IMG_{image_counter:06d}",
                    'timestamp': datetime.now(),
                    'image_path': f"captured_images/IMG_{image_counter:06d}.jpg",
                    'batch_number': f"BATCH_{image_counter // 100:04d}",
                    'product_id': f"PROD_{image_counter:08d}"
                }
                
                if not vision_system.image_queue.full():
                    vision_system.image_queue.put(image_data)
                    image_counter += 1
                
                time.sleep(1.0 / self.config["camera"]["fps"])
                
            except Exception as e:
                vision_system.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                time.sleep(1)
    
    def _image_processing_worker(self, vision_system, worker_id):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        processor = ImageProcessor(vision_system.config)
        classifier = DefectClassifier(vision_system.model, vision_system.config)
        
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                image_data = vision_system.image_queue.get(timeout=1)
                
                start_time = time.time()
                
                # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å –¥–∏—Å–∫–∞ –∏–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏
                dummy_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
                
                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                enhanced_image = processor.enhance_image_quality(dummy_image)
                roi_image, roi_coords = processor.detect_roi(enhanced_image)
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                image_tensor = processor.preprocess_image(roi_image, for_training=False)
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–∞
                classification_result = classifier.classify_defect(image_tensor)
                
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                result = {
                    **image_data,
                    **classification_result,
                    'processing_time': time.time() - start_time,
                    'worker_id': worker_id,
                    'roi_coordinates': roi_coords
                }
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                vision_system.result_queue.put(result)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                vision_system.stats["total_processed"] += 1
                vision_system.stats["processing_time"].append(result['processing_time'])
                
                if classification_result['defect_class'] > 0:
                    vision_system.stats["defects_found"] += 1
                
                vision_system.image_queue.task_done()
                
            except queue.Empty:
                continue
            except Exception as e:
                vision_system.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (worker {worker_id}): {e}")
    
    def _result_saving_worker(self, vision_system):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        database = QualityControlDatabase(vision_system.config["database"]["path"])
        
        while self.is_running:
            try:
                result = vision_system.result_queue.get(timeout=1)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                database.save_inspection_result(result)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
                if (result['defect_class'] > 0 and 
                    result['confidence'] > vision_system.config["model"]["confidence_threshold"]):
                    
                    vision_system.logger.warning(
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ—Ñ–µ–∫—Ç: {result['defect_name']} "
                        f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}, "
                        f"–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {result['severity_name']}) "
                        f"–≤ –∏–∑–¥–µ–ª–∏–∏ {result['product_id']}"
                    )
                
                vision_system.result_queue.task_done()
                
            except queue.Empty:
                continue
            except Exception as e:
                vision_system.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.processing_threads:
            thread.join(timeout=5)

class QualityReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É"""
    
    def __init__(self, database):
        self.database = database
        
    def generate_daily_report(self, date=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if date is None:
            date = datetime.now().strftime('%Y-%m-%d')
        
        stats = self.database.get_daily_statistics(date)
        
        report = f"""
–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê
–î–∞—Ç–∞: {date}

–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
"""
        
        total_inspected = sum(stat[0] for stat in stats) if stats else 0
        total_defects = sum(stat[1] for stat in stats) if stats else 0
        defect_rate = (total_defects / total_inspected * 100) if total_inspected > 0 else 0
        
        report += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏–∑–¥–µ–ª–∏–π: {total_inspected}\n"
        report += f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {total_defects}\n"
        report += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏: {defect_rate:.2f}%\n"
        
        if stats:
            avg_confidence = stats[0][2] if stats[0][2] else 0
            report += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {avg_confidence:.3f}\n"
        
        report += "\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–ï–§–ï–ö–¢–û–í:\n"
        
        for stat in stats:
            defect_type = stat[3] if stat[3] else "–ù–æ—Ä–º–∞"
            defect_count = stat[4]
            percentage = (defect_count / total_inspected * 100) if total_inspected > 0 else 0
            report += f"‚Ä¢ {defect_type}: {defect_count} ({percentage:.1f}%)\n"
        
        # –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
        acceptable_rate = 2.0  # 2% –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏
        
        report += f"\n–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–¢–ê–ù–î–ê–†–¢–ê–ú –ö–ê–ß–ï–°–¢–í–ê:\n"
        
        if defect_rate <= acceptable_rate:
            report += f"‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢: –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏ ({defect_rate:.2f}%) –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π ({acceptable_rate}%)\n"
        else:
            report += f"‚ùå –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢: –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏ ({defect_rate:.2f}%) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π ({acceptable_rate}%)\n"
            report += "–¢–†–ï–ë–£–Æ–¢–°–Ø –ö–û–†–†–ï–ö–¢–ò–†–£–Æ–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø\n"
        
        return report
    
    def generate_trend_analysis(self, days=30):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        df = self.database.get_defect_trends(days)
        
        if df.empty:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        avg_defect_rate = df['defect_rate'].mean()
        trend_slope = np.polyfit(range(len(df)), df['defect_rate'], 1)[0]
        
        report = f"""
–ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –ö–ê–ß–ï–°–¢–í–ê ({days} –¥–Ω–µ–π)

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏: {avg_defect_rate:.2f}%
‚Ä¢ –¢—Ä–µ–Ω–¥: {'–£—Ö—É–¥—à–µ–Ω–∏–µ' if trend_slope > 0 else '–£–ª—É—á—à–µ–Ω–∏–µ' if trend_slope < 0 else '–°—Ç–∞–±–∏–ª—å–Ω–æ'}
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: {trend_slope * len(df):.2f} –ø.–ø.

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""
        
        if trend_slope > 0.1:
            report += "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç —É—Ä–æ–≤–Ω—è –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏\n"
            report += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
            report += "‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
            report += "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n"
        elif trend_slope < -0.1:
            report += "‚úÖ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê: –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏\n"
            report += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞\n"
            report += "‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
        else:
            report += "üìä –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∞–±–∏–ª–µ–Ω\n"
            report += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—è\n"
        
        return report, df

def demonstrate_quality_control_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    print("üè≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–û–ú–ü–¨–Æ–¢–ï–†–ù–û–ì–û –ó–†–ï–ù–ò–Ø –î–õ–Ø –û–¢–ö")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    vision_system = QualityControlVisionSystem()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π
    print("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π...")
    production_integration = ProductionLineIntegration(vision_system.config)
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
    print("3. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏...")
    production_integration.start_monitoring(vision_system)
    
    # –†–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    print("4. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç... (—Å–∏–º—É–ª—è—Ü–∏—è 30 —Å–µ–∫—É–Ω–¥)")
    time.sleep(30)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("5. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    production_integration.stop_monitoring()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    print("6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
    database = QualityControlDatabase(vision_system.config["database"]["path"])
    report_generator = QualityReportGenerator(database)
    
    daily_report = report_generator.generate_daily_report()
    print("\n" + daily_report)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {vision_system.stats['total_processed']}")
    print(f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: {vision_system.stats['defects_found']}")
    
    if vision_system.stats['processing_time']:
        avg_time = np.mean(vision_system.stats['processing_time'])
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {avg_time:.3f} —Å–µ–∫")
        print(f"‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {1/avg_time:.1f} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å–µ–∫")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
class QualityControlTrainer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    def __init__(self, config):
        self.config = config
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
    def create_model(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        model = QualityControlCNN(
            num_classes=self.config["model"]["num_classes"],
            architecture=self.config["model"]["architecture"]
        )
        return model.to(self.device)
    
    def train_model(self, train_loader, val_loader, num_epochs=50):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        model = self.create_model()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        criterion = nn.CrossEntropyLoss()
        optimizer = optim.AdamW(model.parameters(), lr=0.001, weight_decay=0.01)
        scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, patience=5, factor=0.5)
        
        best_val_accuracy = 0.0
        train_losses = []
        val_accuracies = []
        
        for epoch in range(num_epochs):
            # –û–±—É—á–µ–Ω–∏–µ
            model.train()
            running_loss = 0.0
            
            for batch_idx, (images, labels) in enumerate(train_loader):
                images, labels = images.to(self.device), labels.to(self.device)
                
                optimizer.zero_grad()
                outputs = model(images)
                
                # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å
                classification_loss = criterion(outputs['classification'], labels)
                severity_loss = criterion(outputs['severity'], labels.clamp(max=2))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è severity
                
                total_loss = classification_loss + 0.3 * severity_loss
                total_loss.backward()
                optimizer.step()
                
                running_loss += total_loss.item()
                
                if batch_idx % 100 == 0:
                    print(f'Epoch {epoch+1}/{num_epochs}, Batch {batch_idx}, Loss: {total_loss.item():.4f}')
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            model.eval()
            correct = 0
            total = 0
            val_loss = 0.0
            
            with torch.no_grad():
                for images, labels in val_loader:
                    images, labels = images.to(self.device), labels.to(self.device)
                    outputs = model(images)
                    
                    classification_loss = criterion(outputs['classification'], labels)
                    severity_loss = criterion(outputs['severity'], labels.clamp(max=2))
                    total_loss = classification_loss + 0.3 * severity_loss
                    
                    val_loss += total_loss.item()
                    
                    _, predicted = torch.max(outputs['classification'], 1)
                    total += labels.size(0)
                    correct += (predicted == labels).sum().item()
            
            val_accuracy = 100 * correct / total
            avg_train_loss = running_loss / len(train_loader)
            avg_val_loss = val_loss / len(val_loader)
            
            train_losses.append(avg_train_loss)
            val_accuracies.append(val_accuracy)
            
            print(f'Epoch {epoch+1}/{num_epochs}:')
            print(f'  Train Loss: {avg_train_loss:.4f}')
            print(f'  Val Loss: {avg_val_loss:.4f}')
            print(f'  Val Accuracy: {val_accuracy:.2f}%')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
            if val_accuracy > best_val_accuracy:
                best_val_accuracy = val_accuracy
                torch.save(model.state_dict(), self.config["model"]["model_path"])
                print(f'  –ù–æ–≤–∞—è –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å: {val_accuracy:.2f}%)')
            
            scheduler.step(avg_val_loss)
            print()
        
        return model, train_losses, val_accuracies

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class SyntheticDataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, image_size=(224, 224)):
        self.image_size = image_size
        
    def generate_defect_image(self, defect_type, severity=1):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–µ—Ñ–µ–∫—Ç–æ–º"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏—è)
        image = np.random.randint(180, 220, (*self.image_size, 3), dtype=np.uint8)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
        noise = np.random.normal(0, 10, self.image_size)
        for i in range(3):
            image[:, :, i] = np.clip(image[:, :, i] + noise, 0, 255)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if defect_type == 1:  # –¶–∞—Ä–∞–ø–∏–Ω–∞
            self._add_scratch(image, severity)
        elif defect_type == 2:  # –í–º—è—Ç–∏–Ω–∞
            self._add_dent(image, severity)
        elif defect_type == 3:  # –ü—è—Ç–Ω–æ
            self._add_stain(image, severity)
        elif defect_type == 4:  # –¢—Ä–µ—â–∏–Ω–∞
            self._add_crack(image, severity)
        
        return image
    
    def _add_scratch(self, image, severity):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã"""
        h, w = self.image_size
        
        # –°–ª—É—á–∞–π–Ω–∞—è –ª–∏–Ω–∏—è
        start_x = np.random.randint(0, w//4)
        start_y = np.random.randint(0, h)
        end_x = np.random.randint(3*w//4, w)
        end_y = np.random.randint(0, h)
        
        thickness = max(1, severity)
        color = max(0, 180 - severity * 30)
        
        cv2.line(image, (start_x, start_y), (end_x, end_y), (color, color, color), thickness)
    
    def _add_dent(self, image, severity):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–º—è—Ç–∏–Ω—ã"""
        h, w = self.image_size
        
        center_x = np.random.randint(w//4, 3*w//4)
        center_y = np.random.randint(h//4, 3*h//4)
        radius = 10 + severity * 5
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–º—è—Ç–∏–Ω—ã
        y, x = np.ogrid[:h, :w]
        mask = (x - center_x)**2 + (y - center_y)**2 <= radius**2
        
        darkening = severity * 20
        image[mask] = np.clip(image[mask] - darkening, 0, 255)
    
    def _add_stain(self, image, severity):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—è—Ç–Ω–∞"""
        h, w = self.image_size
        
        center_x = np.random.randint(w//4, 3*w//4)
        center_y = np.random.randint(h//4, 3*h//4)
        radius = 15 + severity * 10
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –ø—è—Ç–Ω–∞
        stain_color = np.random.randint(0, 100, 3)
        
        y, x = np.ogrid[:h, :w]
        mask = (x - center_x)**2 + (y - center_y)**2 <= radius**2
        
        # –°–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        alpha = 0.3 + severity * 0.2
        for i in range(3):
            image[mask, i] = (1 - alpha) * image[mask, i] + alpha * stain_color[i]
    
    def _add_crack(self, image, severity):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ—â–∏–Ω—ã"""
        h, w = self.image_size
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–º–∞–Ω–æ–π –ª–∏–Ω–∏–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç—Ä–µ—â–∏–Ω—ã
        points = []
        start_x = np.random.randint(0, w//3)
        start_y = np.random.randint(0, h)
        points.append((start_x, start_y))
        
        current_x, current_y = start_x, start_y
        
        while current_x < 2*w//3:
            next_x = current_x + np.random.randint(10, 30)
            next_y = current_y + np.random.randint(-20, 20)
            next_y = np.clip(next_y, 0, h-1)
            points.append((next_x, next_y))
            current_x, current_y = next_x, next_y
        
        # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—â–∏–Ω—ã
        for i in range(len(points)-1):
            thickness = max(1, severity)
            cv2.line(image, points[i], points[i+1], (0, 0, 0), thickness)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    demonstrate_quality_control_system()
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏

### –ì–û–°–¢ –† –ò–°–û 9001-2015

–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ ISO 9001 –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–Ω—Å–ø–µ–∫—Ü–∏–π, –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∫ —Å–∏—Å—Ç–µ–º–∞–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∫–ª—é—á–∞—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø—Ä–∏–µ–º–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è, –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∏ –ø–æ–≤–µ—Ä–∫—É –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è.

### –ì–û–°–¢ 16504-81

–°—Ç–∞–Ω–¥–∞—Ä—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—é.

### –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã

–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º. –í –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ì–û–°–¢ –† –ò–°–û/–¢–° 16949, –≤ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–π - –ê–ü-21, –≤ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ - –ì–û–°–¢ –† 51705.1-2001.

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ

### –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –∑–∞ —Å—á–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.

**–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª.** –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –û–¢–ö. –ü—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ 45,000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ 3 —Å–º–µ–Ω, —ç–∫–æ–Ω–æ–º–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1,620,000 —Ä—É–±–ª–µ–π –≤ –≥–æ–¥ –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é.

**–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è.** –°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ 96-98%, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ (85-90%). –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–Ω–∏–∂–µ–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ñ–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø–æ—Å—Ç—É–ø–∞—é—â–µ–π –∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è–º, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–Ω–∏–∂–µ–Ω–∏—é –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã.

**–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è.** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ 1000 –∏–∑–¥–µ–ª–∏–π –≤ —á–∞—Å –ø—Ä–æ—Ç–∏–≤ 200-300 –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.

**–°–Ω–∏–∂–µ–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.** –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π.

### –†–∞—Å—á–µ—Ç ROI

```python
def calculate_roi_quality_control_system():
    """–†–∞—Å—á–µ—Ç ROI –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    initial_investment = 2_500_000  # –ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Ä—É–±
    annual_production = 500_000     # –ì–æ–¥–æ–≤–æ–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —à—Ç
    product_price = 1_500          # –¶–µ–Ω–∞ –∏–∑–¥–µ–ª–∏—è, —Ä—É–±
    
    # –¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–±–µ–∑ —Å–∏—Å—Ç–µ–º—ã)
    manual_operators = 9           # 3 —Å–º–µ–Ω—ã –ø–æ 3 –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    operator_salary = 45_000       # –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —Ä—É–±/–º–µ—Å
    annual_labor_cost = manual_operators * operator_salary * 12
    
    defect_rate_manual = 0.05      # 5% –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ
    rework_cost_per_unit = 300     # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏, —Ä—É–±/—à—Ç
    return_cost_per_unit = 800     # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞, —Ä—É–±/—à—Ç
    
    annual_defect_cost = (annual_production * defect_rate_manual * 
                         (0.7 * rework_cost_per_unit + 0.3 * return_cost_per_unit))
    
    # –ó–∞—Ç—Ä–∞—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π
    system_operators = 3           # 1 –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å–º–µ–Ω—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–∏—Å—Ç–µ–º—ã
    annual_labor_cost_with_system = system_operators * operator_salary * 12
    
    defect_rate_automated = 0.015  # 1.5% –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    annual_defect_cost_with_system = (annual_production * defect_rate_automated * 
                                     (0.7 * rework_cost_per_unit + 0.3 * return_cost_per_unit))
    
    # –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–∏—Å—Ç–µ–º—ã
    annual_maintenance = 150_000   # –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, —Ä—É–±/–≥–æ–¥
    annual_electricity = 50_000    # –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è, —Ä—É–±/–≥–æ–¥
    annual_software = 100_000      # –õ–∏—Ü–µ–Ω–∑–∏–∏ –ü–û, —Ä—É–±/–≥–æ–¥
    
    total_annual_operating_cost = (annual_maintenance + annual_electricity + 
                                  annual_software + annual_labor_cost_with_system)
    
    # –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
    labor_savings = annual_labor_cost - annual_labor_cost_with_system
    quality_savings = annual_defect_cost - annual_defect_cost_with_system
    
    total_annual_savings = labor_savings + quality_savings
    net_annual_benefit = total_annual_savings - (annual_maintenance + annual_electricity + annual_software)
    
    # ROI —Ä–∞—Å—á–µ—Ç—ã
    payback_period = initial_investment / net_annual_benefit
    roi_5_years = ((net_annual_benefit * 5 - initial_investment) / initial_investment) * 100
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–≥–æ–¥—ã
    productivity_increase = 0.15   # 15% —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    additional_revenue = annual_production * productivity_increase * product_price * 0.1  # 10% –º–∞—Ä–∂–∞
    
    total_annual_benefit = net_annual_benefit + additional_revenue
    
    print("üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 60)
    print(f"–ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {initial_investment:,} —Ä—É–±")
    print()
    print("–ì–û–î–û–í–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø:")
    print(f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ: {labor_savings:,} —Ä—É–±")
    print(f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏: {quality_savings:,} —Ä—É–±")
    print(f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {additional_revenue:,} —Ä—É–±")
    print(f"‚Ä¢ –û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {total_annual_benefit:,} —Ä—É–±")
    print()
    print("–≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–û–ù–ù–´–ï –†–ê–°–•–û–î–´:")
    print(f"‚Ä¢ –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {annual_maintenance:,} —Ä—É–±")
    print(f"‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è: {annual_electricity:,} —Ä—É–±")
    print(f"‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ: {annual_software:,} —Ä—É–±")
    print(f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª: {annual_labor_cost_with_system:,} —Ä—É–±")
    print(f"‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_annual_operating_cost:,} —Ä—É–±")
    print()
    print("–ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
    print(f"‚Ä¢ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_period:.1f} –≥–æ–¥–∞")
    print(f"‚Ä¢ ROI –∑–∞ 5 –ª–µ—Ç: {roi_5_years:.0f}%")
    print(f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ 5 –ª–µ—Ç: {total_annual_benefit * 5 - initial_investment:,} —Ä—É–±")
    
    return {
        'payback_period': payback_period,
        'roi_5_years': roi_5_years,
        'annual_benefit': total_annual_benefit,
        'initial_investment': initial_investment
    }

# –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞
if __name__ == "__main__":
    roi_results = calculate_roi_quality_control_system()
```

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è

–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–∞—é—Ç –º–æ–¥—É–ª—å –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞, –º–æ–¥—É–ª—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π, –∏ –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é

**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã** –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –º–µ–Ω–µ–µ 2 –º–µ–≥–∞–ø–∏–∫—Å–µ–ª–µ–π, —Å–∫–æ—Ä–æ—Å—Ç—å —Å—ä–µ–º–∫–∏ –¥–æ 60 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É, –∏ —Ä–∞–±–æ—Ç—É –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–º–∏ –æ—Ç -10¬∞C –¥–æ +60¬∞C –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å—é –¥–æ 95%.

**–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞** —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AVX2 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –Ω–µ –º–µ–Ω–µ–µ 16 –ì–ë –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏.

**–°–∏—Å—Ç–µ–º–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è** –¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏: OPC UA –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å SCADA —Å–∏—Å—Ç–µ–º–∞–º–∏, Modbus TCP –¥–ª—è —Å–≤—è–∑–∏ —Å –ü–õ–ö, –∏ Ethernet/IP –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º.

## –û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏

### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã. –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è, –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤, –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞.

```python
class DatasetPreparation:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, data_path, validation_split=0.2, test_split=0.1):
        self.data_path = Path(data_path)
        self.validation_split = validation_split
        self.test_split = test_split
        
    def analyze_dataset(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        class_counts = {}
        total_images = 0
        
        for class_dir in self.data_path.iterdir():
            if class_dir.is_dir():
                image_count = len(list(class_dir.glob('*.jpg'))) + len(list(class_dir.glob('*.png')))
                class_counts[class_dir.name] = image_count
                total_images += image_count
        
        print("üìä –ê–ù–ê–õ–ò–ó –î–ê–¢–ê–°–ï–¢–ê")
        print("=" * 40)
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
        
        for class_name, count in class_counts.items():
            percentage = (count / total_images) * 100
            print(f"‚Ä¢ {class_name}: {count} ({percentage:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        min_count = min(class_counts.values())
        max_count = max(class_counts.values())
        imbalance_ratio = max_count / min_count
        
        print(f"\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞: {imbalance_ratio:.2f}")
        
        if imbalance_ratio > 3:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤")
            print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        return class_counts
    
    def create_balanced_dataset(self, target_samples_per_class=1000):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        print(f"\nüîÑ –°–û–ó–î–ê–ù–ò–ï –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê")
        print(f"–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å: {target_samples_per_class}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        class_counts = self.analyze_dataset()
        
        # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º –¥–∞–Ω–Ω—ã—Ö
        augmentation_transform = transforms.Compose([
            transforms.RandomRotation(15),
            transforms.RandomHorizontalFlip(0.5),
            transforms.RandomVerticalFlip(0.2),
            transforms.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.3),
            transforms.RandomAffine(degrees=0, translate=(0.1, 0.1), scale=(0.9, 1.1)),
            transforms.GaussianBlur(kernel_size=3, sigma=(0.1, 2.0))
        ])
        
        for class_name, current_count in class_counts.items():
            if current_count < target_samples_per_class:
                needed_samples = target_samples_per_class - current_count
                print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {needed_samples} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ '{class_name}'")
                
                class_path = self.data_path / class_name
                existing_images = list(class_path.glob('*.jpg')) + list(class_path.glob('*.png'))
                
                for i in range(needed_samples):
                    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    source_image_path = np.random.choice(existing_images)
                    source_image = Image.open(source_image_path)
                    
                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                    augmented_image = augmentation_transform(source_image)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    output_path = class_path / f"aug_{i:04d}_{source_image_path.stem}.jpg"
                    augmented_image.save(output_path, quality=95)
        
        print("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def create_training_pipeline():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–ê–ô–ü–õ–ê–ô–ù–ê –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "model": {
            "architecture": "efficientnet_b4",
            "num_classes": 5,
            "input_size": 224
        },
        "training": {
            "batch_size": 32,
            "num_epochs": 100,
            "learning_rate": 0.001,
            "weight_decay": 0.01
        },
        "data": {
            "train_path": "data/train",
            "val_path": "data/val",
            "test_path": "data/test"
        }
    }
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    dataset_prep = DatasetPreparation("data/raw")
    dataset_prep.analyze_dataset()
    dataset_prep.create_balanced_dataset()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    print("2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    train_transform = transforms.Compose([
        transforms.Resize((config["model"]["input_size"], config["model"]["input_size"])),
        transforms.RandomRotation(10),
        transforms.RandomHorizontalFlip(0.5),
        transforms.ColorJitter(brightness=0.2, contrast=0.2),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    val_transform = transforms.Compose([
        transforms.Resize((config["model"]["input_size"], config["model"]["input_size"])),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    trainer = QualityControlTrainer(config)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    print("4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    synthetic_generator = SyntheticDataGenerator()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_images = []
    test_labels = []
    
    for defect_type in range(5):  # 0-4 –∫–ª–∞—Å—Å—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤
        for severity in [1, 2, 3]:
            for _ in range(10):  # 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                image = synthetic_generator.generate_defect_image(defect_type, severity)
                test_images.append(image)
                test_labels.append(defect_type)
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(test_images)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("5. –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
    training_results = {
        'final_accuracy': 96.5,
        'precision_per_class': [98.2, 95.1, 94.8, 96.3, 97.1],
        'recall_per_class': [97.8, 94.5, 95.2, 96.8, 96.4],
        'f1_score': 96.2,
        'training_time': 4.5  # —á–∞—Å—ã
    }
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø:")
    print(f"‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {training_results['final_accuracy']:.1f}%")
    print(f"‚Ä¢ F1-score: {training_results['f1_score']:.1f}%")
    print(f"‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {training_results['training_time']:.1f} —á–∞—Å–æ–≤")
    
    print("\nüìà –¢–û–ß–ù–û–°–¢–¨ –ü–û –ö–õ–ê–°–°–ê–ú:")
    class_names = ["–ù–æ—Ä–º–∞", "–¶–∞—Ä–∞–ø–∏–Ω–∞", "–í–º—è—Ç–∏–Ω–∞", "–ü—è—Ç–Ω–æ", "–¢—Ä–µ—â–∏–Ω–∞"]
    
    for i, class_name in enumerate(class_names):
        precision = training_results['precision_per_class'][i]
        recall = training_results['recall_per_class'][i]
        print(f"‚Ä¢ {class_name}: Precision={precision:.1f}%, Recall={recall:.1f}%")
    
    return training_results

if __name__ == "__main__":
    training_results = create_training_pipeline()
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

### –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∑–∞–≥—Ä—É–∑–∫—É –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ

–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∞–ª–∏–¥–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏, –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

### –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å

–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –≤—ã—Å–æ–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –æ—Ç–∫–∞–∑–∞—Ö, –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ (96-98%), –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è (–¥–æ 5 —Ä–∞–∑), –∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–∏–æ–¥–æ–º –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 2 –ª–µ—Ç.

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª—é—á–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ä—É—Ç–∏–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –ø–æ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.

–°–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, –ø–æ–∫–∞–∑—ã–≤–∞—è, –∫–∞–∫ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã, –Ω–æ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è, –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–ª—É–∂–∏—Ç –æ–±—Ä–∞–∑—Ü–æ–º —Ç–æ–≥–æ, –∫–∞–∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ–¥—Ä–µ–Ω—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.
`
  },

  23: {
    title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: 120,
    type: "theory",
    module: 4,
    content: `
# –£—Ä–æ–∫ 23: –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö—Å—è –æ–±–ª–∞—Å—Ç–µ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—â–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π —ç—Ç–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä—è–¥–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –≥–¥–µ –¥–æ–ø—É—Å—Ç–∏–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–±–æ—Ç—É –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —É—Å–ª–æ–≤–∏–π –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã, –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞.

### –†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è—Ö. –ï–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ—à–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä –æ–±—É—á–µ–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.

–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É–¥–µ–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å–∞–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—è –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

### –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ —Ä–µ—à–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Ä–µ—à–µ–Ω–∏—é.

**–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏** —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–ø–æ—Å–æ–±–Ω—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–¥–µ–ª–∏–π, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∫–∏ –∏ —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–∫–ª—é—á–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞, –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏.

**–ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤. –°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–æ–±–∏–ª—å–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–º–µ—â–µ–Ω–∏—è–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–≤–∏–∂–µ–Ω–∏—è, –∏ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏.

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏** –≤–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—â–∏—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –¢–∞–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è—Ö —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–æ–¥—ã, –∞—Ç–æ–º–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–±–∏–Ω–∞—Ç—ã.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤** –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π, –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≥–ª—É–±–æ–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–¥–∞—á–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.

**–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (CNN)** –æ—Å—Ç–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–µ–º–µ–π—Å—Ç–≤–∞ ResNet, –≤–∫–ª—é—á–∞—è ResNet-50, ResNet-101 –∏ ResNet-152, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é ResNet —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (residual connections), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–±—É—á–∞—Ç—å –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–∏–µ —Å–µ—Ç–∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–µ–º–µ–π—Å—Ç–≤–∞ EfficientNet –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é CNN, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è. EfficientNet-B0 —á–µ—Ä–µ–∑ EfficientNet-B7 –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏.

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω–∏–º–∞–Ω–∏—è (Attention-based architectures)** –ø–æ–ª—É—á–∞—é—Ç –≤—Å–µ –±–æ–ª—å—à–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º –∑—Ä–µ–Ω–∏–∏. Vision Transformer (ViT) –∏ –µ–≥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –û–¥–Ω–∞–∫–æ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.

**–ì–∏–±—Ä–∏–¥–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã**, —Ç–∞–∫–∏–µ –∫–∞–∫ ConvNeXt –∏ EfficientNetV2, –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞–∑—É–º–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö. –≠—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.

### –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö

–ö–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ –ø–æ–ª—É—á–∞—é—Ç—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –æ—Å–≤–µ—â–µ–Ω–∏—è, —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —à—É–º–æ–≤ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏–π, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏.

**–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è** —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Ö—É–¥—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–Ω—É—é —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—é, –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–Ω—É—é —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (CLAHE), –∏ –º–µ—Ç–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ç–∏–Ω–µ–∫—Å-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.

–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–Ω–∞—è —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–ª–∞ –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –±–æ–ª–µ–µ —Ä–∞–∑–ª–∏—á–∏–º—ã–º–∏. –û–¥–Ω–∞–∫–æ –ø—Ä–æ—Å—Ç–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–Ω–∞—è —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—è–≤–ª–µ–Ω–∏—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö —á–∞—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è.

CLAHE (Contrast Limited Adaptive Histogram Equalization) –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–Ω—É—é —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ –∫ –Ω–µ–±–æ–ª—å—à–∏–º –æ–±–ª–∞—Å—Ç—è–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ—Å–≤–µ—â–µ–Ω–∏—è. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ —à—É–º–∞ –≤ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

**–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —à—É–º–æ–≤** –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, —É—á–∏—Ç—ã–≤–∞—é—â–∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã. –ì–∞—É—Å—Å–æ–≤—Å–∫–∏–π —à—É–º, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–π –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –∫–∞–º–µ—Ä, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –≥–∞—É—Å—Å–æ–≤—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ –Ω–µ–ª–æ–∫–∞–ª—å–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ (Non-Local Means).

–ò–º–ø—É–ª—å—Å–Ω—ã–π —à—É–º, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–º–∏ –ø–æ–º–ø–æ–º–µ—Ö–∞–º–∏, –ª—É—á—à–µ –≤—Å–µ–≥–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –º–µ–¥–∏–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –ë–∏–ª–∞—Ç–µ—Ä–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–π –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º —à—É–º–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≥—Ä–∞–Ω–∏—Ü –æ–±—ä–µ–∫—Ç–æ–≤, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –∑–∞–¥–∞—á –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤.

**–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è** –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∏—Å–∫–∞–∂–µ–Ω–∏–π, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ–ø—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä. –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–∏—Å—Ç–æ—Ä—Å–∏–∏ –æ–±—ä–µ–∫—Ç–∏–≤–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–∏—Ä–æ–∫–æ—É–≥–æ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∏–≤–æ–≤ –∏–ª–∏ –∫–∞–º–µ—Ä, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥ —É–≥–ª–æ–º –∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.

–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏ –ø–ª–æ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥ —É–≥–ª–æ–º. –ê—Ñ—Ñ–∏–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–¥–≤–∏–≥–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ–ø–æ—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏–ª–∏ –ª–∏–Ω–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.

### –ú–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤

–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

**–ú–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤** –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –¥–≤–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –æ–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã–µ (one-stage) –∏ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–µ (two-stage) –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã. –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ R-CNN, Fast R-CNN –∏ Faster R-CNN, —Å–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ (region proposals), –∞ –∑–∞—Ç–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç –æ–±—ä–µ–∫—Ç—ã –≤ —ç—Ç–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö. –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.

–û–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã, –≤–∫–ª—é—á–∞—è YOLO (You Only Look Once), SSD (Single Shot MultiBox Detector) –∏ RetinaNet, –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Ç—å. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

–°–µ–º–µ–π—Å—Ç–≤–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ YOLO –ø–æ–ª—É—á–∏–ª–æ —à–∏—Ä–æ–∫–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é. YOLOv5, YOLOv8 –∏ –±–æ–ª–µ–µ –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –ø—Ä–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–≤—ã—Å–æ–∫–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö.

**–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –æ–±—ä–µ–∫—Ç–æ–≤. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–µ –∏ —Ä–∞–∑–º–µ—Ä–∞—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã U-Net, DeepLab –∏ Mask R-CNN —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.

–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (instance segmentation) –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–∏–∫—Å–µ–ª–∏, –Ω–æ –∏ —Ä–∞–∑–ª–∏—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –∑–∞–¥–∞—á –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Ö –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏.

**–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** –æ—Å—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, —à–∏—Ä–æ–∫–æ –ø—Ä–∏–º–µ–Ω—è–µ–º–æ–π –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CNN –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤–æ –º–Ω–æ–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.

Transfer learning –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –≥–¥–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏–º.

## –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω–æ –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã—Ö –∏ —à–∏—Ä–æ–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –°–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é, –±—ã—Å—Ç—Ä—É—é –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—É—é –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ.

**–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤** —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –°–∏—Å—Ç–µ–º—ã —Å–ø–æ—Å–æ–±–Ω—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã, –≤–º—è—Ç–∏–Ω—ã, –ø—è—Ç–Ω–∞, —Ç—Ä–µ—â–∏–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é, —á–∞—Å—Ç–æ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–æ–≥—É—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã –ø–æ —Ç–∏–ø—É –∏ —Å—Ç–µ–ø–µ–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–¥–µ–ª–∏–π.

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –≤—ã—è–≤–ª–µ–Ω–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏. –ì–ª—É–±–æ–∫–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –æ–±—É—á–∞—é—Ç—Å—è –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–µ—Ñ–µ–∫—Ç–Ω–æ–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º –≤—ã—è–≤–ª—è—Ç—å –¥–∞–∂–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã.

**–ö–æ–Ω—Ç—Ä–æ–ª—å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤** –≤–∫–ª—é—á–∞–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º—ã –∏ –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–¥–µ–ª–∏–π. –°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å—É–±–ø–∏–∫—Å–µ–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–∫—Ä–æ–º–µ—Ç—Ä–æ–≤. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –≤ –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –∞–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å.

–ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü, –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –∫–æ–Ω—Ç—É—Ä–æ–≤ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä–µ–∫—Ç–æ–≤. –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø–∏–∫—Å–µ–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏.

**–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏** –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –°–∏—Å—Ç–µ–º—ã —Å–ø–æ—Å–æ–±–Ω—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ—Ç–∞–ª–∏, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

### –†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –†–æ–±–æ—Ç—ã, –æ—Å–Ω–∞—â–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑—Ä–µ–Ω–∏—è, —Å–ø–æ—Å–æ–±–Ω—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏.

**–°–∏—Å—Ç–µ–º—ã –∑–∞—Ö–≤–∞—Ç–∞ –∏ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏** (pick-and-place) –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—ã—á–∏—Å–ª—è—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞—Ö–≤–∞—Ç–∞ –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —É–ø–∞–∫–æ–≤–∫–∏ –∏ —Å–±–æ—Ä–∫–∏ –∏–∑–¥–µ–ª–∏–π.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å–ø–æ—Å–æ–±–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ —Ä–∞–∑–º–µ—Ä–∞, –∞–¥–∞–ø—Ç–∏—Ä—É—è—Å—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 3D-–∑—Ä–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏.

**–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤** –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–µ. –°–∏—Å—Ç–µ–º—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è (SLAM) –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫.

–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è, –∏–∑–±–µ–≥–∞–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–µ. –°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è, –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—è –ª—é–¥–µ–π –∏ –¥—Ä—É–≥–∏–µ –ø–æ–¥–≤–∏–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–±–æ—á–µ–π –∑–æ–Ω–µ —Ä–æ–±–æ—Ç–∞.

**–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤–∞—Ä–æ—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–∞—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≤–∞—Ä–æ—á–Ω–æ–π –¥—É–≥–∏, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞ –∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç –¥–µ—Ñ–µ–∫—Ç—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞—Ä–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–∞—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–æ–∑–≤–æ–ª—è—è –ø–æ–ª—É—á–∞—Ç—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ —Ö–æ–¥–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

**–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è** –≤–∫–ª—é—á–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–∑–Ω–æ—Å–∞ –¥–µ—Ç–∞–ª–µ–π, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –∂–∏–¥–∫–æ—Å—Ç–µ–π, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä, –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –°–∏—Å—Ç–µ–º—ã —Å–ø–æ—Å–æ–±–Ω—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å —Ä–∞–Ω–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏.

–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–Ω–µ—à–Ω–µ–º –≤–∏–¥–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞—Ç—å –æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º–∞—Ö. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ–±—É—á–∞—é—Ç—Å—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–∫–∞–∑–∞–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ–∫–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–≤–∏–∂–µ–Ω–∏—è —Å—ã—Ä—å—è –∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏–Ω–∏—è–º. –°–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –µ–º–∫–æ—Å—Ç–µ–π –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —É–ø–∞–∫–æ–≤–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏. –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –∏ QR-–∫–æ–¥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –ø—Ä–µ–¥—ä—è–≤–ª—è—é—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã** –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –≤—ã—Å–æ–∫—É—é —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –±—ã—Å—Ç—Ä–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤, —à–∏—Ä–æ–∫–∏–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è, –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤–∏–±—Ä–∞—Ü–∏—è–º, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –∫–æ–ª–µ–±–∞–Ω–∏—è–º –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–º –ø–æ–º–µ—Ö–∞–º.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç 1 –º–µ–≥–∞–ø–∏–∫—Å–µ–ª—è –¥–æ 100+ –º–µ–≥–∞–ø–∏–∫—Å–µ–ª–µ–π, —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ –æ—Ç 30 –¥–æ 1000+ –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É, –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è GigE Vision, USB3 Vision, Camera Link –∏ CoaXPress. –í—ã–±–æ—Ä –∫–∞–º–µ—Ä—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.

**–°–∏—Å—Ç–µ–º—ã –æ—Å–≤–µ—â–µ–Ω–∏—è** –∏–≥—Ä–∞—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ—Å–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–µ –ø–∞–Ω–µ–ª–∏, –∫–æ–ª—å—Ü–µ–≤—ã–µ –æ—Å–≤–µ—Ç–∏—Ç–µ–ª–∏, –∫–æ–∞–∫—Å–∏–∞–ª—å–Ω—ã–µ –æ—Å–≤–µ—Ç–∏—Ç–µ–ª–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ.

–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–∞—á–µ—Å—Ç–≤—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Å–æ–∑–¥–∞—é—â–µ–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ç–µ–Ω–∏. –î–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ñ—Ñ—É–∑–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –æ–±—ä–µ–∫—Ç–∞.

**–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã** –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã.

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã (CPU) —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–¥–∞—á –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π. –ú–Ω–æ–≥–æ—è–¥–µ—Ä–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã (GPU) –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ GPU, —Ç–∞–∫–∏–µ –∫–∞–∫ NVIDIA RTX —Å–µ—Ä–∏–∏ –∏–ª–∏ Tesla —Å–µ—Ä–∏–∏, —Å–ø–æ—Å–æ–±–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Intel Movidius –∏–ª–∏ Google Coral, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

### –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã

–í—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

**–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è** –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≥–æ—Ç–æ–≤—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. OpenCV —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –æ–±—à–∏—Ä–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–∞–º–µ—Ä, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Halcon –æ—Ç MVTec, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è, 3D-—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π. –≠—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —á–∞—Å—Ç–æ –≤–∫–ª—é—á–∞—é—Ç –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.

**–§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è** –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. TensorFlow –∏ PyTorch —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–º–∏ –æ–±—à–∏—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±—É—á–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π, —Ç–∞–∫–∏–µ –∫–∞–∫ TensorRT –æ—Ç NVIDIA, Intel OpenVINO –∏ ONNX Runtime, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö.

**–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏** –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ OPC UA, Modbus –∏ Ethernet/IP, –ø–æ–∑–≤–æ–ª—è—é—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è —Å –ü–õ–ö, SCADA-—Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ ERP-—Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.

–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–∞–º–∏ –∑—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.

### –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º.

**–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏** –≤–∫–ª—é—á–∞—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö. –°—Ç–∞–Ω–¥–∞—Ä—Ç IEC 61508 –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ ISO 26262 –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ IEC 61511 –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É—é—Ç —ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

–°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö, –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –≤–∫–ª—é—á–∞—é—â–∏–µ –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–∞–∑–æ–≤, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏, –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.

**–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∫–∞–º–µ—Ä –∏ —Å–∏—Å—Ç–µ–º –æ—Å–≤–µ—â–µ–Ω–∏—è. –°—Ç–∞–Ω–¥–∞—Ä—Ç EMVA 1288 —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä, –≤–∫–ª—é—á–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —à—É–º, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –°–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.

**–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤** –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. GenICam (Generic Interface for Cameras) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞.

–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã GigE Vision, USB3 Vision, Camera Link –∏ CoaXPress –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è

### –ê–Ω–∞–ª–∏–∑ –∑–∞—Ç—Ä–∞—Ç –∏ –≤—ã–≥–æ–¥

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∑–∞—Ç—Ä–∞—Ç –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤—ã–≥–æ–¥. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

**–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏** –≤–∫–ª—é—á–∞—é—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è (–∫–∞–º–µ—Ä—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã), –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è (–ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ü–û, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è), —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ), –∏ –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞).

–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—ã—Å—è—á –¥–æ –¥–µ—Å—è—Ç–∫–æ–≤ —Ç—ã—Å—è—á –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –°–∏—Å—Ç–µ–º—ã –æ—Å–≤–µ—â–µ–Ω–∏—è –º–æ–≥—É—Ç —Å—Ç–æ–∏—Ç—å –æ—Ç —Å–æ—Ç–µ–Ω –¥–æ —Ç—ã—Å—è—á –¥–æ–ª–ª–∞—Ä–æ–≤. –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å GPU –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–≥—É—Ç —Å—Ç–æ–∏—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—ã—Å—è—á –¥–æ –¥–µ—Å—è—Ç–∫–æ–≤ —Ç—ã—Å—è—á –¥–æ–ª–ª–∞—Ä–æ–≤.

**–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã** –≤–∫–ª—é—á–∞—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è, –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∏ –ø–æ–≤–µ—Ä–∫—É –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –∏ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, –æ–±—Å–ª—É–∂–∏–≤–∞—é—â–µ–≥–æ —Å–∏—Å—Ç–µ–º—É. –≠—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã –æ–±—ã—á–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç 10-20% –æ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –≥–æ–¥.

**–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤—ã–≥–æ–¥—ã** –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –≤–∫–ª—é—á–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏. –û–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ —Ä–∞–∑–Ω—ã–µ —Å–º–µ–Ω—ã, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—é –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–Ω–æ—Å–∞—Ö –∏ –∑–∞—Ç—Ä–∞—Ç–∞—Ö –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.

–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–Ω–∏–∂–µ–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ñ–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —É–º–µ–Ω—å—à–µ–Ω–∏—é –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã, –ø–æ–≤—ã—à–µ–Ω–∏—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –±—Ä–µ–Ω–¥–∞. –°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ä—É—á–Ω–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–µ–π.

–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è, —Å–Ω–∏–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ–µ–≤ –∏–∑-–∑–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞, –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ. –°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 24/7 –±–µ–∑ —Å–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

### –†–∞—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (ROI)

–†–∞—Å—á–µ—Ç ROI –¥–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —É—á–µ—Ç–∞ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.

```python
def calculate_computer_vision_roi():
    """–†–∞—Å—á–µ—Ç ROI –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è"""
    
    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    initial_investment = 500_000  # –ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Ä—É–±
    annual_production = 1_000_000  # –ì–æ–¥–æ–≤–æ–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —à—Ç
    
    # –¢–µ–∫—É—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–±–µ–∑ —Å–∏—Å—Ç–µ–º—ã)
    manual_inspectors = 6  # 2 —Å–º–µ–Ω—ã –ø–æ 3 –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
    inspector_salary = 40_000  # –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞, —Ä—É–±/–º–µ—Å
    annual_labor_cost = manual_inspectors * inspector_salary * 12
    
    # –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –¥–µ—Ñ–µ–∫—Ç–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é
    current_defect_rate = 0.03  # 3% –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
    product_cost = 500  # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–¥–µ–ª–∏—è, —Ä—É–±
    rework_cost_ratio = 0.5  # 50% –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å
    scrap_cost_ratio = 0.5  # 50% –∏–¥–µ—Ç –≤ –±—Ä–∞–∫
    
    annual_defect_cost = (annual_production * current_defect_rate * product_cost * 
                         (rework_cost_ratio * 0.3 + scrap_cost_ratio * 1.0))
    
    # –ó–∞—Ç—Ä–∞—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è
    cv_operators = 2  # 1 –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å–º–µ–Ω—É
    annual_labor_cost_cv = cv_operators * inspector_salary * 12
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
    cv_defect_rate = 0.005  # 0.5% –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π CV
    annual_defect_cost_cv = (annual_production * cv_defect_rate * product_cost * 
                            (rework_cost_ratio * 0.3 + scrap_cost_ratio * 1.0))
    
    # –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–∏—Å—Ç–µ–º—ã
    annual_maintenance = 50_000  # –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, —Ä—É–±/–≥–æ–¥
    annual_software = 30_000  # –õ–∏—Ü–µ–Ω–∑–∏–∏ –ü–û, —Ä—É–±/–≥–æ–¥
    annual_electricity = 20_000  # –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è, —Ä—É–±/–≥–æ–¥
    
    # –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
    labor_savings = annual_labor_cost - annual_labor_cost_cv
    quality_savings = annual_defect_cost - annual_defect_cost_cv
    
    total_annual_savings = labor_savings + quality_savings
    total_annual_costs = annual_maintenance + annual_software + annual_electricity
    net_annual_benefit = total_annual_savings - total_annual_costs
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–≥–æ–¥—ã
    productivity_increase = 0.1  # 10% —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    additional_revenue = annual_production * productivity_increase * product_cost * 0.2  # 20% –º–∞—Ä–∂–∞
    
    total_annual_benefit = net_annual_benefit + additional_revenue
    
    # ROI —Ä–∞—Å—á–µ—Ç—ã
    payback_period = initial_investment / total_annual_benefit
    roi_3_years = ((total_annual_benefit * 3 - initial_investment) / initial_investment) * 100
    
    print("üí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–û–ú–ü–¨–Æ–¢–ï–†–ù–û–ì–û –ó–†–ï–ù–ò–Ø")
    print("=" * 65)
    print(f"–ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {initial_investment:,} —Ä—É–±")
    print()
    print("–ì–û–î–û–í–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø:")
    print(f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ: {labor_savings:,} —Ä—É–±")
    print(f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞: {quality_savings:,} —Ä—É–±")
    print(f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {additional_revenue:,} —Ä—É–±")
    print(f"‚Ä¢ –û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {total_annual_benefit:,} —Ä—É–±")
    print()
    print("–≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–û–ù–ù–´–ï –†–ê–°–•–û–î–´:")
    print(f"‚Ä¢ –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {annual_maintenance:,} —Ä—É–±")
    print(f"‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ: {annual_software:,} —Ä—É–±")
    print(f"‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è: {annual_electricity:,} —Ä—É–±")
    print(f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª: {annual_labor_cost_cv:,} —Ä—É–±")
    print(f"‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_annual_costs + annual_labor_cost_cv:,} —Ä—É–±")
    print()
    print("–ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
    print(f"‚Ä¢ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_period:.1f} –≥–æ–¥–∞")
    print(f"‚Ä¢ ROI –∑–∞ 3 –≥–æ–¥–∞: {roi_3_years:.0f}%")
    print(f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ 3 –≥–æ–¥–∞: {total_annual_benefit * 3 - initial_investment:,} —Ä—É–±")
    
    return {
        'payback_period': payback_period,
        'roi_3_years': roi_3_years,
        'annual_benefit': total_annual_benefit
    }

# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
roi_results = calculate_computer_vision_roi()
```

### –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ –∏ –∏—Ö –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è

–í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏** –≤–∫–ª—é—á–∞—é—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã.

–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è, –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã.

**–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏** —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–µ–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –æ–∂–∏–¥–∞–µ–º—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏ –≤–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø–æ—ç—Ç–∞–ø–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è, –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏** –≤–∫–ª—é—á–∞—é—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã, –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ç–∞–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –ü–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–º—É –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º—É –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é, –∞ —Ç–∞–∫–∂–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –æ—Å–Ω–æ–≤–æ–π –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.

–†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º–∏ —Ç–µ–º–ø–∞–º–∏, –æ—Ç–∫—Ä—ã–≤–∞—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞, —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

–ë—É–¥—É—â–µ–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º edge computing, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö, —Å–Ω–∏–∂–∞—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–≤—ã—à–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º. –†–∞–∑–≤–∏—Ç–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –º–æ–∂–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
`
  },

  24: {
    title: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    duration: 140,
    type: "theory",
    module: 4,
    content: `
# –£—Ä–æ–∫ 24: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ü–∏—Ñ—Ä–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–¶–∏—Ñ—Ä–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Å–Ω–æ–≤—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π, –æ—Ç –±–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ –æ–±—â–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –¥–≤—É–º–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é f(x,y), –≥–¥–µ x –∏ y —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ —è—Ä–∫–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ. –í —Ü–∏—Ñ—Ä–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –º–∞—Ç—Ä–∏—Ü–∞ –ø–∏–∫—Å–µ–ª–µ–π, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏.

### –û—Å–Ω–æ–≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.

**–¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞** –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. RGB (Red, Green, Blue) —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–≤—ã–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Ç—Ä–µ–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ, –∑–µ–ª–µ–Ω–æ–≥–æ –∏ —Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–æ–≤. –û–¥–Ω–∞–∫–æ –¥–ª—è –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.

HSV (Hue, Saturation, Value) —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –æ—Ç—Ç–µ–Ω–æ–∫, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –∏ —è—Ä–∫–æ—Å—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –∑–∞–¥–∞—á —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç—É –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä–µ–∫—Ç–æ–≤. LAB —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π.

–î–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ì—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ (grayscale) —É–ø—Ä–æ—â–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Å–Ω–∏–∂–∞—é—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –∑–∞–¥–∞—á —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ë–∏–Ω–∞—Ä–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω—ã–µ –∏ –±–µ–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –æ–±—ä–µ–∫—Ç–æ–≤.

**–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –≥–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞** –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–º–µ—Ä —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª—É—á—à—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–ì–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è. 8-–±–∏—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç 256 —É—Ä–æ–≤–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π. 16-–±–∏—Ç–Ω—ã–µ –∏ 32-–±–∏—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤—ã—Å–æ–∫–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.

### –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è

–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–∑–≤–æ–ª—è—é—â–∏–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏—Ö –∫–∞—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.

**–õ–∏–Ω–µ–π–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è** –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–≤–µ—Ä—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —è–¥—Ä–æ–º —Ñ–∏–ª—å—Ç—Ä–∞. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å–≤–µ—Ä—Ç–∫–∏ –¥–ª—è –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

g(x,y) = Œ£ Œ£ h(s,t) * f(x-s, y-t)

–≥–¥–µ f(x,y) - –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, h(s,t) - —è–¥—Ä–æ —Ñ–∏–ª—å—Ç—Ä–∞, g(x,y) - —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

–°–≥–ª–∞–∂–∏–≤–∞—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ì–∞—É—Å—Å–æ–≤—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–≥–ª–∞–∂–∏–≤–∞—é—â–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–≤–µ–¥–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. –Ø–¥—Ä–æ –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π:

h(x,y) = (1/(2œÄœÉ¬≤)) * exp(-(x¬≤+y¬≤)/(2œÉ¬≤))

–≥–¥–µ œÉ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–µ —Å—Ç–µ–ø–µ–Ω—å —Ä–∞–∑–º—ã—Ç–∏—è.

–£—Å—Ä–µ–¥–Ω—è—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø—É—Ç–µ–º –∑–∞–º–µ–Ω—ã –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–∏–∫—Å–µ–ª–µ–π –≤ –µ–≥–æ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏. –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, —Ö–æ—Ç—è –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏–Ω–µ–π–Ω—ã–º, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –∏–º–ø—É–ª—å—Å–Ω—ã–π —à—É–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–∫—Ç–æ–≤.

**–§–∏–ª—å—Ç—Ä—ã –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏** –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –≥—Ä–∞–Ω–∏—Ü –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –õ–∞–ø–ª–∞—Å–∏–∞–Ω —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

‚àá¬≤f = ‚àÇ¬≤f/‚àÇx¬≤ + ‚àÇ¬≤f/‚àÇy¬≤

–ù–µ—Ä–µ–∑–∫–æ–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ (unsharp masking) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–µ—Ö–Ω–∏–∫—É –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ —Ä–∞–∑–º—ã—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.

**–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã** –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–ø–µ—Ä–∞—Ç–æ—Ä –°–æ–±–µ–ª—è –≤—ã—á–∏—Å–ª—è–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö:

Gx = [-1 0 1; -2 0 2; -1 0 1] * f(x,y)
Gy = [-1 -2 -1; 0 0 0; 1 2 1] * f(x,y)

–í–µ–ª–∏—á–∏–Ω–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ G = ‚àö(Gx¬≤ + Gy¬≤), –∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ Œ∏ = arctan(Gy/Gx).

–û–ø–µ—Ä–∞—Ç–æ—Ä –ö—ç–Ω–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü, –≤–∫–ª—é—á–∞—é—â–∏–π —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞, –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–º–∞–∫—Å–∏–º—É–º–æ–≤ –∏ –ø–æ—Ä–æ–≥–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º.

### –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω—ã—Ö –∏ –≥—Ä–∞–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö. –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä–µ–∫—Ç–æ–≤.

**–ë–∞–∑–æ–≤—ã–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏** –≤–∫–ª—é—á–∞—é—Ç —ç—Ä–æ–∑–∏—é –∏ –¥–∏–ª–∞—Ç–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.

–≠—Ä–æ–∑–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, —É–¥–∞–ª—è—è –ø–∏–∫—Å–µ–ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç—Ä–æ–∑–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

A ‚äñ B = {z | (B)z ‚äÜ A}

–≥–¥–µ A - –∏—Å—Ö–æ–¥–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ), B - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, (B)z - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, —Å–º–µ—â–µ–Ω–Ω—ã–π –≤ —Ç–æ—á–∫—É z.

–î–∏–ª–∞—Ç–∞—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è—è –ø–∏–∫—Å–µ–ª–∏ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –æ–±—ä–µ–∫—Ç–æ–≤:

A ‚äï B = {z | (BÃÇ)z ‚à© A ‚â† ‚àÖ}

–≥–¥–µ BÃÇ - –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ B.

**–°–æ—Å—Ç–∞–≤–Ω—ã–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏** —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—É—Ç–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–û—Ç–∫—Ä—ã—Ç–∏–µ (opening) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ä–æ–∑–∏–∏ –∏ –¥–∏–ª–∞—Ç–∞—Ü–∏–∏: A ‚óã B = (A ‚äñ B) ‚äï B. –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –º–µ–ª–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –æ–±—â—É—é —Ñ–æ—Ä–º—É –∫—Ä—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.

–ó–∞–∫—Ä—ã—Ç–∏–µ (closing) –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: A ‚Ä¢ B = (A ‚äï B) ‚äñ B. –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –∏ —Å–æ–µ–¥–∏–Ω—è–µ—Ç –±–ª–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.

–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –¥–∏–ª–∞—Ç–∞—Ü–∏–µ–π –∏ —ç—Ä–æ–∑–∏–µ–π: (A ‚äï B) - (A ‚äñ B), —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–∫—Ç–æ–≤.

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π** –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –≤–∫–ª—é—á–∞—é—Ç –æ—á–∏—Å—Ç–∫—É –±–∏–Ω–∞—Ä–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç —à—É–º–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤–æ–≤ –≤ –∫–æ–Ω—Ç—É—Ä–∞—Ö –æ–±—ä–µ–∫—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤, –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∫–µ–ª–µ—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Ö —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

–ê–ª–≥–æ—Ä–∏—Ç–º –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª–∞ (watershed) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤. –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏–Ω–∏–∏ –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –±–∞—Å—Å–µ–π–Ω–∞–º–∏.

## –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã –∏–≥—Ä–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –∑–∞–¥–∞—á –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.

### –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã

–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–µ–π –ø–∏–∫—Å–µ–ª–µ–π –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.

**–ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ (GLCM)** —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã. GLCM P(i,j,d,Œ∏) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –ø–∏–∫—Å–µ–ª–∏ —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—è–º–∏ i –∏ j –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ d –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ Œ∏.

–ò–∑ GLCM –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:

–≠–Ω–µ—Ä–≥–∏—è (Angular Second Moment): ASM = Œ£ Œ£ P(i,j)¬≤
–ö–æ–Ω—Ç—Ä–∞—Å—Ç: CON = Œ£ Œ£ (i-j)¬≤ P(i,j)
–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: COR = Œ£ Œ£ ((i-Œºx)(j-Œºy)P(i,j))/(œÉxœÉy)
–û–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å: HOM = Œ£ Œ£ P(i,j)/(1+|i-j|)

–≥–¥–µ Œºx, Œºy - —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, œÉx, œÉy - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º –º–∞—Ç—Ä–∏—Ü—ã.

**–õ–æ–∫–∞–ª—å–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (LBP)** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã, —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ—Å–≤–µ—â–µ–Ω–∏—è. LBP –∫–æ–¥ –¥–ª—è –ø–∏–∫—Å–µ–ª—è –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –µ–≥–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—è–º–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π:

LBP(xc,yc) = Œ£ s(gp - gc) * 2^p

–≥–¥–µ gc - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è, gp - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Å–µ–¥–Ω–µ–≥–æ –ø–∏–∫—Å–µ–ª—è, s(x) = 1 –µ—Å–ª–∏ x ‚â• 0, –∏–Ω–∞—á–µ 0.

–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ LBP –∫–æ–¥–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä.

**–§—Ä–∞–∫—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä. –§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Å—Ç–µ–ø–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏, –≤–∫–ª—é—á–∞—è –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á–µ—Ç–∞ —è—â–∏–∫–æ–≤ (box-counting) –∏ –º–µ—Ç–æ–¥ –≤–∞—Ä–∏–æ–≥—Ä–∞–º–º—ã.

### –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞

–ß–∞—Å—Ç–æ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.

**–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ** —Ä–∞–∑–ª–∞–≥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –î–≤—É–º–µ—Ä–Ω–æ–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

F(u,v) = (1/MN) Œ£ Œ£ f(x,y) * exp(-j2œÄ(ux/M + vy/N))

–≥–¥–µ f(x,y) - –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º M√óN, F(u,v) - —Å–ø–µ–∫—Ç—Ä –§—É—Ä—å–µ.

–ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ –§—É—Ä—å–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç—É—Ä, –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏. –í—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –±—ã—Å—Ç—Ä–æ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è –¥–µ—Ç–∞–ª—è–º (–≥—Ä–∞–Ω–∏—Ü—ã, —à—É–º), –∞ –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã - –º–µ–¥–ª–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è –æ–±–ª–∞—Å—Ç—è–º (—Ñ–æ–Ω, –æ–±—â–∞—è —Ñ–æ—Ä–º–∞ –æ–±—ä–µ–∫—Ç–æ–≤).

**–í–µ–π–≤–ª–µ—Ç-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ —á–∞—Å—Ç–æ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç—è—Ö, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π. –î–≤—É–º–µ—Ä–Ω–æ–µ –≤–µ–π–≤–ª–µ—Ç-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∞–≥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —á–µ—Ç—ã—Ä–µ —Å—É–±–ø–æ–ª–æ—Å—ã: –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é (–Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø–æ –æ–±–µ–∏–º –æ—Å—è–º) –∏ —Ç—Ä–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏).

–í–µ–π–≤–ª–µ—Ç-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤, –∏ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–µ–π–≤–ª–µ—Ç-—Ñ—É–Ω–∫—Ü–∏–∏ (–•–∞–∞—Ä–∞, –î–æ–±–µ—à–∏, –ë–∏–æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–µ) –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞.

**–ë–∞–Ω–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ì–∞–±–æ—Ä–∞** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –Ω–∞–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã. –§–∏–ª—å—Ç—Ä –ì–∞–±–æ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–π –≤–æ–ª–Ω—ã:

g(x,y) = exp(-(x'¬≤+Œ≥¬≤y'¬≤)/(2œÉ¬≤)) * cos(2œÄx'/Œª + œÜ)

–≥–¥–µ x' = x*cos(Œ∏) + y*sin(Œ∏), y' = -x*sin(Œ∏) + y*cos(Œ∏), Œ∏ - –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞, Œª - –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã, œÉ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, Œ≥ - —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω, œÜ - —Ñ–∞–∑–æ–≤—ã–π —Å–¥–≤–∏–≥.

### –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Å–æ–±—ã—Ö —Ç–æ—á–µ–∫

–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—Å–æ–±—ã—Ö —Ç–æ—á–µ–∫ (–∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫) —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –∑–∞–¥–∞—á —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–∞–º–µ—Ä –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –æ–±—ä–µ–∫—Ç–æ–≤.

**–î–µ—Ç–µ–∫—Ç–æ—Ä—ã —É–≥–ª–æ–≤** –≤—ã—è–≤–ª—è—é—Ç —Ç–æ—á–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö. –î–µ—Ç–µ–∫—Ç–æ—Ä –•–∞—Ä—Ä–∏—Å–∞ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—Ä–∏—Ü—ã –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:

M = [Ix¬≤ IxIy; IxIy Iy¬≤]

–≥–¥–µ Ix, Iy - –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ x –∏ y –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º.

–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –•–∞—Ä—Ä–∏—Å–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

R = det(M) - k * trace(M)¬≤

–≥–¥–µ k - —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ (–æ–±—ã—á–Ω–æ 0.04-0.06).

–¢–æ—á–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ R —Å—á–∏—Ç–∞—é—Ç—Å—è —É–≥–ª–∞–º–∏. –î–µ—Ç–µ–∫—Ç–æ—Ä FAST (Features from Accelerated Segment Test) –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É–≥–ª–æ–≤ –ø—É—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–µ–π –ø–∏–∫—Å–µ–ª–µ–π –≤ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

**–î–µ—Ç–µ–∫—Ç–æ—Ä—ã –±–ª–æ–±–æ–≤** –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º (—è—Ä–∫–æ—Å—Ç—å, —Ü–≤–µ—Ç) –æ—Ç –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π. –î–µ—Ç–µ–∫—Ç–æ—Ä SIFT (Scale-Invariant Feature Transform) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã–µ –≥–∞—É—Å—Å–∏–∞–Ω—ã (DoG) –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ –≤ –º–∞—Å—à—Ç–∞–±–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ:

DoG(x,y,œÉ) = G(x,y,kœÉ) - G(x,y,œÉ)

–≥–¥–µ G(x,y,œÉ) - –≥–∞—É—Å—Å–æ–≤—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –º–∞—Å—à—Ç–∞–±–∞ œÉ.

SURF (Speeded-Up Robust Features) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞ –≥–µ—Å—Å–∏–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

**–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –æ—Å–æ–±—ã—Ö —Ç–æ—á–µ–∫** –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –≤–æ–∫—Ä—É–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫. SIFT –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞—Ö –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–≤–æ–π —Ç–æ—á–∫–∏. SURF –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É–º–º—ã –æ—Ç–∫–ª–∏–∫–æ–≤ –≤–µ–π–≤–ª–µ—Ç–æ–≤ –•–∞–∞—Ä–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.

ORB (Oriented FAST and Rotated BRIEF) –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä FAST —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–º BRIEF, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–≤–æ—Ä–æ—Ç–∞–º.

## –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –∏–ª–∏ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞.

### –ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è

–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–µ–π—à–∏–º –∏ –Ω–∞–∏–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –º–µ—Ç–æ–¥–æ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ö–æ—Ä–æ—à–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —Ñ–æ–Ω–æ–º.

**–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

g(x,y) = {1, –µ—Å–ª–∏ f(x,y) > T; 0, –µ—Å–ª–∏ f(x,y) ‚â§ T}

–≥–¥–µ T - –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, f(x,y) - –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, g(x,y) - –±–∏–Ω–∞—Ä–Ω–æ–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏. –ú–µ—Ç–æ–¥ –û—Ü—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø—É—Ç–µ–º –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –º–µ–∂–∫–ª–∞—Å—Å–æ–≤–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏:

œÉ¬≤B(T) = œâ‚ÇÅ(T) * œâ‚ÇÇ(T) * [Œº‚ÇÅ(T) - Œº‚ÇÇ(T)]¬≤

–≥–¥–µ œâ‚ÇÅ, œâ‚ÇÇ - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤, Œº‚ÇÅ, Œº‚ÇÇ - —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤.

**–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—É—á—à–µ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º:

T(x,y) = Œº(x,y) - C

–≥–¥–µ Œº(x,y) - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–æ—á–∫–∏ (x,y), C - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞.

–ì–∞—É—Å—Å–æ–≤—Å–∫–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Å –≥–∞—É—Å—Å–æ–≤—Å–∫–∏–º–∏ –≤–µ—Å–∞–º–∏, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –æ–±–ª–∞—Å—Ç—è–º–∏.

**–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏. –ê–ª–≥–æ—Ä–∏—Ç–º k-means –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

### –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–∏–æ–Ω–æ–≤

–ú–µ—Ç–æ–¥—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç –ø–∏–∫—Å–µ–ª–∏ –≤ —Ä–µ–≥–∏–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Å—Ö–æ–¥—Å—Ç–≤–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.

**–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ (Region Growing)** –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –Ω–∞–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ (—Å–µ–º—è–Ω) –∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—é –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏:

|f(x,y) - ŒºR| < T

–≥–¥–µ f(x,y) - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª—è, ŒºR - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ R, T - –ø–æ—Ä–æ–≥ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏.

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏, —Ü–≤–µ—Ç–µ, —Ç–µ–∫—Å—Ç—É—Ä–µ –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —ç—Ç–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫. –í—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.

**–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–ª–∏—è–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ (Split and Merge)** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–≤–∞–¥—Ä–æ–¥–µ—Ä–µ–≤–æ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã. –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—á–∏–Ω–∞–µ—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–≤–∞–¥—Ä–∞–Ω—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞–Ω—Ç–∞. –ù–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –∫–≤–∞–¥—Ä–∞–Ω—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è, –∞ —Å–æ—Å–µ–¥–Ω–∏–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è.

–ü—Ä–µ–¥–∏–∫–∞—Ç –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ P(R) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–≥–∏–æ–Ω R –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º:

P(R) = TRUE, –µ—Å–ª–∏ œÉ¬≤(R) < T

–≥–¥–µ œÉ¬≤(R) - –¥–∏—Å–ø–µ—Ä—Å–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —Ä–µ–≥–∏–æ–Ω–µ R.

**–ê–ª–≥–æ—Ä–∏—Ç–º –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª–∞ (Watershed)** —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –∫–∞–∫ —Ç–æ–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏–Ω–∏–∏ –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –±–∞—Å—Å–µ–π–Ω–∞–º–∏. –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ (–º–∞—Ä–∫–µ—Ä–æ–≤) –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ "–∑–∞—Ç–æ–ø–ª—è–µ—Ç" –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, —Å—Ç—Ä–æ—è –¥–∞–º–±—ã –≤ –º–µ—Å—Ç–∞—Ö –≤—Å—Ç—Ä–µ—á–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞—Å—Å–µ–π–Ω–æ–≤.

–ú–∞—Ä–∫–µ—Ä–Ω–æ-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.

### –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã –∏ —É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞

–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã (–∑–º–µ–π–∫–∏) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –¥–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º—ã–µ –∫—Ä–∏–≤—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–ª –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –æ–±—ä–µ–∫—Ç–æ–≤.

**–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –∫—Ä–∏–≤—É—é –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é v(s) = [x(s), y(s)], –≥–¥–µ s - –ø–∞—Ä–∞–º–µ—Ç—Ä –∫—Ä–∏–≤–æ–π. –≠–Ω–µ—Ä–≥–∏—è –∑–º–µ–π–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

E = ‚à´[Eint(v(s)) + Eext(v(s))]ds

–≥–¥–µ Eint - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è (–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≥–ª–∞–¥–∫–æ—Å—Ç—å –∫—Ä–∏–≤–æ–π), Eext - –≤–Ω–µ—à–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è (–ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –∫—Ä–∏–≤—É—é –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –æ–±—ä–µ–∫—Ç–æ–≤).

–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è –≤–∫–ª—é—á–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è –∏ –∏–∑–≥–∏–±–∞:

Eint = Œ±|v'(s)|¬≤ + Œ≤|v''(s)|¬≤

–≥–¥–µ Œ±, Œ≤ - –≤–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã.

–í–Ω–µ—à–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è –æ–±—ã—á–Ω–æ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

Eext = -|‚àáI(v(s))|¬≤

**–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã** –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—â–∏—Ö –∫—Ä–∏–≤—ã—Ö. –ö—Ä–∏–≤–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –Ω—É–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ—É–Ω–∫—Ü–∏–∏ —É—Ä–æ–≤–Ω—è œÜ(x,y,t):

C(t) = {(x,y) | œÜ(x,y,t) = 0}

–≠–≤–æ–ª—é—Ü–∏—è –∫—Ä–∏–≤–æ–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —É—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω–µ–≤—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤:

‚àÇœÜ/‚àÇt + F|‚àáœÜ| = 0

–≥–¥–µ F - —Å–∫–æ—Ä–æ—Å—Ç—å —ç–≤–æ–ª—é—Ü–∏–∏, –∑–∞–≤–∏—Å—è—â–∞—è –æ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–ú–æ–¥–µ–ª—å –ß–∞–Ω–∞-–í–µ—Å–µ (Chan-Vese) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–Ω–µ—Ä–≥–∏—é, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—è—Ö –≤–Ω—É—Ç—Ä–∏ –∏ —Å–Ω–∞—Ä—É–∂–∏ –∫–æ–Ω—Ç—É—Ä–∞:

E = Œº‚à´|‚àáH(œÜ)|dxdy + Œª‚ÇÅ‚à´(I-c‚ÇÅ)¬≤H(œÜ)dxdy + Œª‚ÇÇ‚à´(I-c‚ÇÇ)¬≤(1-H(œÜ))dxdy

–≥–¥–µ H(œÜ) - —Ñ—É–Ω–∫—Ü–∏—è –•–µ–≤–∏—Å–∞–π–¥–∞, c‚ÇÅ, c‚ÇÇ - —Å—Ä–µ–¥–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –∏ —Å–Ω–∞—Ä—É–∂–∏ –∫–æ–Ω—Ç—É—Ä–∞.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏

### –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏—Å–∫–∞–∂–µ–Ω–∏–π

–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º —ç—Ç–∞–ø–æ–º –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

**–ú–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã-–æ–±—Å–∫—É—Ä—ã** –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ü–∏—é —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

[u; v; 1] = K[R|t][X; Y; Z; 1]

–≥–¥–µ (X,Y,Z) - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –≤ –º–∏—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, (u,v) - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ–µ–∫—Ü–∏–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, K - –º–∞—Ç—Ä–∏—Ü–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã, [R|t] - –º–∞—Ç—Ä–∏—Ü–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ–≤–æ—Ä–æ—Ç –∏ –ø–µ—Ä–µ–Ω–æ—Å).

–ú–∞—Ç—Ä–∏—Ü–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–º–µ–µ—Ç –≤–∏–¥:

K = [fx s cx; 0 fy cy; 0 0 1]

–≥–¥–µ fx, fy - —Ñ–æ–∫—É—Å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö, (cx,cy) - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–ª–∞–≤–Ω–æ–π —Ç–æ—á–∫–∏, s - –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∫–ª–æ–Ω–∞.

**–î–∏—Å—Ç–æ—Ä—Å–∏—è –æ–±—ä–µ–∫—Ç–∏–≤–∞** –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π. –†–∞–¥–∏–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–æ—Ä—Å–∏—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–∏–Ω–æ–º–æ–º:

x' = x(1 + k‚ÇÅr¬≤ + k‚ÇÇr‚Å¥ + k‚ÇÉr‚Å∂)
y' = y(1 + k‚ÇÅr¬≤ + k‚ÇÇr‚Å¥ + k‚ÇÉr‚Å∂)

–≥–¥–µ r¬≤ = x¬≤ + y¬≤, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∞–¥–∏–∞–ª—å–Ω–æ–π –¥–∏—Å—Ç–æ—Ä—Å–∏–∏.

–¢–∞–Ω–≥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–æ—Ä—Å–∏—è —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∏–≤–∞:

x' = x + 2p‚ÇÅxy + p‚ÇÇ(r¬≤ + 2x¬≤)
y' = y + p‚ÇÅ(r¬≤ + 2y¬≤) + 2p‚ÇÇxy

–≥–¥–µ p‚ÇÅ, p‚ÇÇ - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ç–∞–Ω–≥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –¥–∏—Å—Ç–æ—Ä—Å–∏–∏.

**–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏** –≤–∫–ª—é—á–∞–µ—Ç —Å—ä–µ–º–∫—É –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–æ–±—ã—á–Ω–æ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏) —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —É–≥–ª–æ–≤. –ê–ª–≥–æ—Ä–∏—Ç–º –ß–∂–∞–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–ª–æ—Å–∫–æ–≥–æ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≥–æ–º–æ–≥—Ä–∞—Ñ–∏—è H –º–µ–∂–¥—É –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É K –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–∏—Å—Ç–æ—Ä—Å–∏–∏.

### –°—Ç–µ—Ä–µ–æ–∑—Ä–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≥–ª—É–±–∏–Ω—ã

–°—Ç–µ—Ä–µ–æ–∑—Ä–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç—Ä–µ—Ö–º–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–≤—É—Ö –∏–ª–∏ –±–æ–ª–µ–µ –∫–∞–º–µ—Ä.

**–≠–ø–∏–ø–æ–ª—è—Ä–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è** –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–µ—Ä–µ–æ–ø–∞—Ä–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è —Ç–æ—á–∫–∏ –≤ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –µ–µ –ø—Ä–æ–µ–∫—Ü–∏–∏ –Ω–∞ –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω—ã —ç–ø–∏–ø–æ–ª—è—Ä–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º:

x'·µÄFx = 0

–≥–¥–µ x, x' - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏ –Ω–∞ –ª–µ–≤–æ–º –∏ –ø—Ä–∞–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, F - —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞.

–≠–ø–∏–ø–æ–ª—è—Ä–Ω–∞—è —Ä–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–µ—Ä–µ–æ–ø–∞—Ä—É —Ç–∞–∫, —á—Ç–æ —ç–ø–∏–ø–æ–ª—è—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏, —á—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.

**–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π** —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤–æ–π –∑–∞–¥–∞—á–µ–π —Å—Ç–µ—Ä–µ–æ–∑—Ä–µ–Ω–∏—è. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã.

–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –±–ª–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –≤—ã—á–∏—Å–ª—è—é—Ç –¥–∏—Å–ø–∞—Ä–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–µ–π. –§—É–Ω–∫—Ü–∏–∏ —Å—Ö–æ–¥—Å—Ç–≤–∞ –≤–∫–ª—é—á–∞—é—Ç —Å—É–º–º—É –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Å—Ç–µ–π (SAD), —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —Ä–∞–∑–Ω–æ—Å—Ç–µ–π (SSD) –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫—Ä–æ—Å—Å-–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é (NCC).

–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–æ–≤—ã–µ —Ä–∞–∑—Ä–µ–∑—ã, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é, —É—á–∏—Ç—ã–≤–∞—é—â—É—é –∫–∞–∫ —Å—Ö–æ–¥—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π, —Ç–∞–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–ª–∞–¥–∫–æ—Å—Ç–∏.

**–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã** –∏–∑ –¥–∏—Å–ø–∞—Ä–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å—Ç–µ—Ä–µ–æ—Å–∏—Å—Ç–µ–º—ã:

Z = (f * B) / d

–≥–¥–µ Z - –≥–ª—É–±–∏–Ω–∞, f - —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, B - –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏), d - –¥–∏—Å–ø–∞—Ä–Ω–æ—Å—Ç—å.

–¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–∞–º–µ—Ä, –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å—Ç–µ—Ä–µ–æ—Å–∏—Å—Ç–µ–º—ã.

### –¢—Ä–µ–∫–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤

–¢—Ä–µ–∫–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –º–Ω–æ–≥–∏—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

**–§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞** —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–º —Ç—Ä–µ–∫–∏–Ω–≥–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –º–æ–¥–µ–ª–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö –µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É –æ–±—ä–µ–∫—Ç–∞:

x(k+1) = Fx(k) + w(k)

–≥–¥–µ x(k) - –≤–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ k, F - –º–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, w(k) - —à—É–º –ø—Ä–æ—Ü–µ—Å—Å–∞.

–ú–æ–¥–µ–ª—å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏:

z(k) = Hx(k) + v(k)

–≥–¥–µ z(k) - –≤–µ–∫—Ç–æ—Ä –∏–∑–º–µ—Ä–µ–Ω–∏–π, H - –º–∞—Ç—Ä–∏—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, v(k) - —à—É–º –∏–∑–º–µ—Ä–µ–Ω–∏–π.

–§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≥–∞—É—Å—Å–æ–≤—Å–∫–∏—Ö —à—É–º–∞—Ö –∏ –ª–∏–Ω–µ–π–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–µ.

**–§–∏–ª—å—Ç—Ä —á–∞—Å—Ç–∏—Ü** –æ–±–æ–±—â–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –Ω–∞ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –∏ –Ω–µ–≥–∞—É—Å—Å–æ–≤—Å–∫–∏–µ —Å–ª—É—á–∞–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–±–æ—Ä–æ–º —á–∞—Å—Ç–∏—Ü:

p(x(k)|z(1:k)) ‚âà Œ£ w(k)‚Å±Œ¥(x(k) - x(k)‚Å±)

–≥–¥–µ x(k)‚Å± - i-—è —á–∞—Å—Ç–∏—Ü–∞, w(k)‚Å± - –µ–µ –≤–µ—Å, Œ¥ - –¥–µ–ª—å—Ç–∞-—Ñ—É–Ω–∫—Ü–∏—è –î–∏—Ä–∞–∫–∞.

**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã** –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤. –¢—Ä–µ–∫–µ—Ä MOSSE (Minimum Output Sum of Squared Error) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞.

–¢—Ä–µ–∫–µ—Ä KCF (Kernelized Correlation Filter) —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —è–¥–µ—Ä–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Å–Ω–æ–≤—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –º–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –∑–∞–¥–∞—á, –æ—Ç –±–∞–∑–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç—É—Ä –∏ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–π —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —à—É–º–∞–º –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–∞–∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö, —Ç–∞–∫ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É –≤—ã–±–∏—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≤—è–∑–∞–Ω–æ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏, –æ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –†–∞–∑–≤–∏—Ç–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π –∏ edge computing –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö.
`
  },

  25: {
    title: "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è",
    duration: 160,
    type: "theory",
    module: 4,
    content: `
# –£—Ä–æ–∫ 25: –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

–†–µ–≤–æ–ª—é—Ü–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∞—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–µ, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –≥–ª—É–±–æ–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–ì–ª—É–±–æ–∫–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–∞—á–æ–∫ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≥–ª—É–±–æ–∫–∏–µ —Å–µ—Ç–∏ —Å–ø–æ—Å–æ–±–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á, –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, —Ç–∞–∫ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º –∑—Ä–µ–Ω–∏–∏ –≤–∫–ª—é—á–∞—é—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤–∞—Ä–∏–∞—Ü–∏—è–º –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö –¥–∞–Ω–Ω—ã—Ö. –û–¥–Ω–∞–∫–æ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–∫–∂–µ —Å–≤—è–∑–∞–Ω–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

### –û—Å–Ω–æ–≤—ã —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π

–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (CNN) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≥–ª—É–±–æ–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ–ø–æ–ª–æ–≥–∏–µ–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã CNN –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç—Ä–µ—Ö –≤–∞–∂–Ω—ã—Ö –∏–¥–µ—è—Ö: –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏, —Ä–∞–∑–¥–µ–ª—è–µ–º—ã–µ –≤–µ—Å–∞ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è.

**–û–ø–µ—Ä–∞—Ü–∏—è —Å–≤–µ—Ä—Ç–∫–∏** —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º CNN. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–≤—É–º–µ—Ä–Ω–∞—è —Å–≤–µ—Ä—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

(f * g)(x,y) = Œ£Œ£ f(m,n) * g(x-m, y-n)

–≥–¥–µ f –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, g - —è–¥—Ä–æ —Å–≤–µ—Ä—Ç–∫–∏ (—Ñ–∏–ª—å—Ç—Ä), –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –æ–ø–µ—Ä–∞—Ü–∏—è —Å–≤–µ—Ä—Ç–∫–∏ –æ–±—ã—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –∫–∞–∫ –∫—Ä–æ—Å—Å-–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è:

S(i,j) = Œ£Œ£ I(i+m, j+n) * K(m,n)

–≥–¥–µ I - –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, K - —è–¥—Ä–æ —Å–≤–µ—Ä—Ç–∫–∏, S - –≤—ã—Ö–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.

–°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–ª–æ–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤. –ù–∞ —Ä–∞–Ω–Ω–∏—Ö —Å–ª–æ—è—Ö —Å–µ—Ç–∏ —Ñ–∏–ª—å—Ç—Ä—ã –æ–±—ã—á–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –≥—Ä–∞–Ω–∏—Ü—ã, —É–≥–ª—ã –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã. –ü–æ –º–µ—Ä–µ —É–≥–ª—É–±–ª–µ–Ω–∏—è –≤ —Å–µ—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ –∏ —Å–ø–æ—Å–æ–±–Ω—ã–º–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.

**–ü—É–ª–∏–Ω–≥ (—Å—É–±–¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è)** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ –Ω–µ–±–æ–ª—å—à–∏–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª–∏–Ω–≥ –≤—ã–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º –æ–∫–Ω–µ:

y(i,j) = max{x(i*s+m, j*s+n) | 0 ‚â§ m,n < k}

–≥–¥–µ s - —à–∞–≥ –ø—É–ª–∏–Ω–≥–∞, k - —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø—É–ª–∏–Ω–≥–∞.

–°—Ä–µ–¥–Ω–∏–π –ø—É–ª–∏–Ω–≥ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–∫–Ω–µ, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ–Ω–µ. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—É–ª–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.

**–§—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏** –≤–≤–æ–¥—è—Ç –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç—å, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. ReLU (Rectified Linear Unit) —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ CNN:

f(x) = max(0, x)

ReLU –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏—Å—á–µ–∑–∞—é—â–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤. –í–∞—Ä–∏–∞–Ω—Ç—ã ReLU –≤–∫–ª—é—á–∞—é—Ç Leaky ReLU, ELU (Exponential Linear Unit) –∏ Swish, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö.

### –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CNN

–†–∞–∑–≤–∏—Ç–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä CNN –ø—Ä–æ—à–ª–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–Ω–µ—Å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç–µ–π –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

**LeNet-5**, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ø–Ω–æ–º –õ–µ–ö—É–Ω–æ–º –≤ 1998 –≥–æ–¥—É, —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π CNN –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–∫–ª—é—á–∞–ª–∞ —á–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –∏ –ø—É–ª–∏–Ω–≥ —Å–ª–æ–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ª–µ–¥–æ–≤–∞–ª–∏ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏. –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É, LeNet-5 –∑–∞–ª–æ–∂–∏–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CNN.

**AlexNet** (2012) —Å—Ç–∞–ª–∞ –ø—Ä–æ—Ä—ã–≤–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–ª—É–±–æ–∫–∏—Ö CNN –Ω–∞ –∫—Ä—É–ø–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ReLU –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, dropout –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏, –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ GPU. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–ª–∞ –∏–∑ 8 —Å–ª–æ–µ–≤ (5 —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö –∏ 3 –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö) –∏ –ø–æ–∫–∞–∑–∞–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ ImageNet.

**VGGNet** (2014) –∏—Å—Å–ª–µ–¥–æ–≤–∞–ª–∞ –≤–ª–∏—è–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Å–µ—Ç–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ (3√ó3) —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã VGG-16 –∏ VGG-19 –ø–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Å–µ—Ç–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∏–Ω—Ü–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–æ–≤ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–º–µ—Å—Ç–æ –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π.

**GoogLeNet/Inception** (2014) –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –º–æ–¥—É–ª–µ–π Inception, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç —Å–≤–µ—Ä—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–∏ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª–∏–Ω–≥ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ª–æ–µ–≤, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

**ResNet** (2015) —Ä–µ—à–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—É –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –≥–ª—É–±–æ–∫–∏—Ö —Å–µ—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (skip connections). –û—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–ª–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

y = F(x) + x

–≥–¥–µ F(x) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ—Ç—å –¥–æ–ª–∂–Ω–∞ –∏–∑—É—á–∏—Ç—å. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ –æ–±—É—á–∞—Ç—å –æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–∏–µ —Å–µ—Ç–∏ (–¥–æ 152 —Å–ª–æ–µ–≤) –±–µ–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

### –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CNN –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

**DenseNet** —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∏–¥–µ—é –æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, —Å–æ–µ–¥–∏–Ω—è—è –∫–∞–∂–¥—ã–π —Å–ª–æ–π —Å–æ –≤—Å–µ–º–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ª–æ—è–º–∏ –≤ –ø–ª–æ—Ç–Ω–æ–º –±–ª–æ–∫–µ:

x_l = H_l([x_0, x_1, ..., x_{l-1}])

–≥–¥–µ [x_0, x_1, ..., x_{l-1}] –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é –∫–∞—Ä—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ª–æ–µ–≤. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏ –∏ —É–ª—É—á—à–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–æ–∫.

**MobileNet** –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª—É–±–∏–Ω–Ω–æ-—Ä–∞–∑–¥–µ–ª–∏–º—ã–µ —Å–≤–µ—Ä—Ç–∫–∏ (depthwise separable convolutions). –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–≤–µ—Ä—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –¥–≤–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –≥–ª—É–±–∏–Ω–Ω—É—é —Å–≤–µ—Ä—Ç–∫—É (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É –æ—Ç–¥–µ–ª—å–Ω–æ) –∏ —Ç–æ—á–µ—á–Ω—É—é —Å–≤–µ—Ä—Ç–∫—É (1√ó1 —Å–≤–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤). –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

**EfficientNet** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Å—Ç–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã, —à–∏—Ä–∏–Ω—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–µ—Ç–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

depth: d = Œ±^œÜ
width: w = Œ≤^œÜ  
resolution: r = Œ≥^œÜ

–≥–¥–µ Œ±, Œ≤, Œ≥ - –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–µ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ —Å–µ—Ç–∫–µ, –∞ œÜ - —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.

**Vision Transformer (ViT)** –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—è—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ç—á–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∏—Ö –∫–∞–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤. –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥—É–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π CNN, ViT –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö.

### –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤** —Ä–µ—à–∞—é—Ç –∑–∞–¥–∞—á—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ R-CNN, Fast R-CNN –∏ Faster R-CNN, —Å–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤, –∞ –∑–∞—Ç–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç –∏—Ö. Faster R-CNN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Region Proposal Network (RPN) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:

p_i = œÉ(W_cls * œÜ_i + b_cls)
t_i = W_reg * œÜ_i + b_reg

–≥–¥–µ œÜ_i - –ø—Ä–∏–∑–Ω–∞–∫–∏ i-–≥–æ —è–∫–æ—Ä—è, p_i - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞, t_i - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.

–û–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ YOLO –∏ SSD, –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ —Å–µ—Ç–∏, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã. YOLO —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ç–∫—É –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ —Å–µ—Ç–∫–∏.

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏** –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—Ç –º–µ—Ç–∫—É –∫–ª–∞—Å—Å–∞ –∫–∞–∂–¥–æ–º—É –ø–∏–∫—Å–µ–ª—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. FCN (Fully Convolutional Networks) –∑–∞–º–µ–Ω—è–µ—Ç –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–º–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. U-Net –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–Ω–∫–æ–¥–µ—Ä-–¥–µ–∫–æ–¥–µ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å skip connections –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

–≠–Ω–∫–æ–¥–µ—Ä: x_i = f_i(x_{i-1})
–î–µ–∫–æ–¥–µ—Ä: y_i = g_i([y_{i+1}, x_{n-i}])

–≥–¥–µ [y_{i+1}, x_{n-i}] –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ –ø—É—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ skip connection.

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞** —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤. Siamese networks —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø–∞—Ä–Ω–æ, —á—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:

d = ||f(x_1) - f(x_2)||_2

–≥–¥–µ f –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∞ d - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏.

–ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –ø—É—Ç–µ–º —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ê–Ω–æ–º–∞–ª–∏–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è –ø–æ –≤—ã—Å–æ–∫–æ–π –æ—à–∏–±–∫–µ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

L = ||x - D(E(x))||_2

–≥–¥–µ E - —ç–Ω–∫–æ–¥–µ—Ä, D - –¥–µ–∫–æ–¥–µ—Ä, x - –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

## –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è, –æ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è

–ö–∞—á–µ—Å—Ç–≤–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –¥–∞—Ç–∞—Å–µ—Ç–æ–≤.

**–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** –≤–∫–ª—é—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—é —Ü–≤–µ—Ç–∞. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—É—Ç–µ–º –≤—ã—á–∏—Ç–∞–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:

x_norm = (x - Œº) / œÉ

–≥–¥–µ Œº –∏ œÉ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ –æ–±—É—á–∞—é—â–µ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É. –î–ª—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ImageNet: Œº = [0.485, 0.456, 0.406], œÉ = [0.229, 0.224, 0.225] –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ RGB.

**–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö** –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø—É—Ç–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç:

–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: –ø–æ–≤–æ—Ä–æ—Ç—ã, –æ—Ç—Ä–∞–∂–µ–Ω–∏—è, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–¥–≤–∏–≥–∏. –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ —É–≥–æ–ª Œ∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –º–∞—Ç—Ä–∏—Ü–µ–π:

R(Œ∏) = [cos(Œ∏) -sin(Œ∏); sin(Œ∏) cos(Œ∏)]

–§–æ—Ç–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏, –æ—Ç—Ç–µ–Ω–∫–∞. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏: I' = I + Œ≤, –≥–¥–µ Œ≤ - –ø–∞—Ä–∞–º–µ—Ç—Ä —è—Ä–∫–æ—Å—Ç–∏.

–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç Mixup, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–º –ª–∏–Ω–µ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏:

xÃÉ = Œªx_i + (1-Œª)x_j
·ªπ = Œªy_i + (1-Œª)y_j

–≥–¥–µ Œª ~ Beta(Œ±, Œ±), –æ–±—ã—á–Ω–æ Œ± = 0.2.

CutMix –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç—å—é –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç–æ–∫.

**–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ** —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π. –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ GANs –∏ VAEs, –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤. –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–∏–º—É–ª—è—Ü–∏—è —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö —É—Å–ª–æ–≤–∏–π –æ–±—É—á–µ–Ω–∏—è.

### –§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –∏ –º–µ—Ç—Ä–∏–∫–∏

–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –∑–∞–¥–∞—á–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

**–î–ª—è –∑–∞–¥–∞—á –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏** –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–π —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–æ—Å—Å-—ç–Ω—Ç—Ä–æ–ø–∏–π–Ω–∞—è –ø–æ—Ç–µ—Ä—è:

L = -Œ£ y_i * log(≈∑_i)

–≥–¥–µ y_i - –∏—Å—Ç–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (one-hot), ≈∑_i - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.

Focal Loss —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤, —Ñ–æ–∫—É—Å–∏—Ä—É—è—Å—å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö:

FL(p_t) = -Œ±_t(1-p_t)^Œ≥ log(p_t)

–≥–¥–µ p_t - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, Œ±_t - –≤–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, Œ≥ - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏.

**–î–ª—è –∑–∞–¥–∞—á –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤** –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å, –≤–∫–ª—é—á–∞—é—â–∏–µ –ø–æ—Ç–µ—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:

L = L_cls + ŒªL_loc

–≥–¥–µ L_cls - –ø–æ—Ç–µ—Ä—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, L_loc - –ø–æ—Ç–µ—Ä—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–±—ã—á–Ω–æ Smooth L1), Œª - –≤–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.

IoU Loss –Ω–∞–ø—Ä—è–º—É—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫—É Intersection over Union:

L_IoU = 1 - IoU = 1 - (|A ‚à© B|)/(|A ‚à™ B|)

**–î–ª—è –∑–∞–¥–∞—á —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏** –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Dice Loss:

Dice = (2|X ‚à© Y|)/(|X| + |Y|)
L_Dice = 1 - Dice

Tversky Loss –æ–±–æ–±—â–∞–µ—Ç Dice Loss, –ø–æ–∑–≤–æ–ª—è—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –ª–æ–∂–Ω–æ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:

TI = TP/(TP + Œ±FN + Œ≤FP)

–≥–¥–µ Œ± –∏ Œ≤ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –≤–∞–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫.

### –¢–µ—Ö–Ω–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–∏–∫ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏.

**–ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏** —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ SGD –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–∞–º. Adam –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ AdaGrad –∏ RMSprop:

m_t = Œ≤_1 m_{t-1} + (1-Œ≤_1)g_t
v_t = Œ≤_2 v_{t-1} + (1-Œ≤_2)g_t^2
Œ∏_{t+1} = Œ∏_t - Œ±(mÃÇ_t)/(‚àövÃÇ_t + Œµ)

–≥–¥–µ mÃÇ_t –∏ vÃÇ_t - —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –º–æ–º–µ–Ω—Ç–æ–≤.

AdamW –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã Adam —Å weight decay:

Œ∏_{t+1} = Œ∏_t - Œ±(mÃÇ_t)/(‚àövÃÇ_t + Œµ) - Œ±ŒªŒ∏_t

**–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è** –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. Cosine Annealing –∏–∑–º–µ–Ω—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –ø–æ –∫–æ—Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É:

Œ∑_t = Œ∑_{min} + (Œ∑_{max} - Œ∑_{min})(1 + cos(œÄT_{cur}/T_{max}))/2

Warm-up –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.

**–¢–µ—Ö–Ω–∏–∫–∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏** –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∏ —É–ª—É—á—à–∞—é—Ç –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏—é. Dropout —Å–ª—É—á–∞–π–Ω–æ –æ–±–Ω—É–ª—è–µ—Ç –Ω–µ–π—Ä–æ–Ω—ã –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:

y = f(x) ‚äô m

–≥–¥–µ m ~ Bernoulli(p), ‚äô - –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.

Batch Normalization –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤—Ö–æ–¥—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è:

BN(x) = Œ≥((x - Œº_B)/œÉ_B) + Œ≤

–≥–¥–µ Œº_B –∏ œÉ_B - —Å—Ä–µ–¥–Ω–µ–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –±–∞—Ç—á—É, Œ≥ –∏ Œ≤ - –æ–±—É—á–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

Layer Normalization –∏ Group Normalization –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã Batch Normalization –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±–∞—Ç—á–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –≤—Ö–æ–¥–æ–≤.

## Transfer Learning –∏ Fine-tuning

Transfer Learning –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–æ—â–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É, –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—É—é –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –≥–¥–µ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.

### –ü—Ä–∏–Ω—Ü–∏–ø—ã Transfer Learning

Transfer Learning –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–¥–µ–µ, —á—Ç–æ –∑–Ω–∞–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏, –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–π, –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, ImageNet), –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

**–ò–µ—Ä–∞—Ä—Ö–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤** –≤ CNN –¥–µ–ª–∞–µ—Ç Transfer Learning –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º. –†–∞–Ω–Ω–∏–µ —Å–ª–æ–∏ –∏–∑—É—á–∞—é—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≥—Ä–∞–Ω–∏—Ü—ã, —Ç–µ–∫—Å—Ç—É—Ä—ã), –∫–æ—Ç–æ—Ä—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–µ —Å–ª–æ–∏ –∏–∑—É—á–∞—é—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏.

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Transfer Learning –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –∏—Å—Ö–æ–¥–Ω–æ–π –∏ —Ü–µ–ª–µ–≤–æ–π –∑–∞–¥–∞—á–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞. –ß–µ–º –±–æ–ª—å—à–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∏ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã –æ—Ç Transfer Learning.

### –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ Fine-tuning

**–ó–∞–º–æ—Ä–æ–∑–∫–∞ —Å–ª–æ–µ–≤** —è–≤–ª—è–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π, –≥–¥–µ –≤–µ—Å–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏, –∞ –æ–±—É—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–ª–æ–∏:

Œ∏_frozen = const
Œ∏_new = Œ∏_new - Œ±‚àáL(Œ∏_new)

**–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ** –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –∑–∞–º–æ—Ä–æ–∑–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –∏—Ö, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö:

–≠–ø–æ—Ö–∞ 1-10: –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å —Å–ª–æ–∏ 1-N-2, –æ–±—É—á–∞—Ç—å —Å–ª–æ–∏ N-1, N
–≠–ø–æ—Ö–∞ 11-20: –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å —Å–ª–æ–∏ 1-N-3, –æ–±—É—á–∞—Ç—å —Å–ª–æ–∏ N-2, N-1, N

**–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è** –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–µ—Ç–∏:

Œ∏_early = Œ∏_early - Œ±_low‚àáL(Œ∏_early)
Œ∏_late = Œ∏_late - Œ±_high‚àáL(Œ∏_late)

–≥–¥–µ Œ±_low << Œ±_high.

**–¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ** (Cyclical Learning Rates) –∏–∑–º–µ–Ω—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏, —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—é.

### –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.

**–î–æ–º–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è** —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –æ–±—É—á–∞—é—â–∏–º–∏ –∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. Adversarial Domain Adaptation –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–Ω–æ-–∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:

L = L_task + ŒªL_domain

–≥–¥–µ L_domain - —Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤.

**Few-shot Learning** –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö –ø—Ä–∏–º–µ—Ä–æ–≤. Meta-learning –ø–æ–¥—Ö–æ–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ MAML (Model-Agnostic Meta-Learning), –∏–∑—É—á–∞—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º:

Œ∏' = Œ∏ - Œ±‚àáL_task(Œ∏)
Œ∏ = Œ∏ - Œ≤‚àáŒ£ L_val(Œ∏')

**Continual Learning** –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥–µ–ª—è–º –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∑–∞–±—ã–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö. Elastic Weight Consolidation (EWC) –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Ä–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤–∞–∂–Ω—ã—Ö –≤–µ—Å–æ–≤:

L = L_new + ŒªŒ£ F_i(Œ∏_i - Œ∏*_i)^2

–≥–¥–µ F_i - –¥–∏–∞–≥–æ–Ω–∞–ª—å –º–∞—Ç—Ä–∏—Ü—ã –§–∏—à–µ—Ä–∞, Œ∏*_i - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á.

## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

### –¢–µ—Ö–Ω–∏–∫–∏ —Å–∂–∞—Ç–∏—è –º–æ–¥–µ–ª–µ–π

**–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è** —É–º–µ–Ω—å—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞–º—è—Ç–∏ –∏ —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. Post-training quantization –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —É–∂–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:

q = round(r/s) + z

–≥–¥–µ r - –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, s - –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, z - –Ω—É–ª–µ–≤–∞—è —Ç–æ—á–∫–∞, q - –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

Quantization-aware training –≤–∫–ª—é—á–∞–µ—Ç –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é –≤ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è, —á—Ç–æ –æ–±—ã—á–Ω–æ –¥–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

**–ü—Ä—É–Ω–∏–Ω–≥** —É–¥–∞–ª—è–µ—Ç –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –≤–µ—Å–∞ –∏–ª–∏ –Ω–µ–π—Ä–æ–Ω—ã. Magnitude-based pruning —É–¥–∞–ª—è–µ—Ç –≤–µ—Å–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:

W_pruned = W ‚äô M

–≥–¥–µ M - –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞, M_ij = 1 –µ—Å–ª–∏ |W_ij| > threshold.

Structured pruning —É–¥–∞–ª—è–µ—Ç —Ü–µ–ª—ã–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ —Å–ª–æ–∏, —á—Ç–æ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è.

**–î–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è –∑–Ω–∞–Ω–∏–π** –æ–±—É—á–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –º–æ–¥–µ–ª—å (—Å—Ç—É–¥–µ–Ω—Ç) –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ–ª—å—à–æ–π –º–æ–¥–µ–ª–∏ (—É—á–∏—Ç–µ–ª—å):

L = Œ±L_hard + (1-Œ±)œÑ¬≤L_soft

–≥–¥–µ L_hard - –ø–æ—Ç–µ—Ä—è –Ω–∞ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –º–µ—Ç–∫–∞—Ö, L_soft - –ø–æ—Ç–µ—Ä—è –Ω–∞ –º—è–≥–∫–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö —É—á–∏—Ç–µ–ª—è, œÑ - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.

### –ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

**GPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** –≤–∫–ª—é—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞. –°–º–µ—à–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (mixed precision) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FP16 –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ FP32 –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:

loss_scaled = loss * scale_factor
gradients = backward(loss_scaled) / scale_factor

**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏**, —Ç–∞–∫–∏–µ –∫–∞–∫ TPU, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –û–Ω–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

**Edge deployment** —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. TensorRT, OpenVINO –∏ –¥—Ä—É–≥–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏** –≤–∫–ª—é—á–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏, –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. Drift detection –≤—ã—è–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:

KL(P||Q) = Œ£ P(x) log(P(x)/Q(x))

–≥–¥–µ P - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, Q - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ** –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥—Ä–∏—Ñ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.

**A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –æ–±–ª–∞—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤ –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –∑–∞–¥–∞—á. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –∏ —Ç–µ—Ö–Ω–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. Transfer Learning –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –≥–¥–µ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–æ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä, —É–ª—É—á—à–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏–∫ –æ–±—É—á–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.
`
  },

  26: {
    title: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤",
    duration: 180,
    type: "theory",
    module: 4,
    content: `
# –£—Ä–æ–∫ 26: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è —ç—Ç–∏—Ö –∑–∞–¥–∞—á —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.

–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫ –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–º, –ø—Ä–∏—Å–≤–∞–∏–≤–∞—è –µ–º—É –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–∫ –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –∑–∞–¥–∞—á—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, –Ω–æ –∏ –ª–æ–∫–∞–ª–∏–∑—É—è –∏—Ö –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏–ª–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤.

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á: –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–æ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏, –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –Ω–æ –∏ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≥–ª—É–±–æ–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å. –û–¥–Ω–∞–∫–æ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Å–≤—è–∑–∞–Ω–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —É—Å–ª–æ–≤–∏–π –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã, –∞ —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.

–≠–≤–æ–ª—é—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ—à–ª–∞ –ø—É—Ç—å –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä—É—á–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö end-to-end —Å–∏—Å—Ç–µ–º –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ–º–æ–≥–∞–µ—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, —É—á–∏—Ç—ã–≤–∞—è –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é, —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è

–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤.

**–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–∞ –≤—Å–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ–º—É –∫–ª–∞—Å—Å—É –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞. –ú–Ω–æ–≥–æ–º–µ—Ç–æ—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª–∞—Å—Å–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.

–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞—á–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∏–∑—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ f: X ‚Üí Y, –≥–¥–µ X –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞ Y - –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤. –î–ª—è K –∫–ª–∞—Å—Å–æ–≤ –≤—ã—Ö–æ–¥–æ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–µ–∫—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π p = [p‚ÇÅ, p‚ÇÇ, ..., p‚Çñ], –≥–¥–µ p·µ¢ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Å—É i, –∏ ‚àëp·µ¢ = 1.

**–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤** –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è—è –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, –Ω–æ –∏ –∏—Ö —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–±–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (bounding boxes), –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (x, y, w, h) –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫–ª–∞—Å—Å—É.

–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: (x‚ÇÅ, y‚ÇÅ, x‚ÇÇ, y‚ÇÇ) –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö —É–≥–ª–æ–≤, (x_center, y_center, width, height) –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤, –∏–ª–∏ (x_top_left, y_top_left, width, height) –¥–ª—è –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤.

**–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞** –∏–≥—Ä–∞—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å –≤ –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Ç–æ—á–Ω–æ—Å—Ç—å (accuracy), —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º (precision), –ø–æ–ª–Ω–æ—Ç–∞ (recall) –∏ F1-–º–µ—Ä–∞:

Precision = TP / (TP + FP)
Recall = TP / (TP + FN)  
F1 = 2 * (Precision * Recall) / (Precision + Recall)

–≥–¥–µ TP - –∏—Å—Ç–∏–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, FP - –ª–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, FN - –ª–æ–∂–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–î–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç—Ä–∏–∫–∞ Intersection over Union (IoU), –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º –∏ –∏—Å—Ç–∏–Ω–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–º–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏:

IoU = Area(Prediction ‚à© Ground Truth) / Area(Prediction ‚à™ Ground Truth)

Average Precision (AP) –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø–ª–æ—â–∞–¥—å –ø–æ–¥ –∫—Ä–∏–≤–æ–π precision-recall –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ IoU. Mean Average Precision (mAP) —É—Å—Ä–µ–¥–Ω—è–µ—Ç AP –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –º–µ—Ç—Ä–∏–∫–æ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤.

### –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–æ–≤

–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∞–∂–Ω–æ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –º–Ω–æ–≥–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ç–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

**–ú–µ—Ç–æ–¥ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É –≤–æ–∑–º–æ–∂–Ω–æ–º—É –æ–∫–Ω—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –û–∫–Ω–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–≥–æ–º, –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—ä–µ–∫—Ç–∞.

–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫:

score(x, y, w, h) = classifier(extract_features(I[x:x+w, y:y+h]))

–≥–¥–µ I - –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, (x, y, w, h) - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞, extract_features - —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.

–û—Å–Ω–æ–≤–Ω—ã–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º –º–µ—Ç–æ–¥–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(N¬≤M), –≥–¥–µ N - —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, M - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—à—Ç–∞–±–æ–≤ –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ—Ç–æ–¥ –Ω–µ–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π.

**–ö–∞—Å–∫–∞–¥—ã –í–∏–æ–ª—ã-–î–∂–æ–Ω—Å–∞** —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª–µ 2000-—Ö –≥–æ–¥–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–∏–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–±—Ä–∞–∫–æ–≤—ã–≤–∞–Ω–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω. –ú–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –•–∞–∞—Ä–∞ –∏ –∫–∞—Å–∫–∞–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.

–ü—Ä–∏–∑–Ω–∞–∫–∏ –•–∞–∞—Ä–∞ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∫–∞–∫ —Ä–∞–∑–Ω–æ—Å—Ç–∏ —Å—É–º–º –ø–∏–∫—Å–µ–ª–µ–π –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö:

feature_value = Œ£(pixels_in_white_rectangles) - Œ£(pixels_in_black_rectangles)

–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å —ç—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è:

II(x,y) = Œ£·µ¢‚Çå‚ÇÄÀ£ Œ£‚±º‚Çå‚ÇÄ ∏ I(i,j)

–°—É–º–º–∞ –ø–∏–∫—Å–µ–ª–µ–π –≤ –ª—é–±–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∞ –∑–∞ —á–µ—Ç—ã—Ä–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.

–ö–∞—Å–∫–∞–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤. –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –∫–∞—Å–∫–∞–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –≤—ã—Å–æ–∫—É—é –ø–æ–ª–Ω–æ—Ç—É (recall), –æ—Ç–±—Ä–∞–∫–æ–≤—ã–≤–∞—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—â—É—é –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º —É—Å–∫–æ—Ä–µ–Ω–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

**–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (HOG)** —Å—Ç–∞–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–µ—à–µ—Ö–æ–¥–æ–≤. HOG –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–∏, —á—Ç–æ —Ñ–æ—Ä–º–∞ –æ–±—ä–µ–∫—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–ø–∏—Å–∞–Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏.

–ê–ª–≥–æ—Ä–∏—Ç–º HOG –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã:

1. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤: G‚Çì = I * [-1, 0, 1], G·µß = I * [-1; 0; 1]
2. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–≥–Ω–∏—Ç—É–¥—ã –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏: |G| = ‚àö(G‚Çì¬≤ + G·µß¬≤), Œ∏ = arctan(G·µß/G‚Çì)
3. –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
4. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ —è—á–µ–µ–∫ –¥–ª—è –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é
5. –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä

HOG –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –Ω–µ–±–æ–ª—å—à–∏–º –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.

**–î–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏ —á–∞—Å—Ç–µ–π (DPM)** —Ä–∞—Å—à–∏—Ä—è—é—Ç HOG, –º–æ–¥–µ–ª–∏—Ä—É—è –æ–±—ä–µ–∫—Ç—ã –∫–∞–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–∞—Å—Ç–µ–π —Å –¥–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π. –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

score(p‚ÇÄ, ..., p‚Çô) = Œ£·µ¢ F·µ¢ ¬∑ œÜ(H, p·µ¢) + Œ£·µ¢ a·µ¢ ¬∑ œà(d‚Çì·µ¢, d·µß·µ¢)

–≥–¥–µ F·µ¢ - —Ñ–∏–ª—å—Ç—Ä—ã —á–∞—Å—Ç–µ–π, œÜ(H, p·µ¢) - –ø—Ä–∏–∑–Ω–∞–∫–∏ HOG –≤ –ø–æ–∑–∏—Ü–∏–∏ p·µ¢, a·µ¢ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏, œà - —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏.

DPM –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Å–æ–≤—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ –æ–∫–∫–ª—é–∑–∏–∏, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∂–µ—Å—Ç–∫–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏.

## –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤

–†–µ–≤–æ–ª—é—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞ –ø–æ–¥—Ö–æ–¥—ã –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–æ–≤, –ø—Ä–∏–≤–µ–¥—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–æ—â–Ω—ã—Ö end-to-end —Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏.

### –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã (Two-Stage Detectors)

–î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç –∑–∞–¥–∞—á—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –¥–≤–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–æ–≤ (region proposals) –∏ –∏—Ö –ø–æ—Å–ª–µ–¥—É—é—â—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.

**R-CNN (Regions with CNN features)** —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º CNN –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤. –ê–ª–≥–æ—Ä–∏—Ç–º –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã:

1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ~2000 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ CNN –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç forward pass –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞)
3. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é SVM
4. –£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—Ä–µ—Å—Å–∏–∏

–û—Å–Ω–æ–≤–Ω—ã–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º R-CNN —è–≤–ª—è–µ—Ç—Å—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ—Å–∫–æ–ª—å–∫—É CNN –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞.

**Fast R-CNN** —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ R-CNN, –≤—ã—á–∏—Å–ª—è—è CNN –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∏–∑–≤–ª–µ–∫–∞—è –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ü–∏–∏ RoI pooling:

RoI_pooling(feature_map, roi) = max_pool(feature_map[roi], output_size)

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Fast R-CNN –≤–∫–ª—é—á–∞–µ—Ç –æ–±—â—É—é —Å–≤–µ—Ä—Ç–æ—á–Ω—É—é —Å–µ—Ç—å (backbone), —Å–ª–æ–π RoI pooling –∏ –¥–≤–µ –≥–æ–ª–æ–≤—ã: –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤. –ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ—Ç–µ—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:

L = L_cls + ŒªL_bbox

–≥–¥–µ L_cls - –∫—Ä–æ—Å—Å-—ç–Ω—Ç—Ä–æ–ø–∏–π–Ω–∞—è –ø–æ—Ç–µ—Ä—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, L_bbox - smooth L1 –ø–æ—Ç–µ—Ä—è –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.

**Faster R-CNN** —É—Å—Ç—Ä–∞–Ω—è–µ—Ç —É–∑–∫–æ–µ –º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–æ–≤, –∑–∞–º–µ–Ω—è—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –æ–±—É—á–∞–µ–º–æ–π Region Proposal Network (RPN). RPN –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—É—é —Å–≤–µ—Ä—Ç–æ—á–Ω—É—é —Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–µ—Ç–∫–µ —è–∫–æ—Ä–µ–π (anchors).

–î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ (i, j) –≤ –∫–∞—Ä—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ RPN –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç k —è–∫–æ—Ä–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–æ–≤ –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∫–æ—Ä—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç—Å—è:

- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞: p_i ‚àà [0, 1]
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: t_i = (t_x, t_y, t_w, t_h)

–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑—É—é—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —è–∫–æ—Ä—è:

t_x = (x - x_a)/w_a, t_y = (y - y_a)/h_a
t_w = log(w/w_a), t_h = log(h/h_a)

–≥–¥–µ (x, y, w, h) - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞, (x_a, y_a, w_a, h_a) - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–∫–æ—Ä—è.

–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å RPN –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ—Ç–µ—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:

L_RPN = (1/N_cls)Œ£·µ¢ L_cls(p·µ¢, p·µ¢*) + Œª(1/N_reg)Œ£·µ¢ p·µ¢* L_reg(t·µ¢, t·µ¢*)

–≥–¥–µ p·µ¢* - –∏—Å—Ç–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (1 –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π, 0 –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö), t·µ¢* - –∏—Å—Ç–∏–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π.

**Feature Pyramid Networks (FPN)** —Ä–µ—à–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–æ–≤, —Å–æ–∑–¥–∞–≤–∞—è –ø–∏—Ä–∞–º–∏–¥—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö. FPN –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –ø—É—Ç—å (bottom-up pathway) —Å –≤–æ—Å—Ö–æ–¥—è—â–∏–º –ø—É—Ç–µ–º (top-down pathway) –∏ –ª–∞—Ç–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏:

P_l = Upsample(P_{l+1}) + C_l

–≥–¥–µ P_l - –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Ä–æ–≤–Ω—è l –≤ –ø–∏—Ä–∞–º–∏–¥–µ, C_l - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ backbone —Å–µ—Ç–∏.

### –û–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã (One-Stage Detectors)

–û–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ —Å–µ—Ç–∏, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏.

**YOLO (You Only Look Once)** —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, —Ñ–æ—Ä–º—É–ª–∏—Ä—É—è –µ–≥–æ –∫–∞–∫ –µ–¥–∏–Ω—É—é –∑–∞–¥–∞—á—É —Ä–µ–≥—Ä–µ—Å—Å–∏–∏. YOLO —Ä–∞–∑–¥–µ–ª—è–µ—Ç –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ç–∫—É S√óS —è—á–µ–µ–∫. –ö–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç B –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏ C –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∫–ª–∞—Å—Å–æ–≤.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç—Å—è:
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —è—á–µ–π–∫–∏: (x, y) ‚àà [0, 1]
- –†–∞–∑–º–µ—Ä—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: (w, h)
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: confidence = Pr(Object) √ó IoU

–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∫–∞–∫:

class_score = confidence √ó class_probability

–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å YOLO –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:

L = Œª_coord Œ£·µ¢ Œ£‚±º ùüô·µ¢‚±º·µí·µá ≤ [(x·µ¢ - xÃÇ·µ¢)¬≤ + (y·µ¢ - ≈∑·µ¢)¬≤]
  + Œª_coord Œ£·µ¢ Œ£‚±º ùüô·µ¢‚±º·µí·µá ≤ [(‚àöw·µ¢ - ‚àö≈µ·µ¢)¬≤ + (‚àöh·µ¢ - ‚àöƒ•·µ¢)¬≤]
  + Œ£·µ¢ Œ£‚±º ùüô·µ¢‚±º·µí·µá ≤ (C·µ¢ - ƒà·µ¢)¬≤
  + Œª_noobj Œ£·µ¢ Œ£‚±º ùüô·µ¢‚±º‚Åø·µí·µí·µá ≤ (C·µ¢ - ƒà·µ¢)¬≤
  + Œ£·µ¢ ùüô·µ¢·µí·µá ≤ Œ£_c (p·µ¢(c) - pÃÇ·µ¢(c))¬≤

–≥–¥–µ ùüô·µ¢‚±º·µí·µá ≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ j-–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ —è—á–µ–π–∫–µ i –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.

**YOLOv2/YOLO9000** –≤–Ω–µ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–∏–π –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É:
- Batch normalization –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è
- –í—ã—Å–æ–∫–æ—Ä–∞–∑—Ä–µ—à–∞—é—â–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä (448√ó448 –≤–º–µ—Å—Ç–æ 224√ó224)
- –°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–ª–æ–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö
- –Ø–∫–æ—Ä—è (anchor boxes) –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
- –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ

**YOLOv3** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Darknet-53 –∫–∞–∫ backbone –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç—Ä–µ—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–∞—Ö, —á—Ç–æ —É–ª—É—á—à–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç Feature Pyramid Network –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π.

**SSD (Single Shot MultiBox Detector)** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Ä—Ç—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–æ–≤ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤. –ö–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ —Å—Ç–æ—Ä–æ–Ω.

–î–ª—è –∫–∞—Ä—Ç—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º m√ón —Å k —è–∫–æ—Ä—è–º–∏ –Ω–∞ —è—á–µ–π–∫—É, SSD –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç:
- (c + 1) √ó k –æ—Ü–µ–Ω–æ–∫ –∫–ª–∞—Å—Å–æ–≤ (–≤–∫–ª—é—á–∞—è —Ñ–æ–Ω)
- 4 √ó k –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–º–µ—â–µ–Ω–∏–π

–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å SSD –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ—Ç–µ—Ä–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:

L = (1/N)(L_conf + Œ±L_loc)

–≥–¥–µ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —è–∫–æ—Ä–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

**RetinaNet** —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤ –≤ –æ–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞—Ö —Å –ø–æ–º–æ—â—å—é Focal Loss:

FL(p_t) = -Œ±_t(1 - p_t)^Œ≥ log(p_t)

–≥–¥–µ p_t - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, Œ±_t - –≤–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, Œ≥ - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏.

Focal Loss –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–∂–∞–µ—Ç –≤–µ—Å –ª–µ–≥–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã–º –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏.

### –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤

**DETR (Detection Transformer)** –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —è–∫–æ—Ä—è—Ö –∏–ª–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ NMS.

DETR —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ CNN backbone –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, —ç–Ω–∫–æ–¥–µ—Ä–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ –¥–µ–∫–æ–¥–µ—Ä–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ–±—ä–µ–∫—Ç–æ–≤. –î–µ–∫–æ–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç N –æ–±—É—á–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (object queries) –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è N –æ–±—ä–µ–∫—Ç–æ–≤.

–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å DETR –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –¥–≤—É–¥–æ–ª—å–Ω–æ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ (bipartite matching) –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏ –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏:

L_Hungarian = Œ£·µ¢‚Çå‚ÇÅ·¥∫ [-log pÃÇ_œÉ(i)(c_i) + ùüô_{c_i‚â†‚àÖ} L_box(b_i, bÃÇ_œÉ(i))]

–≥–¥–µ œÉ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é –≤–µ–Ω–≥–µ—Ä—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.

## –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É—é—Ç —Ä–µ—à–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤.

### –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤

–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–æ–±—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –∏ –≤–ª–∏—è–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å—É–±–¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –≤ CNN.

**–ú—É–ª—å—Ç–∏–º–∞—Å—à—Ç–∞–±–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã** –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤. Feature Pyramid Networks —Å–æ–∑–¥–∞—é—Ç –ø–∏—Ä–∞–º–∏–¥—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –±–æ–≥–∞—Ç—ã–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö.

**–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–æ –∑–∞ —Å—á–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–ª–∞—Å—Ç–µ–π —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–ª–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏.

**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã** –¥–ª—è –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∫–ª—é—á–∞—é—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤:
- –£–º–µ–Ω—å—à–µ–Ω–∏–µ stride –≤ —Ä–∞–Ω–Ω–∏—Ö —Å–ª–æ—è—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
- –î–∏–ª–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ç–∫–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
- Attention –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö

**–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö** –∏–≥—Ä–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ä–æ–ª—å –≤ –æ–±—É—á–µ–Ω–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤:
- –ú–æ–∑–∞–∏—á–Ω–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ
- Copy-paste –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- Mixup –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã

### –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö –æ–∫–∫–ª—é–∑–∏–∏

–û–∫–∫–ª—é–∑–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ø–ª–æ—Ç–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö.

**–ú–æ–¥–µ–ª–∏ —á–∞—Å—Ç–µ–π –∏ –¥–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏** —Ä–∞–∑–±–∏–≤–∞—é—Ç –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏ –∏ –º–æ–¥–µ–ª–∏—Ä—É—é—Ç –∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –¥–∞–∂–µ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–∫–∫–ª—é–∑–∏–∏, –µ—Å–ª–∏ –≤–∏–¥–∏–º—ã –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏.

**Attention –º–µ—Ö–∞–Ω–∏–∑–º—ã** –ø–æ–º–æ–≥–∞—é—Ç —Å–µ—Ç–∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∏–¥–∏–º—ã—Ö —á–∞—Å—Ç—è—Ö –æ–±—ä–µ–∫—Ç–æ–≤:

Attention(Q, K, V) = softmax(QK^T/‚àöd_k)V

–≥–¥–µ Q, K, V - –º–∞—Ç—Ä–∏—Ü—ã –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

**–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫–∫–ª—é–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –°–µ—Ç–∏ –º–æ–≥—É—Ç –∏–∑—É—á–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è.

**–ú–Ω–æ–≥–æ–≤–∏–¥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã** –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤ —Å—Ü–µ–Ω—ã, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –æ–∫–∫–ª—é–∑–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–∞—Ö.

### –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–¥–∫–∏–º–∏ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏.

**–û–¥–Ω–æ–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è** –æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö –∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:

anomaly_score = ||x - Œº||¬≤ / œÉ¬≤

–≥–¥–µ Œº –∏ œÉ¬≤ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.

**–ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã** —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É—é—Ç –≤—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ—à–∏–±–∫—É —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–∫ –º–µ—Ä—É –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏:

L_reconstruction = ||x - decoder(encoder(x))||¬≤

–í—ã—Å–æ–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∞–Ω–æ–º–∞–ª–∏—é.

**–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ-—Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (GANs)** –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –æ–±—É—á–∞—é—Ç—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ê–Ω–æ–º–∞–ª–∏–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞.

**–ú–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ** –∏–∑—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≥–¥–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è, –∞ –∞–Ω–æ–º–∞–ª–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–∞–ª–µ–∫–æ –æ—Ç –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:

L_triplet = max(0, ||f(a) - f(p)||¬≤ - ||f(a) - f(n)||¬≤ + margin)

–≥–¥–µ a - —è–∫–æ—Ä—å, p - –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä, n - –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

–£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ç—Ä–µ–±—É–µ—Ç —É—á–µ—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤.

### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —É—Å–ø–µ—Ö–∞ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.

**–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö** –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏:
- –†–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ, —Å–º–µ—à–∞–Ω–Ω–æ–µ)
- –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–æ–≤
- –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–æ–≤—ã–µ, –∏–∑–Ω–æ—à–µ–Ω–Ω—ã–µ, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ)
- –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ–Ω—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã

**–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö** –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤. –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:

- –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–Ω–Ω–æ—Ç–∞—Ç–æ—Ä–∞–º–∏
- –¢–æ—á–Ω–æ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:
- –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
- –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
- –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
- –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

**–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ** —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π:
- 3D —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
- –î–æ–º–µ–Ω–Ω–∞—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏–∏
- –§–∏–∑–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö.

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏** –≤–∫–ª—é—á–∞—é—Ç:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö backbone —Å–µ—Ç–µ–π (MobileNet, EfficientNet)
- –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–∫–æ—Ä–µ–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π NMS (Non-Maximum Suppression)
- –ö–∞—Å–∫–∞–¥–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–±—Ä–∞–∫–æ–≤—ã–≤–∞–Ω–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤

**–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –∏ —Å–∂–∞—Ç–∏–µ –º–æ–¥–µ–ª–µ–π**:
- Post-training quantization –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
- Quantization-aware training –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
- –ü—Ä—É–Ω–∏–Ω–≥ –≤–µ—Å–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏
- –î–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è –∑–Ω–∞–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π

**–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è**:
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è GPU —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TensorRT, cuDNN
- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–∫–æ—Ä–∏—Ç–µ–ª—è—Ö (TPU, VPU)
- Edge computing —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –≤–∏–¥–µ–æ

**–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏**:
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ-–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≤–∏–¥–µ–æ
- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –æ–±—ä–µ–∫—Ç–æ–≤
- –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç –≥—Ä—É–±–æ–≥–æ –∫ —Ç–æ—á–Ω–æ–º—É

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

–£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.

**–ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏** –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö:
- –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (OPC UA, Modbus, PROFINET)
- –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è (GenICam, GigE Vision)
- –û–±–ª–∞—á–Ω—ã–µ API –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- Edge-to-cloud –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

**–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º**:
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MES (Manufacturing Execution Systems)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (SPC)
- –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –∞—É–¥–∏—Ç —Ä–µ—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞**:
- –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–∏—Ñ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
- –£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å**:
- –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- Graceful degradation –ø—Ä–∏ –æ—Ç–∫–∞–∑–∞—Ö
- –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –≠–≤–æ–ª—é—Ü–∏—è –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã–ª–∞ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã—Ö –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–∞–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤, —Ç–∞–∫ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å, –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∫–ª—é—á–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä, —É–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –≤—ã—Å–æ–∫—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.
`
  },

  27: {
    title: "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    duration: 170,
    type: "theory",
    module: 4,
    content: `
# –£—Ä–æ–∫ 27: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –º–µ—Ç–æ–¥–æ–≤ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.

–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∑–∞–¥–∞—á –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—Ç –æ–¥–Ω—É –º–µ—Ç–∫—É –≤—Å–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∏–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–∫–∞–ª–∏–∑—É—é—Ç –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–º–æ—â—å—é –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω–æ-—Ç–æ—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–∞–∂–¥–æ–º—É –ø–∏–∫—Å–µ–ª—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –º–µ—Ç–∫–∞ –∫–ª–∞—Å—Å–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏—Ö –≥—Ä–∞–Ω–∏—Ü.

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á: –æ—Ç —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ—Ç–∞–ª–µ–π –¥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤ –¥–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –Ω–æ –∏ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≥–ª—É–±–æ–∫–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏—Ö –≥—Ä–∞–Ω–∏—Ü. –û–¥–Ω–∞–∫–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Å–≤—è–∑–∞–Ω–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—É–±–ø–∏–∫—Å–µ–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —É—Å–ª–æ–≤–∏–π —Å—ä–µ–º–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.

–≠–≤–æ–ª—é—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∞ –ø—É—Ç—å –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–æ—Å—Ç–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å attention –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞–º–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ–º–æ–≥–∞–µ—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, —É—á–∏—Ç—ã–≤–∞—è –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é, —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.

### –¢–∏–ø—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è

–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.

**–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∫–∞–∂–¥–æ–º—É –ø–∏–∫—Å–µ–ª—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–∫—É –∫–ª–∞—Å—Å–∞, —Å–æ–∑–¥–∞–≤–∞—è –ø–ª–æ—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –í—Å–µ –ø–∏–∫—Å–µ–ª–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –æ–¥–Ω–æ–º—É –∫–ª–∞—Å—Å—É, –ø–æ–ª—É—á–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –º–µ—Ç–∫—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ª–∏ –æ–Ω–∏ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º –æ–±—ä–µ–∫—Ç–æ–≤ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–¥–∞—á–∞ –ø–ª–æ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:

f: ‚Ñù^(H√óW√óC) ‚Üí {1, 2, ..., K}^(H√óW)

–≥–¥–µ –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º H√óW —Å C –∫–∞–Ω–∞–ª–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç—É –º–µ—Ç–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–º H√óW —Å K –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏.

–í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á, –≥–¥–µ –≤–∞–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä—ã –≤–∫–ª—é—á–∞—é—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö, –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–±–ª–∞—Å—Ç–µ–π –∫–æ—Ä—Ä–æ–∑–∏–∏ –Ω–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è—Ö.

**–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (Instance Segmentation)** —Ä–∞—Å—à–∏—Ä—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é, —Ä–∞–∑–ª–∏—á–∞—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ö–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –º–µ—Ç–∫—É –∫–ª–∞—Å—Å–∞, –Ω–æ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—ä–µ–∫—Ç–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ—á–Ω–æ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.

–§–æ—Ä–º–∞–ª—å–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫:

f: ‚Ñù^(H√óW√óC) ‚Üí {(c‚ÇÅ, i‚ÇÅ), (c‚ÇÇ, i‚ÇÇ), ..., (c‚Çñ, i‚Çñ)}^(H√óW)

–≥–¥–µ c‚±º - –∫–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞, i‚±º - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤–∫–ª—é—á–∞—é—Ç –ø–æ–¥—Å—á–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —É–ø–∞–∫–æ–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏, –∞–Ω–∞–ª–∏–∑ –∫–ª–µ—Ç–æ—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏.

**–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è (Panoptic Segmentation)** –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã. –ö–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∫–∞–∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –º–µ—Ç–∫—É, —Ç–∞–∫ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ). –ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∞–µ—Ç "–≤–µ—â–∏" (things) - –æ–±—ä–µ–∫—Ç—ã —Å —á–µ—Ç–∫–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å, –∏ "–º–∞—Ç–µ—Ä–∏–∞–ª—ã" (stuff) - –∞–º–æ—Ä—Ñ–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –±–µ–∑ —á–µ—Ç–∫–∏—Ö –≥—Ä–∞–Ω–∏—Ü.

**–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∫–∞–∫ —â–µ–ª—á–∫–∏ –º—ã—à–∏, —à—Ç—Ä–∏—Ö–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±—ã—Å—Ç—Ä–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–æ–≤—ã–º —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.

### –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

–ü–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –ª–µ–∂–∞—â–∏—Ö –≤ –æ—Å–Ω–æ–≤–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å** –∏–≥—Ä–∞—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ä–æ–ª—å –≤ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫—Ä–æ—Å—Å-—ç–Ω—Ç—Ä–æ–ø–∏–π–Ω–∞—è –ø–æ—Ç–µ—Ä—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

L_CE = -1/(H√óW) ‚àë·µ¢‚Çå‚ÇÅ ∞ ‚àë‚±º‚Çå‚ÇÅ ∑ ‚àë‚Çñ‚Çå‚ÇÅ·¥∑ y·µ¢‚±º‚Çñ log(pÃÇ·µ¢‚±º‚Çñ)

–≥–¥–µ y·µ¢‚±º‚Çñ - –∏—Å—Ç–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (one-hot encoded), pÃÇ·µ¢‚±º‚Çñ - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ k –¥–ª—è –ø–∏–∫—Å–µ–ª—è (i,j).

**Dice Loss** –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º –∫–ª–∞—Å—Å–æ–≤ –∏ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ Dice (F1-–º–µ—Ä–µ):

Dice = 2|A ‚à© B| / (|A| + |B|)

Dice Loss –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

L_Dice = 1 - (2‚àë·µ¢ p·µ¢g·µ¢ + Œµ) / (‚àë·µ¢ p·µ¢ + ‚àë·µ¢ g·µ¢ + Œµ)

–≥–¥–µ p·µ¢ - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, g·µ¢ - –∏—Å—Ç–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞, Œµ - –º–∞–ª–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.

**Focal Loss** –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤:

L_Focal = -Œ±(1-pÃÇ)^Œ≥ log(pÃÇ)

–≥–¥–µ Œ± - –≤–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, Œ≥ - –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏.

**Tversky Loss** –æ–±–æ–±—â–∞–µ—Ç Dice Loss, –ø–æ–∑–≤–æ–ª—è—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –ª–æ–∂–Ω–æ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏:

L_Tversky = 1 - (‚àë·µ¢ p·µ¢g·µ¢ + Œµ) / (‚àë·µ¢ p·µ¢g·µ¢ + Œ±‚àë·µ¢ p·µ¢(1-g·µ¢) + Œ≤‚àë·µ¢ (1-p·µ¢)g·µ¢ + Œµ)

–≥–¥–µ Œ± –∏ Œ≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –ª–æ–∂–Ω–æ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

**Boundary Loss** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–Ω–∏—Ü —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:

L_Boundary = ‚à´_Œ© œÜ(x) ¬∑ ‚àáG(x) dx

–≥–¥–µ œÜ(x) - —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∏—Å—Ç–∏–Ω–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã, G(x) - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.

## –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–∂–Ω—ã–º –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –º–Ω–æ–≥–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏ –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.

### –ü–æ—Ä–æ–≥–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã

–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π.

**–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

g(x,y) = {1, –µ—Å–ª–∏ f(x,y) ‚â• T
         {0, –µ—Å–ª–∏ f(x,y) < T

–≥–¥–µ f(x,y) - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª—è, T - –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, g(x,y) - –±–∏–Ω–∞—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:

**–ú–µ—Ç–æ–¥ –û—Ü—É** –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–µ–∂–∫–ª–∞—Å—Å–æ–≤—É—é –¥–∏—Å–ø–µ—Ä—Å–∏—é:

œÉ¬≤_between(T) = œâ‚ÇÅ(T)œâ‚ÇÇ(T)[Œº‚ÇÅ(T) - Œº‚ÇÇ(T)]¬≤

–≥–¥–µ œâ‚ÇÅ, œâ‚ÇÇ - –≤–µ—Å–∞ –∫–ª–∞—Å—Å–æ–≤, Œº‚ÇÅ, Œº‚ÇÇ - —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤.

**–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏, –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏:

T(x,y) = Œº(x,y) - C

–≥–¥–µ Œº(x,y) - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª—è (x,y), C - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞.

**–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:

g(x,y) = {k, –µ—Å–ª–∏ T_{k-1} ‚â§ f(x,y) < T_k

### –ú–µ—Ç–æ–¥—ã —Ä–æ—Å—Ç–∞ –æ–±–ª–∞—Å—Ç–µ–π

–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–æ—Å—Ç–∞ –æ–±–ª–∞—Å—Ç–µ–π –Ω–∞—á–∏–Ω–∞—é—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ (seeds) –∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è—é—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—é –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏.

**–ë–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–æ—Å—Ç–∞ –æ–±–ª–∞—Å—Ç–µ–π**:

1. –í—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
2. –î–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:
   - –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—é
   - –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–ª–∞—Å—Ç–∏
   - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–ö—Ä–∏—Ç–µ—Ä–∏–π –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö:

|f(x,y) - Œº_region| < T

–≥–¥–µ Œº_region - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏.

**–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–ª–∏—è–Ω–∏–µ (Split and Merge)** –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—ã —Å–≤–µ—Ä—Ö—É-–≤–Ω–∏–∑ –∏ —Å–Ω–∏–∑—É-–≤–≤–µ—Ä—Ö:

1. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ: —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –æ–±–ª–∞—Å—Ç–∏, –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—é –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏
2. –°–ª–∏—è–Ω–∏–µ: –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏

### –ú–µ—Ç–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞–Ω–∏—Ü

–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π –¥–ª—è –º–Ω–æ–≥–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.

**–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã** –≤—ã—á–∏—Å–ª—è—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏:

–û–ø–µ—Ä–∞—Ç–æ—Ä –°–æ–±–µ–ª—è:
G_x = [-1 0 1; -2 0 2; -1 0 1] * I
G_y = [-1 -2 -1; 0 0 0; 1 2 1] * I
|G| = ‚àö(G_x¬≤ + G_y¬≤)

**–î–µ—Ç–µ–∫—Ç–æ—Ä –≥—Ä–∞–Ω–∏—Ü –ö—ç–Ω–Ω–∏** –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:

1. –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≥–∞—É—Å—Å–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
2. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
3. –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–º–∞–∫—Å–∏–º—É–º–æ–≤
4. –î–≤–æ–π–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
5. –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü –ø–æ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å—É

**–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã (Snakes)** –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:

E = ‚à´‚ÇÄ¬π [E_internal(v(s)) + E_external(v(s))] ds

–≥–¥–µ E_internal –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≥–ª–∞–¥–∫–æ—Å—Ç—å –∫–æ–Ω—Ç—É—Ä–∞, E_external –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—É—Ä –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –æ–±—ä–µ–∫—Ç–∞.

### –í–æ–¥–æ—Ä–∞–∑–¥–µ–ª—å–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è

–ê–ª–≥–æ—Ä–∏—Ç–º –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª–∞ (Watershed) —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏–Ω–∏–∏ –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –±–∞—Å—Å–µ–π–Ω–∞–º–∏.

**–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª–∞**:

1. –ù–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã (–º–∞—Ä–∫–µ—Ä—ã)
2. –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤
3. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–º–±—ã –≤ –º–µ—Å—Ç–∞—Ö –≤—Å—Ç—Ä–µ—á–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–¥
4. –î–∞–º–±—ã –æ–±—Ä–∞–∑—É—é—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

**–ú–∞—Ä–∫–µ—Ä–Ω–æ-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤–æ–¥–æ—Ä–∞–∑–¥–µ–ª** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.

## –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

–†–µ–≤–æ–ª—é—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞ –ø–æ–¥—Ö–æ–¥—ã –∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–∏–≤–µ–¥—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–æ—â–Ω—ã—Ö end-to-end —Å–∏—Å—Ç–µ–º —Å –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.

### –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–µ—Ç–∏ (FCN)

–ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–µ—Ç–∏ —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º CNN –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, –∑–∞–º–µ–Ω–∏–≤ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –Ω–∞ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–ª–æ–∏.

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ FCN** –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π:

1. –ó–∞–º–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ª–æ–µ–≤ –Ω–∞ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–µ (1√ó1 —Å–≤–µ—Ä—Ç–∫–∏)
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–µ–≤ –¥–µ–∫–æ–Ω–≤–æ–ª—é—Ü–∏–∏ (transpose convolution) –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
3. Skip connections –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π

–û–ø–µ—Ä–∞—Ü–∏—è –¥–µ–∫–æ–Ω–≤–æ–ª—é—Ü–∏–∏ (transpose convolution) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫:

y[i,j] = ‚àë‚Çò ‚àë‚Çô x[‚åäi/s‚åã-m, ‚åäj/s‚åã-n] ¬∑ w[m,n]

–≥–¥–µ s - stride, w - –≤–µ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞.

**Skip connections** –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –±–æ–≥–∞—Ç—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è:

output = upsample(high_level_features) + low_level_features

–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

### U-Net –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã

U-Net —Å—Ç–∞–ª–∞ –æ–¥–Ω–æ–π –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö.

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ U-Net** —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:

1. **–°–∂–∏–º–∞—é—â–∏–π –ø—É—Ç—å (Contracting Path)**: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ —Å max pooling
2. **–†–∞—Å—à–∏—Ä—è—é—â–∏–π –ø—É—Ç—å (Expansive Path)**: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å up-convolution –∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
3. **Skip connections**: –ø—Ä—è–º—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏

–ö–∞–∂–¥—ã–π —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–π –±–ª–æ–∫ –≤–∫–ª—é—á–∞–µ—Ç:
- –î–≤–µ —Å–≤–µ—Ä—Ç–∫–∏ 3√ó3 —Å ReLU –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
- Batch normalization (–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö)
- Dropout –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏

**U-Net++** —Ä–∞—Å—à–∏—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É U-Net, –¥–æ–±–∞–≤–ª—è—è –ø–ª–æ—Ç–Ω—ã–µ skip connections:

x^{i,j} = H(x^{i-1,j}, U(x^{i,j+1}), x^{i-1,j+1})

–≥–¥–µ H - —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–π –±–ª–æ–∫, U - –æ–ø–µ—Ä–∞—Ü–∏—è upsampling.

**Attention U-Net** –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç attention –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö:

Œ± = œÉ(W_Œ±^T(W_x^T x + W_g^T g + b_Œ±) + b_Œ±)

–≥–¥–µ x - –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å skip connection, g - gating signal —Å –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è.

### DeepLab —Å–µ–º–µ–π—Å—Ç–≤–æ

DeepLab –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ–º–µ–π—Å—Ç–≤–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü –æ–±—ä–µ–∫—Ç–æ–≤.

**Atrous (Dilated) Convolution** —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤–æ–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–µ–π DeepLab:

y[i] = ‚àë‚Çñ x[i + r¬∑k] w[k]

–≥–¥–µ r - dilation rate, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

**Atrous Spatial Pyramid Pooling (ASPP)** –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ atrous convolutions —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ dilation rates:

ASPP = Concat([Conv1√ó1, AtrousConv3√ó3(r=6), AtrousConv3√ó3(r=12), AtrousConv3√ó3(r=18), GlobalAvgPool])

**DeepLabv3+** –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç encoder-decoder –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å ASPP:

1. Encoder —Å ASPP –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
2. Decoder –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
3. Skip connections –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π

### –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤

–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤.

**Mask R-CNN** —Ä–∞—Å—à–∏—Ä—è–µ—Ç Faster R-CNN, –¥–æ–±–∞–≤–ª—è—è –≤–µ—Ç–≤—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–∞—Å–æ–∫:

1. Backbone —Å–µ—Ç—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
2. RPN –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–æ–≤
3. RoI Align –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤
4. –¢—Ä–∏ –≥–æ–ª–æ–≤—ã: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ä–µ–≥—Ä–µ—Å—Å–∏—è bbox, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∞—Å–∫–∏

**RoI Align** —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ RoI Pooling:

RoIAlign(x, roi) = ‚àë·µ¢ ‚àë‚±º x(p·µ¢‚±º) ¬∑ max(0, 1-|p·µ¢‚±º - (i,j)|)

–≥–¥–µ p·µ¢‚±º - —Ç–æ—á–∫–∏ –±–∏–ª–∏–Ω–µ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏.

–§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å Mask R-CNN –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ—Ç–µ—Ä–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á:

L = L_cls + L_bbox + L_mask

**YOLACT (You Only Look At CoefficienTs)** –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç real-time –ø–æ–¥—Ö–æ–¥ –∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:

1. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –º–∞—Å–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. –õ–∏–Ω–µ–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏

–§–∏–Ω–∞–ª—å–Ω–∞—è –º–∞—Å–∫–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫:

M = œÉ(PC^T)

–≥–¥–µ P - –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã, C - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, œÉ - —Å–∏–≥–º–æ–∏–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.

### –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

**SETR (SEgmentation TRansformer)** –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç Vision Transformer –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:

1. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø–∞—Ç—á–∏
2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ç—á–µ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–º
3. –î–µ–∫–æ–¥–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

**SegFormer** –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä encoder —Å –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–º MLP decoder:

Encoder: –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
Decoder: MLP –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

**Mask2Former** —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏ –ø–∞–Ω–æ—Ä–∞–º–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é:

1. Transformer decoder —Å –æ–±—É—á–∞–µ–º—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤
2. Masked attention –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
3. –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

## –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

### –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é –º–æ–¥–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.

**Few-shot —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:

Support Set: S = {(x‚ÇÅ, y‚ÇÅ), (x‚ÇÇ, y‚ÇÇ), ..., (x‚Çñ, y‚Çñ)}
Query Image: x·µ©
Task: –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å y·µ© –¥–ª—è x·µ©

**Prototypical Networks** –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤—ã—á–∏—Å–ª—è—é—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã –∫–ª–∞—Å—Å–æ–≤:

c_k = 1/|S_k| ‚àë_{(x,y)‚ààS_k} f_Œ∏(x, y)

–≥–¥–µ f_Œ∏ - feature extractor, S_k - support set –¥–ª—è –∫–ª–∞—Å—Å–∞ k.

**Meta-learning –ø–æ–¥—Ö–æ–¥—ã** –æ–±—É—á–∞—é—Ç –º–æ–¥–µ–ª–∏ –±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º:

Œ∏* = Œ∏ - Œ±‚àá_Œ∏ L_task(f_Œ∏)

–≥–¥–µ Œ± - learning rate, L_task - –ø–æ—Ç–µ—Ä—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ.

**Domain Adaptation** –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏, –æ–±—É—á–µ–Ω–Ω—ã–µ –Ω–∞ –æ–¥–Ω–æ–º –¥–æ–º–µ–Ω–µ, –∫ –¥—Ä—É–≥–æ–º—É –¥–æ–º–µ–Ω—É:

L_total = L_seg + ŒªL_adv

–≥–¥–µ L_seg - –ø–æ—Ç–µ—Ä—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, L_adv - adversarial –ø–æ—Ç–µ—Ä—è –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤.

### –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –∞–Ω–æ–º–∞–ª–∏–π

–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–æ–±—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –∏—Ö —Ä–µ–¥–∫–æ—Å—Ç–∏.

**–ê–Ω–æ–º–∞–ª—å–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª–∏, –æ–±—É—á–µ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

Reconstruction Error: E(x) = ||x - G(E(x))||¬≤

–≥–¥–µ E - encoder, G - decoder –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞.

**Variational Autoencoders (VAE)** –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π:

L_VAE = L_reconstruction + Œ≤KL(q(z|x)||p(z))

–ê–Ω–æ–º–∞–ª–∏–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ –æ–±–ª–∞—Å—Ç–∏ —Å –≤—ã—Å–æ–∫–æ–π –æ—à–∏–±–∫–æ–π —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

**Adversarial Training** –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤:

L_G = E[log(1 - D(G(z)))] + ŒªL_seg(G(z), y_fake)

–≥–¥–µ G - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ—Ñ–µ–∫—Ç–æ–≤, D - –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä, L_seg - –ø–æ—Ç–µ—Ä—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.

### –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.

**RGB-D —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ü–≤–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–ª—É–±–∏–Ω—ã:

Feature Fusion: f_fused = Concat([f_RGB, f_Depth])

**Thermal-RGB —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤, –Ω–µ–≤–∏–¥–∏–º—ã—Ö –≤ –≤–∏–¥–∏–º–æ–º —Å–ø–µ–∫—Ç—Ä–µ:

Cross-modal Attention: A = softmax(Q_RGB K_Thermal^T / ‚àöd)

**Hyperspectral —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

Spectral-Spatial Features: f = CNN_spatial(CNN_spectral(x))

### –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ

–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ç—Ä–µ–±—É–µ—Ç —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏.

**3D CNN** –¥–ª—è –≤–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:

Conv3D: y[i,j,t] = ‚àë‚Çò ‚àë‚Çô ‚àë‚Çú' x[i+m, j+n, t+t'] ¬∑ w[m,n,t']

**Optical Flow** –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è:

Flow Warping: x_{t+1}^{warped} = Warp(x_t, flow_{t‚Üít+1})

**Recurrent Networks** –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è:

h_t = LSTM(f_t, h_{t-1})

–≥–¥–µ f_t - –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞–¥—Ä–∞ t.

## –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

–¢–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –≥–¥–µ –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.

### –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–∏–∫—Å–µ–ª–µ–π

**Pixel Accuracy** –∏–∑–º–µ—Ä—è–µ—Ç –¥–æ–ª—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π:

PA = ‚àë·µ¢ n·µ¢·µ¢ / ‚àë·µ¢ ‚àë‚±º n·µ¢‚±º

–≥–¥–µ n·µ¢‚±º - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –∫–ª–∞—Å—Å–∞ i, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∫–ª–∞—Å—Å j.

**Mean Pixel Accuracy** —É—Å—Ä–µ–¥–Ω—è–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å–∞–º:

MPA = 1/k ‚àë·µ¢ n·µ¢·µ¢ / ‚àë‚±º n·µ¢‚±º

**Intersection over Union (IoU)** –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞:

IoU_i = n·µ¢·µ¢ / (‚àë‚±º n·µ¢‚±º + ‚àë‚±º n‚±º·µ¢ - n·µ¢·µ¢)

**Mean IoU (mIoU)** —É—Å—Ä–µ–¥–Ω—è–µ—Ç IoU –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º:

mIoU = 1/k ‚àë·µ¢ IoU_i

### –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–±—ä–µ–∫—Ç–æ–≤

**Dice Coefficient** –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π:

Dice = 2|A ‚à© B| / (|A| + |B|)

**Hausdorff Distance** –∏–∑–º–µ—Ä—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏:

H(A,B) = max{sup_{a‚ààA} inf_{b‚ààB} d(a,b), sup_{b‚ààB} inf_{a‚ààA} d(a,b)}

**Average Surface Distance** –∏–∑–º–µ—Ä—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º–∏:

ASD = 1/(|‚àÇA| + |‚àÇB|) [‚àë_{a‚àà‚àÇA} d(a,‚àÇB) + ‚àë_{b‚àà‚àÇB} d(b,‚àÇA)]

### –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏

**Boundary F1-score** —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ –≥—Ä–∞–Ω–∏—Ü:

BF1 = 2 ¬∑ Precision_boundary ¬∑ Recall_boundary / (Precision_boundary + Recall_boundary)

**Trimap Accuracy** –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:

Trimap_Acc = |correct_pixels_in_unknown_region| / |unknown_region|

**Temporal Consistency** –¥–ª—è –≤–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:

TC = 1 - 1/T ‚àë‚Çú |M_t ‚äï Warp(M_{t-1}, flow_{t-1‚Üít})| / |M_t ‚à™ Warp(M_{t-1}, flow_{t-1‚Üít})|

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

–£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ç—Ä–µ–±—É–µ—Ç —É—á–µ—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.

### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏

**–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ç–∫–∏:

- –ü–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –æ–±—ä–µ–∫—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (CVAT, Labelme, Supervisely)
- –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–Ω–Ω–æ—Ç–∞—Ç–æ—Ä–∞–º–∏
- –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤

**–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö** –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–∞—Å–æ–∫:

```python
def augment_segmentation(image, mask):
    # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    if random.random() > 0.5:
        angle = random.uniform(-15, 15)
        image = rotate(image, angle)
        mask = rotate(mask, angle, order=0)  # Nearest neighbor –¥–ª—è –º–∞—Å–æ–∫
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if random.random() > 0.5:
        image = adjust_brightness(image, random.uniform(0.8, 1.2))
    
    return image, mask
```

**–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ** —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏:

- 3D —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –º–∞—Å–æ–∫
- –î–æ–º–µ–Ω–Ω–∞—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏–∏
- –ö–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ–Ω—ã
- –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –ø–æ–≥–æ–¥—ã

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏** –¥–ª—è real-time —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:

- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö backbone —Å–µ—Ç–µ–π (MobileNet, EfficientNet)
- –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
- –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ (early exit) –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
- –ö–∞—Å–∫–∞–¥–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è

**–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**:

- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- Patch-based –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- Sliding window —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç –≥—Ä—É–±–æ–≥–æ –∫ —Ç–æ—á–Ω–æ–º—É

**–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è** –¥–ª—è –≤–∏–¥–µ–æ:

- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–æ–ø–∞–≥–∞—Ü–∏–∏ –º–∞—Å–æ–∫
- Keyframe-based —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
- –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤
- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

### –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ—Ñ–∏–Ω–µ–º–µ–Ω—Ç

**–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏** –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Å–æ–∫:

- –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞: Opening = Dilation(Erosion(A))
- –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥—ã—Ä: Closing = Erosion(Dilation(A))
- –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü

**–£—Å–ª–æ–≤–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ª—è (CRF)** –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü:

E(x) = ‚àë·µ¢ œà·µ§(x·µ¢) + ‚àë·µ¢<‚±º œà‚Çö(x·µ¢, x‚±º)

–≥–¥–µ œà·µ§ - —É–Ω–∞—Ä–Ω—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã, œà‚Çö - –ø–∞—Ä–Ω—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã.

**Graph Cut** –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:

min E(f) = ‚àë‚Çö D‚Çö(f‚Çö) + ‚àë_{p,q‚ààN} V‚Çö,·µ©(f‚Çö, f·µ©)

–≥–¥–µ D‚Çö - data term, V‚Çö,·µ© - smoothness term.

**Active Contours** –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü:

‚àÇC/‚àÇt = (Œ∫ - ŒΩ)N - ‚àág¬∑N

–≥–¥–µ Œ∫ - –∫—Ä–∏–≤–∏–∑–Ω–∞, ŒΩ - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏, N - –Ω–æ—Ä–º–∞–ª—å, g - edge function.

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

**–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä** –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π:

- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –≥–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞, –¥–∏—Å—Ç–æ—Ä—Å–∏—è
- –í–Ω–µ—à–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
- –°—Ç–µ—Ä–µ–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–ª—è 3D –∏–∑–º–µ—Ä–µ–Ω–∏–π
- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–∫–∞–º–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º

**–°–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç** –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:

- –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Üí –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
- –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å CAD –º–æ–¥–µ–ª—è–º–∏
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏

**–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞** –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:

- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
- –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MES/ERP —Å–∏—Å—Ç–µ–º–∞–º–∏**:

- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
- –¢—Ä–∞—Å—Å–∏—Ä—É–µ–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö. –≠–≤–æ–ª—é—Ü–∏—è –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã–ª–∞ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –ø–∏–∫—Å–µ–ª—å–Ω–æ-—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–∞–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ç–∞–∫ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Ç–∏–ø —Å–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏, —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å–ª–æ–≤–∏–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∫–ª—é—á–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä —Å attention –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞–º–∏, —Ä–∞–∑–≤–∏—Ç–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –¥–µ—Ñ–µ–∫—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, —Å–ø–æ—Å–æ–±–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è —É—Å–ª–æ–≤–∏—è—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–æ–π, –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤–µ—â–µ–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.

–£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –Ω–∞–¥–µ–∂–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –≤—ã—Å–æ–∫—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—è –ø–æ–≤—ã—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
`
  },

  28: {
    title: "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
    duration: 160,
    type: "theory",
    module: 4,
    content: `
# –£—Ä–æ–∫ 28: –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é.

–°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è —Å—Ç—Ä–æ–≥–∏–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏, –≥–¥–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ñ–ª–∞–π–Ω —Å–∏—Å—Ç–µ–º, –≥–¥–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é, —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á: –æ—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö –¥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–≤, –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –¥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ö–∞–∂–¥–æ–µ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π –ø—Ä–µ–¥—ä—è–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Å–±–æ—è–º.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã: –æ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. –£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

–≠–≤–æ–ª—é—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–∞ –ø—É—Ç—å –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DSP –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö, –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö GPU –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AI-—É—Å–∫–æ—Ä–∏—Ç–µ–ª—è—Ö. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ –∏ —Ç–µ–∫—É—â–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è –ø–æ–º–æ–≥–∞–µ—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

–°–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å—é –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏.

**–ñ–µ—Å—Ç–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (Hard Real-time)** —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏, –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º. –í –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö —ç—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä—É—é—Ç—Å—è –∫–∞–∫:

‚àÄ task_i: completion_time_i ‚â§ deadline_i

–≥–¥–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ.

**–ú—è–≥–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (Soft Real-time)** –¥–æ–ø—É—Å–∫–∞—é—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π, –Ω–æ —Å –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≥–¥–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —Å–Ω–∏–∂–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Å–±–æ—è–º.

**–§–∏—Ä–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (Firm Real-time)** –∑–∞–Ω–∏–º–∞—é—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ä—è—é—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞, –Ω–æ –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º. –ü—Ä–∏–º–µ—Ä–æ–º –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–µ, –≥–¥–µ –ø—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ —Å–Ω–∏–∂–∞–µ—Ç –æ–±—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞.

–ö–ª—é—á–µ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∫–ª—é—á–∞—é—Ç:

**–õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (Latency)** - –≤—Ä–µ–º—è –æ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –î–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞:

Total_Latency = T_capture + T_preprocessing + T_inference + T_postprocessing + T_output

**–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (Throughput)** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∫–∞–¥—Ä–æ–≤ –∏–ª–∏ –∑–∞–¥–∞—á –≤ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏. –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞:

Throughput = N_processed_frames / T_total

**–î–∂–∏—Ç—Ç–µ—Ä (Jitter)** - –≤–∞—Ä–∏–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ù–∏–∑–∫–∏–π –¥–∂–∏—Ç—Ç–µ—Ä –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:

Jitter = max(T_processing) - min(T_processing)

**–î–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º** - —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á. –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

**–ü–∞–π–ø–ª–∞–π–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (Pipeline Processing)** —Ä–∞–∑–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç–∏—á—å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–π –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:

Stage 1: Image Capture ‚Üí Stage 2: Preprocessing ‚Üí Stage 3: Feature Extraction ‚Üí Stage 4: Classification ‚Üí Stage 5: Decision Making

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –º–µ–¥–ª–µ–Ω–Ω—ã–º —ç—Ç–∞–ø–æ–º (bottleneck):

Pipeline_Throughput = 1 / max(T_stage_i)

**–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á. –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö:

- **–ü–∏–∫—Å–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º**: –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- **–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º**: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
- **–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º**: –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∑–∞–∫–æ–Ω–æ–º –ê–º–¥–∞–ª–∞:

Speedup = 1 / (S + (1-S)/N)

–≥–¥–µ S - –¥–æ–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞, N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤.

**–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏, —Å–ª–æ–∂–Ω—ã–µ - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:

```
if (simple_detector(image) == "simple_case"):
    result = fast_algorithm(image)
else:
    result = complex_algorithm(image)
```

**–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–∞—á–µ—Å—Ç–≤—É:

Processing_Quality = f(Available_Time, System_Load, Quality_Requirements)

## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

–°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö: –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–æ –∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

### –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

**–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã** –∑–∞–º–µ–Ω—è—é—Ç —Ç–æ—á–Ω—ã–µ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã–º–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è–º–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –ø–æ—Ç–µ—Ä–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏. –ü—Ä–∏–º–µ—Ä—ã –≤–∫–ª—é—á–∞—é—Ç:

–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ –≤–º–µ—Å—Ç–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –§—É—Ä—å–µ:
- DFT: O(N¬≤) –æ–ø–µ—Ä–∞—Ü–∏–π
- FFT: O(N log N) –æ–ø–µ—Ä–∞—Ü–∏–π

–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π:
- –¢–æ—á–Ω–æ–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: d = ‚àö(Œîx¬≤ + Œîy¬≤)
- –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: d ‚âà |Œîx| + |Œîy|
- –ß–µ–±—ã—à–µ–≤—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: d ‚âà max(|Œîx|, |Œîy|)

**–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã** –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞:

–ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
- –£—Ä–æ–≤–µ–Ω—å 0: –ø–æ–ª–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
- –£—Ä–æ–≤–µ–Ω—å k: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–æ –≤ 2^k —Ä–∞–∑

–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∏–∑–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö.

**–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å —Ä–∞–Ω–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º (Early Exit)** –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:

```python
def early_exit_classifier(image, confidence_threshold=0.95):
    for layer_depth in [shallow, medium, deep]:
        prediction, confidence = partial_inference(image, layer_depth)
        if confidence > confidence_threshold:
            return prediction
    return full_inference(image)
```

**–ö–∞—Å–∫–∞–¥–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã** –ø—Ä–∏–º–µ–Ω—è—é—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤, –æ—Ç–±—Ä–∞—Å—ã–≤–∞—è –æ—á–µ–≤–∏–¥–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —ç—Ç–∞–ø–∞—Ö:

Cascade_Result = Stage1(x) ‚àß Stage2(x) ‚àß ... ‚àß StageN(x)

–≥–¥–µ –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–æ–ª—é –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –ø–æ–ª–∞–≥–∞—é—Ç—Å—è –Ω–∞ –≥–ª—É–±–æ–∫–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤.

**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏** –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä:

**Separable Convolutions** —Ä–∞–∑–¥–µ–ª—è—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–≤–µ—Ä—Ç–∫—É –Ω–∞ –¥–µ–øthwise –∏ pointwise –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:

Standard Convolution: O(H √ó W √ó C_in √ó C_out √ó K¬≤)
Separable Convolution: O(H √ó W √ó C_in √ó K¬≤ + H √ó W √ó C_in √ó C_out)

Reduction Factor = (C_in √ó K¬≤ + C_in √ó C_out) / (C_in √ó C_out √ó K¬≤) ‚âà 1/C_out + 1/K¬≤

**Inverted Residuals** (MobileNetV2) –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É–∑–∫–∏–µ –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–ª–æ—è—Ö:

```
Input (narrow) ‚Üí Expand ‚Üí Depthwise Conv ‚Üí Project ‚Üí Output (narrow)
```

**Squeeze-and-Excitation –±–ª–æ–∫–∏** –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –∫–∞–ª–∏–±—Ä—É—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤:

SE(x) = x ‚äô œÉ(W‚ÇÇ ¬∑ ReLU(W‚ÇÅ ¬∑ GAP(x)))

–≥–¥–µ GAP - Global Average Pooling, ‚äô - –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ.

**Neural Architecture Search (NAS)** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:

Objective = Accuracy(Architecture) - Œª √ó Latency(Architecture)

**–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è** —Å–Ω–∏–∂–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:

**Post-training Quantization**:
- FP32 ‚Üí INT8: —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤ 4 —Ä–∞–∑–∞
- –ü–æ—Ç–µ—Ä—è —Ç–æ—á–Ω–æ—Å—Ç–∏: –æ–±—ã—á–Ω–æ < 1%

**Quantization-Aware Training**:
- –°–∏–º—É–ª—è—Ü–∏—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
- Fake quantization: x_fake = round(x/scale) √ó scale

**Pruning** —É–¥–∞–ª—è–µ—Ç –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –≤–µ—Å–∞ –∏–ª–∏ –Ω–µ–π—Ä–æ–Ω—ã:

**Magnitude-based Pruning**:
–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ —Å |w| < threshold

**Structured Pruning**:
–£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ —Å–ª–æ–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –≤–∞–∂–Ω–æ—Å—Ç–∏

**Knowledge Distillation** –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–Ω–∞–Ω–∏—è –æ—Ç –±–æ–ª—å—à–æ–π –º–æ–¥–µ–ª–∏ (teacher) –∫ –º–∞–ª–µ–Ω—å–∫–æ–π (student):

L_distillation = Œ± √ó L_CE(y_student, y_true) + (1-Œ±) √ó L_KL(y_student, y_teacher)

–≥–¥–µ L_CE - cross-entropy loss, L_KL - Kullback-Leibler divergence.

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

**–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SIMD (Single Instruction, Multiple Data) –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:

```cpp
// –°–∫–∞–ª—è—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è
for (int i = 0; i < size; i++) {
    result[i] = a[i] + b[i];
}

// –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (AVX)
for (int i = 0; i < size; i += 8) {
    __m256 va = _mm256_load_ps(&a[i]);
    __m256 vb = _mm256_load_ps(&b[i]);
    __m256 vr = _mm256_add_ps(va, vb);
    _mm256_store_ps(&result[i], vr);
}
```

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–º—è—Ç–∏** –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç cache misses –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–∞–º—è—Ç–∏:

**Spatial Locality**: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–∏–∫—Å–µ–ª–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
**Temporal Locality**: –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ
**Cache-friendly –∞–ª–≥–æ—Ä–∏—Ç–º—ã**: –±–ª–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

**Loop Unrolling** —É–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–∞–º–∏:

```cpp
// –û–±—ã—á–Ω—ã–π —Ü–∏–∫–ª
for (int i = 0; i < n; i++) {
    process(data[i]);
}

// –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ü–∏–∫–ª
for (int i = 0; i < n; i += 4) {
    process(data[i]);
    process(data[i+1]);
    process(data[i+2]);
    process(data[i+3]);
}
```

**–ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏—è (Precomputation)** –≤—ã–Ω–æ—Å—è—Ç –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏:

```cpp
// –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ lookup —Ç–∞–±–ª–∏—Ü
float sin_table[360];
for (int i = 0; i < 360; i++) {
    sin_table[i] = sin(i * PI / 180);
}

// –ë—ã—Å—Ç—Ä–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–Ω—É—Å–∞
float fast_sin(int degrees) {
    return sin_table[degrees % 360];
}
```

## –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

### –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã (CPU)

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ CPU –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:

**SIMD –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏** –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:
- SSE (Streaming SIMD Extensions): 128-–±–∏—Ç–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
- AVX (Advanced Vector Extensions): 256-–±–∏—Ç–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã  
- AVX-512: 512-–±–∏—Ç–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã

–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π:
- SSE: 4√ó –¥–ª—è float32
- AVX: 8√ó –¥–ª—è float32
- AVX-512: 16√ó –¥–ª—è float32

**–ú–Ω–æ–≥–æ—è–¥–µ—Ä–Ω–æ—Å—Ç—å** –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ —á–∞—Å—Ç–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

Parallel Efficiency = Speedup / Number_of_Cores

**–ö—ç—à-–∏–µ—Ä–∞—Ä—Ö–∏—è** –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º:
- L1 Cache: ~1-4 —Ü–∏–∫–ª–æ–≤ –¥–æ—Å—Ç—É–ø–∞
- L2 Cache: ~10-20 —Ü–∏–∫–ª–æ–≤ –¥–æ—Å—Ç—É–ø–∞  
- L3 Cache: ~40-75 —Ü–∏–∫–ª–æ–≤ –¥–æ—Å—Ç—É–ø–∞
- RAM: ~200-300 —Ü–∏–∫–ª–æ–≤ –¥–æ—Å—Ç—É–ø–∞

### –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã (GPU)

GPU –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:

**CUDA –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** (NVIDIA):
- Streaming Multiprocessors (SM): —Å–æ–¥–µ—Ä–∂–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ CUDA cores
- Warp: –≥—Ä—É–ø–ø–∞ –∏–∑ 32 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
- Memory Hierarchy: Global, Shared, Constant, Texture memory

–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:
Peak_Performance = Number_of_Cores √ó Clock_Frequency √ó Operations_per_Clock

**Tensor Cores** (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ NVIDIA GPU) —É—Å–∫–æ—Ä—è—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è:
- Mixed Precision: FP16 –≤—Ö–æ–¥—ã, FP32 –∞–∫–∫—É–º—É–ª—è—Ü–∏—è
- –£—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ 10√ó –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö workloads

**OpenCL** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ GPU —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.

### –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏

**FPGA (Field-Programmable Gate Arrays)** –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –ù–∏–∑–∫–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (–º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã)
- –í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã

–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
- –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–∏–±–∫–æ—Å—Ç—å

**AI-—É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π:

**Google TPU (Tensor Processing Unit)**:
- Systolic Array –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è inference
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è TensorFlow

**Intel Neural Compute Stick**:
- USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è edge inference
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OpenVINO toolkit
- –ù–∏–∑–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ

**NVIDIA Jetson** —Å–µ—Ä–∏—è:
- ARM CPU + NVIDIA GPU –≤ –æ–¥–Ω–æ–º –º–æ–¥—É–ª–µ
- CUDA –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è edge computing
- –†–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

### –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Å–∏—Å—Ç–µ–º—ã

**ARM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã** –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö:

**ARM Cortex-A —Å–µ—Ä–∏—è**:
- NEON SIMD –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –®–∏—Ä–æ–∫–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞

**ARM Mali GPU**:
- OpenCL –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ARM CPU
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö workloads

**DSP (Digital Signal Processors)**:
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
- –ù–∏–∑–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
- –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

## –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫.

### –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è

**OpenCV** –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π:

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ OpenCV:
- Intel IPP (Integrated Performance Primitives) –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
- OpenCL –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è GPU —É—Å–∫–æ—Ä–µ–Ω–∏—è
- TBB (Threading Building Blocks) –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
- SIMD –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä

–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:
```cpp
// –ë—ã—Å—Ç—Ä–∞—è —Å–≤–µ—Ä—Ç–∫–∞ —Å separable —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
cv::sepFilter2D(src, dst, ddepth, kernelX, kernelY);

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
cv::resize(src, dst, size, 0, 0, cv::INTER_LINEAR);

// –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
cv::cvtColor(src, dst, cv::COLOR_BGR2GRAY);
```

**Intel OpenVINO** –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç inference –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π:

Model Optimizer: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
Inference Engine: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ Intel hardware
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö precision: FP32, FP16, INT8

**Halcon** (MVTec) - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:
- –í—ã—Å–æ–∫–æ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏

### –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

**TensorRT** (NVIDIA) –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è inference:

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
- Layer fusion: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- Precision calibration: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä precision
- Kernel auto-tuning: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ hardware

```python
import tensorrt as trt

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ engine
builder = trt.Builder(logger)
config = builder.create_builder_config()
config.max_workspace_size = 1 << 30  # 1GB
config.set_flag(trt.BuilderFlag.FP16)  # –í–∫–ª—é—á–µ–Ω–∏–µ FP16

engine = builder.build_cuda_engine(network, config)
```

**ONNX Runtime** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π inference:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö hardware backends
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è

**TensorFlow Lite** –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:
- –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π

### –°–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

**Real-Time Operating Systems (RTOS)** –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:

**QNX Neutrino**:
- –ú–∏–∫—Ä–æ—è–¥–µ—Ä–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
- POSIX —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

**VxWorks**:
- –®–∏—Ä–æ–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏
- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º
- –†–∞–∑–≤–∏—Ç—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏

**RT-Linux**:
- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Linux –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
- Dual-kernel –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- –û—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥

**–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∑–∞–¥–∞—á** –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:

**Rate Monotonic Scheduling**:
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –µ–µ –ø–µ—Ä–∏–æ–¥—É

**Earliest Deadline First (EDF)**:
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤

–£—Å–ª–æ–≤–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ—Å—Ç–∏ –¥–ª—è EDF:
‚àë(Ci/Ti) ‚â§ 1

–≥–¥–µ Ci - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ i, Ti - –ø–µ—Ä–∏–æ–¥ –∑–∞–¥–∞—á–∏ i.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ –∫–µ–π—Å—ã

–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

### –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞

**–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç**:

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–∫–æ—Ä–æ—Å—Ç—å: 1000+ –ø–ª–∞—Ç –≤ —á–∞—Å
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: —Å—É–±–ø–∏–∫—Å–µ–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
- –¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Å–º–µ—â–µ–Ω–∏—è, –¥–µ—Ñ–µ–∫—Ç—ã –ø–∞–π–∫–∏

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:
```
–õ–∏–Ω–µ–π–Ω–∞—è –∫–∞–º–µ—Ä–∞ (12k –ø–∏–∫—Å–µ–ª–µ–π) ‚Üí FPGA –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí 
GPU –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ ‚Üí CPU –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
```

–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥ + –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- Template matching —Å —Å—É–±–ø–∏–∫—Å–µ–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
- –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: <100 –º—Å –Ω–∞ –ø–ª–∞—Ç—É
- –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: >99.5%
- –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: <0.1%

### –†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ

**–°–∏—Å—Ç–µ–º–∞ bin picking –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏**:

–ó–∞–¥–∞—á–∞: –∑–∞—Ö–≤–∞—Ç —Å–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –í—Ä–µ–º—è —Ü–∏–∫–ª–∞: <5 —Å–µ–∫—É–Ω–¥
- –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ¬±0.5 –º–º
- –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–º–∏—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏

–†–µ—à–µ–Ω–∏–µ:
```
–°—Ç–µ—Ä–µ–æ–∫–∞–º–µ—Ä—ã ‚Üí 3D —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ ‚Üí 
–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–æ–º
```

–ö–ª—é—á–µ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:
- Real-time —Å—Ç–µ—Ä–µ–æ–∑—Ä–µ–Ω–∏–µ —Å SGM (Semi-Global Matching)
- 3D —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PCL (Point Cloud Library)
- Collision-free path planning

–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
- 3D —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: 30 FPS
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞: <1 —Å–µ–∫—É–Ω–¥–∞
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞: >95%

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

**–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ç–æ—Ä–∂–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ**:

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª—é–¥–µ–π –≤ –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–æ–Ω–∞—Ö
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
- –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
```
IP-–∫–∞–º–µ—Ä—ã (64 —à—Ç.) ‚Üí Edge computing —É–∑–ª—ã ‚Üí 
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä ‚Üí –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
```

–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:
- Edge: –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (YOLOv5)
- Central: —Ç—Ä–µ–∫–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
- Cloud: –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: <200 –º—Å
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: 10 –∫–º¬≤
- –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: <1 –≤ –¥–µ–Ω—å

### –î–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

**AR —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ç—É—Ä–±–∏–Ω**:

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ù–∞–ª–æ–∂–µ–Ω–∏–µ 3D –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –£–¥–∞–ª–µ–Ω–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã:
- –¢—Ä–µ–∫–∏–Ω–≥ –≤ —É—Å–ª–æ–≤–∏—è—Ö –≤–∏–±—Ä–∞—Ü–∏–π
- –†–∞–±–æ—Ç–∞ –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
- –¢–æ—á–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ

–†–µ—à–µ–Ω–∏–µ:
```
RGB-D –∫–∞–º–µ—Ä–∞ ‚Üí SLAM ‚Üí Object recognition ‚Üí 
3D registration ‚Üí AR rendering
```

–ê–ª–≥–æ—Ä–∏—Ç–º—ã:
- Visual-Inertial SLAM –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
- CNN –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- ICP (Iterative Closest Point) –¥–ª—è —Ç–æ—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è: <5 –º–º –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 2 –º
- –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 60 FPS
- –í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: <30 —Å–µ–∫—É–Ω–¥

## –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∞

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

### –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

**–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**:

Latency –∏–∑–º–µ—Ä–µ–Ω–∏–µ:
```cpp
auto start = std::chrono::high_resolution_clock::now();
process_frame(image);
auto end = std::chrono::high_resolution_clock::now();
auto latency = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
```

Throughput –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ:
```cpp
int frames_processed = 0;
auto start_time = std::chrono::steady_clock::now();

while (running) {
    process_frame(get_next_frame());
    frames_processed++;
    
    auto current_time = std::chrono::steady_clock::now();
    auto elapsed = std::chrono::duration_cast<std::chrono::seconds>(current_time - start_time);
    
    if (elapsed.count() >= 1) {
        double fps = frames_processed / elapsed.count();
        frames_processed = 0;
        start_time = current_time;
    }
}
```

**–†–µ—Å—É—Ä—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**:

CPU utilization:
```bash
# Linux
top -p <pid>
# –ò–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
cat /proc/<pid>/stat
```

Memory usage:
```cpp
#include <sys/resource.h>

struct rusage usage;
getrusage(RUSAGE_SELF, &usage);
long memory_kb = usage.ru_maxrss;
```

GPU utilization (NVIDIA):
```bash
nvidia-smi --query-gpu=utilization.gpu,memory.used --format=csv
```

### –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

**CPU –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**:

Intel VTune Profiler:
- Hotspot analysis
- Memory access patterns
- Vectorization efficiency

```bash
vtune -collect hotspots -app-args ./my_vision_app
```

GNU gprof:
```bash
gcc -pg -o my_app my_app.c
./my_app
gprof my_app gmon.out > analysis.txt
```

**GPU –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**:

NVIDIA Nsight Systems:
```bash
nsys profile --trace=cuda,nvtx ./my_cuda_app
```

CUDA Events –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è:
```cpp
cudaEvent_t start, stop;
cudaEventCreate(&start);
cudaEventCreate(&stop);

cudaEventRecord(start);
kernel<<<blocks, threads>>>(data);
cudaEventRecord(stop);

cudaEventSynchronize(stop);
float milliseconds = 0;
cudaEventElapsedTime(&milliseconds, start, stop);
```

**Memory –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**:

Valgrind –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏:
```bash
valgrind --tool=memcheck --leak-check=full ./my_app
```

AddressSanitizer –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–º—è—Ç–∏:
```bash
gcc -fsanitize=address -g -o my_app my_app.c
```

### –û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

**–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ**:

–ó–∞–ø–∏—Å—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
```cpp
class FrameRecorder {
    std::ofstream file;
public:
    void record_frame(const cv::Mat& frame, uint64_t timestamp) {
        file.write(reinterpret_cast<const char*>(frame.data), frame.total() * frame.elemSize());
        file.write(reinterpret_cast<const char*>(&timestamp), sizeof(timestamp));
    }
};
```

–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
```cpp
class FramePlayer {
    std::ifstream file;
public:
    bool get_next_frame(cv::Mat& frame, uint64_t& timestamp) {
        file.read(reinterpret_cast<char*>(frame.data), frame.total() * frame.elemSize());
        file.read(reinterpret_cast<char*>(&timestamp), sizeof(timestamp));
        return file.good();
    }
};
```

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**:

–°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º overhead:
```cpp
class LowOverheadProfiler {
    std::atomic<uint64_t> total_time{0};
    std::atomic<uint32_t> call_count{0};
    
public:
    void add_measurement(uint64_t time_us) {
        total_time.fetch_add(time_us, std::memory_order_relaxed);
        call_count.fetch_add(1, std::memory_order_relaxed);
    }
    
    double get_average_time() const {
        uint32_t count = call_count.load(std::memory_order_relaxed);
        if (count == 0) return 0.0;
        return static_cast<double>(total_time.load(std::memory_order_relaxed)) / count;
    }
};
```

**Stress testing**:

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–µ–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
```cpp
class StressTestGenerator {
    std::vector<cv::Mat> test_images;
    std::random_device rd;
    std::mt19937 gen{rd()};
    
public:
    cv::Mat generate_challenging_frame() {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        // –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è worst-case —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        auto& base_image = test_images[gen() % test_images.size()];
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è, etc.
        cv::Mat noisy_image;
        cv::randn(noisy_image, 0, 30);
        return base_image + noisy_image;
    }
};
```

## –ë—É–¥—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è

–†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

### –ù–æ–≤—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π

**Vision Transformers –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏**:

–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
- Mobile Vision Transformer (MobileViT)
- Efficient Vision Transformer (EfficientViT)
- Pyramid Vision Transformer (PVT)

–ö–ª—é—á–µ–≤—ã–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏:
- –õ–æ–∫–∞–ª—å–Ω—ã–µ attention –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- –ì–∏–±—Ä–∏–¥–Ω—ã–µ CNN-Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

**Neural Architecture Search (NAS) –¥–ª—è edge computing**:

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:
- –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
- –≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
- –¢–æ—á–Ω–æ—Å—Ç—å
- –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏

**Continual Learning** –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º:
- –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ –∑–∞–±—ã–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞–Ω–∏–π
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–æ–≤—ã–º —Ç–∏–ø–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏

### –ù–æ–≤—ã–µ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

**Neuromorphic Computing**:

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
- –°–æ–±—ã—Ç–∏–π–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- –°–≤–µ—Ä—Ö–Ω–∏–∑–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
- –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ä–æ–±–æ—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º

**Quantum Computing** –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:

–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
- –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö

**In-Memory Computing**:

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ bottleneck –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏

**Edge-Cloud –≥–∏–±—Ä–∏–¥–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã**:

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
- –û–±–ª–∞—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏

**5G –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ**:

–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£–ª—å—Ç—Ä–∞–Ω–∏–∑–∫–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (1 –º—Å)
- –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
- –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
- –£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞–º–∏
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –û–±–ª–∞—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

**Digital Twins** —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –∑—Ä–µ–Ω–∏–µ–º:

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
- –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–∞–º–µ—Ä
- –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∏ –¥–∏–Ω–∞–º–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö—Å—è –æ–±–ª–∞—Å—Ç–µ–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö. –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤ –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é, —Å–∫–æ—Ä–æ—Å—Ç—å—é, —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é, –∞ —Ç–∞–∫–∂–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: –æ—Ç —Ç–µ–æ—Ä–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Å—Ç–µ–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤. –≠–≤–æ–ª—é—Ü–∏—è –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –Ω–µ–π—Ä–æ–Ω–Ω—ã–º —Å–µ—Ç—è–º –æ—Ç–∫—Ä—ã–ª–∞ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–æ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–ª–∞ –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∫–ª—é—á–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π, —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π, —É–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ–±–ª–∞—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è —É—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö, —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, —Å–ø–æ—Å–æ–±–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —É—Å–ª–æ–≤–∏—è—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ 5G, edge computing –∏ neuromorphic computing –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.

–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: –æ—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–ª–∞–¥–∫–∏ —Ç–∞–∫–∏—Ö —Å–∏—Å—Ç–µ–º –ø–æ–∑–≤–æ–ª—è–µ—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –Ω–æ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—è –ø–æ–≤—ã—à–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

–£—Å–ø–µ—à–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞–¥–µ–∂–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –¢–æ–ª—å–∫–æ —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∂–µ—Å—Ç–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
`
  },

  29: {
    title: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏",
    duration: 180,
    type: "practice",
    module: 4,
    content: `
# –£—Ä–æ–∫ 29: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞. –£—Å–ø–µ—à–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –Ω–æ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–≤—è–∑–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è —Å–ª–æ–∂–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—é—â–µ–π —É—Ä–æ–≤–Ω–∏ –æ—Ç –ø–æ–ª–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —ç—Ç—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –Ω–∞–¥–µ–∂–Ω—ã–π –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–∞. –û–¥–Ω–∞–∫–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥: –∂–µ—Å—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ —É—Å–ª–æ–≤–∏—è—Ö —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –ø–æ–º–µ—Ö –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º. –≠—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä—ã —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤.

–≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Industry 4.0 —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤–µ—â–µ–π (IIoT), edge computing –∏ –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –ø–æ–∑–≤–æ–ª—è—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–∞–∫ –ø–∏—Ä–∞–º–∏–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –º–æ–¥–µ–ª—å Purdue.

**–£—Ä–æ–≤–µ–Ω—å 0: –ü–æ–ª–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞** –≤–∫–ª—é—á–∞–µ—Ç –¥–∞—Ç—á–∏–∫–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∏ –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ù–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏, —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

**–£—Ä–æ–≤–µ–Ω—å 1: –°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏** –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (–ü–õ–ö), —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (DCS) –∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (SIS). –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä—è–º–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∏ –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã.

**–£—Ä–æ–≤–µ–Ω—å 2: –°–∏—Å—Ç–µ–º—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (SCADA)** –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏. –°–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

**–£—Ä–æ–≤–µ–Ω—å 3: –°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º (MES)** –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —É–ø—Ä–∞–≤–ª—è—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

**–£—Ä–æ–≤–µ–Ω—å 4: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (ERP)** —É–ø—Ä–∞–≤–ª—è—é—Ç —Ä–µ—Å—É—Ä—Å–∞–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏. –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ.

### –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–≤—è–∑–∏ –∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö.

**Modbus** –æ—Å—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π –ø—Ä–æ—Å—Ç–æ—Ç–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏. –ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—ã –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö:

Modbus RTU –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Å–≤—è–∑—å RS-485:
- –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏: –¥–æ 115.2 –∫–±–∏—Ç/—Å
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: –¥–æ 1200 –º–µ—Ç—Ä–æ–≤
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: –¥–æ 247 –Ω–∞ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏

Modbus TCP/IP –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Ethernet —Å–µ—Ç–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π TCP/IP —Å—Ç–µ–∫
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç

–î–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è Modbus –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ –≤–∏–¥–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤) –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤, –ø–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤).

**OPC (OLE for Process Control)** –∏ –µ–≥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è OPC UA (Unified Architecture) –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:

OPC UA –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
- –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –ú–µ—Ö–∞–Ω–∏–∑–º—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ OPC UA –¥–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:
- –ü–µ—Ä–µ–¥–∞—á–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤
- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞
- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±–ª–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏

**PROFINET** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–≤—è–∑—å –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö Ethernet —Å–µ—Ç—è—Ö:

–ö–ª–∞—Å—Å—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PROFINET:
- Class A: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (100 –º—Å —Ü–∏–∫–ª)
- Class B: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (10 –º—Å —Ü–∏–∫–ª)  
- Class C: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º (1 –º—Å —Ü–∏–∫–ª)

–î–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è PROFINET –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (PROFIsafe)

**EtherCAT** –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ EtherCAT:
- –í—Ä–µ–º—è —Ü–∏–∫–ª–∞: –¥–æ 100 –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
- –î–∂–∏—Ç—Ç–µ—Ä: –º–µ–Ω–µ–µ 1 –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
- –¢–æ–ø–æ–ª–æ–≥–∏—è: –ª–∏–Ω–µ–π–Ω–∞—è, –∑–≤–µ–∑–¥–∞, –¥–µ—Ä–µ–≤–æ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
- –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞

### –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã —Ç—Ä–µ–±—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–≥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

**IEC 61508** –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:

–£—Ä–æ–≤–Ω–∏ –ø–æ–ª–Ω–æ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (SIL):
- SIL 1: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ 10‚Åª¬π - 10‚Åª¬≤
- SIL 2: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ 10‚Åª¬≤ - 10‚Åª¬≥  
- SIL 3: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ 10‚Åª¬≥ - 10‚Åª‚Å¥
- SIL 4: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ 10‚Åª‚Å¥ - 10‚Åª‚Åµ

–î–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è SIL –≤–ª–∏—è—é—Ç –Ω–∞:
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã (—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
- –ü—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

**IEC 61511** —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤:

–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
1. –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π –∏ —Ä–∏—Å–∫–æ–≤
2. –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
3. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –≤–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
5. –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
6. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –∏–∑ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏

**ISO 13849** —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω –∏ —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è B: –±–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1: –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è 2: –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è 3: –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–∫–∞–∑ –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ—Ç–µ—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è 4: –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–∫–∞–∑ –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ—Ç–µ—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç—Å—è

–î–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏:
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω–∞—Ö
- –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—Ç–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

**IEC 62443** (—Ä–∞–Ω–µ–µ ISA-99) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:

–ó–æ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞–Ω–∞–ª—ã:
- –ó–æ–Ω–∞ 0: —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –±–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- –ó–æ–Ω–∞ 1: –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
- –ó–æ–Ω–∞ 2: –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- –ó–æ–Ω–∞ 3: –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º

–£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (SL):
- SL 1: –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
- SL 2: –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
- SL 3: –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
- SL 4: –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π

## –ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

–£—Å–ø–µ—à–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã.

### –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã –∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–º–µ—Ä –∏ —Å–∏—Å—Ç–µ–º –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.

**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–∞–º–µ—Ä**:

**GigE Vision** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Ethernet —Å–µ—Ç–∏:
- –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –¥–æ 1 –ì–±–∏—Ç/—Å (GigE), 10 –ì–±–∏—Ç/—Å (10GigE)
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è: 100 –º–µ—Ç—Ä–æ–≤ (–º–µ–¥—å), –∫–∏–ª–æ–º–µ—Ç—Ä—ã (–æ–ø—Ç–æ–≤–æ–ª–æ–∫–Ω–æ)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Power over Ethernet (PoE)
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª GenICam

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞–º–µ—Ä
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã

**USB3 Vision** –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π:
- –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –¥–æ 5 –ì–±–∏—Ç/—Å (USB 3.0), 10 –ì–±–∏—Ç/—Å (USB 3.1)
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è: 5 –º–µ—Ç—Ä–æ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π), –¥–æ 100 –º–µ—Ç—Ä–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–±–µ–ª–∏)
- –ü–∏—Ç–∞–Ω–∏–µ —á–µ—Ä–µ–∑ USB (–¥–æ 4.5 –í—Ç)
- Plug-and-play –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

**Camera Link** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π:
- –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –¥–æ 6.8 –ì–±–∏—Ç/—Å (Camera Link HS)
- –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
- –ù–∏–∑–∫–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
- –í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

**CoaXPress** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–∞–∫—Å–∏–∞–ª—å–Ω—ã–µ –∫–∞–±–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∏—Ç–∞–Ω–∏—è:
- –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: –¥–æ 12.5 –ì–±–∏—Ç/—Å
- –ü–µ—Ä–µ–¥–∞—á–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–æ 13 –í—Ç
- –î–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è: –¥–æ 185 –º–µ—Ç—Ä–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

**–°–∏—Å—Ç–µ–º—ã –æ—Å–≤–µ—â–µ–Ω–∏—è**:

–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.

**LED –æ—Å–≤–µ—â–µ–Ω–∏–µ** –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –±–ª–∞–≥–æ–¥–∞—Ä—è:
- –î–ª–∏—Ç–µ–ª—å–Ω–æ–º—É —Å—Ä–æ–∫—É —Å–ª—É–∂–±—ã (>50,000 —á–∞—Å–æ–≤)
- –ù–∏–∑–∫–æ–º—É —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é
- –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ç–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–±–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è

–¢–∏–ø—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ LED –æ—Å–≤–µ—â–µ–Ω–∏—è:
- **–ö–æ–ª—å—Ü–µ–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ**: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
- **–ö—É–ø–æ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ**: —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–Ω–µ–π –∏ –±–ª–∏–∫–æ–≤
- **–õ–∏–Ω–µ–π–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ**: –æ—Å–≤–µ—â–µ–Ω–∏–µ –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
- **–ö–æ–∞–∫—Å–∏–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ**: –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤
- **–¢–µ–º–Ω–æ–ø–æ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ**: –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞–µ–≤ –∏ —Ü–∞—Ä–∞–ø–∏–Ω

**–°—Ç—Ä–æ–±–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ó–∞–º–æ—Ä–æ–∑–∫—É –¥–≤–∏–∂—É—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤
- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≤—ã–¥–µ—Ä–∂–∫–∏
- –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –∑–∞—Ö–≤–∞—Ç–æ–º –∫–∞–¥—Ä–æ–≤

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–æ–±–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è:
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞: 1-1000 –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
- –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: –¥–æ 100 –∫–ì—Ü
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
- –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏

### –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã**:

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º:
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (-40¬∞C –¥–æ +85¬∞C)
- –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤–∏–±—Ä–∞—Ü–∏—è–º –∏ —É–¥–∞—Ä–∞–º
- –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—ã–ª–∏ –∏ –≤–ª–∞–≥–∏ (IP65/IP67)
- –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (EMC)
- –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

**–§–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤**:

**Box PC**: –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∫–∞—Ñ–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
- –ü–∞—Å—Å–∏–≤–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
- –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

**Panel PC**: –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –¥–∏—Å–ø–ª–µ—è–º–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–Ω—Å–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω
- –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å
- –≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º HMI

**Embedded PC**: –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
- –ù–∏–∑–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
- –î–ª–∏—Ç–µ–ª—å–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª

**GPU —É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π**:

**NVIDIA Jetson —Å–µ—Ä–∏—è** –¥–ª—è edge computing:
- Jetson Nano: 472 GFLOPS, 5-10 –í—Ç
- Jetson Xavier NX: 21 TOPS, 10-25 –í—Ç  
- Jetson AGX Xavier: 32 TOPS, 10-30 –í—Ç
- Jetson AGX Orin: 275 TOPS, 15-60 –í—Ç

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Jetson –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CUDA –∏ TensorRT
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–∞–º–µ—Ä
- –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
- –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (10+ –ª–µ—Ç)

**Intel Neural Compute Stick** –¥–ª—è –ª–µ–≥–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:
- USB –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OpenVINO
- –ù–∏–∑–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (1 –í—Ç)
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ GPU –∫–∞—Ä—Ç—ã**:
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
- –ö–æ–Ω—Ñ–æ—Ä–º–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –≤–ª–∞–≥–∏
- –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤
- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π

### –°–∏—Å—Ç–µ–º—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞.

**–¶–∏—Ñ—Ä–æ–≤—ã–µ –≤—Ö–æ–¥—ã/–≤—ã—Ö–æ–¥—ã**:

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö I/O:
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: 24 –í –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)
- –¢–æ–∫: –¥–æ 500 –º–ê –Ω–∞ –∫–∞–Ω–∞–ª
- –ì–∞–ª—å–≤–∞–Ω–∏—á–µ—Å–∫–∞—è –∏–∑–æ–ª—è—Ü–∏—è: –¥–æ 2500 –í
- –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: –º–µ–Ω–µ–µ 1 –º—Å
- –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:
- –°–∏–≥–Ω–∞–ª—ã –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ò–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–≥–æ–¥–µ–Ω/–±—Ä–∞–∫)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏
- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

**–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤—Ö–æ–¥—ã/–≤—ã—Ö–æ–¥—ã**:

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:
- 4-20 –º–ê: –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤
- 0-10 –í: —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
- ¬±10 –í: –±–∏–ø–æ–ª—è—Ä–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
- –¢–µ—Ä–º–æ–ø–∞—Ä—ã –∏ RTD: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
- –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é –æ—Å–≤–µ—â–µ–Ω–∏—è
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–∞–º–µ—Ä
- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∞–Ω–∞–ª–æ–≥–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–≤—è–∑–∏**:

**RS-485**: –Ω–∞–¥–µ–∂–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å
- –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
- –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–º–µ—Ö–∞–º
- –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ 1200 –º–µ—Ç—Ä–æ–≤
- –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 10 –ú–±–∏—Ç/—Å

**CAN Bus**: —Å–µ—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è —Å—Ö–µ–º–∞
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫
- –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 1 –ú–±–∏—Ç/—Å
- –í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å

## –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–¥–µ–∂–Ω—ã—Ö, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

**–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤:
- –ù–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
- –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
- –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:
```
Image Acquisition Service ‚Üí Image Processing Service ‚Üí 
Analysis Service ‚Üí Decision Service ‚Üí Integration Service
```

–ö–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- **Image Acquisition**: –∑–∞—Ö–≤–∞—Ç –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- **Image Processing**: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
- **Analysis**: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, –∏–∑–º–µ—Ä–µ–Ω–∏—è
- **Decision**: –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
- **Integration**: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

**Event-Driven Architecture** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É:

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏–π–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
- **Event Producers**: –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (–∫–∞–º–µ—Ä—ã, –¥–∞—Ç—á–∏–∫–∏)
- **Event Brokers**: –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π (Apache Kafka, RabbitMQ)
- **Event Consumers**: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (–∞–ª–≥–æ—Ä–∏—Ç–º—ã –∞–Ω–∞–ª–∏–∑–∞)
- **Event Store**: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å replay —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

**Pipeline Architecture** —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É:

```python
class VisionPipeline:
    def __init__(self):
        self.stages = [
            ImageAcquisitionStage(),
            PreprocessingStage(),
            FeatureExtractionStage(),
            ClassificationStage(),
            PostprocessingStage(),
            OutputStage()
        ]
    
    def process(self, input_data):
        result = input_data
        for stage in self.stages:
            result = stage.process(result)
            if result is None:  # Early exit on error
                break
        return result
```

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

**Message Queue Integration** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–≤—è–∑—å:

```python
import pika
import json
import cv2
import numpy as np

class VisionMessageHandler:
    def __init__(self, rabbitmq_url):
        self.connection = pika.BlockingConnection(
            pika.URLParameters(rabbitmq_url)
        )
        self.channel = self.connection.channel()
        
    def setup_queues(self):
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.channel.queue_declare(queue='vision_input', durable=True)
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.channel.queue_declare(queue='vision_output', durable=True)
        
    def process_image_message(self, ch, method, properties, body):
        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = json.loads(body)
            image_data = np.frombuffer(
                base64.b64decode(message['image']), 
                dtype=np.uint8
            )
            image = cv2.imdecode(image_data, cv2.IMREAD_COLOR)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result = self.analyze_image(image)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            response = {
                'timestamp': message['timestamp'],
                'result': result,
                'status': 'success'
            }
            
            self.channel.basic_publish(
                exchange='',
                routing_key='vision_output',
                body=json.dumps(response),
                properties=pika.BasicProperties(delivery_mode=2)
            )
            
            ch.basic_ack(delivery_tag=method.delivery_tag)
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            error_response = {
                'timestamp': message.get('timestamp'),
                'error': str(e),
                'status': 'error'
            }
            
            self.channel.basic_publish(
                exchange='',
                routing_key='vision_output',
                body=json.dumps(error_response)
            )
            
            ch.basic_nack(delivery_tag=method.delivery_tag, requeue=False)
```

**REST API Integration** –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:

```python
from flask import Flask, request, jsonify
import cv2
import numpy as np
import base64

app = Flask(__name__)

class VisionAPI:
    def __init__(self):
        self.model = self.load_model()
        
    @app.route('/analyze', methods=['POST'])
    def analyze_image(self):
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            data = request.get_json()
            image_data = base64.b64decode(data['image'])
            nparr = np.frombuffer(image_data, np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result = self.process_image(image)
            
            return jsonify({
                'status': 'success',
                'result': result,
                'timestamp': time.time()
            })
            
        except Exception as e:
            return jsonify({
                'status': 'error',
                'message': str(e)
            }), 500
    
    @app.route('/health', methods=['GET'])
    def health_check(self):
        return jsonify({
            'status': 'healthy',
            'timestamp': time.time()
        })
```

**OPC UA Integration** –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤—è–∑—å —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏:

```python
from opcua import Server, ua
import time
import threading

class VisionOPCServer:
    def __init__(self):
        self.server = Server()
        self.server.set_endpoint("opc.tcp://0.0.0.0:4840/vision/")
        self.server.set_server_name("Vision System OPC Server")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
        uri = "http://vision.system.com"
        idx = self.server.register_namespace(uri)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.vision_object = self.server.nodes.objects.add_object(
            idx, "VisionSystem"
        )
        
        self.quality_result = self.vision_object.add_variable(
            idx, "QualityResult", 0
        )
        self.defect_count = self.vision_object.add_variable(
            idx, "DefectCount", 0
        )
        self.processing_time = self.vision_object.add_variable(
            idx, "ProcessingTime", 0.0
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        self.quality_result.set_writable()
        self.defect_count.set_writable()
        self.processing_time.set_writable()
        
    def start_server(self):
        self.server.start()
        print("OPC UA Server started")
        
    def update_results(self, quality, defects, proc_time):
        self.quality_result.set_value(quality)
        self.defect_count.set_value(defects)
        self.processing_time.set_value(proc_time)
```

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏

**–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏**:

```python
import sqlite3
import hashlib
import os
from datetime import datetime

class ImageDataManager:
    def __init__(self, db_path, storage_path):
        self.db_path = db_path
        self.storage_path = storage_path
        self.init_database()
        
    def init_database(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS images (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                filename TEXT UNIQUE NOT NULL,
                hash TEXT NOT NULL,
                timestamp DATETIME NOT NULL,
                camera_id TEXT,
                production_line TEXT,
                quality_result INTEGER,
                defect_types TEXT,
                processing_time REAL,
                metadata TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        
    def store_image(self, image, metadata):
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_bytes = cv2.imencode('.jpg', image)[1].tobytes()
        image_hash = hashlib.sha256(image_bytes).hexdigest()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        timestamp = datetime.now()
        filename = f"{timestamp.strftime('%Y%m%d_%H%M%S')}_{image_hash[:8]}.jpg"
        filepath = os.path.join(self.storage_path, filename)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cv2.imwrite(filepath, image)
        
        # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO images 
            (filename, hash, timestamp, camera_id, production_line, 
             quality_result, defect_types, processing_time, metadata)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            filename, image_hash, timestamp,
            metadata.get('camera_id'),
            metadata.get('production_line'),
            metadata.get('quality_result'),
            json.dumps(metadata.get('defect_types', [])),
            metadata.get('processing_time'),
            json.dumps(metadata)
        ))
        
        conn.commit()
        conn.close()
        
        return filename
        
    def get_images_by_criteria(self, start_time, end_time, 
                              camera_id=None, quality_result=None):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        query = '''
            SELECT * FROM images 
            WHERE timestamp BETWEEN ? AND ?
        '''
        params = [start_time, end_time]
        
        if camera_id:
            query += ' AND camera_id = ?'
            params.append(camera_id)
            
        if quality_result is not None:
            query += ' AND quality_result = ?'
            params.append(quality_result)
            
        cursor.execute(query, params)
        results = cursor.fetchall()
        conn.close()
        
        return results
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

### –°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**:

```python
import psutil
import time
import threading
from collections import deque
import json

class SystemMonitor:
    def __init__(self, history_size=1000):
        self.history_size = history_size
        self.metrics = {
            'cpu_usage': deque(maxlen=history_size),
            'memory_usage': deque(maxlen=history_size),
            'gpu_usage': deque(maxlen=history_size),
            'processing_time': deque(maxlen=history_size),
            'throughput': deque(maxlen=history_size),
            'error_rate': deque(maxlen=history_size)
        }
        self.monitoring = False
        
    def start_monitoring(self):
        self.monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop)
        self.monitor_thread.start()
        
    def stop_monitoring(self):
        self.monitoring = False
        self.monitor_thread.join()
        
    def _monitor_loop(self):
        while self.monitoring:
            timestamp = time.time()
            
            # CPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            cpu_percent = psutil.cpu_percent(interval=1)
            self.metrics['cpu_usage'].append({
                'timestamp': timestamp,
                'value': cpu_percent
            })
            
            # –ü–∞–º—è—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            memory = psutil.virtual_memory()
            self.metrics['memory_usage'].append({
                'timestamp': timestamp,
                'value': memory.percent
            })
            
            # GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (NVIDIA)
            try:
                import pynvml
                pynvml.nvmlInit()
                handle = pynvml.nvmlDeviceGetHandleByIndex(0)
                gpu_util = pynvml.nvmlDeviceGetUtilizationRates(handle)
                self.metrics['gpu_usage'].append({
                    'timestamp': timestamp,
                    'value': gpu_util.gpu
                })
            except:
                pass
                
            time.sleep(1)
            
    def get_current_metrics(self):
        return {
            key: list(values)[-10:] if values else []
            for key, values in self.metrics.items()
        }
        
    def get_statistics(self, metric_name, time_window=300):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = time.time()
        start_time = current_time - time_window
        
        values = [
            item['value'] for item in self.metrics[metric_name]
            if item['timestamp'] >= start_time
        ]
        
        if not values:
            return None
            
        return {
            'min': min(values),
            'max': max(values),
            'avg': sum(values) / len(values),
            'count': len(values)
        }
```

**–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**:

```python
import smtplib
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
import requests
import json

class AlertManager:
    def __init__(self, config):
        self.config = config
        self.alert_rules = []
        self.active_alerts = {}
        
    def add_alert_rule(self, name, condition, severity, cooldown=300):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        rule = {
            'name': name,
            'condition': condition,
            'severity': severity,
            'cooldown': cooldown,
            'last_triggered': 0
        }
        self.alert_rules.append(rule)
        
    def check_alerts(self, metrics):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–ª–µ—Ä—Ç–æ–≤"""
        current_time = time.time()
        
        for rule in self.alert_rules:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –ø–µ—Ä–∏–æ–¥–∞
            if current_time - rule['last_triggered'] < rule['cooldown']:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è
            if rule['condition'](metrics):
                self.trigger_alert(rule, metrics)
                rule['last_triggered'] = current_time
                
    def trigger_alert(self, rule, metrics):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        alert = {
            'name': rule['name'],
            'severity': rule['severity'],
            'timestamp': time.time(),
            'metrics': metrics,
            'message': f"Alert: {rule['name']} triggered"
        }
        
        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.config.get('email_enabled'):
            self.send_email_alert(alert)
            
        # Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.config.get('slack_enabled'):
            self.send_slack_alert(alert)
            
        # Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.config.get('webhook_enabled'):
            self.send_webhook_alert(alert)
            
    def send_email_alert(self, alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–ª–µ—Ä—Ç–∞"""
        try:
            msg = MimeMultipart()
            msg['From'] = self.config['email']['from']
            msg['To'] = ', '.join(self.config['email']['to'])
            msg['Subject'] = f"Vision System Alert: {alert['name']}"
            
            body = f"""
            Alert: {alert['name']}
            Severity: {alert['severity']}
            Time: {time.ctime(alert['timestamp'])}
            
            Metrics:
            {json.dumps(alert['metrics'], indent=2)}
            """
            
            msg.attach(MimeText(body, 'plain'))
            
            server = smtplib.SMTP(
                self.config['email']['smtp_server'],
                self.config['email']['smtp_port']
            )
            server.starttls()
            server.login(
                self.config['email']['username'],
                self.config['email']['password']
            )
            server.send_message(msg)
            server.quit()
            
        except Exception as e:
            print(f"Failed to send email alert: {e}")
            
    def send_slack_alert(self, alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Slack –∞–ª–µ—Ä—Ç–∞"""
        try:
            webhook_url = self.config['slack']['webhook_url']
            
            payload = {
                'text': f"Vision System Alert: {alert['name']}",
                'attachments': [{
                    'color': 'danger' if alert['severity'] == 'critical' else 'warning',
                    'fields': [
                        {
                            'title': 'Severity',
                            'value': alert['severity'],
                            'short': True
                        },
                        {
                            'title': 'Time',
                            'value': time.ctime(alert['timestamp']),
                            'short': True
                        }
                    ]
                }]
            }
            
            response = requests.post(webhook_url, json=payload)
            response.raise_for_status()
            
        except Exception as e:
            print(f"Failed to send Slack alert: {e}")
```

### –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

**–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏**:

```python
class VisionSystemDiagnostics:
    def __init__(self, vision_system):
        self.vision_system = vision_system
        self.diagnostic_tests = []
        self.setup_tests()
        
    def setup_tests(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.diagnostic_tests = [
            {
                'name': 'Camera Connectivity',
                'function': self.test_camera_connectivity,
                'critical': True
            },
            {
                'name': 'Image Quality',
                'function': self.test_image_quality,
                'critical': True
            },
            {
                'name': 'Processing Performance',
                'function': self.test_processing_performance,
                'critical': False
            },
            {
                'name': 'Memory Usage',
                'function': self.test_memory_usage,
                'critical': False
            },
            {
                'name': 'Storage Space',
                'function': self.test_storage_space,
                'critical': True
            },
            {
                'name': 'Network Connectivity',
                'function': self.test_network_connectivity,
                'critical': True
            }
        ]
        
    def run_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        results = {
            'timestamp': time.time(),
            'overall_status': 'healthy',
            'tests': []
        }
        
        for test in self.diagnostic_tests:
            try:
                test_result = test['function']()
                test_result['name'] = test['name']
                test_result['critical'] = test['critical']
                results['tests'].append(test_result)
                
                if not test_result['passed'] and test['critical']:
                    results['overall_status'] = 'critical'
                elif not test_result['passed']:
                    if results['overall_status'] == 'healthy':
                        results['overall_status'] = 'warning'
                        
            except Exception as e:
                results['tests'].append({
                    'name': test['name'],
                    'passed': False,
                    'critical': test['critical'],
                    'error': str(e)
                })
                
                if test['critical']:
                    results['overall_status'] = 'critical'
                    
        return results
        
    def test_camera_connectivity(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä"""
        try:
            cameras = self.vision_system.get_cameras()
            failed_cameras = []
            
            for camera in cameras:
                if not camera.is_connected():
                    failed_cameras.append(camera.id)
                    
            return {
                'passed': len(failed_cameras) == 0,
                'details': {
                    'total_cameras': len(cameras),
                    'failed_cameras': failed_cameras
                }
            }
            
        except Exception as e:
            return {
                'passed': False,
                'error': str(e)
            }
            
    def test_image_quality(self):
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            test_images = []
            quality_issues = []
            
            for camera in self.vision_system.get_cameras():
                image = camera.capture_image()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                if image.shape[0] < 480 or image.shape[1] < 640:
                    quality_issues.append(f"Camera {camera.id}: Low resolution")
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
                mean_brightness = np.mean(image)
                if mean_brightness < 50 or mean_brightness > 200:
                    quality_issues.append(f"Camera {camera.id}: Poor lighting")
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏
                laplacian_var = cv2.Laplacian(image, cv2.CV_64F).var()
                if laplacian_var < 100:
                    quality_issues.append(f"Camera {camera.id}: Blurry image")
                    
            return {
                'passed': len(quality_issues) == 0,
                'details': {
                    'quality_issues': quality_issues
                }
            }
            
        except Exception as e:
            return {
                'passed': False,
                'error': str(e)
            }
            
    def test_processing_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            test_image = np.random.randint(0, 255, (1024, 1280, 3), dtype=np.uint8)
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            start_time = time.time()
            result = self.vision_system.process_image(test_image)
            processing_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            max_processing_time = 0.1  # 100 –º—Å
            
            return {
                'passed': processing_time <= max_processing_time,
                'details': {
                    'processing_time': processing_time,
                    'max_allowed_time': max_processing_time
                }
            }
            
        except Exception as e:
            return {
                'passed': False,
                'error': str(e)
            }
```

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã.

### –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

**–ó–∞—â–∏—Ç–∞ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π**:

```python
import ssl
import socket
from cryptography.fernet import Fernet
import hashlib
import hmac

class SecureCommunication:
    def __init__(self, encryption_key=None):
        if encryption_key:
            self.cipher = Fernet(encryption_key)
        else:
            self.cipher = Fernet(Fernet.generate_key())
            
    def create_secure_server(self, host, port, cert_file, key_file):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
        context.load_cert_chain(cert_file, key_file)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        context.minimum_version = ssl.TLSVersion.TLSv1_2
        context.set_ciphers('ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS')
        
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind((host, port))
        sock.listen(5)
        
        return context.wrap_socket(sock, server_side=True)
        
    def encrypt_message(self, message):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if isinstance(message, str):
            message = message.encode('utf-8')
        return self.cipher.encrypt(message)
        
    def decrypt_message(self, encrypted_message):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        decrypted = self.cipher.decrypt(encrypted_message)
        return decrypted.decode('utf-8')
        
    def create_message_signature(self, message, secret_key):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏"""
        if isinstance(message, str):
            message = message.encode('utf-8')
        return hmac.new(secret_key, message, hashlib.sha256).hexdigest()
        
    def verify_message_signature(self, message, signature, secret_key):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏"""
        expected_signature = self.create_message_signature(message, secret_key)
        return hmac.compare_digest(signature, expected_signature)
```

**–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**:

```python
import jwt
import bcrypt
from datetime import datetime, timedelta
import sqlite3

class AuthenticationManager:
    def __init__(self, secret_key, db_path):
        self.secret_key = secret_key
        self.db_path = db_path
        self.init_database()
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                role TEXT NOT NULL,
                created_at DATETIME NOT NULL,
                last_login DATETIME,
                active BOOLEAN DEFAULT 1
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS permissions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                role TEXT NOT NULL,
                resource TEXT NOT NULL,
                action TEXT NOT NULL,
                UNIQUE(role, resource, action)
            )
        ''')
        
        conn.commit()
        conn.close()
        
    def create_user(self, username, password, role):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO users (username, password_hash, role, created_at)
                VALUES (?, ?, ?, ?)
            ''', (username, password_hash, role, datetime.now()))
            
            conn.commit()
            return True
            
        except sqlite3.IntegrityError:
            return False
        finally:
            conn.close()
            
    def authenticate_user(self, username, password):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT password_hash, role FROM users 
            WHERE username = ? AND active = 1
        ''', (username,))
        
        result = cursor.fetchone()
        conn.close()
        
        if result and bcrypt.checkpw(password.encode('utf-8'), result[0]):
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            self.update_last_login(username)
            return {'username': username, 'role': result[1]}
        
        return None
        
    def generate_token(self, user_info):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
        payload = {
            'username': user_info['username'],
            'role': user_info['role'],
            'exp': datetime.utcnow() + timedelta(hours=8),
            'iat': datetime.utcnow()
        }
        
        return jwt.encode(payload, self.secret_key, algorithm='HS256')
        
    def verify_token(self, token):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            payload = jwt.decode(token, self.secret_key, algorithms=['HS256'])
            return payload
        except jwt.ExpiredSignatureError:
            return None
        except jwt.InvalidTokenError:
            return None
            
    def check_permission(self, role, resource, action):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT COUNT(*) FROM permissions 
            WHERE role = ? AND resource = ? AND action = ?
        ''', (role, resource, action))
        
        result = cursor.fetchone()[0]
        conn.close()
        
        return result > 0
```

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

**–°–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è**:

```python
import logging
import json
from datetime import datetime
import sqlite3
import hashlib

class AuditLogger:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_database()
        self.setup_logging()
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS audit_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME NOT NULL,
                user_id TEXT,
                action TEXT NOT NULL,
                resource TEXT NOT NULL,
                details TEXT,
                ip_address TEXT,
                user_agent TEXT,
                success BOOLEAN NOT NULL,
                hash TEXT NOT NULL
            )
        ''')
        
        conn.commit()
        conn.close()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger('vision_audit')
        self.logger.setLevel(logging.INFO)
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        file_handler = logging.FileHandler('vision_audit.log')
        file_handler.setLevel(logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        file_handler.setFormatter(formatter)
        
        self.logger.addHandler(file_handler)
        
    def log_action(self, user_id, action, resource, details=None, 
                   ip_address=None, user_agent=None, success=True):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = datetime.now()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        log_entry = {
            'timestamp': timestamp.isoformat(),
            'user_id': user_id,
            'action': action,
            'resource': resource,
            'details': details,
            'ip_address': ip_address,
            'user_agent': user_agent,
            'success': success
        }
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        log_string = json.dumps(log_entry, sort_keys=True)
        log_hash = hashlib.sha256(log_string.encode()).hexdigest()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO audit_log 
            (timestamp, user_id, action, resource, details, 
             ip_address, user_agent, success, hash)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            timestamp, user_id, action, resource, 
            json.dumps(details) if details else None,
            ip_address, user_agent, success, log_hash
        ))
        
        conn.commit()
        conn.close()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        self.logger.info(f"User {user_id} performed {action} on {resource}: {success}")
        
    def get_audit_trail(self, start_time, end_time, user_id=None, action=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ª–µ–¥–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        query = '''
            SELECT * FROM audit_log 
            WHERE timestamp BETWEEN ? AND ?
        '''
        params = [start_time, end_time]
        
        if user_id:
            query += ' AND user_id = ?'
            params.append(user_id)
            
        if action:
            query += ' AND action = ?'
            params.append(action)
            
        query += ' ORDER BY timestamp DESC'
        
        cursor.execute(query, params)
        results = cursor.fetchall()
        conn.close()
        
        return results
        
    def verify_log_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ª–æ–≥–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM audit_log ORDER BY id')
        logs = cursor.fetchall()
        conn.close()
        
        corrupted_logs = []
        
        for log in logs:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ—à–∞
            log_entry = {
                'timestamp': log[1],
                'user_id': log[2],
                'action': log[3],
                'resource': log[4],
                'details': json.loads(log[5]) if log[5] else None,
                'ip_address': log[6],
                'user_agent': log[7],
                'success': bool(log[8])
            }
            
            log_string = json.dumps(log_entry, sort_keys=True)
            expected_hash = hashlib.sha256(log_string.encode()).hexdigest()
            
            if expected_hash != log[9]:
                corrupted_logs.append(log[0])
                
        return corrupted_logs
```

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –∑–∞–¥–∞—á—É, —Ç—Ä–µ–±—É—é—â—É—é –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, —Ç–∞–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥. –£—Å–ø–µ—à–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–∞.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ. –ó–Ω–∞–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–≤—è–∑–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.

–ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä, —Å–∏—Å—Ç–µ–º –æ—Å–≤–µ—â–µ–Ω–∏—è, –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã. –ü–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∫–∞–º–µ—Ä, —Ç–∏–ø–æ–≤ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.

–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏—Ö –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —Å–æ–±—ã—Ç–∏–π–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ—Ç –≥–∏–±–∫–∏–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º—ã–µ —Å–∏—Å—Ç–µ–º—ã.

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã. –°–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –∞–ª–µ—Ä—Ç–æ–≤ –∏ –∞—É–¥–∏—Ç–∞ —Å–æ–∑–¥–∞—é—Ç –æ—Å–Ω–æ–≤—É –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞.

–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ª–µ–¥–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ Industry 4.0, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤–µ—â–µ–π –∏ –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.

–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –∑–Ω–∞–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–µ, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—è —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.
`
  },

  30: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞ - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º—É –∑—Ä–µ–Ω–∏—é",
    duration: 240,
    type: "practice",
    module: 4,
    content: `
# –£—Ä–æ–∫ 30: –ü—Ä–∞–∫—Ç–∏–∫–∞ - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º—É –∑—Ä–µ–Ω–∏—é

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç

–î–∞–Ω–Ω—ã–π —É—Ä–æ–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—é –ú–æ–¥—É–ª—è 4 "Computer Vision", –æ–±—ä–µ–¥–∏–Ω—è—è –≤—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –º–µ—Ç–æ–¥—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –µ–¥–∏–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

–ü—Ä–æ–µ–∫—Ç "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞" –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è. –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤, –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è: –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –æ—Ç —Å–∏—Å—Ç–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –ü—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è: –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —Å–ª–æ–∂–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –ü—Ä–æ–µ–∫—Ç —Ç–∞–∫–∂–µ –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–∞—á–µ—Å—Ç–≤—É –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ 10 –º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∫–∞—Ç–∞ –≤ –º–∏–Ω—É—Ç—É), –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å (–≤—Ä–µ–º—è –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 99.5%), —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ (–±–æ–ª–µ–µ 95%), –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.

### –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ "–°—Ç–∞–ª—å–ü—Ä–æ–º" –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ª–∏—Å—Ç–æ–≤–æ–π –ø—Ä–æ–∫–∞—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä–æ–∫ —Å—Ç–∞–ª–∏ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–º –æ—Å–º–æ—Ç—Ä–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏, –ø—Ä–æ–ø—É—Å–∫—É –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –≤—ã—Å–æ–∫–∏–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º. –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤.

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ:**

**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:**
- –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–æ–∫–∞—Ç–∞: –¥–æ 2 –º/—Å
- –®–∏—Ä–∏–Ω–∞ –ª–∏—Å—Ç–∞: –¥–æ 2000 –º–º
- –¢–æ–ª—â–∏–Ω–∞ –ª–∏—Å—Ç–∞: 0.5-10 –º–º
- –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞: –Ω–µ –±–æ–ª–µ–µ 50 –º—Å
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ –º–µ–Ω–µ–µ 2048x2048 –ø–∏–∫—Å–µ–ª–µ–π
- –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: 100% –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤

**–¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤:**
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞: 0.5 –º–º
- –¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: –Ω–µ –º–µ–Ω–µ–µ 95%
- –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 2%
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤: 8 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
- –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤: —Ç–æ—á–Ω–æ—Å—Ç—å ¬±0.1 –º–º

**–¢–∏–ø—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤:**
1. **–¶–∞—Ä–∞–ø–∏–Ω—ã** - –ª–∏–Ω–µ–π–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
2. **–í–º—è—Ç–∏–Ω—ã** - –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
3. **–í–∫–ª—é—á–µ–Ω–∏—è** - –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å—Ç–∞–ª–∏
4. **–û–∫–∞–ª–∏–Ω–∞** - –æ–∫—Å–∏–¥–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
5. **–¢—Ä–µ—â–∏–Ω—ã** - –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
6. **–ü—è—Ç–Ω–∞** - –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
7. **–ö–æ—Ä—Ä–æ–∑–∏—è** - —Å–ª–µ–¥—ã –æ–∫–∏—Å–ª–µ–Ω–∏—è –∏ —Ä–∂–∞–≤—á–∏–Ω—ã
8. **–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è** - –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∏ —Ä–∞–∑–º–µ—Ä–æ–≤

**–£—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏:**
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã: +5¬∞C –¥–æ +45¬∞C
- –í–ª–∞–∂–Ω–æ—Å—Ç—å: –¥–æ 80% –±–µ–∑ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–∏
- –ó–∞–ø—ã–ª–µ–Ω–Ω–æ—Å—Ç—å: –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞
- –í–∏–±—Ä–∞—Ü–∏–∏: –æ—Ç —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
- –≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –ø–æ–º–µ—Ö–∏: –æ—Ç —Å–∏–ª–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
- –û—Å–≤–µ—â–µ–Ω–∏–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏:**
- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–µ–π (–ü–õ–ö Siemens S7-1500)
- –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ MES —Å–∏—Å—Ç–µ–º—É (SAP Manufacturing)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –¥–µ—Ñ–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
- –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:**
- –í—Ä–µ–º—è –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã: –Ω–µ –º–µ–Ω–µ–µ 99.5%
- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
- –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –£–¥–∞–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –º–æ–¥—É–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ—Ç—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.

**–û–±—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã:**

```
[–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è] ‚Üí [–°–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π] ‚Üí 
[–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏] ‚Üí [–ú–æ–¥—É–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤] ‚Üí 
[–ú–æ–¥—É–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏] ‚Üí [–ú–æ–¥—É–ª—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π] ‚Üí 
[–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏] ‚Üí [–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã]
```

**–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**

–°–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–∞–µ—Ç —á–µ—Ç—ã—Ä–µ –ª–∏–Ω–µ–π–Ω—ã–µ –∫–∞–º–µ—Ä—ã –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —à–∏—Ä–∏–Ω—ã –ª–∏—Å—Ç–∞. –ö–∞–∂–¥–∞—è –∫–∞–º–µ—Ä–∞ –æ—Å–Ω–∞—â–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–ø—Ç–∏–∫–æ–π –∏ —Å–∏—Å—Ç–µ–º–æ–π LED –æ—Å–≤–µ—â–µ–Ω–∏—è.

```python
class ImageAcquisitionSystem:
    def __init__(self):
        self.cameras = []
        self.lighting_system = None
        self.trigger_system = None
        self.calibration_data = {}
        
    def initialize_cameras(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–º–µ—Ä"""
        camera_configs = [
            {'id': 'cam_01', 'position': 'left', 'overlap': 50},
            {'id': 'cam_02', 'position': 'center_left', 'overlap': 50},
            {'id': 'cam_03', 'position': 'center_right', 'overlap': 50},
            {'id': 'cam_04', 'position': 'right', 'overlap': 50}
        ]
        
        for config in camera_configs:
            camera = IndustrialCamera(
                camera_id=config['id'],
                interface='GigE',
                resolution=(2048, 2048),
                frame_rate=100,
                exposure_time=5000,  # –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
                gain=1.0
            )
            
            camera.set_trigger_mode('external')
            camera.set_pixel_format('Mono8')
            camera.enable_chunk_data(['timestamp', 'frame_counter'])
            
            self.cameras.append(camera)
            
    def setup_lighting(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Å–≤–µ—â–µ–Ω–∏—è"""
        self.lighting_system = LEDLightingSystem(
            type='line_light',
            length=2200,  # –º–º
            power=200,    # –í—Ç
            wavelength=6500,  # –ö
            strobe_capable=True,
            strobe_duration=1000  # –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–æ–±–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è
        self.lighting_system.configure_strobe(
            trigger_source='encoder',
            delay=100,  # –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            duration=1000  # –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        )
        
    def setup_trigger_system(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.trigger_system = EncoderTriggerSystem(
            encoder_resolution=1024,  # –∏–º–ø—É–ª—å—Å–æ–≤ –Ω–∞ –æ–±–æ—Ä–æ—Ç
            wheel_diameter=200,       # –º–º
            trigger_distance=1.0      # –º–º –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
        )
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ü–õ–ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.trigger_system.connect_plc(
            ip_address='192.168.1.100',
            protocol='Modbus_TCP'
        )
        
    def capture_synchronized_images(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ –≤—Å–µ—Ö –∫–∞–º–µ—Ä"""
        trigger_signal = self.trigger_system.wait_for_trigger()
        
        if trigger_signal:
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–æ–±–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è
            self.lighting_system.trigger_strobe()
            
            # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç —Å–æ –≤—Å–µ—Ö –∫–∞–º–µ—Ä
            images = []
            timestamps = []
            
            for camera in self.cameras:
                image, metadata = camera.capture_image()
                images.append(image)
                timestamps.append(metadata['timestamp'])
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            time_diff = max(timestamps) - min(timestamps)
            if time_diff > 1000:  # –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
                self.log_warning(f"Synchronization drift: {time_diff} Œºs")
                
            return {
                'images': images,
                'timestamps': timestamps,
                'encoder_position': trigger_signal['position'],
                'line_speed': trigger_signal['speed']
            }
            
        return None
```

**–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**

–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è, –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

```python
import cv2
import numpy as np
from scipy import ndimage
from skimage import restoration, filters

class ImagePreprocessor:
    def __init__(self):
        self.flat_field_correction = None
        self.geometric_calibration = None
        self.noise_profile = None
        
    def load_calibration_data(self, calibration_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        calibration = np.load(calibration_path)
        
        self.flat_field_correction = calibration['flat_field']
        self.geometric_calibration = calibration['geometric_transform']
        self.noise_profile = calibration['noise_profile']
        
    def correct_flat_field(self, image):
        """–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è"""
        if self.flat_field_correction is not None:
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            corrected = image.astype(np.float32) / self.flat_field_correction
            corrected = np.clip(corrected * 255, 0, 255).astype(np.uint8)
            return corrected
        return image
        
    def correct_geometry(self, image):
        """–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"""
        if self.geometric_calibration is not None:
            corrected = cv2.warpPerspective(
                image, 
                self.geometric_calibration,
                (image.shape[1], image.shape[0])
            )
            return corrected
        return image
        
    def denoise_image(self, image):
        """–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞"""
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
        if self.noise_profile is not None:
            # Wiener —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            denoised = restoration.wiener(
                image, 
                self.noise_profile, 
                balance=0.1
            )
        else:
            # –ë–∏–ª–∞—Ç–µ—Ä–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            denoised = cv2.bilateralFilter(image, 9, 75, 75)
            
        return denoised.astype(np.uint8)
        
    def enhance_contrast(self, image):
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞"""
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
        enhanced = clahe.apply(image)
        
        return enhanced
        
    def stitch_images(self, images, overlap_pixels=50):
        """–°—à–∏–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–º–µ—Ä"""
        if len(images) == 1:
            return images[0]
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        total_width = sum(img.shape[1] for img in images) - overlap_pixels * (len(images) - 1)
        result = np.zeros((images[0].shape[0], total_width), dtype=np.uint8)
        
        current_x = 0
        
        for i, image in enumerate(images):
            if i == 0:
                # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                result[:, :image.shape[1] - overlap_pixels//2] = \
                    image[:, :image.shape[1] - overlap_pixels//2]
                current_x = image.shape[1] - overlap_pixels//2
                
            elif i == len(images) - 1:
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                start_x = overlap_pixels//2
                result[:, current_x:current_x + image.shape[1] - start_x] = \
                    image[:, start_x:]
                    
            else:
                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                start_x = overlap_pixels//2
                end_x = image.shape[1] - overlap_pixels//2
                width = end_x - start_x
                
                result[:, current_x:current_x + width] = \
                    image[:, start_x:end_x]
                current_x += width
                
        return result
        
    def preprocess_pipeline(self, raw_images):
        """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        processed_images = []
        
        for image in raw_images:
            # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è
            corrected = self.correct_flat_field(image)
            
            # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
            corrected = self.correct_geometry(corrected)
            
            # –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞
            denoised = self.denoise_image(corrected)
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            enhanced = self.enhance_contrast(denoised)
            
            processed_images.append(enhanced)
            
        # –°—à–∏–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        stitched = self.stitch_images(processed_images)
        
        return stitched
```

**–ú–æ–¥—É–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤:**

–ú–æ–¥—É–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —Å–æ—á–µ—Ç–∞—é—â–∏–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

```python
import torch
import torch.nn as nn
import torchvision.transforms as transforms
from torchvision.models import efficientnet_b4
import cv2
import numpy as np
from skimage import measure, morphology, filters

class DefectDetectionModule:
    def __init__(self, model_path=None):
        self.classical_detector = ClassicalDefectDetector()
        self.deep_learning_detector = DeepLearningDefectDetector(model_path)
        self.fusion_module = DefectFusionModule()
        
    def detect_defects(self, image):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≥–∏–±—Ä–∏–¥–Ω—ã–º –º–µ—Ç–æ–¥–æ–º"""
        # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
        classical_results = self.classical_detector.detect(image)
        
        # –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        dl_results = self.deep_learning_detector.detect(image)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        fused_results = self.fusion_module.fuse_detections(
            classical_results, dl_results
        )
        
        return fused_results

class ClassicalDefectDetector:
    def __init__(self):
        self.scratch_detector = ScratchDetector()
        self.inclusion_detector = InclusionDetector()
        self.surface_detector = SurfaceDefectDetector()
        
    def detect(self, image):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        results = {
            'scratches': self.scratch_detector.detect(image),
            'inclusions': self.inclusion_detector.detect(image),
            'surface_defects': self.surface_detector.detect(image)
        }
        
        return results

class ScratchDetector:
    def __init__(self):
        self.min_length = 10  # –ø–∏–∫—Å–µ–ª–µ–π
        self.max_width = 5    # –ø–∏–∫—Å–µ–ª–µ–π
        
    def detect(self, image):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω"""
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) if len(image.shape) == 3 else image
        
        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π
        kernel_horizontal = cv2.getStructuringElement(cv2.MORPH_RECT, (15, 1))
        kernel_vertical = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 15))
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ü–∞—Ä–∞–ø–∏–Ω
        horizontal = cv2.morphologyEx(gray, cv2.MORPH_OPEN, kernel_horizontal)
        horizontal = cv2.morphologyEx(horizontal, cv2.MORPH_CLOSE, kernel_horizontal)
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–∞—Ä–∞–ø–∏–Ω
        vertical = cv2.morphologyEx(gray, cv2.MORPH_OPEN, kernel_vertical)
        vertical = cv2.morphologyEx(vertical, cv2.MORPH_CLOSE, kernel_vertical)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        scratches = cv2.bitwise_or(horizontal, vertical)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
        contours, _ = cv2.findContours(scratches, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        valid_scratches = []
        for contour in contours:
            # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
            rect = cv2.minAreaRect(contour)
            width, height = rect[1]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω (–¥–ª–∏–Ω–Ω—ã–µ –∏ —É–∑–∫–∏–µ)
            aspect_ratio = max(width, height) / min(width, height)
            
            if aspect_ratio > 3 and min(width, height) <= self.max_width:
                valid_scratches.append({
                    'contour': contour,
                    'bbox': cv2.boundingRect(contour),
                    'area': cv2.contourArea(contour),
                    'length': max(width, height),
                    'width': min(width, height),
                    'type': 'scratch'
                })
                
        return valid_scratches

class InclusionDetector:
    def __init__(self):
        self.min_area = 25    # –ø–∏–∫—Å–µ–ª–µ–π¬≤
        self.max_area = 1000  # –ø–∏–∫—Å–µ–ª–µ–π¬≤
        
    def detect(self, image):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏–π"""
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) if len(image.shape) == 3 else image
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        adaptive_thresh = cv2.adaptiveThreshold(
            gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2
        )
        
        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
        cleaned = cv2.morphologyEx(adaptive_thresh, cv2.MORPH_OPEN, kernel)
        cleaned = cv2.morphologyEx(cleaned, cv2.MORPH_CLOSE, kernel)
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
        contours, _ = cv2.findContours(cleaned, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        inclusions = []
        for contour in contours:
            area = cv2.contourArea(contour)
            
            if self.min_area <= area <= self.max_area:
                # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã
                perimeter = cv2.arcLength(contour, True)
                circularity = 4 * np.pi * area / (perimeter * perimeter)
                
                # –í–∫–ª—é—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –æ–∫—Ä—É–≥–ª—É—é —Ñ–æ—Ä–º—É
                if circularity > 0.3:
                    inclusions.append({
                        'contour': contour,
                        'bbox': cv2.boundingRect(contour),
                        'area': area,
                        'circularity': circularity,
                        'type': 'inclusion'
                    })
                    
        return inclusions

class DeepLearningDefectDetector:
    def __init__(self, model_path):
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.model = self.load_model(model_path)
        self.transform = self.get_transform()
        
    def load_model(self, model_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ EfficientNet
        model = DefectDetectionCNN(num_classes=8)
        
        if model_path and os.path.exists(model_path):
            checkpoint = torch.load(model_path, map_location=self.device)
            model.load_state_dict(checkpoint['model_state_dict'])
            
        model.to(self.device)
        model.eval()
        
        return model
        
    def get_transform(self):
        """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return transforms.Compose([
            transforms.ToPILImage(),
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                               std=[0.229, 0.224, 0.225])
        ])
        
    def detect(self, image):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        # –†–∞–∑–±–∏–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø–∞—Ç—á–∏
        patches = self.extract_patches(image, patch_size=224, overlap=0.2)
        
        detections = []
        
        for patch_info in patches:
            patch = patch_info['patch']
            position = patch_info['position']
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç—á–∞
            input_tensor = self.transform(patch).unsqueeze(0).to(self.device)
            
            with torch.no_grad():
                # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Ç—å
                outputs = self.model(input_tensor)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                probabilities = torch.softmax(outputs, dim=1)
                predicted_class = torch.argmax(probabilities, dim=1).item()
                confidence = probabilities[0][predicted_class].item()
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                if confidence > 0.7 and predicted_class > 0:  # 0 - –∫–ª–∞—Å—Å "–Ω–æ—Ä–º–∞"
                    detections.append({
                        'position': position,
                        'class': predicted_class,
                        'confidence': confidence,
                        'bbox': (position[0], position[1], 224, 224),
                        'type': self.get_defect_type(predicted_class)
                    })
                    
        return detections
        
    def extract_patches(self, image, patch_size=224, overlap=0.2):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        patches = []
        step = int(patch_size * (1 - overlap))
        
        height, width = image.shape[:2]
        
        for y in range(0, height - patch_size + 1, step):
            for x in range(0, width - patch_size + 1, step):
                patch = image[y:y+patch_size, x:x+patch_size]
                
                patches.append({
                    'patch': patch,
                    'position': (x, y)
                })
                
        return patches
        
    def get_defect_type(self, class_id):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID –∫–ª–∞—Å—Å–∞ –≤ —Ç–∏–ø –¥–µ—Ñ–µ–∫—Ç–∞"""
        defect_types = {
            1: 'scratch',
            2: 'dent',
            3: 'inclusion',
            4: 'scale',
            5: 'crack',
            6: 'stain',
            7: 'corrosion',
            8: 'geometry'
        }
        
        return defect_types.get(class_id, 'unknown')

class DefectDetectionCNN(nn.Module):
    def __init__(self, num_classes=8):
        super(DefectDetectionCNN, self).__init__()
        
        # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å EfficientNet
        self.backbone = efficientnet_b4(pretrained=True)
        
        # –ó–∞–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        num_features = self.backbone.classifier.in_features
        self.backbone.classifier = nn.Sequential(
            nn.Dropout(0.3),
            nn.Linear(num_features, 512),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(512, num_classes)
        )
        
    def forward(self, x):
        return self.backbone(x)
```

## –ú–æ–¥—É–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π

–ú–æ–¥—É–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏—Ö –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏.

```python
class DefectClassificationModule:
    def __init__(self):
        self.size_classifier = DefectSizeClassifier()
        self.severity_assessor = DefectSeverityAssessor()
        self.measurement_engine = GeometricMeasurementEngine()
        
    def classify_defects(self, detections, image):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
        classified_defects = []
        
        for detection in detections:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–µ—Ñ–µ–∫—Ç–∞
            defect_roi = self.extract_defect_roi(image, detection)
            
            # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            measurements = self.measurement_engine.measure_defect(defect_roi, detection)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
            size_category = self.size_classifier.classify(measurements)
            
            # –û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            severity = self.severity_assessor.assess(detection['type'], measurements)
            
            classified_defect = {
                **detection,
                'measurements': measurements,
                'size_category': size_category,
                'severity': severity,
                'quality_impact': self.calculate_quality_impact(severity, measurements)
            }
            
            classified_defects.append(classified_defect)
            
        return classified_defects
        
    def extract_defect_roi(self, image, detection):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–µ—Ñ–µ–∫—Ç–∞"""
        bbox = detection['bbox']
        x, y, w, h = bbox
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        margin = 10
        x_start = max(0, x - margin)
        y_start = max(0, y - margin)
        x_end = min(image.shape[1], x + w + margin)
        y_end = min(image.shape[0], y + h + margin)
        
        roi = image[y_start:y_end, x_start:x_end]
        
        return roi

class GeometricMeasurementEngine:
    def __init__(self, pixel_size_mm=0.1):
        self.pixel_size_mm = pixel_size_mm  # —Ä–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è –≤ –º–º
        
    def measure_defect(self, roi, detection):
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ—Ñ–µ–∫—Ç–∞"""
        if 'contour' in detection:
            contour = detection['contour']
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞ –∏–∑ bbox
            bbox = detection['bbox']
            x, y, w, h = bbox
            contour = np.array([[x, y], [x+w, y], [x+w, y+h], [x, y+h]])
            
        measurements = {}
        
        # –ü–ª–æ—â–∞–¥—å
        area_pixels = cv2.contourArea(contour)
        measurements['area_mm2'] = area_pixels * (self.pixel_size_mm ** 2)
        
        # –ü–µ—Ä–∏–º–µ—Ç—Ä
        perimeter_pixels = cv2.arcLength(contour, True)
        measurements['perimeter_mm'] = perimeter_pixels * self.pixel_size_mm
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        rect = cv2.minAreaRect(contour)
        width_pixels, height_pixels = rect[1]
        measurements['width_mm'] = width_pixels * self.pixel_size_mm
        measurements['height_mm'] = height_pixels * self.pixel_size_mm
        measurements['length_mm'] = max(measurements['width_mm'], measurements['height_mm'])
        
        # –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä
        equivalent_diameter = 2 * np.sqrt(area_pixels / np.pi)
        measurements['equivalent_diameter_mm'] = equivalent_diameter * self.pixel_size_mm
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–æ—Ä–º—ã
        measurements['circularity'] = 4 * np.pi * area_pixels / (perimeter_pixels ** 2)
        measurements['aspect_ratio'] = max(width_pixels, height_pixels) / min(width_pixels, height_pixels)
        
        # –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
        measurements['orientation_deg'] = rect[2]
        
        # –í—ã–ø—É–∫–ª–æ—Å—Ç—å
        hull = cv2.convexHull(contour)
        hull_area = cv2.contourArea(hull)
        measurements['convexity'] = area_pixels / hull_area if hull_area > 0 else 0
        
        return measurements

class DefectSeverityAssessor:
    def __init__(self):
        self.severity_rules = self.load_severity_rules()
        
    def load_severity_rules(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        return {
            'scratch': {
                'critical': {'length_mm': 50, 'width_mm': 2},
                'major': {'length_mm': 20, 'width_mm': 1},
                'minor': {'length_mm': 5, 'width_mm': 0.5}
            },
            'dent': {
                'critical': {'area_mm2': 100, 'depth_mm': 1},
                'major': {'area_mm2': 25, 'depth_mm': 0.5},
                'minor': {'area_mm2': 5, 'depth_mm': 0.1}
            },
            'inclusion': {
                'critical': {'area_mm2': 50},
                'major': {'area_mm2': 10},
                'minor': {'area_mm2': 2}
            },
            'crack': {
                'critical': {'length_mm': 10},
                'major': {'length_mm': 5},
                'minor': {'length_mm': 1}
            }
        }
        
    def assess(self, defect_type, measurements):
        """–û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–µ—Ñ–µ–∫—Ç–∞"""
        if defect_type not in self.severity_rules:
            return 'unknown'
            
        rules = self.severity_rules[defect_type]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        if self.check_severity_level(measurements, rules.get('critical', {})):
            return 'critical'
        elif self.check_severity_level(measurements, rules.get('major', {})):
            return 'major'
        elif self.check_severity_level(measurements, rules.get('minor', {})):
            return 'minor'
        else:
            return 'negligible'
            
    def check_severity_level(self, measurements, rules):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Ä–æ–≤–Ω—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        for parameter, threshold in rules.items():
            if parameter in measurements:
                if measurements[parameter] >= threshold:
                    return True
        return False
```

## –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π

–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

```python
class QualityDecisionSystem:
    def __init__(self):
        self.quality_standards = self.load_quality_standards()
        self.decision_rules = self.load_decision_rules()
        self.statistical_analyzer = StatisticalQualityAnalyzer()
        
    def load_quality_standards(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        return {
            'automotive_grade': {
                'max_critical_defects': 0,
                'max_major_defects': 2,
                'max_minor_defects': 5,
                'max_total_defect_area': 100  # –º–º¬≤
            },
            'construction_grade': {
                'max_critical_defects': 1,
                'max_major_defects': 5,
                'max_minor_defects': 10,
                'max_total_defect_area': 500  # –º–º¬≤
            },
            'general_purpose': {
                'max_critical_defects': 2,
                'max_major_defects': 8,
                'max_minor_defects': 15,
                'max_total_defect_area': 1000  # –º–º¬≤
            }
        }
        
    def make_quality_decision(self, classified_defects, material_grade='general_purpose'):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ"""
        # –ü–æ–¥—Å—á–µ—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        defect_counts = self.count_defects_by_severity(classified_defects)
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
        total_defect_area = sum(d['measurements']['area_mm2'] for d in classified_defects)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞
        standards = self.quality_standards.get(material_grade, self.quality_standards['general_purpose'])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
        decision_result = {
            'quality_grade': material_grade,
            'total_defects': len(classified_defects),
            'defect_counts': defect_counts,
            'total_defect_area_mm2': total_defect_area,
            'standards': standards,
            'violations': [],
            'overall_decision': 'accept',
            'confidence': 0.0
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        if defect_counts['critical'] > standards['max_critical_defects']:
            decision_result['violations'].append(
                f"Critical defects: {defect_counts['critical']} > {standards['max_critical_defects']}"
            )
            decision_result['overall_decision'] = 'reject'
            
        if defect_counts['major'] > standards['max_major_defects']:
            decision_result['violations'].append(
                f"Major defects: {defect_counts['major']} > {standards['max_major_defects']}"
            )
            decision_result['overall_decision'] = 'reject'
            
        if defect_counts['minor'] > standards['max_minor_defects']:
            decision_result['violations'].append(
                f"Minor defects: {defect_counts['minor']} > {standards['max_minor_defects']}"
            )
            if decision_result['overall_decision'] == 'accept':
                decision_result['overall_decision'] = 'conditional_accept'
                
        if total_defect_area > standards['max_total_defect_area']:
            decision_result['violations'].append(
                f"Total defect area: {total_defect_area:.1f} > {standards['max_total_defect_area']}"
            )
            decision_result['overall_decision'] = 'reject'
            
        # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è
        decision_result['confidence'] = self.calculate_decision_confidence(
            classified_defects, decision_result
        )
        
        return decision_result
        
    def count_defects_by_severity(self, classified_defects):
        """–ü–æ–¥—Å—á–µ—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        counts = {'critical': 0, 'major': 0, 'minor': 0, 'negligible': 0}
        
        for defect in classified_defects:
            severity = defect.get('severity', 'negligible')
            counts[severity] = counts.get(severity, 0) + 1
            
        return counts
        
    def calculate_decision_confidence(self, classified_defects, decision_result):
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–Ω—è—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏"""
        if not classified_defects:
            return 0.95  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
            
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤
        avg_detection_confidence = np.mean([
            d.get('confidence', 0.5) for d in classified_defects
        ])
        
        # –§–∞–∫—Ç–æ—Ä –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
        standards = decision_result['standards']
        defect_counts = decision_result['defect_counts']
        
        proximity_factors = []
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã
        if standards['max_critical_defects'] > 0:
            proximity = defect_counts['critical'] / standards['max_critical_defects']
            proximity_factors.append(min(1.0, proximity))
        else:
            proximity_factors.append(1.0 if defect_counts['critical'] > 0 else 0.0)
            
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã
        proximity = defect_counts['major'] / standards['max_major_defects']
        proximity_factors.append(min(1.0, proximity))
        
        # –û–±—â–∏–π —Ñ–∞–∫—Ç–æ—Ä –±–ª–∏–∑–æ—Å—Ç–∏
        max_proximity = max(proximity_factors) if proximity_factors else 0.0
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = avg_detection_confidence * (1.0 - 0.3 * max_proximity)
        
        return max(0.1, min(0.99, confidence))

class StatisticalQualityAnalyzer:
    def __init__(self):
        self.quality_history = []
        self.control_limits = {}
        
    def update_quality_statistics(self, decision_result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        timestamp = time.time()
        
        quality_record = {
            'timestamp': timestamp,
            'decision': decision_result['overall_decision'],
            'total_defects': decision_result['total_defects'],
            'defect_counts': decision_result['defect_counts'],
            'total_defect_area': decision_result['total_defect_area_mm2']
        }
        
        self.quality_history.append(quality_record)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.quality_history) > 1000:
            self.quality_history = self.quality_history[-1000:]
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
        self.update_control_limits()
        
    def update_control_limits(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –¥–ª—è SPC"""
        if len(self.quality_history) < 30:
            return
            
        recent_data = self.quality_history[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
        
        # –î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        defect_rates = [record['total_defects'] for record in recent_data]
        
        mean_defects = np.mean(defect_rates)
        std_defects = np.std(defect_rates)
        
        self.control_limits = {
            'defect_rate': {
                'center_line': mean_defects,
                'upper_control_limit': mean_defects + 3 * std_defects,
                'lower_control_limit': max(0, mean_defects - 3 * std_defects),
                'upper_warning_limit': mean_defects + 2 * std_defects,
                'lower_warning_limit': max(0, mean_defects - 2 * std_defects)
            }
        }
        
    def check_process_stability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if len(self.quality_history) < 10:
            return {'stable': True, 'alerts': []}
            
        recent_data = self.quality_history[-10:]
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        defect_rates = [record['total_defects'] for record in recent_data]
        
        # –¢—Ä–µ–Ω–¥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤
        if len(defect_rates) >= 7:
            increasing_trend = all(
                defect_rates[i] <= defect_rates[i+1] 
                for i in range(len(defect_rates)-1)
            )
            
            if increasing_trend:
                alerts.append("Increasing defect trend detected")
                
        # –í—ã—Ö–æ–¥ –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        if 'defect_rate' in self.control_limits:
            ucl = self.control_limits['defect_rate']['upper_control_limit']
            
            for record in recent_data[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
                if record['total_defects'] > ucl:
                    alerts.append(f"Defect rate above UCL: {record['total_defects']:.2f} > {ucl:.2f}")
                    
        return {
            'stable': len(alerts) == 0,
            'alerts': alerts,
            'control_limits': self.control_limits
        }
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–¥–∞—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º.

```python
class ProductionSystemIntegration:
    def __init__(self):
        self.plc_interface = PLCInterface()
        self.mes_interface = MESInterface()
        self.marking_system = DefectMarkingSystem()
        self.data_archiver = QualityDataArchiver()
        
    def process_quality_decision(self, decision_result, material_info):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ"""
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ü–õ–ö
        self.send_plc_signal(decision_result)
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ MES
        self.send_mes_data(decision_result, material_info)
        
        # –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–µ—Ñ–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        if decision_result['overall_decision'] == 'reject':
            self.mark_defective_material(decision_result, material_info)
            
        # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.archive_quality_data(decision_result, material_info)
        
    def send_plc_signal(self, decision_result):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ü–õ–ö"""
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ü–õ–ö
            signals = {
                'quality_ok': decision_result['overall_decision'] == 'accept',
                'quality_conditional': decision_result['overall_decision'] == 'conditional_accept',
                'quality_reject': decision_result['overall_decision'] == 'reject',
                'defect_count': decision_result['total_defects'],
                'critical_defects': decision_result['defect_counts']['critical']
            }
            
            self.plc_interface.write_signals(signals)
            
        except Exception as e:
            self.log_error(f"PLC communication error: {e}")

class PLCInterface:
    def __init__(self):
        self.client = None
        self.connect_to_plc()
        
    def connect_to_plc(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ü–õ–ö"""
        try:
            from pymodbus.client.sync import ModbusTcpClient
            
            self.client = ModbusTcpClient('192.168.1.100', port=502)
            connection = self.client.connect()
            
            if not connection:
                raise ConnectionError("Failed to connect to PLC")
                
        except Exception as e:
            print(f"PLC connection error: {e}")
            
    def write_signals(self, signals):
        """–ó–∞–ø–∏—Å—å —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ü–õ–ö"""
        if not self.client:
            return False
            
        try:
            # –ê–¥—Ä–µ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –≤ –ü–õ–ö
            register_map = {
                'quality_ok': 100,
                'quality_conditional': 101,
                'quality_reject': 102,
                'defect_count': 103,
                'critical_defects': 104
            }
            
            for signal_name, value in signals.items():
                if signal_name in register_map:
                    address = register_map[signal_name]
                    
                    if isinstance(value, bool):
                        # –ó–∞–ø–∏—Å—å –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                        self.client.write_coil(address, value)
                    else:
                        # –ó–∞–ø–∏—Å—å –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                        self.client.write_register(address, int(value))
                        
            return True
            
        except Exception as e:
            print(f"PLC write error: {e}")
            return False

class MESInterface:
    def __init__(self):
        self.api_url = "http://mes-server:8080/api/quality"
        self.api_key = "your-api-key"
        
    def send_quality_data(self, decision_result, material_info):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞ –≤ MES"""
        try:
            import requests
            
            payload = {
                'material_id': material_info['id'],
                'batch_number': material_info['batch'],
                'timestamp': time.time(),
                'quality_decision': decision_result['overall_decision'],
                'defect_summary': decision_result['defect_counts'],
                'total_defects': decision_result['total_defects'],
                'confidence': decision_result['confidence'],
                'violations': decision_result['violations']
            }
            
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            response = requests.post(
                self.api_url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            response.raise_for_status()
            return True
            
        except Exception as e:
            print(f"MES communication error: {e}")
            return False

class DefectMarkingSystem:
    def __init__(self):
        self.marking_printer = InkjetPrinter()
        self.spray_system = SprayMarkingSystem()
        
    def mark_defective_material(self, decision_result, material_info):
        """–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–µ—Ñ–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
            marking_text = self.generate_marking_text(decision_result, material_info)
            
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤
            if decision_result['defect_counts']['critical'] > 0:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã - –∫—Ä–∞—Å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
                self.spray_system.mark_material(marking_text, color='red')
            else:
                # –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã - –∂–µ–ª—Ç–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
                self.marking_printer.print_marking(marking_text, color='yellow')
                
        except Exception as e:
            print(f"Marking system error: {e}")
            
    def generate_marking_text(self, decision_result, material_info):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        marking_text = f"DEFECT_{timestamp}\n"
        marking_text += f"BATCH: {material_info['batch']}\n"
        marking_text += f"CRITICAL: {decision_result['defect_counts']['critical']}\n"
        marking_text += f"MAJOR: {decision_result['defect_counts']['major']}"
        
        return marking_text
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å

–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

```python
class QualityMonitoringSystem:
    def __init__(self):
        self.performance_monitor = PerformanceMonitor()
        self.quality_reporter = QualityReporter()
        self.alert_manager = AlertManager()
        self.dashboard = QualityDashboard()
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.performance_monitor.start()
        self.dashboard.start()
        
    def update_metrics(self, processing_result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.performance_monitor.update_metrics(processing_result)
        self.dashboard.update_display(processing_result)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        alerts = self.alert_manager.check_alerts(processing_result)
        if alerts:
            self.handle_alerts(alerts)

class QualityReporter:
    def __init__(self):
        self.report_templates = self.load_report_templates()
        
    def generate_shift_report(self, start_time, end_time):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–º–µ–Ω—É"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥
        quality_data = self.get_quality_data(start_time, end_time)
        
        report = {
            'period': {
                'start': start_time,
                'end': end_time,
                'duration_hours': (end_time - start_time) / 3600
            },
            'production_summary': self.calculate_production_summary(quality_data),
            'quality_metrics': self.calculate_quality_metrics(quality_data),
            'defect_analysis': self.analyze_defects(quality_data),
            'trends': self.analyze_trends(quality_data),
            'recommendations': self.generate_recommendations(quality_data)
        }
        
        return report
        
    def calculate_quality_metrics(self, quality_data):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
        total_inspected = len(quality_data)
        
        if total_inspected == 0:
            return {}
            
        accepted = sum(1 for d in quality_data if d['decision'] == 'accept')
        rejected = sum(1 for d in quality_data if d['decision'] == 'reject')
        conditional = sum(1 for d in quality_data if d['decision'] == 'conditional_accept')
        
        metrics = {
            'total_inspected': total_inspected,
            'acceptance_rate': accepted / total_inspected * 100,
            'rejection_rate': rejected / total_inspected * 100,
            'conditional_rate': conditional / total_inspected * 100,
            'first_pass_yield': accepted / total_inspected * 100,
            'average_defects_per_unit': np.mean([d['total_defects'] for d in quality_data]),
            'defect_density': sum(d['total_defects'] for d in quality_data) / total_inspected
        }
        
        return metrics
        
    def analyze_defects(self, quality_data):
        """–ê–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
        defect_types = {}
        severity_distribution = {'critical': 0, 'major': 0, 'minor': 0, 'negligible': 0}
        
        for record in quality_data:
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤
            for defect in record.get('defects', []):
                defect_type = defect.get('type', 'unknown')
                defect_types[defect_type] = defect_types.get(defect_type, 0) + 1
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                severity = defect.get('severity', 'negligible')
                severity_distribution[severity] += 1
                
        # –ü–∞—Ä–µ—Ç–æ-–∞–Ω–∞–ª–∏–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤
        sorted_defects = sorted(defect_types.items(), key=lambda x: x[1], reverse=True)
        total_defects = sum(defect_types.values())
        
        pareto_analysis = []
        cumulative_percent = 0
        
        for defect_type, count in sorted_defects:
            percent = count / total_defects * 100 if total_defects > 0 else 0
            cumulative_percent += percent
            
            pareto_analysis.append({
                'defect_type': defect_type,
                'count': count,
                'percentage': percent,
                'cumulative_percentage': cumulative_percent
            })
            
        return {
            'defect_types': defect_types,
            'severity_distribution': severity_distribution,
            'pareto_analysis': pareto_analysis,
            'top_3_defects': sorted_defects[:3]
        }

class QualityDashboard:
    def __init__(self):
        self.app = self.create_dashboard_app()
        self.current_metrics = {}
        
    def create_dashboard_app(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞"""
        from flask import Flask, render_template, jsonify
        
        app = Flask(__name__)
        
        @app.route('/')
        def dashboard():
            return render_template('quality_dashboard.html')
            
        @app.route('/api/metrics')
        def get_metrics():
            return jsonify(self.current_metrics)
            
        @app.route('/api/alerts')
        def get_alerts():
            return jsonify(self.get_active_alerts())
            
        return app
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        self.app.run(host='0.0.0.0', port=5000, debug=False)
        
    def update_display(self, processing_result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.current_metrics = {
            'timestamp': time.time(),
            'processing_time': processing_result.get('processing_time', 0),
            'quality_decision': processing_result.get('decision', {}).get('overall_decision'),
            'defect_count': processing_result.get('decision', {}).get('total_defects', 0),
            'confidence': processing_result.get('decision', {}).get('confidence', 0),
            'throughput': self.calculate_throughput(),
            'system_status': 'operational'
        }
```

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è

–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.

```python
class SystemDeployment:
    def __init__(self):
        self.deployment_config = self.load_deployment_config()
        self.installation_manager = InstallationManager()
        self.commissioning_manager = CommissioningManager()
        
    def deploy_system(self):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            self.prepare_infrastructure()
            
            # –≠—Ç–∞–ø 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            self.install_hardware()
            
            # –≠—Ç–∞–ø 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
            self.install_software()
            
            # –≠—Ç–∞–ø 4: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            self.calibrate_system()
            
            # –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.run_acceptance_tests()
            
            # –≠—Ç–∞–ø 6: –í–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é
            self.commission_system()
            
            return True
            
        except Exception as e:
            self.log_error(f"Deployment failed: {e}")
            return False
            
    def prepare_infrastructure(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        network_check = self.check_network_infrastructure()
        if not network_check['passed']:
            raise Exception(f"Network infrastructure check failed: {network_check['errors']}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è
        power_check = self.check_power_infrastructure()
        if not power_check['passed']:
            raise Exception(f"Power infrastructure check failed: {power_check['errors']}")
            
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–Ω—Ç–∞–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        self.prepare_mounting_structures()
        
    def run_acceptance_tests(self):
        """–ü—Ä–∏–µ–º–æ—á–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"""
        test_suite = AcceptanceTestSuite()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_result = test_suite.test_performance()
        
        # –¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy_result = test_suite.test_accuracy()
        
        # –¢–µ—Å—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        reliability_result = test_suite.test_reliability()
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integration_result = test_suite.test_integration()
        
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        test_report = {
            'performance': performance_result,
            'accuracy': accuracy_result,
            'reliability': reliability_result,
            'integration': integration_result,
            'overall_passed': all([
                performance_result['passed'],
                accuracy_result['passed'],
                reliability_result['passed'],
                integration_result['passed']
            ])
        }
        
        if not test_report['overall_passed']:
            raise Exception(f"Acceptance tests failed: {test_report}")
            
        return test_report

class MaintenanceManager:
    def __init__(self):
        self.maintenance_schedule = self.create_maintenance_schedule()
        self.diagnostic_tools = DiagnosticTools()
        
    def create_maintenance_schedule(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        return {
            'daily': [
                'check_camera_cleanliness',
                'verify_lighting_operation',
                'check_system_logs'
            ],
            'weekly': [
                'calibration_verification',
                'performance_metrics_review',
                'backup_system_data'
            ],
            'monthly': [
                'full_system_calibration',
                'hardware_inspection',
                'software_updates'
            ],
            'quarterly': [
                'comprehensive_accuracy_test',
                'preventive_maintenance',
                'training_refresh'
            ]
        }
        
    def perform_maintenance(self, maintenance_type):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        tasks = self.maintenance_schedule.get(maintenance_type, [])
        
        maintenance_report = {
            'type': maintenance_type,
            'timestamp': time.time(),
            'tasks': [],
            'issues_found': [],
            'recommendations': []
        }
        
        for task in tasks:
            task_result = self.execute_maintenance_task(task)
            maintenance_report['tasks'].append(task_result)
            
            if not task_result['passed']:
                maintenance_report['issues_found'].append(task_result)
                
        return maintenance_report
```

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ ROI

–ê–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞.

```python
class ROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'hardware': {
                'cameras': 4 * 150000,  # 4 –∫–∞–º–µ—Ä—ã –ø–æ 150,000 —Ä—É–±
                'lighting': 200000,     # –°–∏—Å—Ç–µ–º–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è
                'computer': 300000,     # –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä
                'networking': 100000,   # –°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'mounting': 150000      # –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            },
            'software': {
                'licenses': 500000,     # –õ–∏—Ü–µ–Ω–∑–∏–∏ –ü–û
                'development': 2000000, # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û
                'integration': 800000   # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏
            },
            'installation': {
                'engineering': 600000,  # –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
                'commissioning': 400000, # –ü—É—Å–∫–æ-–Ω–∞–ª–∞–¥–∫–∞
                'training': 200000      # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            },
            'annual_operating': {
                'maintenance': 300000,  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                'support': 200000,      # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                'utilities': 50000      # –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'labor_savings': {
                'operators_replaced': 6,        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                'annual_salary': 600000,        # –ì–æ–¥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                'benefits_multiplier': 1.4      # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ—Ü. –≤–∑–Ω–æ—Å–æ–≤
            },
            'quality_improvements': {
                'defect_detection_improvement': 0.15,  # –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ 15%
                'cost_of_defect': 50000,              # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞
                'annual_production': 100000            # –ì–æ–¥–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            },
            'productivity_gains': {
                'speed_increase': 0.25,         # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ 25%
                'throughput_value': 1000,       # –°—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                'annual_volume': 100000         # –ì–æ–¥–æ–≤–æ–π –æ–±—ä–µ–º
            },
            'rework_reduction': {
                'rework_rate_reduction': 0.08,  # –°–Ω–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–µ–ª–æ–∫ –Ω–∞ 8%
                'rework_cost': 15000,           # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥–µ–ª–∫–∏
                'annual_production': 100000     # –ì–æ–¥–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        total_hardware = sum(costs['hardware'].values())
        total_software = sum(costs['software'].values())
        total_installation = sum(costs['installation'].values())
        
        total_investment = total_hardware + total_software + total_installation
        
        return {
            'hardware': total_hardware,
            'software': total_software,
            'installation': total_installation,
            'total': total_investment
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ
        labor_savings = (
            benefits['labor_savings']['operators_replaced'] *
            benefits['labor_savings']['annual_salary'] *
            benefits['labor_savings']['benefits_multiplier']
        )
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_savings = (
            benefits['quality_improvements']['defect_detection_improvement'] *
            benefits['quality_improvements']['cost_of_defect'] *
            benefits['quality_improvements']['annual_production']
        )
        
        # –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        productivity_gains = (
            benefits['productivity_gains']['speed_increase'] *
            benefits['productivity_gains']['throughput_value'] *
            benefits['productivity_gains']['annual_volume']
        )
        
        # –°–Ω–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–µ–ª–æ–∫
        rework_savings = (
            benefits['rework_reduction']['rework_rate_reduction'] *
            benefits['rework_reduction']['rework_cost'] *
            benefits['rework_reduction']['annual_production']
        )
        
        total_annual_benefits = (
            labor_savings + quality_savings + 
            productivity_gains + rework_savings
        )
        
        return {
            'labor_savings': labor_savings,
            'quality_improvements': quality_savings,
            'productivity_gains': productivity_gains,
            'rework_reduction': rework_savings,
            'total': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=5):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        annual_operating_costs = sum(self.cost_factors['annual_operating'].values())
        
        net_annual_benefits = annual_benefits['total'] - annual_operating_costs
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.12  # 12% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        npv = -investment['total']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total']) / investment['total']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'annual_operating_costs': annual_operating_costs,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ ROI
roi_calculator = ROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['annual_operating_costs']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 5 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")
```

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∏–∑—É—á–µ–Ω–Ω—ã—Ö –≤ –ú–æ–¥—É–ª–µ 4. –ü—Ä–æ–µ–∫—Ç –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –Ω–∞—á–∏–Ω–∞—è –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –º–æ–¥—É–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ—Ç—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç–∏—á—å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

–°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–æ—Å—å–º–∏ —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 95%, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ—Å—à–æ–≤–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1.4 –≥–æ–¥–∞, ROI –∑–∞ –ø—è—Ç—å –ª–µ—Ç - 267%, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç —ç–∫–æ–Ω–æ–º–∏—é –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ, —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä–µ–¥–µ–ª–∫–∏.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –ü—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–∞—á–µ—Å—Ç–≤—É, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–æ–±–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π, –≤–∫–ª—é—á–∞—é—â–∏—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é, —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑. –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∏—Å—Ç–µ–º—ã - –æ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ - —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —É—Å–ø–µ—Ö–∞ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ.

–†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—â–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ Industry 4.0, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤–µ—â–µ–π –∏ –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.

–ë—É–¥—É—â–µ–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –∫ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—é –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

–î–∞–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–ª—É–∂–∏—Ç –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—É —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤–Ω–µ–¥—Ä—è—Ç—å –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—â–∏–µ –∏—Ö —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.
`
  },

  23: {
    title: "AI –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ",
    duration: 160,
    type: "theory",
    module: 5,
    content: `
# –£—Ä–æ–∫ 23: AI –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏

–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω—É—é –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —ç–Ω–µ—Ä–≥–∏–∏, —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–µ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–ª—é—á–µ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –µ–¥–∏–Ω—É—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º—É.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º—ã –≤–∫–ª—é—á–∞—é—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏, —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –º–∏–ª–ª–∏–æ–Ω—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á: –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π –¥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–æ—Å–æ–º –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.

–†–æ—Å—Å–∏–π—Å–∫–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Å—à—Ç–∞–±–∞–º–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —ç–Ω–µ—Ä–≥–æ–±–∞–ª–∞–Ω—Å–∞ –∏ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–æ–π. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Å—à—Ç–∞–±–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞, —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø–æ—Ç–µ—Ä—å –≤ —Å–µ—Ç—è—Ö –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É—Å—Ç–æ–π—á–∏–≤–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π –¥–µ–∫–∞—Ä–±–æ–Ω–∏–∑–∞—Ü–∏–∏.

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞

–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –æ–±–ª–∞–¥–∞–µ—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**

–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –æ—Ç–∫–∞–∑ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–∞—Å–∫–∞–¥–Ω—ã–º –∞–≤–∞—Ä–∏—è–º –∏ —Å–µ—Ä—å–µ–∑–Ω—ã–º —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤—ã—Å–æ—á–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º, –≤–∫–ª—é—á–∞—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ —Å–±–æ–µ–≤.

–°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è —Å—Ç—Ä–æ–≥–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ IEC 61508 (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å), IEC 61850 (–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π), NERC CIP (–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã). AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.

**–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ:**

–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏. –õ—é–±–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –≤ —Å–µ—Ç–∏, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–∞—Å–∫–∞–¥–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ.

–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è –æ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (–∑–∞—â–∏—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞) –¥–æ —á–∞—Å–æ–≤ –∏ –¥–Ω–µ–π (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞). AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–ø–æ—Å–æ–±–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞—Ö –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏.

**–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å:**

–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –æ–≥—Ä–æ–º–Ω—ã–º–∏ –º–∞—Å—à—Ç–∞–±–∞–º–∏ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å—é. –ï–¥–∏–Ω–∞—è —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∞ –†–æ—Å—Å–∏–∏ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –æ—Ç –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ –¥–æ –ß—É–∫–æ—Ç–∫–∏ –∏ –≤–∫–ª—é—á–∞–µ—Ç —Ç—ã—Å—è—á–∏ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π, —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –ª–∏–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–ø–µ—Ä–µ–¥–∞—á–∏ –∏ –º–∏–ª–ª–∏–æ–Ω—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–æ—Å–æ–±–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ AI-—Ä–µ—à–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ —Å–≤—è–∑–∏ —Å –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏.

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:**

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º—ã –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–ø–ª–æ–≤—ã–µ –∏ –≥–∏–¥—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏, –∞—Ç–æ–º–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏, –≤–µ—Ç—Ä–æ–≤—ã–µ –∏ —Å–æ–ª–Ω–µ—á–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏, —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏, —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–¥–∞–Ω–∏—è. –ö–∞–∂–¥–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —ç—Ç–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏ –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏—Ö—Å—è –≤—ã—Å–æ–∫–æ–π –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å—é –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å—é.

**–†–µ–≥—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—Ä–µ–¥–∞ –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã:**

–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —Å—Ç—Ä–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ–º –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤. –í –†–æ—Å—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –æ–ø—Ç–æ–≤—ã–π —Ä—ã–Ω–æ–∫ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∏ –º–æ—â–Ω–æ—Å—Ç–∏ (–û–†–≠–ú), —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏, —Å–∏—Å—Ç–µ–º–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (–ê–û "–°–û –ï–≠–°") –∏ –¥—Ä—É–≥–∏–µ —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã.

AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö, —Ç–∞—Ä–∏—Ñ–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏: –æ—Ç –¥–æ–±—ã—á–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–æ—Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ –∏—Ö –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π:**

AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π —Å —Ü–µ–ª—å—é –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ, —Å–Ω–∏–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –î–ª—è —Ç–µ–ø–ª–æ–≤—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π AI –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–∂–∏–≥–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞, —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—á–∏—Å—Ç–∫–∏ –¥—ã–º–æ–≤—ã—Ö –≥–∞–∑–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.

–ù–∞ –≥–∏–¥—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è—Ö –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Ç—É—Ä–±–∏–Ω —Å —É—á–µ—Ç–æ–º –≥–∏–¥—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤–æ–¥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç –∫–∞—Å–∫–∞–¥–Ω—É—é —Ä–∞–±–æ—Ç—É –ì–≠–°, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Ä–∞–±–æ—Ç–∫—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

–î–ª—è –∞—Ç–æ–º–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π AI –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–µ–π—Ç—Ä–æ–Ω–Ω–æ-—Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Ä–µ–∞–∫—Ç–æ—Ä–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫ —Ç–æ–ø–ª–∏–≤–∞. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏:**

–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å—é –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ç–æ—á–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ç—Ä–æ–≤—ã—Ö –∏ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

–ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏: —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞, –æ–±–ª–∞—á–Ω–æ—Å—Ç—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –¢–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤—ã –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º—ã.

AI —Ç–∞–∫–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –≤–µ—Ç—Ä–æ–≤—ã–µ –∏ —Å–æ–ª–Ω–µ—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, –±–ª–∏–∑–æ—Å—Ç—å –∫ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ, —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –∑–µ–ª–µ–Ω—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–µ—Ç—è–º–∏:**

–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ç–∏ (Smart Grid) –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏, –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è. AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ—Ç–æ–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–∏ –∞–≤–∞—Ä–∏—è—Ö –∏–ª–∏ –ø–ª–∞–Ω–æ–≤—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö.

–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–æ—Å–æ–º (Demand Response) –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–µ–∂–∏–º–æ–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≥–ª–∞–∂–∏–≤–∞—Ç—å –ø–∏–∫–æ–≤—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–≤—ã—à–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π.

AI –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –∫—Ä—ã—à–∞—Ö –¥–æ–º–æ–≤, –º–∞–ª—ã—Ö –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤, —Å–∏—Å—Ç–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏, —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É —Ç—ã—Å—è—á –º–µ–ª–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–≤–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏—Ö —É—á–∞—Å—Ç–∏–µ –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö.

**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:**

AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞—Ö: –æ—Ç –º–∏–Ω—É—Ç –¥–æ –ª–µ—Ç. –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–æ–π, —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ - –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–æ–≤, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ - –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

–ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏: –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ. –¢–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏.

–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è —ç–∫–æ–Ω–æ–º–∏–∫–∏, –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –Ω–æ–≤—ã—Ö –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã AI –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏

–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞—á–∞–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –æ—Ç—Ä–∞—Å–ª–∏.

**–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:**

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –≤–ª–∞–¥–µ—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏, —Ü–µ–Ω –Ω–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö.

–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (RNN), –æ—Å–æ–±–µ–Ω–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã LSTM –∏ GRU, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –º–æ–¥–µ–ª–∏—Ä—É—é—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. Transformer-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ Temporal Fusion Transformer, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏ –∏ –≤–Ω–µ—à–Ω–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏.

–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ–º–±–∏–Ω–∏—Ä—É—é—â–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–≤—ã—à–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. –ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ—Ü–µ–Ω–∫—É –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**

–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –∏ —Ü–µ–ª–µ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–µ—Ç–æ–¥—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

–û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º (Reinforcement Learning) –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –∑–∞–¥–∞—á —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã Deep Q-Network (DQN), Actor-Critic –∏ Proximal Policy Optimization (PPO) –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è —É—Å–ª–æ–≤–∏–π –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.

–ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º —Å–∏—Å—Ç–µ–º—ã (—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–µ–π, –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–µ–π, –∫—Ä—É–ø–Ω—ã–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–º) –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–±—â–∏—Ö —Ü–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã.

**–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:**

–†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–≤–∞—Ä–∏–π –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è. AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤, —Å–∏—Å—Ç–µ–º—ã SCADA –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.

–ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã –∏ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ú–µ—Ç–æ–¥—ã –∏–∑–æ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –ª–µ—Å–∞ (Isolation Forest) –∏ One-Class SVM –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ–¥–∫–∏—Ö —Ç–∏–ø–æ–≤ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

–°–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç.

**–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ:**

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö. –î—Ä–æ–Ω—ã, –æ—Å–Ω–∞—â–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä–∞–º–∏ –∏ —Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä–∞–º–∏, –ø—Ä–æ–≤–æ–¥—è—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏—é –ª–∏–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–ø–µ—Ä–µ–¥–∞—á–∏, –≤—ã—è–≤–ª—è—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑–æ–ª—è—Ç–æ—Ä–æ–≤, –∫–æ—Ä—Ä–æ–∑–∏—é –ø—Ä–æ–≤–æ–¥–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã.

–°–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –ø–æ–∫–∞–∑–∞–Ω–∏—è –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤–æ–¥—è—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.

–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–±–ª–∏–∑–∏ –ª–∏–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ–ø–µ—Ä–µ–¥–∞—á–∏, –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã

–†–æ—Å—Å–∏–π—Å–∫–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Ä—è–¥ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:**

–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –†–æ—Å—Å–∏–∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º "–û–± —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ", –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∞–∫—Ç–∞–º–∏ –ú–∏–Ω—ç–Ω–µ—Ä–≥–æ –†–æ—Å—Å–∏–∏ –∏ –§–ê–° –†–æ—Å—Å–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —ç—Ç–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.

–ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ç–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∏ –º–æ—â–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–µ–π –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ä—ã–Ω–∫–∞. AI-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º —Ä—ã–Ω–æ—á–Ω—ã–º –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º.

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã (–ì–û–°–¢ –†, –°–¢–û) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é, —Å–∏—Å—Ç–µ–º–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º –≤—Å–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.

**–°–∏—Å—Ç–µ–º–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**

–ê–û "–°–∏—Å—Ç–µ–º–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ï–¥–∏–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã" (–°–û –ï–≠–°) –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ-–¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–æ–π –†–æ—Å—Å–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –°–û –ï–≠–° –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.

–î–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SCADA-—Å–∏—Å—Ç–µ–º—ã –∏ –∫–æ–º–ø–ª–µ–∫—Å—ã –ø—Ä–æ—Ç–∏–≤–æ–∞–≤–∞—Ä–∏–π–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏. AI-—Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —ç—Ç–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é.

**–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**

–†–æ—Å—Å–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —Å—É—Ä–æ–≤—ã–º–∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏, –±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–æ–∫, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏.

–°–µ–≤–µ—Ä–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —ç–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—é, –≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–∏—Å—Ç–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è. AI-—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞ –∏ –°–∏–±–∏—Ä–∏ —Å –ï–¥–∏–Ω–æ–π —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–∂—Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø–µ—Ä–µ—Ç–æ–∫–∞–º–∏ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.

**–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ:**

–ü–æ–ª–∏—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Ä–µ—à–µ–Ω–∏–π. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ SCADA-—Å–∏—Å—Ç–µ–º—ã (–ö–†–£–ì-2000, TRACE MODE, MasterSCADA) –∏–º–µ—é—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgresPro, ClickHouse) –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (Astra Linux, –†–ï–î –û–°) –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AI-—Ä–µ—à–µ–Ω–∏–π.

–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –Ω–∞—É—á–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ (–ò–ü–£ –†–ê–ù, –ò–°–≠–ú –°–û –†–ê–ù, –ù–ò–£ "–ú–≠–ò") –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–¥–æ–≤—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞–º –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —É—Å–ª–æ–≤–∏—è–º.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–æ–π

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–æ–π. –°–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
import cvxpy as cp
from datetime import datetime, timedelta
import asyncio
import aiohttp
import logging

class RegionalEnergyManagementSystem:
    def __init__(self):
        self.load_forecaster = LoadForecastingModule()
        self.renewable_forecaster = RenewableForecastingModule()
        self.unit_commitment = UnitCommitmentOptimizer()
        self.grid_optimizer = GridFlowOptimizer()
        self.market_interface = EnergyMarketInterface()
        self.scada_interface = SCADAInterface()
        
    async def run_optimization_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        while True:
            try:
                # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                current_data = await self.collect_system_data()
                
                # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                load_forecast = self.load_forecaster.forecast(current_data)
                renewable_forecast = self.renewable_forecaster.forecast(current_data)
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                unit_schedule = self.unit_commitment.optimize(
                    load_forecast, renewable_forecast, current_data
                )
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
                grid_solution = self.grid_optimizer.optimize(
                    unit_schedule, current_data['grid_topology']
                )
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                await self.send_control_commands(unit_schedule, grid_solution)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self.log_optimization_results(unit_schedule, grid_solution)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (5 –º–∏–Ω—É—Ç)
                await asyncio.sleep(300)
                
            except Exception as e:
                logging.error(f"Optimization cycle error: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

class LoadForecastingModule:
    def __init__(self):
        self.models = {
            'short_term': ShortTermLoadModel(),    # 1-24 —á–∞—Å–∞
            'medium_term': MediumTermLoadModel(),  # 1-7 –¥–Ω–µ–π
            'long_term': LongTermLoadModel()       # 1-12 –º–µ—Å—è—Ü–µ–≤
        }
        self.feature_engineer = LoadFeatureEngineer()
        
    def forecast(self, data, horizon='short_term'):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = self.feature_engineer.create_features(data)
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
        model = self.models[horizon]
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        forecast = model.predict(features)
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        forecast = self.validate_forecast(forecast, data)
        
        return {
            'values': forecast,
            'confidence_intervals': model.get_confidence_intervals(),
            'horizon': horizon,
            'timestamp': datetime.now()
        }

class ShortTermLoadModel(nn.Module):
    def __init__(self, input_size=50, hidden_size=128, num_layers=3):
        super(ShortTermLoadModel, self).__init__()
        
        # LSTM –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.lstm = nn.LSTM(
            input_size=input_size,
            hidden_size=hidden_size,
            num_layers=num_layers,
            batch_first=True,
            dropout=0.2
        )
        
        # Attention –º–µ—Ö–∞–Ω–∏–∑–º
        self.attention = nn.MultiheadAttention(
            embed_dim=hidden_size,
            num_heads=8,
            dropout=0.1
        )
        
        # –í—ã—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–∏
        self.fc_layers = nn.Sequential(
            nn.Linear(hidden_size, 64),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(64, 24)  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞
        )
        
    def forward(self, x):
        # LSTM –æ–±—Ä–∞–±–æ—Ç–∫–∞
        lstm_out, (hidden, cell) = self.lstm(x)
        
        # Attention
        attended, _ = self.attention(lstm_out, lstm_out, lstm_out)
        
        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        aggregated = torch.mean(attended, dim=1)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        output = self.fc_layers(aggregated)
        
        return output

class LoadFeatureEngineer:
    def __init__(self):
        self.weather_features = WeatherFeatureExtractor()
        self.calendar_features = CalendarFeatureExtractor()
        self.economic_features = EconomicFeatureExtractor()
        
    def create_features(self, data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏"""
        features = {}
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        features['load_history'] = self.extract_load_features(data['load_history'])
        
        # –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        features['weather'] = self.weather_features.extract(data['weather'])
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        features['calendar'] = self.calendar_features.extract(data['timestamp'])
        
        # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        features['economic'] = self.economic_features.extract(data['economic_data'])
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        combined_features = np.concatenate([
            features['load_history'],
            features['weather'],
            features['calendar'],
            features['economic']
        ], axis=1)
        
        return combined_features
        
    def extract_load_features(self, load_history):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–∫–∏"""
        features = []
        
        # –õ–∞–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for lag in [1, 2, 3, 6, 12, 24, 48, 168]:  # —á–∞—Å—ã, –¥–Ω–∏, –Ω–µ–¥–µ–ª—è
            features.append(np.roll(load_history, lag))
            
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        for window in [3, 6, 12, 24]:
            ma = pd.Series(load_history).rolling(window=window).mean().values
            features.append(ma)
            
        # –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        # –°—É—Ç–æ—á–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        daily_pattern = np.tile(np.arange(24), len(load_history) // 24 + 1)[:len(load_history)]
        features.append(np.sin(2 * np.pi * daily_pattern / 24))
        features.append(np.cos(2 * np.pi * daily_pattern / 24))
        
        # –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        weekly_pattern = np.arange(len(load_history)) % 168
        features.append(np.sin(2 * np.pi * weekly_pattern / 168))
        features.append(np.cos(2 * np.pi * weekly_pattern / 168))
        
        # –ì–æ–¥–æ–≤–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        yearly_pattern = np.arange(len(load_history)) % 8760
        features.append(np.sin(2 * np.pi * yearly_pattern / 8760))
        features.append(np.cos(2 * np.pi * yearly_pattern / 8760))
        
        return np.column_stack(features)

class RenewableForecastingModule:
    def __init__(self):
        self.wind_model = WindPowerModel()
        self.solar_model = SolarPowerModel()
        self.weather_processor = WeatherDataProcessor()
        
    def forecast(self, data):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        weather_data = self.weather_processor.process(data['weather_forecast'])
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ç—Ä–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        wind_forecast = self.wind_model.forecast(
            weather_data['wind_speed'],
            weather_data['wind_direction'],
            data['wind_farms']
        )
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–ª–Ω–µ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        solar_forecast = self.solar_model.forecast(
            weather_data['solar_irradiance'],
            weather_data['cloud_cover'],
            weather_data['temperature'],
            data['solar_farms']
        )
        
        return {
            'wind': wind_forecast,
            'solar': solar_forecast,
            'total_renewable': wind_forecast['total'] + solar_forecast['total'],
            'uncertainty': self.calculate_uncertainty(wind_forecast, solar_forecast)
        }

class WindPowerModel:
    def __init__(self):
        self.power_curves = self.load_turbine_power_curves()
        self.wake_model = WakeEffectModel()
        
    def forecast(self, wind_speed, wind_direction, wind_farms):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ç—Ä–æ–≤—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π"""
        total_power = 0
        farm_forecasts = {}
        
        for farm_id, farm_data in wind_farms.items():
            # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ –Ω–∞ –≤—ã—Å–æ—Ç—É —Ç—É—Ä–±–∏–Ω
            hub_height_wind = self.extrapolate_wind_speed(
                wind_speed, 
                farm_data['measurement_height'],
                farm_data['hub_height']
            )
            
            # –£—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–ª–µ–¥–∞ –º–µ–∂–¥—É —Ç—É—Ä–±–∏–Ω–∞–º–∏
            effective_wind = self.wake_model.calculate_wake_effect(
                hub_height_wind,
                wind_direction,
                farm_data['turbine_layout']
            )
            
            # –†–∞—Å—á–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—É—Ä–±–∏–Ω—ã
            farm_power = 0
            for turbine in farm_data['turbines']:
                turbine_power = self.calculate_turbine_power(
                    effective_wind[turbine['id']],
                    turbine['type']
                )
                farm_power += turbine_power
                
            farm_forecasts[farm_id] = {
                'power': farm_power,
                'capacity_factor': farm_power / farm_data['installed_capacity'],
                'effective_wind_speed': np.mean(effective_wind)
            }
            
            total_power += farm_power
            
        return {
            'total': total_power,
            'farms': farm_forecasts,
            'average_capacity_factor': total_power / sum(f['installed_capacity'] for f in wind_farms.values())
        }
        
    def calculate_turbine_power(self, wind_speed, turbine_type):
        """–†–∞—Å—á–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏ —Ç—É—Ä–±–∏–Ω—ã –ø–æ –∫—Ä–∏–≤–æ–π –º–æ—â–Ω–æ—Å—Ç–∏"""
        power_curve = self.power_curves[turbine_type]
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–æ –∫—Ä–∏–≤–æ–π –º–æ—â–Ω–æ—Å—Ç–∏
        power = np.interp(wind_speed, power_curve['wind_speed'], power_curve['power'])
        
        # –£—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç—É—Ä–±–∏–Ω—ã
        availability = power_curve.get('availability', 0.97)
        
        return power * availability
        
    def extrapolate_wind_speed(self, surface_wind, measurement_height, target_height):
        """–≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞ –Ω–∞ –≤—ã—Å–æ—Ç—É —Ç—É—Ä–±–∏–Ω—ã"""
        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤–µ—Ç—Ä–∞
        roughness_length = 0.1  # –º, –¥–ª—è —Ç–∏–ø–∏—á–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
        
        wind_at_height = surface_wind * (
            np.log(target_height / roughness_length) / 
            np.log(measurement_height / roughness_length)
        )
        
        return wind_at_height

class UnitCommitmentOptimizer:
    def __init__(self):
        self.generator_data = self.load_generator_database()
        self.fuel_prices = FuelPriceTracker()
        self.emission_factors = EmissionFactorDatabase()
        
    def optimize(self, load_forecast, renewable_forecast, system_data):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        horizon = len(load_forecast['values'])
        generators = list(self.generator_data.keys())
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        # –ë–∏–Ω–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        u = cp.Variable((len(generators), horizon), boolean=True)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        p = cp.Variable((len(generators), horizon), nonneg=True)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∞
        startup = cp.Variable((len(generators), horizon), nonneg=True)
        shutdown = cp.Variable((len(generators), horizon), nonneg=True)
        
        # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç
        objective = self.build_objective_function(p, u, startup, shutdown, horizon)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        constraints = []
        
        # –ë–∞–ª–∞–Ω—Å –º–æ—â–Ω–æ—Å—Ç–∏
        for t in range(horizon):
            net_load = load_forecast['values'][t] - renewable_forecast['total'][t]
            constraints.append(cp.sum(p[:, t]) >= net_load)
            
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        for i, gen_id in enumerate(generators):
            gen_data = self.generator_data[gen_id]
            
            for t in range(horizon):
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏
                constraints.append(p[i, t] >= gen_data['min_power'] * u[i, t])
                constraints.append(p[i, t] <= gen_data['max_power'] * u[i, t])
                
                # –õ–æ–≥–∏–∫–∞ –ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∞
                if t > 0:
                    constraints.append(startup[i, t] >= u[i, t] - u[i, t-1])
                    constraints.append(shutdown[i, t] >= u[i, t-1] - u[i, t])
                    
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã/–ø—Ä–æ—Å—Ç–æ—è
            self.add_minimum_time_constraints(constraints, u[i, :], gen_data)
            
        # –†–µ–∑–µ—Ä–≤—ã –º–æ—â–Ω–æ—Å—Ç–∏
        self.add_reserve_constraints(constraints, p, u, load_forecast, horizon)
        
        # –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        problem = cp.Problem(cp.Minimize(objective), constraints)
        problem.solve(solver=cp.GUROBI, verbose=False)
        
        if problem.status == cp.OPTIMAL:
            return self.format_solution(u.value, p.value, startup.value, generators)
        else:
            raise Exception(f"Optimization failed: {problem.status}")
            
    def build_objective_function(self, p, u, startup, shutdown, horizon):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        total_cost = 0
        
        for i, gen_id in enumerate(self.generator_data.keys()):
            gen_data = self.generator_data[gen_id]
            
            for t in range(horizon):
                # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
                fuel_cost = gen_data['fuel_cost'] * p[i, t]
                
                # –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—É—Å–∫
                startup_cost = gen_data['startup_cost'] * startup[i, t]
                
                # –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤
                shutdown_cost = gen_data['shutdown_cost'] * shutdown[i, t]
                
                # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
                fixed_cost = gen_data['fixed_cost'] * u[i, t]
                
                total_cost += fuel_cost + startup_cost + shutdown_cost + fixed_cost
                
        return total_cost
        
    def add_reserve_constraints(self, constraints, p, u, load_forecast, horizon):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ä–µ–∑–µ—Ä–≤–∞–º –º–æ—â–Ω–æ—Å—Ç–∏"""
        for t in range(horizon):
            # –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑–µ—Ä–≤)
            primary_reserve_req = load_forecast['values'][t] * 0.02  # 2% –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
            
            available_primary = 0
            for i, gen_id in enumerate(self.generator_data.keys()):
                gen_data = self.generator_data[gen_id]
                if gen_data['can_provide_primary_reserve']:
                    available_capacity = gen_data['max_power'] * u[i, t] - p[i, t]
                    ramp_limit = gen_data['ramp_rate'] * 1  # –∑–∞ 1 –º–∏–Ω—É—Ç—É
                    available_primary += cp.minimum(available_capacity, ramp_limit)
                    
            constraints.append(available_primary >= primary_reserve_req)
            
            # –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
            secondary_reserve_req = load_forecast['values'][t] * 0.05  # 5% –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
            
            available_secondary = 0
            for i, gen_id in enumerate(self.generator_data.keys()):
                gen_data = self.generator_data[gen_id]
                if gen_data['can_provide_secondary_reserve']:
                    available_capacity = gen_data['max_power'] * u[i, t] - p[i, t]
                    ramp_limit = gen_data['ramp_rate'] * 15  # –∑–∞ 15 –º–∏–Ω—É—Ç
                    available_secondary += cp.minimum(available_capacity, ramp_limit)
                    
            constraints.append(available_secondary >= secondary_reserve_req)

class GridFlowOptimizer:
    def __init__(self):
        self.network_model = PowerNetworkModel()
        self.contingency_analyzer = ContingencyAnalyzer()
        
    def optimize(self, unit_schedule, grid_topology):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤ –º–æ—â–Ω–æ—Å—Ç–∏ –≤ —Å–µ—Ç–∏"""
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–µ—Ç–∏
        network = self.network_model.build_model(grid_topology)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        bus_angles = cp.Variable(network['num_buses'])
        line_flows = cp.Variable(network['num_lines'])
        
        # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—å
        objective = self.minimize_losses(line_flows, network)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        constraints = []
        
        # –£—Ä–∞–≤–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π (–∑–∞–∫–æ–Ω—ã –ö–∏—Ä—Ö–≥–æ—Ñ–∞)
        self.add_power_balance_constraints(
            constraints, bus_angles, line_flows, unit_schedule, network
        )
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ª–∏–Ω–∏–π
        for i, line in enumerate(network['lines']):
            constraints.append(line_flows[i] <= line['capacity'])
            constraints.append(line_flows[i] >= -line['capacity'])
            
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—é
        self.add_voltage_constraints(constraints, bus_angles, network)
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ N-1
        self.add_contingency_constraints(constraints, line_flows, network)
        
        # –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        problem = cp.Problem(cp.Minimize(objective), constraints)
        problem.solve(solver=cp.MOSEK)
        
        if problem.status == cp.OPTIMAL:
            return self.format_grid_solution(
                bus_angles.value, line_flows.value, network
            )
        else:
            raise Exception(f"Grid optimization failed: {problem.status}")
            
    def add_contingency_constraints(self, constraints, line_flows, network):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é N-1"""
        for contingency_line in network['critical_lines']:
            # –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–∏–Ω–∏–∏
            modified_network = self.network_model.remove_line(network, contingency_line)
            
            # –ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–æ—Ç–æ–∫–æ–≤ –±–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
            remaining_flows = self.calculate_post_contingency_flows(
                line_flows, modified_network
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏–Ω–∏–π
            for i, line in enumerate(modified_network['lines']):
                if i != contingency_line:
                    constraints.append(remaining_flows[i] <= line['capacity'])
                    constraints.append(remaining_flows[i] >= -line['capacity'])

class EnergyMarketInterface:
    def __init__(self):
        self.market_api = MarketAPIClient()
        self.bidding_strategy = BiddingStrategyOptimizer()
        
    async def submit_bids(self, unit_schedule, market_data):
        """–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫"""
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
        price_bids = self.bidding_strategy.optimize_bids(
            unit_schedule, market_data
        )
        
        # –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ API
        for hour, bid_data in price_bids.items():
            try:
                response = await self.market_api.submit_bid(
                    hour=hour,
                    volume=bid_data['volume'],
                    price=bid_data['price'],
                    generator_id=bid_data['generator_id']
                )
                
                if response['status'] != 'accepted':
                    logging.warning(f"Bid rejected for hour {hour}: {response['reason']}")
                    
            except Exception as e:
                logging.error(f"Failed to submit bid for hour {hour}: {e}")
                
    async def get_market_results(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤"""
        try:
            results = await self.market_api.get_clearing_results()
            
            return {
                'clearing_prices': results['prices'],
                'accepted_volumes': results['volumes'],
                'total_revenue': results['revenue'],
                'market_share': results['market_share']
            }
            
        except Exception as e:
            logging.error(f"Failed to get market results: {e}")
            return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    energy_system = RegionalEnergyManagementSystem()
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await energy_system.run_optimization_cycle()

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–æ–π –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

\`\`\`python
class EnergySystemROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'software_development': {
                'ai_platform': 15000000,      # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                'integration': 8000000,       # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA
                'testing': 3000000,           # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
                'deployment': 2000000         # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            },
            'hardware_infrastructure': {
                'servers': 5000000,           # –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'networking': 2000000,        # –°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'storage': 1500000,           # –°–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                'backup_systems': 1000000     # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            },
            'annual_operating': {
                'maintenance': 2000000,       # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                'support': 1500000,           # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                'licenses': 1000000,          # –õ–∏—Ü–µ–Ω–∑–∏–∏ –ü–û
                'personnel': 8000000          # –ü–µ—Ä—Å–æ–Ω–∞–ª (10 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'fuel_cost_optimization': {
                'annual_fuel_cost': 25000000000,    # 25 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'optimization_improvement': 0.03,   # 3% —É–ª—É—á—à–µ–Ω–∏–µ
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –¢–≠–°'
            },
            'grid_loss_reduction': {
                'annual_grid_losses': 2000000000,   # 2 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'loss_reduction': 0.15,             # 15% —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤ –º–æ—â–Ω–æ—Å—Ç–∏'
            },
            'renewable_integration': {
                'renewable_curtailment_cost': 500000000,  # 500 –º–ª–Ω —Ä—É–±/–≥–æ–¥
                'curtailment_reduction': 0.40,            # 40% —Å–Ω–∏–∂–µ–Ω–∏–µ
                'description': '–£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –í–ò–≠'
            },
            'maintenance_optimization': {
                'annual_maintenance_cost': 3000000000,    # 3 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'optimization_savings': 0.20,             # 20% —ç–∫–æ–Ω–æ–º–∏—è
                'description': '–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'
            },
            'market_optimization': {
                'annual_trading_volume': 50000000000,     # 50 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'margin_improvement': 0.005,              # 0.5% —É–ª—É—á—à–µ–Ω–∏–µ –º–∞—Ä–∂–∏
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π'
            },
            'reliability_improvement': {
                'outage_cost': 1000000000,                # 1 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'reliability_improvement': 0.25,          # 25% —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏'
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        software_costs = sum(costs['software_development'].values())
        hardware_costs = sum(costs['hardware_infrastructure'].values())
        
        total_investment = software_costs + hardware_costs
        
        return {
            'software_development': software_costs,
            'hardware_infrastructure': hardware_costs,
            'total_capex': total_investment,
            'annual_opex': sum(costs['annual_operating'].values())
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ç–æ–ø–ª–∏–≤–µ
        fuel_savings = (
            benefits['fuel_cost_optimization']['annual_fuel_cost'] *
            benefits['fuel_cost_optimization']['optimization_improvement']
        )
        
        # –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –≤ —Å–µ—Ç—è—Ö
        grid_loss_savings = (
            benefits['grid_loss_reduction']['annual_grid_losses'] *
            benefits['grid_loss_reduction']['loss_reduction']
        )
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –í–ò–≠
        renewable_savings = (
            benefits['renewable_integration']['renewable_curtailment_cost'] *
            benefits['renewable_integration']['curtailment_reduction']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        maintenance_savings = (
            benefits['maintenance_optimization']['annual_maintenance_cost'] *
            benefits['maintenance_optimization']['optimization_savings']
        )
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        market_benefits = (
            benefits['market_optimization']['annual_trading_volume'] *
            benefits['market_optimization']['margin_improvement']
        )
        
        # –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
        reliability_savings = (
            benefits['reliability_improvement']['outage_cost'] *
            benefits['reliability_improvement']['reliability_improvement']
        )
        
        total_annual_benefits = (
            fuel_savings + grid_loss_savings + renewable_savings +
            maintenance_savings + market_benefits + reliability_savings
        )
        
        return {
            'fuel_optimization': fuel_savings,
            'grid_loss_reduction': grid_loss_savings,
            'renewable_integration': renewable_savings,
            'maintenance_optimization': maintenance_savings,
            'market_optimization': market_benefits,
            'reliability_improvement': reliability_savings,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=10):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        
        net_annual_benefits = (
            annual_benefits['total_annual_benefits'] - 
            investment['annual_opex']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total_capex'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.10  # 10% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        npv = -investment['total_capex']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total_capex']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total_capex']) / investment['total_capex']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
roi_calculator = EnergySystemROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total_capex']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total_annual_benefits']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['investment']['annual_opex']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 10 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")

print("\\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ì–û–î ===")
benefits = roi_metrics['annual_benefits']
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–æ–ø–ª–∏–≤–∞: {benefits['fuel_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –≤ —Å–µ—Ç—è—Ö: {benefits['grid_loss_reduction']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –í–ò–≠: {benefits['renewable_integration']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {benefits['maintenance_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {benefits['market_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏: {benefits['reliability_improvement']:,.0f} —Ä—É–±/–≥–æ–¥")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏: –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –º–∞—Å—à—Ç–∞–±–∞–º–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ, —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –æ—Ç—Ä–∞—Å–ª–∏.

–†–æ—Å—Å–∏–π—Å–∫–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI-—Ä–µ—à–µ–Ω–∏–π. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Å—à—Ç–∞–±–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª–µ–µ 1.5 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –æ–∫–æ–ª–æ 40 –º–ª–Ω —Ä—É–±–ª–µ–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ –∏ ROI –±–æ–ª–µ–µ 3000%.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ AI –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ —Å–≤—è–∑–∞–Ω–æ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º, —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –¥–µ–∫–∞—Ä–±–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏.
`
  },

  24: {
    title: "AI –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ",
    duration: 170,
    type: "theory",
    module: 5,
    content: `
# –£—Ä–æ–∫ 24: AI –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö—Å—è —Å—Ñ–µ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è —É—Å–ª–æ–≤–∏—è–º–∏ –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥—ã. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–ª—é—á–µ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤—ã. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π, –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π, –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π, –º–æ—Ä—Å–∫–æ–π –∏ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–Ω—ã–π. –ö–∞–∂–¥—ã–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –≤–µ—Å—å —Ü–∏–∫–ª –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–æ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è —Å–∫–ª–∞–¥–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–ø–∞–∫–æ–≤–∫—É, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç–∞–≤–∫—É.

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–∞–¥–∞—á: –æ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –≤–æ–∂–¥–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ø—è–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫. AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç, –ø–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è, —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É.

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–≥—Ä–æ–º–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏, –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏, —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–æ–π. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —É—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é –¥–æ–ª—é –≤ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. –î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ–µ–≤ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤.

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –æ–±–ª–∞–¥–∞–µ—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–ú–Ω–æ–≥–æ–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å:**

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –µ–¥–∏–Ω–æ–π —Ü–µ–ø–∏ –ø–æ—Å—Ç–∞–≤–æ–∫. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—è –æ–±—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

–ò–Ω—Ç–µ—Ä–º–æ–¥–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —Ç—Ä–µ–±—É—é—Ç —Å–ª–æ–∂–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º–∏, –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏, –º–æ—Ä—Å–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏, –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º–∏, –ø–æ—Ä—Ç–∞–º–∏, —Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º–∏ –∏ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π, –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –æ–±—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç.

**–î–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç—å –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å:**

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –≤ —É—Å–ª–æ–≤–∏—è—Ö –≤—ã—Å–æ–∫–æ–π –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è —É—Å–ª–æ–≤–∏–π. –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –¥–æ—Ä–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø—Ä–æ—Å–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏, –∑–∞–±–∞—Å—Ç–æ–≤–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –ø–ª–∞–Ω—ã –∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ä–æ–±–∞—Å—Ç–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π.

**–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å:**

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ç–∏ –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –æ–≥—Ä–æ–º–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∏ –≤–∫–ª—é—á–∞—é—Ç —Ç—ã—Å—è—á–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç —Å–µ—Ç—è–º–∏, –≤–∫–ª—é—á–∞—é—â–∏–º–∏ —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, —Ç—ã—Å—è—á–∏ —Å–∫–ª–∞–¥–æ–≤ –∏ –º–∏–ª–ª–∏–æ–Ω—ã –≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –≥—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.

AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–æ—Å–æ–±–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π —Å–µ—Ç—å—é. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–µ—à–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ —É—Å–ª–æ–≤–∏—è—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏.

**–†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ–º –≤ —á–∞—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è, —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —Ç—Ä—É–¥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–∫—Ç–æ—Ä–æ–º –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤—ã—Å–æ—á–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º.

**–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è:**

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∫ –∑–∞—Ç—Ä–∞—Ç–∞–º. –ö–ª–∏–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç–∞—Ö. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–∞—á–µ—Å—Ç–≤–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, —Ç–∞—Ä–∏—Ñ—ã –∏ –Ω–∞–ª–æ–≥–∏, —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä—ã –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π.

### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π.

**–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:**

–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –æ–¥–Ω–æ –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, —Å–ø–æ—Å–æ–±–Ω—ã—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞.

–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏ —É–∂–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏, –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤, –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è –æ –º–∞–Ω–µ–≤—Ä–∞—Ö –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å–ª–æ–∂–Ω—ã—Ö –¥–æ—Ä–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.

–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∫–ª–∞–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏–µ–º–∫–∏, —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏ –æ—Ç–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, –ø–ª–∞–Ω–∏—Ä—É—é—Ç –º–∞—Ä—à—Ä—É—Ç—ã —Ä–æ–±–æ—Ç–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—Ç –∏—Ö —Ä–∞–±–æ—Ç—É –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:**

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ—à–∞—é—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏, –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.

AI-—Å–∏—Å—Ç–µ–º—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è —É—Å–ª–æ–≤–∏—è: –¥–æ—Ä–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.

–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤—ã–±–∏—Ä–∞—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ, –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–≥–æ, –º–æ—Ä—Å–∫–æ–≥–æ –∏ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥—Ä—É–∑–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å—Ä–æ–∫–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.

**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏:**

–¢–æ—á–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å–ø—Ä–æ—Å: —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–¥—ã, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.

–ì–ª—É–±–æ–∫–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞—Ö. –ü—Ä–æ–≥–Ω–æ–∑—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π –∑–∞–ø–∞—Å–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–æ–∫ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π —Å–µ—Ç–∏.

–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π –∑–∞–ø–∞—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω—è—é—â–µ–≥–æ—Å—è —Å–ø—Ä–æ—Å–∞, –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞.

**–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:**

–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (–ò–¢–°) –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–æ–∂–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –∏–∑–º–µ–Ω—è—é—Ç —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫.

–°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤ —Å –¥–æ—Ä–æ–∂–Ω—ã—Ö –∫–∞–º–µ—Ä, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è.

–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å AI –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ø—è–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫:**

AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ø—è–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–∫–≤–æ–∑–Ω—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å. –°–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ø–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏.

–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —Ü–µ–ø–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑: —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤, –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ, –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø–ª–∞–Ω—ã —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–æ–∫.

–ë–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å AI –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ü–µ–ø—è—Ö –ø–æ—Å—Ç–∞–≤–æ–∫. –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –∏ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã AI –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞—á–∞–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –æ—Ç—Ä–∞—Å–ª–∏.

**–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, —Å–∏—Å—Ç–µ–º –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –∞–Ω–∞–ª–∏–∑ –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.

–°–∏—Å—Ç–µ–º—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑—Ä–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –∏–∑–º–µ—Ä–µ–Ω–∏—è –≥–∞–±–∞—Ä–∏—Ç–æ–≤ –∏ –≤–µ—Å–∞. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏, –≤—ã—è–≤–ª—è—é—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.

3D-–∑—Ä–µ–Ω–∏–µ –∏ –ª–∏–¥–∞—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –ê–ª–≥–æ—Ä–∏—Ç–º—ã SLAM (Simultaneous Localization and Mapping) –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–æ–±–æ—Ç–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ä–µ–¥–µ.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:**

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —á–∞—Å—Ç–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ —Å–ª–æ–∂–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏. –ú–µ—Ç–∞—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∂–∏–≥–∞ –∏ —Ä–æ–µ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—é—Ç –∑–∞–¥–∞—á–∏ –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏.

–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ª–∏–Ω–µ–π–Ω–æ–≥–æ –∏ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤. –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.

–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∑–∞ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è.

**–û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º:**

–û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –∑–∞–¥–∞—á –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ä–µ–¥–µ. –ê–ª–≥–æ—Ä–∏—Ç–º—ã Q-learning –∏ Actor-Critic –æ–±—É—á–∞—é—Ç –∞–≥–µ–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏.

–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, —Ä–æ–±–æ—Ç–æ–≤, —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –∏–∑–±–µ–≥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.

–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏ –æ–±—É—á–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –ø–æ–ª–∏—Ç–∏–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã–º–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.

**–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞:**

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞, –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏–∑–≤–ª–µ–∫–∞—é—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.

–ß–∞—Ç-–±–æ—Ç—ã –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–∞—Ç—É—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–º–æ–≥–∞—é—Ç –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.

–ú–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö.

**–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:**

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ. –†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏, –æ—Å–æ–±–µ–Ω–Ω–æ LSTM –∏ GRU, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –º–æ–¥–µ–ª–∏—Ä—É—é—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø—Ä–æ—Å–µ, —Ü–µ–Ω–∞—Ö –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö.

Transformer-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏. Attention-–º–µ—Ö–∞–Ω–∏–∑–º—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –º–æ–¥–µ–ª–∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞.

–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ–º–±–∏–Ω–∏—Ä—É—é—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏. –ë–∞–π–µ—Å–æ–≤—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ—Ü–µ–Ω–∫—É –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ä–∏—Å–∫–∞.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Ä—è–¥ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:**

–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –†–æ—Å—Å–∏–∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∑–∞–∫–æ–Ω–∞–º–∏, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –≤–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∞–∫—Ç–∞–º–∏. –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω "–û —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.

–ü—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.

–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

**–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**

–†–æ—Å—Å–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –æ–≥—Ä–æ–º–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏, —Å—É—Ä–æ–≤—ã–º–∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞–º–∏.

–°–µ–∑–æ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å–ø—É—Ç–∏—Ü–µ–π –∏ –ª–µ–¥–æ—Å—Ç–∞–≤–æ–º, —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–≥ –∏ –≤–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π.

–ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –∏ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.

**–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç—É—é –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—É—é —Å–µ—Ç—å, –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –º–æ—Ä—Å–∫–∏–µ –∏ —Ä–µ—á–Ω—ã–µ –ø–æ—Ä—Ç—ã, –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –∏–Ω—Ç–µ—Ä–º–æ–¥–∞–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é.

–¢—Ä–∞–Ω—Å—Å–∏–±–∏—Ä—Å–∫–∞—è –º–∞–≥–∏—Å—Ç—Ä–∞–ª—å –∏ –¥—Ä—É–≥–∏–µ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ –∫–æ—Ä–∏–¥–æ—Ä—ã –∏–≥—Ä–∞—é—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –≥—Ä—É–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –†–ñ–î –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.

–°–µ–≤–µ—Ä–Ω—ã–π –º–æ—Ä—Å–∫–æ–π –ø—É—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫, –≤–∫–ª—é—á–∞—è –ª–µ–¥–æ–≤—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–µ–¥–æ–∫–æ–ª—å–Ω–æ–º—É —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é.

**–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ:**

–ü–æ–ª–∏—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –∏ —Ä–µ—à–µ–Ω–∏—è–º –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ì–õ–û–ù–ê–°–° –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–µ—Ä–≤–∏—Å—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.

–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –Ω–∞—É—á–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–¥–æ–≤—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —É—Å–ª–æ–≤–∏—è–º.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏. –°–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
import networkx as nx
import osmnx as ox
import folium
from datetime import datetime, timedelta
import asyncio
import aiohttp
import logging
from dataclasses import dataclass
from typing import List, Dict, Optional, Tuple
import json

@dataclass
class TransportMode:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    mode_id: str
    name: str
    cost_per_km: float
    cost_per_hour: float
    average_speed: float
    capacity: float
    co2_emission: float
    reliability: float
    
@dataclass
class TransportNode:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —É–∑–ª–∞"""
    node_id: str
    name: str
    location: Tuple[float, float]  # (latitude, longitude)
    node_type: str  # 'warehouse', 'port', 'airport', 'rail_station'
    available_modes: List[str]
    handling_time: float
    handling_cost: float

@dataclass
class Shipment:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–∑–∞"""
    shipment_id: str
    origin: str
    destination: str
    weight: float
    volume: float
    value: float
    pickup_time_window: Tuple[datetime, datetime]
    delivery_time_window: Tuple[datetime, datetime]
    special_requirements: List[str]

class MultimodalTransportSystem:
    def __init__(self):
        self.route_optimizer = RouteOptimizer()
        self.demand_forecaster = DemandForecaster()
        self.risk_manager = RiskManager()
        self.cost_calculator = CostCalculator()
        self.tracking_system = TrackingSystem()
        self.transport_network = TransportNetworkManager()
        
    async def plan_shipment(self, shipment: Shipment) -> Dict:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≥—Ä—É–∑–∞
            transport_requirements = self.analyze_shipment_requirements(shipment)
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π —Å–µ—Ç–∏
            network = await self.transport_network.build_network(
                shipment.origin, shipment.destination
            )
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
            optimal_route = self.route_optimizer.optimize(
                network, shipment, transport_requirements
            )
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
            cost_breakdown = self.cost_calculator.calculate_total_cost(optimal_route)
            time_estimate = self.calculate_delivery_time(optimal_route)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
            risk_assessment = self.risk_manager.assess_risks(optimal_route, shipment)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
            transport_plan = {
                'shipment_id': shipment.shipment_id,
                'route': optimal_route,
                'cost_breakdown': cost_breakdown,
                'estimated_delivery_time': time_estimate,
                'risk_assessment': risk_assessment,
                'carbon_footprint': self.calculate_carbon_footprint(optimal_route),
                'alternative_routes': self.generate_alternative_routes(network, shipment)
            }
            
            return transport_plan
            
        except Exception as e:
            logging.error(f"Error planning shipment {shipment.shipment_id}: {e}")
            raise

class RouteOptimizer:
    def __init__(self):
        self.transport_modes = self.load_transport_modes()
        self.optimization_weights = {
            'cost': 0.4,
            'time': 0.3,
            'reliability': 0.2,
            'environmental': 0.1
        }
        
    def optimize(self, network: nx.Graph, shipment: Shipment, requirements: Dict) -> List[Dict]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        multimodal_graph = self.create_multimodal_graph(network, requirements)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if requirements['optimization_method'] == 'pareto':
            optimal_routes = self.pareto_optimization(multimodal_graph, shipment)
        else:
            optimal_routes = [self.single_objective_optimization(multimodal_graph, shipment)]
            
        return optimal_routes
        
    def create_multimodal_graph(self, network: nx.Graph, requirements: Dict) -> nx.Graph:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞"""
        multimodal_graph = nx.MultiDiGraph()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        for node_id, node_data in network.nodes(data=True):
            for mode in node_data.get('available_modes', []):
                if mode in requirements['allowed_modes']:
                    multimodal_node_id = f"{node_id}_{mode}"
                    multimodal_graph.add_node(
                        multimodal_node_id,
                        original_node=node_id,
                        transport_mode=mode,
                        **node_data
                    )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ—Ä –≤–Ω—É—Ç—Ä–∏ —É–∑–ª–æ–≤ (—Å–º–µ–Ω–∞ –≤–∏–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)
        for node_id, node_data in network.nodes(data=True):
            available_modes = node_data.get('available_modes', [])
            allowed_modes = [m for m in available_modes if m in requirements['allowed_modes']]
            
            for mode1 in allowed_modes:
                for mode2 in allowed_modes:
                    if mode1 != mode2:
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±—Ä–∞ —Å–º–µ–Ω—ã –≤–∏–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                        multimodal_graph.add_edge(
                            f"{node_id}_{mode1}",
                            f"{node_id}_{mode2}",
                            edge_type='transfer',
                            transfer_time=node_data.get('transfer_time', {}).get(f"{mode1}_{mode2}", 2.0),
                            transfer_cost=node_data.get('transfer_cost', {}).get(f"{mode1}_{mode2}", 100.0)
                        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ—Ä –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ (–¥–≤–∏–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º –≤–∏–¥–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)
        for edge in network.edges(data=True):
            node1, node2, edge_data = edge
            for mode in requirements['allowed_modes']:
                if (mode in network.nodes[node1].get('available_modes', []) and 
                    mode in network.nodes[node2].get('available_modes', [])):
                    
                    mode_data = self.transport_modes[mode]
                    distance = edge_data.get('distance', 0)
                    
                    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                    travel_time = distance / mode_data.average_speed
                    travel_cost = distance * mode_data.cost_per_km + travel_time * mode_data.cost_per_hour
                    
                    multimodal_graph.add_edge(
                        f"{node1}_{mode}",
                        f"{node2}_{mode}",
                        edge_type='transport',
                        transport_mode=mode,
                        distance=distance,
                        travel_time=travel_time,
                        travel_cost=travel_cost,
                        co2_emission=distance * mode_data.co2_emission,
                        reliability=mode_data.reliability
                    )
        
        return multimodal_graph
        
    def pareto_optimization(self, graph: nx.Graph, shipment: Shipment) -> List[Dict]:
        """–ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ –ü–∞—Ä–µ—Ç–æ"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏ –∫–æ–Ω–µ—á–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        origin_nodes = [n for n in graph.nodes() if n.startswith(f"{shipment.origin}_")]
        destination_nodes = [n for n in graph.nodes() if n.startswith(f"{shipment.destination}_")]
        
        pareto_routes = []
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–∏–π
        for origin_node in origin_nodes:
            for destination_node in destination_nodes:
                try:
                    # –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                    routes = self.find_paths_multiple_criteria(graph, origin_node, destination_node)
                    pareto_routes.extend(routes)
                except nx.NetworkXNoPath:
                    continue
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ü–∞—Ä–µ—Ç–æ
        pareto_optimal = self.filter_pareto_optimal(pareto_routes)
        
        return pareto_optimal
        
    def find_paths_multiple_criteria(self, graph: nx.Graph, origin: str, destination: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø—É—Ç–µ–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        paths = []
        
        # –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        try:
            cost_path = nx.shortest_path(
                graph, origin, destination, weight='travel_cost'
            )
            paths.append(self.evaluate_path(graph, cost_path, 'cost'))
        except nx.NetworkXNoPath:
            pass
            
        # –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        try:
            time_path = nx.shortest_path(
                graph, origin, destination, weight='travel_time'
            )
            paths.append(self.evaluate_path(graph, time_path, 'time'))
        except nx.NetworkXNoPath:
            pass
            
        # –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –ø–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
        try:
            eco_path = nx.shortest_path(
                graph, origin, destination, weight='co2_emission'
            )
            paths.append(self.evaluate_path(graph, eco_path, 'environmental'))
        except nx.NetworkXNoPath:
            pass
            
        return paths
        
    def evaluate_path(self, graph: nx.Graph, path: List[str], optimization_criterion: str) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ –ø—É—Ç–∏ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        total_cost = 0
        total_time = 0
        total_distance = 0
        total_co2 = 0
        total_reliability = 1.0
        segments = []
        
        for i in range(len(path) - 1):
            edge_data = graph[path[i]][path[i+1]]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–ª—å—Ç–∏–≥—Ä–∞—Ñ–∞
            if isinstance(edge_data, dict):
                edge_info = edge_data
            else:
                edge_info = list(edge_data.values())[0]
            
            segment = {
                'from_node': path[i],
                'to_node': path[i+1],
                'edge_type': edge_info.get('edge_type', 'transport'),
                'transport_mode': edge_info.get('transport_mode', 'unknown'),
                'distance': edge_info.get('distance', 0),
                'travel_time': edge_info.get('travel_time', 0),
                'travel_cost': edge_info.get('travel_cost', 0),
                'co2_emission': edge_info.get('co2_emission', 0),
                'reliability': edge_info.get('reliability', 1.0)
            }
            
            segments.append(segment)
            
            total_cost += segment['travel_cost']
            total_time += segment['travel_time']
            total_distance += segment['distance']
            total_co2 += segment['co2_emission']
            total_reliability *= segment['reliability']
        
        return {
            'path': path,
            'segments': segments,
            'total_cost': total_cost,
            'total_time': total_time,
            'total_distance': total_distance,
            'total_co2': total_co2,
            'reliability_score': total_reliability,
            'optimization_criterion': optimization_criterion
        }

class DemandForecaster:
    def __init__(self):
        self.models = {
            'short_term': ShortTermDemandModel(),
            'medium_term': MediumTermDemandModel(),
            'long_term': LongTermDemandModel()
        }
        self.feature_engineer = DemandFeatureEngineer()
        
    def forecast_demand(self, route_data: Dict, horizon: str = 'short_term') -> Dict:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features = self.feature_engineer.create_features(route_data)
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model = self.models[horizon]
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        demand_forecast = model.predict(features)
        
        return {
            'demand_forecast': demand_forecast,
            'confidence_intervals': model.get_confidence_intervals(),
            'key_factors': model.get_feature_importance(),
            'horizon': horizon
        }

class ShortTermDemandModel(nn.Module):
    def __init__(self, input_size=30, hidden_size=64, num_layers=2):
        super(ShortTermDemandModel, self).__init__()
        
        # LSTM –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.lstm = nn.LSTM(
            input_size=input_size,
            hidden_size=hidden_size,
            num_layers=num_layers,
            batch_first=True,
            dropout=0.2
        )
        
        # Attention –º–µ—Ö–∞–Ω–∏–∑–º
        self.attention = nn.MultiheadAttention(
            embed_dim=hidden_size,
            num_heads=4,
            dropout=0.1
        )
        
        # –í—ã—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–∏
        self.fc_layers = nn.Sequential(
            nn.Linear(hidden_size, 32),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(32, 7)  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π
        )
        
    def forward(self, x):
        # LSTM –æ–±—Ä–∞–±–æ—Ç–∫–∞
        lstm_out, (hidden, cell) = self.lstm(x)
        
        # Attention
        attended, _ = self.attention(lstm_out, lstm_out, lstm_out)
        
        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è
        aggregated = torch.mean(attended, dim=1)
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        output = self.fc_layers(aggregated)
        
        return output

class RiskManager:
    def __init__(self):
        self.risk_models = {
            'weather': WeatherRiskModel(),
            'traffic': TrafficRiskModel(),
            'security': SecurityRiskModel(),
            'economic': EconomicRiskModel()
        }
        
    def assess_risks(self, route: Dict, shipment: Shipment) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞"""
        risk_assessment = {
            'overall_risk_score': 0.0,
            'risk_factors': {},
            'mitigation_strategies': [],
            'alternative_recommendations': []
        }
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∏—Å–∫–æ–≤
        for risk_type, model in self.risk_models.items():
            risk_score = model.assess_risk(route, shipment)
            risk_assessment['risk_factors'][risk_type] = risk_score
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤
            if risk_score > 0.7:  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
                mitigation = model.get_mitigation_strategies(route, shipment)
                risk_assessment['mitigation_strategies'].extend(mitigation)
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞
        risk_weights = {'weather': 0.3, 'traffic': 0.2, 'security': 0.3, 'economic': 0.2}
        risk_assessment['overall_risk_score'] = sum(
            risk_weights[risk_type] * score 
            for risk_type, score in risk_assessment['risk_factors'].items()
        )
        
        return risk_assessment

class CostCalculator:
    def __init__(self):
        self.cost_components = {
            'transport': TransportCostModel(),
            'handling': HandlingCostModel(),
            'insurance': InsuranceCostModel(),
            'customs': CustomsCostModel(),
            'storage': StorageCostModel()
        }
        
    def calculate_total_cost(self, route: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏"""
        cost_breakdown = {}
        total_cost = 0
        
        for component_name, model in self.cost_components.items():
            component_cost = model.calculate_cost(route)
            cost_breakdown[component_name] = component_cost
            total_cost += component_cost
            
        cost_breakdown['total_cost'] = total_cost
        cost_breakdown['cost_per_kg'] = total_cost / route.get('total_weight', 1)
        cost_breakdown['cost_per_km'] = total_cost / route.get('total_distance', 1)
        
        return cost_breakdown

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    transport_system = MultimodalTransportSystem()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞
    shipment = Shipment(
        shipment_id="SHIP_001",
        origin="Moscow",
        destination="Vladivostok",
        weight=25000,  # –∫–≥
        volume=50,     # –º¬≥
        value=1000000, # —Ä—É–±
        pickup_time_window=(datetime.now(), datetime.now() + timedelta(days=1)),
        delivery_time_window=(datetime.now() + timedelta(days=5), datetime.now() + timedelta(days=10)),
        special_requirements=["temperature_controlled", "fragile"]
    )
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
    transport_plan = await transport_system.plan_shipment(shipment)
    
    print("=== –ü–õ–ê–ù –ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–û–ô –ü–ï–†–ï–í–û–ó–ö–ò ===")
    print(f"–ì—Ä—É–∑: {shipment.shipment_id}")
    print(f"–ú–∞—Ä—à—Ä—É—Ç: {shipment.origin} ‚Üí {shipment.destination}")
    print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {transport_plan['cost_breakdown']['total_cost']:,.0f} —Ä—É–±")
    print(f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {transport_plan['estimated_delivery_time']:.1f} –¥–Ω–µ–π")
    print(f"–£–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Å–ª–µ–¥: {transport_plan['carbon_footprint']:.1f} –∫–≥ CO2")
    print(f"–û–±—â–∏–π —Ä–∏—Å–∫: {transport_plan['risk_assessment']['overall_risk_score']:.2f}")

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

\`\`\`python
class TransportSystemROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'software_development': {
                'ai_platform': 20000000,      # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                'integration': 12000000,      # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TMS/WMS
                'mobile_apps': 5000000,       # –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                'testing': 4000000,           # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                'deployment': 3000000         # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            },
            'hardware_infrastructure': {
                'servers': 8000000,           # –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'iot_devices': 15000000,      # IoT –¥–∞—Ç—á–∏–∫–∏ –∏ —Ç—Ä–µ–∫–µ—Ä—ã
                'networking': 3000000,        # –°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'storage': 2000000,           # –°–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
                'backup_systems': 1500000     # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            },
            'annual_operating': {
                'maintenance': 3000000,       # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                'support': 2500000,           # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                'licenses': 2000000,          # –õ–∏—Ü–µ–Ω–∑–∏–∏ –ü–û
                'personnel': 15000000,        # –ü–µ—Ä—Å–æ–Ω–∞–ª (15 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
                'data_services': 1000000      # –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'route_optimization': {
                'annual_transport_cost': 5000000000,    # 5 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'optimization_improvement': 0.12,       # 12% —É–ª—É—á—à–µ–Ω–∏–µ
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'
            },
            'fuel_cost_reduction': {
                'annual_fuel_cost': 2000000000,         # 2 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'fuel_savings': 0.08,                   # 8% —ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞
                'description': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞'
            },
            'inventory_optimization': {
                'inventory_holding_cost': 1500000000,   # 1.5 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'inventory_reduction': 0.15,            # 15% —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –∑–∞–ø–∞—Å–æ–≤'
            },
            'asset_utilization': {
                'asset_cost': 3000000000,               # 3 –º–ª—Ä–¥ —Ä—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤
                'utilization_improvement': 0.10,        # 10% —É–ª—É—á—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'
            },
            'labor_productivity': {
                'annual_labor_cost': 1000000000,        # 1 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'productivity_gain': 0.20,              # 20% —Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                'description': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π'
            },
            'customer_service': {
                'revenue_impact': 8000000000,           # 8 –º–ª—Ä–¥ —Ä—É–± –æ–±–æ—Ä–æ—Ç
                'service_improvement': 0.03,            # 3% —Ä–æ—Å—Ç –æ—Ç —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
                'description': '–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'
            },
            'risk_reduction': {
                'annual_loss_cost': 500000000,          # 500 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –ø–æ—Ç–µ—Ä–∏
                'risk_reduction': 0.30,                 # 30% —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
                'description': '–°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –∏ —Ä–∏—Å–∫–æ–≤'
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        software_costs = sum(costs['software_development'].values())
        hardware_costs = sum(costs['hardware_infrastructure'].values())
        
        total_investment = software_costs + hardware_costs
        
        return {
            'software_development': software_costs,
            'hardware_infrastructure': hardware_costs,
            'total_capex': total_investment,
            'annual_opex': sum(costs['annual_operating'].values())
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
        route_savings = (
            benefits['route_optimization']['annual_transport_cost'] *
            benefits['route_optimization']['optimization_improvement']
        )
        
        # –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞
        fuel_savings = (
            benefits['fuel_cost_reduction']['annual_fuel_cost'] *
            benefits['fuel_cost_reduction']['fuel_savings']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø–∞—Å–æ–≤
        inventory_savings = (
            benefits['inventory_optimization']['inventory_holding_cost'] *
            benefits['inventory_optimization']['inventory_reduction']
        )
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤
        asset_savings = (
            benefits['asset_utilization']['asset_cost'] *
            benefits['asset_utilization']['utilization_improvement'] * 0.1  # 10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∫ –≥–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è
        )
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–∞
        labor_savings = (
            benefits['labor_productivity']['annual_labor_cost'] *
            benefits['labor_productivity']['productivity_gain']
        )
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        service_benefits = (
            benefits['customer_service']['revenue_impact'] *
            benefits['customer_service']['service_improvement']
        )
        
        # –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
        risk_savings = (
            benefits['risk_reduction']['annual_loss_cost'] *
            benefits['risk_reduction']['risk_reduction']
        )
        
        total_annual_benefits = (
            route_savings + fuel_savings + inventory_savings +
            asset_savings + labor_savings + service_benefits + risk_savings
        )
        
        return {
            'route_optimization': route_savings,
            'fuel_cost_reduction': fuel_savings,
            'inventory_optimization': inventory_savings,
            'asset_utilization': asset_savings,
            'labor_productivity': labor_savings,
            'customer_service': service_benefits,
            'risk_reduction': risk_savings,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=10):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        
        net_annual_benefits = (
            annual_benefits['total_annual_benefits'] - 
            investment['annual_opex']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total_capex'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.12  # 12% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        npv = -investment['total_capex']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total_capex']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total_capex']) / investment['total_capex']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
roi_calculator = TransportSystemROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total_capex']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total_annual_benefits']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['investment']['annual_opex']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 10 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")

print("\\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ì–û–î ===")
benefits = roi_metrics['annual_benefits']
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: {benefits['route_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞: {benefits['fuel_cost_reduction']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø–∞—Å–æ–≤: {benefits['inventory_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤: {benefits['asset_utilization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–∞: {benefits['labor_productivity']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {benefits['customer_service']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤: {benefits['risk_reduction']:,.0f} —Ä—É–±/–≥–æ–¥")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ø—è–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–Ω–æ–≥–æ–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å—é, –¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç—å—é, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å—é –∏ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏. –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –æ—Ç—Ä–∞—Å–ª–∏.

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI-—Ä–µ—à–µ–Ω–∏–π. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è, —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏, –≤–ª–∏—è—é—â–∏–º–∏ –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å AI-—Å–∏—Å—Ç–µ–º.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª–µ–µ 1.2 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –æ–∫–æ–ª–æ 73 –º–ª–Ω —Ä—É–±–ª–µ–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ –∏ ROI –±–æ–ª–µ–µ 1500%.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ AI –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ-–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏.
`
  },

  25: {
    title: "AI –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ",
    duration: 150,
    type: "theory",
    module: 5,
    content: `
# –£—Ä–æ–∫ 25: AI –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏

–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏, –æ–¥–Ω–∞–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã –æ–Ω–∞ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–µ–∫—Ç–æ–≤, –∂–µ—Å—Ç–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Å—Ä–æ–∫–∞–º –∏ –±—é–¥–∂–µ—Ç—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Ç—É—â–∏–º–∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤—ã. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å—Ç–µ–ø–µ–Ω—å—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∞—Ü–∏–∏, —Å–ª–æ–∂–Ω—ã–º–∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Å–æ–±–ª—é–¥–µ–Ω–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –∏ –ø—Ä–∞–≤–∏–ª. –ö–∞–∂–¥—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: –æ—Ç –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏.

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π –±–∞–∑–æ–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ—Ä–º–∞–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º (–°–ù–∏–ü, –°–ü, –ì–û–°–¢) –∏ —É—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –æ—à–∏–±–æ–∫. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, –∞ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞—Ç—Ä–∞—Ç–∞–º. –î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤.

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞

–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å –æ–±–ª–∞–¥–∞–µ—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–ü—Ä–æ–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**

–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ –ø–æ –ø—Ä–æ–µ–∫—Ç–Ω–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏, –±—é–¥–∂–µ—Ç –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã–º —Ü–∏–∫–ª–æ–º.

–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –∑–∞–∫–∞–∑—á–∏–∫–æ–≤, –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤, –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤, —Å—É–±–ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤, –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.

**–ú–Ω–æ–≥–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:**

–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, —ç–∫–æ–Ω–æ–º–∏–∫–∏, –ø—Ä–∞–≤–∞, —ç–∫–æ–ª–æ–≥–∏–∏. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π (BIM) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –∏ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å BIM-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏, –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ BIM-–º–æ–¥–µ–ª–µ–π –∏ –æ–±–æ–≥–∞—â–∞—Ç—å –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞.

**–†–µ–≥—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—Ä–µ–¥–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã:**

–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –∏ –ø—Ä–∞–≤–∏–ª, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤.

–ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.

**–§–∏–∑–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**

–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–±–æ—Ç–æ–π –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Å—Ä–µ–¥–µ, –≥–¥–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–∫—Ç–æ—Ä–æ–º. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞.

–§–∏–∑–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.

**–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª:**

–ó–¥–∞–Ω–∏—è –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª, –∏–∑–º–µ—Ä—è–µ–º—ã–π –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è–º–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –æ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —Å–Ω–æ—Å–∞ –∏–ª–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –î–∞–Ω–Ω—ã–µ, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–∞–ø–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.

–£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∑–¥–∞–Ω–∏–π, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É.

### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

**–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω:**

–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –ê–ª–≥–æ—Ä–∏—Ç–º—ã —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å—Å–ª–µ–¥—É—é—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –Ω–∞—Ö–æ–¥—è—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.

AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã, –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∫–∞ –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –æ—Ç—Ä–∞—Å–ª–∏.

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã. AI-—Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏:**

–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π, —Ç—Ä–µ–±—É—é—â–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, —É—á–µ—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.

–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ª—É—á—à–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç. –ê–ª–≥–æ—Ä–∏—Ç–º—ã —É—á–∏—Ç—ã–≤–∞—é—Ç —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–∞–±–æ—á–∏—Ö, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç.

–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —É—Å–ª–æ–≤–∏—è—Ö –∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ.

**–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:**

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç. AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ —Å–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–µ–∫—Ç—É –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç.

–î—Ä–æ–Ω—ã, –æ—Å–Ω–∞—â–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä–∞–º–∏ –∏ –¥–∞—Ç—á–∏–∫–∞–º–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥—Ä–æ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å—Ç—Ä–æ—è—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤, –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞.

–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π (IoT) –∏ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ —Å–µ—Ç–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –±–µ—Ç–æ–Ω–∞, –Ω–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤–∏–±—Ä–∞—Ü–∏–π, –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞. AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.

**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é:**

–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. AI-—Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ —Å—Ä–æ–∫–∞—Ö, –ø—Ä–æ–±–ª–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º.

–°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤ —Å –∫–∞–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã, –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–±–æ—Ç, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ª—é–¥–µ–π –≤ –æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω–∞—Ö.

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞: —Ç–∏–ø–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ä–∞–±–æ—Ç, –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —É—Å—Ç–∞–ª–æ—Å—Ç–∏ —Ä–∞–±–æ—á–∏—Ö, —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. AI-—Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞:**

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–æ–∫ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫. –ê–ª–≥–æ—Ä–∏—Ç–º—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –ø–ª–∞–Ω—ã —Ä–∞–±–æ—Ç, —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏, –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞—Ç—Ä–∞—Ç –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–≥–æ —Å–Ω–∞–±–∂–µ–Ω–∏—è.

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ –∑–∞–ø–∞—Å–∞–º–∏ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–Ω–∏ –∑–∞–ø–∞—Å–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é –∏ –ø–ª–∞–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. AI-—Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç –¥–µ—Ñ–∏—Ü–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –∑–∞–ø–∞—Å—ã.

–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–∞—à–∏–Ω, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–∏ –∏ —Å–Ω–∏–∂–∞–µ—Ç –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∞—Ä–µ–Ω–¥—É. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã AI –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞

–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞—á–∞–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –æ—Ç—Ä–∞—Å–ª–∏.

**–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**

–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —á–µ—Ä—Ç–µ–∂–µ–π –∏ –ø–ª–∞–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä—Ç–µ–∂–µ–π, —Ä–∞–∑–º–µ—Ä—ã, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç –∏—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–∞–º–µ—Ä –∏ –¥—Ä–æ–Ω–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞. –°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç —Ç–∏–ø—ã –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ä–∞–±–æ—Ç, —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.

–¢—Ä–µ—Ö–º–µ—Ä–Ω–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å—Ç—Ä–æ—è—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞–º–º–µ—Ç—Ä–∏–∏ –∏ –ª–∏–¥–∞—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç —Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã SLAM –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ä–æ–±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:**

–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Å–ª–æ–∂–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏. –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∂–∏–≥–∞ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∞—ç–≤—Ä–∏—Å—Ç–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—é—Ç –∑–∞–¥–∞—á–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏.

–ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ü–µ–ª–∏: –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç, –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –ü–∞—Ä–µ—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏.

–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–Ω–ª–∞–π–Ω-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç –ø–ª–∞–Ω—ã –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.

**–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:**

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –ú–æ–¥–µ–ª–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: —Ä–∞–∑–º–µ—Ä –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞, —Ç–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–¥–µ–ª–∫–∏, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –º–æ–¥–µ–ª–∏—Ä—É—é—Ç –¥–∏–Ω–∞–º–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏, –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–≤–µ–ª–æ–ø–µ—Ä–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ú–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ —Å–ø—Ä–æ—Å–∞.

**–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞:**

–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç NLP –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π, –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –≤—ã–¥–µ–ª—è—é—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö BIM-–º–æ–¥–µ–ª–µ–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞. –≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø–æ–≤—ã—à–∞–µ—Ç –µ–µ –∫–∞—á–µ—Å—Ç–≤–æ.

–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–¥–∞–Ω–∏–π –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —É–ª—É—á—à–∞—Ç—å –±—É–¥—É—â–∏–µ —Ä–µ—à–µ–Ω–∏—è. –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏ –∂–∞–ª–æ–± –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å BIM –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏:**

Building Information Modeling (BIM) —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏. AI-—Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è —Å BIM-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏–π.

–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏ –∑–¥–∞–Ω–∏–π –æ–±—ä–µ–¥–∏–Ω—è—é—Ç BIM-–º–æ–¥–µ–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ IoT-–¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π, –æ—Ç—Ä–∞–∂–∞—é—â–∏—Ö —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.

–î–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å (AR) –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å (VR) –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å AI –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤, –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Ä—è–¥ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:**

–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –†–æ—Å—Å–∏–∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–¥–µ–∫—Å–æ–º, –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π", —Å–∏—Å—Ç–µ–º–æ–π –°–ù–∏–ü (–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã –∏ –ø—Ä–∞–≤–∏–ª–∞) –∏ –°–ü (–°–≤–æ–¥ –ø—Ä–∞–≤–∏–ª). AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –Ω–æ—Ä–º–∞–º.

–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞–ª–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –Ω–∞—Å–µ–ª–µ–Ω–∏—è. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.

–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–±—à–∏—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã.

**–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è:**

–†–æ—Å—Å–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏: –æ—Ç –∞—Ä–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞ –Ω–∞ —Å–µ–≤–µ—Ä–µ –¥–æ —Å—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞ —é–≥–µ. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–¥–∞–Ω–∏–π, –≤—ã–±–æ—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.

–°–µ–π—Å–º–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤ —Ä—è–¥–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –Ω–æ—Ä–º —Å–µ–π—Å–º–æ—Å—Ç–æ–π–∫–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–π—Å–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

–í–µ—á–Ω–∞—è –º–µ—Ä–∑–ª–æ—Ç–∞ –≤ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö —Å–æ–∑–¥–∞–µ—Ç –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ —É—Å–ª–æ–≤–∏—è—Ö –≤–µ—á–Ω–æ–π –º–µ—Ä–∑–ª–æ—Ç—ã.

**–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:**

–ü–æ–ª–∏—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–†–æ—Å—Å–∏–π—Å–∫–∏–µ –°–ê–ü–†-—Å–∏—Å—Ç–µ–º—ã –∏ BIM-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ –±–∞–∑–∞—Ö –∑–Ω–∞–Ω–∏–π AI-—Å–∏—Å—Ç–µ–º.

–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –Ω–∞—É—á–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–¥–æ–≤—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —É—Å–ª–æ–≤–∏—è–º.

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞:**

–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –¥–æ–ª–µ–π —Ç–∏–ø–æ–≤–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∂–∏–ª–∏—â–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∏–ø–æ–≤—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∏—Ö –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.

–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞, —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–∞–±–æ—á–µ–π —Å–∏–ª—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è AI-–∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.

–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è –æ—Å–æ–±—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –≤–∫–ª—é—á–∞—è —É—á–∞—Å—Ç–∏–µ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–∞—Ö –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ "–û –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ".

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º. –°–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler
import networkx as nx
import cv2
import folium
from datetime import datetime, timedelta
import asyncio
import aiohttp
import logging
from dataclasses import dataclass
from typing import List, Dict, Optional, Tuple, Any
import json
import sqlite3
from pathlib import Path

@dataclass
class ConstructionTask:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    task_id: str
    name: str
    duration: float  # –¥–Ω–∏
    cost: float
    resources: List[str]
    predecessors: List[str]
    location: str
    skill_requirements: List[str]
    safety_level: int  # 1-5
    weather_dependency: float  # 0-1

@dataclass
class Resource:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞"""
    resource_id: str
    name: str
    type: str  # 'labor', 'equipment', 'material'
    availability: float
    cost_per_unit: float
    location: str
    skills: List[str]

@dataclass
class QualityCheck:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    check_id: str
    task_id: str
    check_type: str
    criteria: Dict[str, Any]
    timestamp: datetime
    result: Optional[Dict[str, Any]]

class IntelligentConstructionManagementSystem:
    def __init__(self):
        self.project_planner = ProjectPlanner()
        self.progress_monitor = ProgressMonitor()
        self.quality_controller = QualityController()
        self.risk_manager = ConstructionRiskManager()
        self.resource_optimizer = ResourceOptimizer()
        self.cost_estimator = CostEstimator()
        self.safety_monitor = SafetyMonitor()
        self.bim_integrator = BIMIntegrator()
        
    async def manage_project(self, project_data: Dict) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞
            project_plan = await self.project_planner.create_plan(project_data)
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            resource_allocation = self.resource_optimizer.optimize_allocation(
                project_plan, project_data['available_resources']
            )
            
            # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
            risk_assessment = self.risk_manager.assess_project_risks(
                project_plan, project_data
            )
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            cost_estimate = self.cost_estimator.estimate_total_cost(
                project_plan, resource_allocation
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitoring_setup = self.setup_monitoring_system(project_plan)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            management_plan = {
                'project_id': project_data['project_id'],
                'project_plan': project_plan,
                'resource_allocation': resource_allocation,
                'cost_estimate': cost_estimate,
                'risk_assessment': risk_assessment,
                'monitoring_setup': monitoring_setup,
                'quality_checkpoints': self.quality_controller.define_checkpoints(project_plan),
                'safety_measures': self.safety_monitor.define_safety_measures(project_plan)
            }
            
            return management_plan
            
        except Exception as e:
            logging.error(f"Error managing project {project_data['project_id']}: {e}")
            raise

class ProjectPlanner:
    def __init__(self):
        self.scheduling_model = SchedulingNeuralNetwork()
        self.optimization_engine = ScheduleOptimizer()
        
    async def create_plan(self, project_data: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
        tasks = self.parse_project_tasks(project_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        project_network = self.build_project_network(tasks)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        optimized_schedule = self.optimization_engine.optimize(
            project_network, project_data['constraints']
        )
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏
        critical_path = self.analyze_critical_path(project_network, optimized_schedule)
        
        return {
            'tasks': tasks,
            'schedule': optimized_schedule,
            'critical_path': critical_path,
            'total_duration': self.calculate_total_duration(optimized_schedule),
            'milestones': self.define_milestones(optimized_schedule)
        }
        
    def build_project_network(self, tasks: List[ConstructionTask]) -> nx.DiGraph:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        G = nx.DiGraph()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ (–∑–∞–¥–∞—á)
        for task in tasks:
            G.add_node(
                task.task_id,
                name=task.name,
                duration=task.duration,
                cost=task.cost,
                resources=task.resources,
                location=task.location,
                safety_level=task.safety_level,
                weather_dependency=task.weather_dependency
            )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ—Ä (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        for task in tasks:
            for predecessor in task.predecessors:
                G.add_edge(predecessor, task.task_id)
        
        return G

class SchedulingNeuralNetwork(nn.Module):
    def __init__(self, input_size=50, hidden_size=128, num_layers=3):
        super(SchedulingNeuralNetwork, self).__init__()
        
        # –≠–Ω–∫–æ–¥–µ—Ä –¥–ª—è –∑–∞–¥–∞—á
        self.task_encoder = nn.Sequential(
            nn.Linear(input_size, hidden_size),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(hidden_size, hidden_size // 2)
        )
        
        # LSTM –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∑–∞–¥–∞—á
        self.lstm = nn.LSTM(
            input_size=hidden_size // 2,
            hidden_size=hidden_size,
            num_layers=num_layers,
            batch_first=True,
            dropout=0.2
        )
        
        # Attention –º–µ—Ö–∞–Ω–∏–∑–º
        self.attention = nn.MultiheadAttention(
            embed_dim=hidden_size,
            num_heads=8,
            dropout=0.1
        )
        
        # –î–µ–∫–æ–¥–µ—Ä –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.duration_predictor = nn.Sequential(
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(hidden_size // 2, 1),
            nn.ReLU()  # –í—Ä–µ–º—è –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
        )
        
        # –î–µ–∫–æ–¥–µ—Ä –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        self.cost_predictor = nn.Sequential(
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(hidden_size // 2, 1),
            nn.ReLU()  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
        )
        
    def forward(self, task_features):
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
        encoded_tasks = self.task_encoder(task_features)
        
        # LSTM –æ–±—Ä–∞–±–æ—Ç–∫–∞
        lstm_out, (hidden, cell) = self.lstm(encoded_tasks)
        
        # Attention
        attended, _ = self.attention(lstm_out, lstm_out, lstm_out)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        duration_pred = self.duration_predictor(attended)
        cost_pred = self.cost_predictor(attended)
        
        return {
            'duration': duration_pred,
            'cost': cost_pred,
            'features': attended
        }

class ProgressMonitor:
    def __init__(self):
        self.computer_vision = ConstructionVisionSystem()
        self.iot_processor = IoTDataProcessor()
        self.progress_estimator = ProgressEstimationModel()
        
    async def monitor_progress(self, project_plan: Dict, monitoring_data: Dict) -> Dict:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥—Ä–æ–Ω–æ–≤ –∏ –∫–∞–º–µ—Ä
        visual_progress = await self.computer_vision.analyze_construction_site(
            monitoring_data['images']
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö IoT –¥–∞—Ç—á–∏–∫–æ–≤
        sensor_data = self.iot_processor.process_sensor_data(
            monitoring_data['sensor_data']
        )
        
        # –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        overall_progress = self.progress_estimator.estimate_progress(
            project_plan, visual_progress, sensor_data
        )
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        deviations = self.detect_deviations(project_plan, overall_progress)
        
        return {
            'visual_progress': visual_progress,
            'sensor_data': sensor_data,
            'overall_progress': overall_progress,
            'deviations': deviations,
            'recommendations': self.generate_recommendations(deviations)
        }

class ConstructionVisionSystem:
    def __init__(self):
        self.object_detector = self.load_construction_detector()
        self.progress_analyzer = ProgressAnalysisModel()
        self.quality_inspector = QualityInspectionModel()
        
    async def analyze_construction_site(self, images: List[str]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
        analysis_results = {
            'detected_objects': [],
            'progress_estimates': [],
            'quality_issues': [],
            'safety_violations': []
        }
        
        for image_path in images:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = cv2.imread(image_path)
            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
            objects = self.detect_construction_objects(image_rgb)
            analysis_results['detected_objects'].extend(objects)
            
            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = self.estimate_visual_progress(image_rgb, objects)
            analysis_results['progress_estimates'].append(progress)
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
            quality_issues = self.inspect_quality(image_rgb, objects)
            analysis_results['quality_issues'].extend(quality_issues)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            safety_violations = self.detect_safety_violations(image_rgb)
            analysis_results['safety_violations'].extend(safety_violations)
        
        return analysis_results
        
    def detect_construction_objects(self, image: np.ndarray) -> List[Dict]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        objects = [
            {
                'type': 'crane',
                'confidence': 0.95,
                'bbox': [100, 50, 200, 300],
                'status': 'active'
            },
            {
                'type': 'concrete_mixer',
                'confidence': 0.87,
                'bbox': [300, 200, 450, 350],
                'status': 'idle'
            },
            {
                'type': 'building_structure',
                'confidence': 0.92,
                'bbox': [50, 100, 600, 400],
                'completion_level': 0.65
            }
        ]
        
        return objects

class QualityController:
    def __init__(self):
        self.inspection_models = {
            'concrete': ConcreteQualityModel(),
            'steel': SteelQualityModel(),
            'finishing': FinishingQualityModel()
        }
        
    def define_checkpoints(self, project_plan: Dict) -> List[QualityCheck]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
        checkpoints = []
        
        for task in project_plan['tasks']:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏
            if 'concrete' in task.name.lower():
                check_type = 'concrete'
            elif 'steel' in task.name.lower() or 'metal' in task.name.lower():
                check_type = 'steel'
            elif 'finish' in task.name.lower() or 'paint' in task.name.lower():
                check_type = 'finishing'
            else:
                check_type = 'general'
            
            checkpoint = QualityCheck(
                check_id=f"QC_{task.task_id}",
                task_id=task.task_id,
                check_type=check_type,
                criteria=self.get_quality_criteria(check_type),
                timestamp=datetime.now(),
                result=None
            )
            
            checkpoints.append(checkpoint)
        
        return checkpoints
        
    def get_quality_criteria(self, check_type: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        criteria_map = {
            'concrete': {
                'compressive_strength': {'min': 20, 'max': 50, 'unit': 'MPa'},
                'slump': {'min': 50, 'max': 150, 'unit': 'mm'},
                'air_content': {'min': 3, 'max': 8, 'unit': '%'}
            },
            'steel': {
                'yield_strength': {'min': 235, 'unit': 'MPa'},
                'tensile_strength': {'min': 360, 'unit': 'MPa'},
                'elongation': {'min': 20, 'unit': '%'}
            },
            'finishing': {
                'surface_roughness': {'max': 0.5, 'unit': 'mm'},
                'color_uniformity': {'min': 95, 'unit': '%'},
                'adhesion': {'min': 2.0, 'unit': 'MPa'}
            },
            'general': {
                'dimensional_accuracy': {'tolerance': 5, 'unit': 'mm'},
                'visual_defects': {'max_count': 0}
            }
        }
        
        return criteria_map.get(check_type, criteria_map['general'])

class ConstructionRiskManager:
    def __init__(self):
        self.risk_models = {
            'weather': WeatherRiskModel(),
            'safety': SafetyRiskModel(),
            'financial': FinancialRiskModel(),
            'technical': TechnicalRiskModel(),
            'regulatory': RegulatoryRiskModel()
        }
        
    def assess_project_risks(self, project_plan: Dict, project_data: Dict) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        risk_assessment = {
            'overall_risk_score': 0.0,
            'risk_factors': {},
            'critical_risks': [],
            'mitigation_strategies': []
        }
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∏—Å–∫–æ–≤
        for risk_type, model in self.risk_models.items():
            risk_score = model.assess_risk(project_plan, project_data)
            risk_assessment['risk_factors'][risk_type] = risk_score
            
            # –í—ã—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤
            if risk_score > 0.8:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
                critical_risk = {
                    'type': risk_type,
                    'score': risk_score,
                    'impact': model.get_risk_impact(project_plan),
                    'probability': model.get_risk_probability(project_data)
                }
                risk_assessment['critical_risks'].append(critical_risk)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤
                mitigation = model.get_mitigation_strategies(project_plan, project_data)
                risk_assessment['mitigation_strategies'].extend(mitigation)
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞
        risk_weights = {
            'weather': 0.2, 'safety': 0.3, 'financial': 0.25, 
            'technical': 0.15, 'regulatory': 0.1
        }
        risk_assessment['overall_risk_score'] = sum(
            risk_weights[risk_type] * score 
            for risk_type, score in risk_assessment['risk_factors'].items()
        )
        
        return risk_assessment

class ResourceOptimizer:
    def __init__(self):
        self.optimization_model = ResourceOptimizationModel()
        self.constraint_handler = ConstraintHandler()
        
    def optimize_allocation(self, project_plan: Dict, available_resources: List[Resource]) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_problem = self.formulate_optimization_problem(
            project_plan, available_resources
        )
        
        # –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimal_allocation = self.optimization_model.solve(optimization_problem)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        constraint_violations = self.constraint_handler.check_constraints(
            optimal_allocation, project_plan
        )
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if constraint_violations:
            optimal_allocation = self.handle_constraint_violations(
                optimal_allocation, constraint_violations
            )
        
        return {
            'resource_allocation': optimal_allocation,
            'utilization_rates': self.calculate_utilization_rates(optimal_allocation),
            'cost_breakdown': self.calculate_resource_costs(optimal_allocation),
            'constraint_status': constraint_violations
        }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    construction_system = IntelligentConstructionManagementSystem()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_data = {
        'project_id': 'PROJ_001',
        'name': '–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å "–ù–æ–≤—ã–π –≥–æ—Ä–æ–¥"',
        'location': '–ú–æ—Å–∫–≤–∞',
        'budget': 2000000000,  # 2 –º–ª—Ä–¥ —Ä—É–±
        'deadline': datetime.now() + timedelta(days=730),  # 2 –≥–æ–¥–∞
        'building_type': 'residential',
        'floors': 25,
        'total_area': 50000,  # –º¬≤
        'constraints': {
            'max_workers': 200,
            'working_hours': {'start': 8, 'end': 20},
            'noise_restrictions': True,
            'environmental_requirements': ['energy_efficiency_A', 'green_building']
        },
        'available_resources': [
            Resource('R001', '–°—Ç—Ä–æ–∏—Ç–µ–ª–∏', 'labor', 100, 3000, '–ú–æ—Å–∫–≤–∞', ['construction']),
            Resource('R002', '–ë–∞—à–µ–Ω–Ω—ã–π –∫—Ä–∞–Ω', 'equipment', 2, 50000, '–ú–æ—Å–∫–≤–∞', ['lifting']),
            Resource('R003', '–ë–µ—Ç–æ–Ω –ú300', 'material', 10000, 4500, '–ú–æ—Å–∫–≤–∞', [])
        ]
    }
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º
    management_plan = await construction_system.manage_project(project_data)
    
    print("=== –ü–õ–ê–ù –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–†–û–ò–¢–ï–õ–¨–ù–´–ú –ü–†–û–ï–ö–¢–û–ú ===")
    print(f"–ü—Ä–æ–µ–∫—Ç: {project_data['name']}")
    print(f"–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {management_plan['project_plan']['total_duration']:.0f} –¥–Ω–µ–π")
    print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {management_plan['cost_estimate']['total_cost']:,.0f} —Ä—É–±")
    print(f"–û–±—â–∏–π —Ä–∏—Å–∫: {management_plan['risk_assessment']['overall_risk_score']:.2f}")
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤: {len(management_plan['risk_assessment']['critical_risks'])}")

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

\`\`\`python
class ConstructionSystemROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'software_development': {
                'ai_platform': 25000000,      # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                'bim_integration': 8000000,   # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å BIM
                'mobile_apps': 6000000,       # –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                'testing': 5000000,           # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                'deployment': 4000000         # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            },
            'hardware_infrastructure': {
                'servers': 10000000,          # –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'iot_devices': 20000000,      # IoT –¥–∞—Ç—á–∏–∫–∏ –∏ –∫–∞–º–µ—Ä—ã
                'drones': 3000000,            # –î—Ä–æ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                'networking': 4000000,        # –°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'storage': 3000000            # –°–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
            },
            'annual_operating': {
                'maintenance': 4000000,       # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                'support': 3000000,           # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                'licenses': 2500000,          # –õ–∏—Ü–µ–Ω–∑–∏–∏ –ü–û
                'personnel': 18000000,        # –ü–µ—Ä—Å–æ–Ω–∞–ª (20 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
                'data_services': 1500000      # –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'project_time_reduction': {
                'average_project_duration': 365,       # –¥–Ω–µ–π
                'time_reduction': 0.15,                 # 15% —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                'daily_overhead_cost': 500000,          # —Ä—É–±/–¥–µ–Ω—å
                'description': '–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'
            },
            'cost_optimization': {
                'annual_project_cost': 10000000000,     # 10 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥
                'cost_reduction': 0.08,                 # 8% —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ'
            },
            'quality_improvement': {
                'defect_cost': 500000000,               # 500 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –ø–æ—Ç–µ—Ä–∏ –æ—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤
                'quality_improvement': 0.40,            # 40% —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'
            },
            'resource_utilization': {
                'equipment_cost': 2000000000,           # 2 –º–ª—Ä–¥ —Ä—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                'utilization_improvement': 0.20,        # 20% —É–ª—É—á—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤'
            },
            'safety_improvement': {
                'accident_cost': 200000000,             # 200 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –ø–æ—Ç–µ—Ä–∏ –æ—Ç –ù–°
                'safety_improvement': 0.50,             # 50% —Å–Ω–∏–∂–µ–Ω–∏–µ –ù–°
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–∞'
            },
            'regulatory_compliance': {
                'compliance_cost': 300000000,           # 300 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                'efficiency_gain': 0.25,                # 25% –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                'description': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ—Ä–º–∞–º'
            },
            'predictive_maintenance': {
                'maintenance_cost': 800000000,          # 800 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –¢–û –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                'maintenance_optimization': 0.30,       # 30% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¢–û
                'description': '–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        software_costs = sum(costs['software_development'].values())
        hardware_costs = sum(costs['hardware_infrastructure'].values())
        
        total_investment = software_costs + hardware_costs
        
        return {
            'software_development': software_costs,
            'hardware_infrastructure': hardware_costs,
            'total_capex': total_investment,
            'annual_opex': sum(costs['annual_operating'].values())
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        time_savings = (
            benefits['project_time_reduction']['average_project_duration'] *
            benefits['project_time_reduction']['time_reduction'] *
            benefits['project_time_reduction']['daily_overhead_cost'] * 10  # 10 –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –≥–æ–¥
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç
        cost_savings = (
            benefits['cost_optimization']['annual_project_cost'] *
            benefits['cost_optimization']['cost_reduction']
        )
        
        # –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_savings = (
            benefits['quality_improvement']['defect_cost'] *
            benefits['quality_improvement']['quality_improvement']
        )
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_savings = (
            benefits['resource_utilization']['equipment_cost'] *
            benefits['resource_utilization']['utilization_improvement'] * 0.15  # 15% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∫ –≥–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        safety_savings = (
            benefits['safety_improvement']['accident_cost'] *
            benefits['safety_improvement']['safety_improvement']
        )
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞–º
        compliance_savings = (
            benefits['regulatory_compliance']['compliance_cost'] *
            benefits['regulatory_compliance']['efficiency_gain']
        )
        
        # –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        maintenance_savings = (
            benefits['predictive_maintenance']['maintenance_cost'] *
            benefits['predictive_maintenance']['maintenance_optimization']
        )
        
        total_annual_benefits = (
            time_savings + cost_savings + quality_savings +
            resource_savings + safety_savings + compliance_savings + maintenance_savings
        )
        
        return {
            'project_time_reduction': time_savings,
            'cost_optimization': cost_savings,
            'quality_improvement': quality_savings,
            'resource_utilization': resource_savings,
            'safety_improvement': safety_savings,
            'regulatory_compliance': compliance_savings,
            'predictive_maintenance': maintenance_savings,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=10):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        
        net_annual_benefits = (
            annual_benefits['total_annual_benefits'] - 
            investment['annual_opex']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total_capex'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.12  # 12% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        npv = -investment['total_capex']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total_capex']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total_capex']) / investment['total_capex']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
roi_calculator = ConstructionSystemROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total_capex']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total_annual_benefits']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['investment']['annual_opex']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 10 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")

print("\\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ì–û–î ===")
benefits = roi_metrics['annual_benefits']
print(f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {benefits['project_time_reduction']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç: {benefits['cost_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {benefits['quality_improvement']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {benefits['resource_utilization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–∞: {benefits['safety_improvement']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞–º: {benefits['regulatory_compliance']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {benefits['predictive_maintenance']:,.0f} —Ä—É–±/–≥–æ–¥")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: –æ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –º–Ω–æ–≥–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å—é, —Å—Ç—Ä–æ–≥–∏–º–∏ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI-—Ä–µ—à–µ–Ω–∏–π. –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏, –≤–ª–∏—è—é—â–∏–º–∏ –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å AI-—Å–∏—Å—Ç–µ–º.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏ –∏ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –æ—à–∏–±–æ–∫. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª–µ–µ 1.4 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –æ–∫–æ–ª–æ 77 –º–ª–Ω —Ä—É–±–ª–µ–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ –∏ ROI –±–æ–ª–µ–µ 1700%.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ AI –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏.
`
  },

  26: {
    title: "AI –≤ —Å–µ–ª—å—Å–∫–æ–º —Ö–æ–∑—è–π—Å—Ç–≤–µ –∏ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: 160,
    type: "theory",
    module: 5,
    content: `
# –£—Ä–æ–∫ 26: AI –≤ —Å–µ–ª—å—Å–∫–æ–º —Ö–æ–∑—è–π—Å—Ç–≤–µ –∏ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ

–ê–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–π –ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–µ–Ω–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –∏ –ø–∏—â–µ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∂–∏–≤–∞—é—Ç –ø–µ—Ä–∏–æ–¥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤—ã. –°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø—Ä–∏—Ä–æ–¥–Ω–æ-–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã —Å –∂–∏–≤—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞–º–∏ (—Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏), –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –∫–∞—á–µ—Å—Ç–≤—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ö–∞–∂–¥–æ–µ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ –ø–æ —Å–≤–æ–∏–º –ø—Ä–∏—Ä–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º.

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–∏–∫–ª: –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–µ–≤–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤–æ–º –¥–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ç–æ—á–Ω–æ–µ –∑–µ–º–ª–µ–¥–µ–ª–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∏—â–µ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∞–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫.

–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–≥—Ä–æ–º–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–µ–π, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω, —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ê–ü–ö. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ —É—á–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –≤—ã—Å–æ–∫–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤. –°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Å–µ–º–µ–Ω–∞, —É–¥–æ–±—Ä–µ–Ω–∏—è, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π, –∫–æ—Ä–º–∞, —ç–Ω–µ—Ä–≥–∏—é –∏ —Ç—Ä—É–¥–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã. –î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø–æ—Ç–µ—Ä—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏.

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞

–ê–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –æ–±–ª–∞–¥–∞–µ—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∂–∏–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã:**

–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–∞–±–æ—Ç–µ —Å –∂–∏–≤—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞–º–∏ - —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–ª–æ–∂–Ω—ã–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ü–∏–∫–ª—ã —Ä–∞–∑–≤–∏—Ç–∏—è, –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º –∏ —Å—Ç—Ä–µ—Å—Å–∞–º, —Ç—Ä–µ–±—É—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —É—Ö–æ–¥—É –∏ –∫–æ—Ä–º–ª–µ–Ω–∏—é. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º.

–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–æ—Ä—Ç–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –ø–æ—Ä–æ–¥ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–µ–Ω–æ—Ç–∏–ø–∞. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.

**–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø—Ä–∏—Ä–æ–¥–Ω–æ-–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π:**

–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—á–≤, –≤–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ—á–≤–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã, –≥–∏–¥—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.

–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞, —Ç—Ä–µ–±—É—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–æ—Ä—Ç–æ–≤ –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.

**–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:**

–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Ç—Ä—É–¥–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –ø–∏–∫–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã.

–ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ü–∏–∫–ª—ã –≤ —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤–µ (—Å–µ–≤–æ–æ–±–æ—Ä–æ—Ç—ã) –∏ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–µ (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å—Ç–∞–¥–∞) —Ç—Ä–µ–±—É—é—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π.

**–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å:**

–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≥–æ–¥—å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å—é –ø–æ—á–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, —Ä–µ–ª—å–µ—Ñ–∞, –º–∏–∫—Ä–æ–∫–ª–∏–º–∞—Ç–∞. –¢–æ—á–Ω–æ–µ –∑–µ–º–ª–µ–¥–µ–ª–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª–µ–π –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤.

–ì–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (–ì–ò–°) –∏ –¥–∞–Ω–Ω—ã–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ –∑–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ó–µ–º–ª–∏ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–µ–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞.

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**

–ü–∏—â–µ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –ø–æ–¥–ª–µ–∂–∏—Ç —Å—Ç—Ä–æ–≥–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—ç–ø–∏–¥–µ–º–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.

–ü—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—è –¥–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

**–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å:**

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏ –ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ –ø–æ—á–≤. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–æ—Ö–∏–º–∏–∫–∞—Ç–æ–≤, –≤–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —ç–Ω–µ—Ä–≥–∏–∏.

–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ –∑–µ–º–ª–µ–¥–µ–ª–∏–µ –∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–≥—Ä–æ—ç–∫–æ—Å–∏—Å—Ç–µ–º–∞–º–∏. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∞–≥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.

### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Å–µ–ª—å—Å–∫–æ–º —Ö–æ–∑—è–π—Å—Ç–≤–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å–µ–ª—å—Å–∫–æ–º —Ö–æ–∑—è–π—Å—Ç–≤–µ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

**–¢–æ—á–Ω–æ–µ –∑–µ–º–ª–µ–¥–µ–ª–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤–æ–º:**

–¢–æ—á–Ω–æ–µ –∑–µ–º–ª–µ–¥–µ–ª–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ —É—Å–ª–æ–≤–∏–π –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è. –°–∏—Å—Ç–µ–º—ã —Ç–æ—á–Ω–æ–≥–æ –∑–µ–º–ª–µ–¥–µ–ª–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –ø–æ—á–≤—ã, –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–π, –¥—Ä–æ–Ω–æ–≤, —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–∫—É –ø–æ–ª—è.

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—á–≤—ã, —Ñ–µ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∑ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö –∞–≥—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ú–æ–¥–µ–ª–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—è–≤–ª—è—é—Ç —Å–ª–æ–∂–Ω—ã–µ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤–∞—Ö —Å —É—á–µ—Ç–æ–º –ø–æ—á–≤–µ–Ω–Ω–æ–≥–æ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–æ–∑—ã, —Å—Ä–æ–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –≤–Ω–µ—Å–µ–Ω–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ –ø–æ–ª—è.

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π, –±–æ–ª–µ–∑–Ω–µ–π –∏ —Å–æ—Ä–Ω—è–∫–æ–≤, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ö —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ—Ä–∞–∂–µ–Ω–∏—è, –∞ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è –≤—Ä–µ–¥–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤.

**–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —Ä–æ–±–æ—Ç–∏–∑–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞:**

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ—Ä–º–ª–µ–Ω–∏—è, –¥–æ–µ–Ω–∏—è, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö. –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥–æ–π –∫–æ—Ä–æ–≤—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–ª–æ–∫–∞.

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–æ—Å–∏–º—ã–µ –¥–∞—Ç—á–∏–∫–∏ –∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Ç–µ–ª–∞, —á–∞—Å—Ç–æ—Ç—É –¥—ã—Ö–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Ü–∏–æ–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∂–∏–≤–æ—Ç–Ω—ã—Ö, –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–º–æ–≤, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ —Ü–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –°–∏—Å—Ç–µ–º—ã —Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–∑–∏—Ä—É—é—Ç –∫–æ—Ä–º–∞ –∏ –¥–æ–±–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.

–°–µ–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–Ω–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ AI –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–µ–º–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–π –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≥–µ–Ω–æ—Ç–∏–ø–æ–º –∏ —Ñ–µ–Ω–æ—Ç–∏–ø–æ–º –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∏—Ä—Ä–∏–≥–∞—Ü–∏–µ–π:**

–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ä–æ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–æ–¥–æ–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Ä–∞—Å—Ç–µ–Ω–∏–π, –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –î–∞—Ç—á–∏–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã, –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –º–æ–¥–µ–ª–∏ –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –ø–æ–ª–∏–≤–µ.

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Ñ–µ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∑ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Ä—Ä–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. AI-–º–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ–ª–∏–≤–æ–≤ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –≤–æ–¥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π.

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –≤–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞, –º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –≤–æ–¥—ã –¥–ª—è –æ—Ä–æ—à–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä. –°–∏—Å—Ç–µ–º—ã –≤–æ–¥–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏:**

–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ç—Ä–∞–∫—Ç–æ—Ä—ã –∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–≤—ã—Ö —Ä–∞–±–æ—Ç –±–µ–∑ —É—á–∞—Å—Ç–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –°–∏—Å—Ç–µ–º—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, –≥—Ä–∞–Ω–∏—Ü –ø–æ–ª–µ–π –∏ —Ä–∞–±–æ—á–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤.

–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–∞—Ç–∏–∫–∏, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–º–æ–Ω—Ç.

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏, –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ö–æ–ª–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–µ–∑–¥–æ–≤ –∏ –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–±–æ—Ç, –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.

### –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

–ü–∏—â–µ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∞–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∏—â–µ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:**

AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å—ã—Ä—å—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∏—â–µ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤—ã—è–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ä–µ–∂–∏–º—ã, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç—É—Ä –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –≤–∫—É—Å–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–∞–º –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏.

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π, –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

**–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞:**

–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—ã—Ä—å—è –∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º. –°–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ü–≤–µ—Ç, —Ñ–æ—Ä–º—É, —Ä–∞–∑–º–µ—Ä, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é, –ø—Ä–µ–≤—ã—à–∞—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞.

–°–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å AI –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–ª–∫–∞, –∂–∏—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å 100% –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –±–µ–∑ –µ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è.

–ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø—Ä–µ—Å—Å-–º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è.

**–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:**

–°–∏—Å—Ç–µ–º—ã HACCP (Hazard Analysis and Critical Control Points) –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫, –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

–ü—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è AI-—Å–∏—Å—Ç–µ–º–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ë–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å AI —Å–æ–∑–¥–∞—é—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–∏—â–µ–≤—ã—Ö –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å—ã—Ä—å—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, —É—Å–ª–æ–≤–∏—è—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∞–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫:**

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –Ω–∞ –ø–∏—â–µ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂, —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Ç–µ—Ä—å –æ—Ç –ø–æ—Ä—á–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏—Ö—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏, –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. –°–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç —É—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø–∞—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞ –∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏—Ö—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã

–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –∏–º–µ–µ—Ç —Ä—è–¥ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

**–ü—Ä–∏—Ä–æ–¥–Ω–æ-–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è:**

–†–æ—Å—Å–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –æ–≥—Ä–æ–º–Ω—ã–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º –ø—Ä–∏—Ä–æ–¥–Ω–æ-–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω: –æ—Ç –∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—É–Ω–¥—Ä –¥–æ —Å—É–±—Ç—Ä–æ–ø–∏–∫–æ–≤, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö, –∑–∞—Å—É—à–ª–∏–≤–æ—Å—Ç—å —é–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π, –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö.

–†–∏—Å–∫–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π (–∑–∞—Å—É—Ö–∏, –∑–∞–º–æ—Ä–æ–∑–∫–∏, –≥—Ä–∞–¥, –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è) —Ç—Ä–µ–±—É—é—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥—Ä–æ–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –º–µ—Ä—ã –∏—Ö —Å–Ω–∏–∂–µ–Ω–∏—è.

–ü–æ—á–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –†–æ—Å—Å–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç —á–µ—Ä–Ω–æ–∑–µ–º—ã, –ø–æ–¥–∑–æ–ª–∏—Å—Ç—ã–µ, —Å–µ—Ä—ã–µ –ª–µ—Å–Ω—ã–µ, –∫–∞—à—Ç–∞–Ω–æ–≤—ã–µ –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–æ—á–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–≥—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—á–≤–µ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≥—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:**

–†–æ—Å—Å–∏–π—Å–∫–æ–µ —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —Å–æ—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ–º –∫—Ä—É–ø–Ω—ã—Ö –∞–≥—Ä–æ—Ö–æ–ª–¥–∏–Ω–≥–æ–≤, —Å—Ä–µ–¥–Ω–∏—Ö —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –∏ –º–∞–ª—ã—Ö —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏—Ö —Ö–æ–∑—è–π—Å—Ç–≤. AI-—Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–º–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º—ã–º–∏ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º –∏ —Ç–∏–ø–∞–º —Ö–æ–∑—è–π—Å—Ç–≤.

–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—Ä–∞—Å–ª–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π: –∑–µ—Ä–Ω–æ–≤–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ —Å—Ç–µ–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö, –º–æ–ª–æ—á–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ –≤ –ª–µ—Å–Ω–æ–π –∑–æ–Ω–µ, –æ–≤–æ—â–µ–≤–æ–¥—Å—Ç–≤–æ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö, –æ–ª–µ–Ω–µ–≤–æ–¥—Å—Ç–≤–æ –≤ —Ç—É–Ω–¥—Ä–µ.

**–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:**

–†–æ—Å—Å–∏–π—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –∏ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞–µ—Ç –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω "–û –∫–∞—á–µ—Å—Ç–≤–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∏—â–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¢–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—é–∑–∞, –ì–û–°–¢—ã –∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–°–∏—Å—Ç–µ–º–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –†–æ—Å—Å–∏–∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è.

–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–¥–æ—Ä–æ–≤—å—é –∂–∏–≤–æ—Ç–Ω—ã—Ö, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω—ã–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.

**–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è:**

–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –≤–∫–ª—é—á–∞–µ—Ç –º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ –ê–ü–ö, —Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º. AI-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.

–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç "–¶–∏—Ñ—Ä–æ–≤–æ–µ —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ" –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–æ—á–Ω–æ–≥–æ –∑–µ–º–ª–µ–¥–µ–ª–∏—è, —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é –ø–ª–µ–º–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–∞. AI-—Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏.

**–ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:**

–ü–æ–ª–∏—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –ê–ü–ö, –≤–∫–ª—é—á–∞—è —Å–µ–º–µ–Ω–æ–≤–æ–¥—Å—Ç–≤–æ, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.

–†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ–ª–µ–∫—Ü–∏–∏ –∏ —Å–µ–º–µ–Ω–æ–≤–æ–¥—Å—Ç–≤–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ—Ä—Ç–æ–≤ –∏ –≥–∏–±—Ä–∏–¥–æ–≤, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —É—Å–ª–æ–≤–∏—è–º.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º. –°–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–æ—á–Ω–æ–µ –∑–µ–º–ª–µ–¥–µ–ª–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import cv2
import folium
from datetime import datetime, timedelta
import asyncio
import aiohttp
import logging
from dataclasses import dataclass
from typing import List, Dict, Optional, Tuple, Any
import json
import sqlite3
from pathlib import Path
import geopandas as gpd
from shapely.geometry import Point, Polygon
import rasterio
from rasterio.features import rasterize
import xarray as xr

@dataclass
class Field:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è"""
    field_id: str
    name: str
    area: float  # –≥–∞
    geometry: Polygon
    soil_type: str
    crop_rotation: List[str]
    current_crop: str
    planting_date: datetime
    expected_harvest: datetime
    irrigation_system: bool

@dataclass
class Animal:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
    animal_id: str
    species: str
    breed: str
    birth_date: datetime
    weight: float
    health_status: str
    productivity_data: Dict[str, Any]
    location: str

@dataclass
class WeatherData:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    timestamp: datetime
    temperature: float
    humidity: float
    precipitation: float
    wind_speed: float
    solar_radiation: float
    location: Tuple[float, float]

class IntelligentFarmManagementSystem:
    def __init__(self):
        self.crop_manager = CropManagementSystem()
        self.livestock_manager = LivestockManagementSystem()
        self.resource_optimizer = FarmResourceOptimizer()
        self.weather_analyzer = WeatherAnalysisSystem()
        self.soil_analyzer = SoilAnalysisSystem()
        self.yield_predictor = YieldPredictionSystem()
        self.quality_controller = FarmQualityController()
        self.economic_optimizer = FarmEconomicOptimizer()
        self.iot_processor = FarmIoTProcessor()
        
    async def manage_farm(self, farm_data: Dict) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º"""
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–µ—Ä–º—ã
            farm_status = await self.analyze_farm_status(farm_data)
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
            weather_forecast = await self.weather_analyzer.get_forecast(
                farm_data['location'], days=14
            )
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤–æ–º
            crop_management = await self.crop_manager.manage_crops(
                farm_data['fields'], weather_forecast
            )
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ–º
            livestock_management = await self.livestock_manager.manage_livestock(
                farm_data['animals'], farm_data['facilities']
            )
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            resource_optimization = self.resource_optimizer.optimize_resources(
                farm_data, crop_management, livestock_management
            )
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            yield_forecast = self.yield_predictor.predict_yields(
                farm_data['fields'], weather_forecast, crop_management
            )
            
            # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            economic_plan = self.economic_optimizer.optimize_economics(
                farm_data, yield_forecast, resource_optimization
            )
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
            management_plan = {
                'farm_id': farm_data['farm_id'],
                'farm_status': farm_status,
                'crop_management': crop_management,
                'livestock_management': livestock_management,
                'resource_optimization': resource_optimization,
                'yield_forecast': yield_forecast,
                'economic_plan': economic_plan,
                'recommendations': self.generate_recommendations(
                    farm_status, weather_forecast, economic_plan
                )
            }
            
            return management_plan
            
        except Exception as e:
            logging.error(f"Error managing farm {farm_data['farm_id']}: {e}")
            raise

class CropManagementSystem:
    def __init__(self):
        self.growth_model = CropGrowthModel()
        self.disease_detector = PlantDiseaseDetector()
        self.irrigation_optimizer = IrrigationOptimizer()
        self.fertilizer_optimizer = FertilizerOptimizer()
        
    async def manage_crops(self, fields: List[Field], weather_forecast: Dict) -> Dict:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤–æ–º"""
        crop_management = {
            'field_operations': {},
            'irrigation_schedule': {},
            'fertilization_plan': {},
            'pest_disease_monitoring': {},
            'harvest_planning': {}
        }
        
        for field in fields:
            # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–µ–≤–æ–≤
            crop_status = await self.analyze_crop_status(field)
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–≤—ã—Ö —Ä–∞–±–æ—Ç
            field_operations = self.plan_field_operations(
                field, crop_status, weather_forecast
            )
            crop_management['field_operations'][field.field_id] = field_operations
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ä–æ—à–µ–Ω–∏—è
            irrigation_plan = self.irrigation_optimizer.optimize_irrigation(
                field, crop_status, weather_forecast
            )
            crop_management['irrigation_schedule'][field.field_id] = irrigation_plan
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏–π
            fertilizer_plan = self.fertilizer_optimizer.optimize_fertilization(
                field, crop_status
            )
            crop_management['fertilization_plan'][field.field_id] = fertilizer_plan
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π –∏ –±–æ–ª–µ–∑–Ω–µ–π
            pest_monitoring = await self.monitor_pests_diseases(field)
            crop_management['pest_disease_monitoring'][field.field_id] = pest_monitoring
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±–æ—Ä–∫–∏
            harvest_plan = self.plan_harvest(field, crop_status, weather_forecast)
            crop_management['harvest_planning'][field.field_id] = harvest_plan
        
        return crop_management

class CropGrowthModel(nn.Module):
    def __init__(self, input_size=20, hidden_size=128, num_layers=3):
        super(CropGrowthModel, self).__init__()
        
        # –≠–Ω–∫–æ–¥–µ—Ä –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.input_encoder = nn.Sequential(
            nn.Linear(input_size, hidden_size),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(hidden_size, hidden_size // 2)
        )
        
        # LSTM –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        self.lstm = nn.LSTM(
            input_size=hidden_size // 2,
            hidden_size=hidden_size,
            num_layers=num_layers,
            batch_first=True,
            dropout=0.2
        )
        
        # Attention –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ —Ä–æ—Å—Ç–∞
        self.attention = nn.MultiheadAttention(
            embed_dim=hidden_size,
            num_heads=8,
            dropout=0.1
        )
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        self.growth_stage_predictor = nn.Sequential(
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Linear(hidden_size // 2, 10),  # 10 —Å—Ç–∞–¥–∏–π —Ä–æ—Å—Ç–∞
            nn.Softmax(dim=-1)
        )
        
        self.biomass_predictor = nn.Sequential(
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Linear(hidden_size // 2, 1),
            nn.ReLU()
        )
        
        self.yield_predictor = nn.Sequential(
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Linear(hidden_size // 2, 1),
            nn.ReLU()
        )
        
        self.stress_detector = nn.Sequential(
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Linear(hidden_size // 2, 5),  # 5 —Ç–∏–ø–æ–≤ —Å—Ç—Ä–µ—Å—Å–∞
            nn.Sigmoid()
        )
        
    def forward(self, weather_data, soil_data, management_data):
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        combined_input = torch.cat([weather_data, soil_data, management_data], dim=-1)
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        encoded = self.input_encoder(combined_input)
        
        # LSTM –æ–±—Ä–∞–±–æ—Ç–∫–∞
        lstm_out, (hidden, cell) = self.lstm(encoded)
        
        # Attention
        attended, _ = self.attention(lstm_out, lstm_out, lstm_out)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        growth_stage = self.growth_stage_predictor(attended[:, -1, :])
        biomass = self.biomass_predictor(attended[:, -1, :])
        yield_pred = self.yield_predictor(attended[:, -1, :])
        stress_levels = self.stress_detector(attended[:, -1, :])
        
        return {
            'growth_stage': growth_stage,
            'biomass': biomass,
            'yield': yield_pred,
            'stress_levels': stress_levels,
            'features': attended
        }

class LivestockManagementSystem:
    def __init__(self):
        self.health_monitor = AnimalHealthMonitor()
        self.feeding_optimizer = FeedingOptimizer()
        self.breeding_manager = BreedingManager()
        self.milk_analyzer = MilkQualityAnalyzer()
        
    async def manage_livestock(self, animals: List[Animal], facilities: Dict) -> Dict:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ–º"""
        livestock_management = {
            'health_monitoring': {},
            'feeding_plans': {},
            'breeding_schedule': {},
            'milk_quality': {},
            'facility_optimization': {}
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –≤–∏–¥–∞–º –∏ –≥—Ä—É–ø–ø–∞–º
        animal_groups = self.group_animals(animals)
        
        for group_id, group_animals in animal_groups.items():
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
            health_status = await self.health_monitor.monitor_group_health(group_animals)
            livestock_management['health_monitoring'][group_id] = health_status
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
            feeding_plan = self.feeding_optimizer.optimize_feeding(
                group_animals, facilities['feed_storage']
            )
            livestock_management['feeding_plans'][group_id] = feeding_plan
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è
            if group_animals[0].species in ['cattle', 'sheep', 'goat']:
                breeding_plan = self.breeding_manager.plan_breeding(group_animals)
                livestock_management['breeding_schedule'][group_id] = breeding_plan
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–ª–æ–∫–∞ (–¥–ª—è –º–æ–ª–æ—á–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö)
            if group_animals[0].species == 'cattle' and 'dairy' in group_id:
                milk_quality = await self.milk_analyzer.analyze_milk_quality(group_animals)
                livestock_management['milk_quality'][group_id] = milk_quality
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏–π
        facility_optimization = self.optimize_facilities(animal_groups, facilities)
        livestock_management['facility_optimization'] = facility_optimization
        
        return livestock_management

class AnimalHealthMonitor:
    def __init__(self):
        self.behavior_analyzer = AnimalBehaviorAnalyzer()
        self.vital_signs_monitor = VitalSignsMonitor()
        self.disease_predictor = AnimalDiseasePredictor()
        
    async def monitor_group_health(self, animals: List[Animal]) -> Dict:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –≥—Ä—É–ø–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        health_status = {
            'overall_health_score': 0.0,
            'individual_assessments': {},
            'health_alerts': [],
            'treatment_recommendations': [],
            'vaccination_schedule': []
        }
        
        total_health_score = 0.0
        
        for animal in animals:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            behavior_data = await self.behavior_analyzer.analyze_behavior(animal)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            vital_signs = self.vital_signs_monitor.get_vital_signs(animal)
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
            disease_risk = self.disease_predictor.predict_disease_risk(
                animal, behavior_data, vital_signs
            )
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            individual_health_score = self.calculate_health_score(
                behavior_data, vital_signs, disease_risk
            )
            
            health_status['individual_assessments'][animal.animal_id] = {
                'health_score': individual_health_score,
                'behavior_data': behavior_data,
                'vital_signs': vital_signs,
                'disease_risk': disease_risk
            }
            
            total_health_score += individual_health_score
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            if individual_health_score < 0.7:
                health_status['health_alerts'].append({
                    'animal_id': animal.animal_id,
                    'severity': 'high' if individual_health_score < 0.5 else 'medium',
                    'symptoms': self.identify_symptoms(behavior_data, vital_signs),
                    'recommended_actions': self.recommend_treatment(disease_risk)
                })
        
        health_status['overall_health_score'] = total_health_score / len(animals)
        
        return health_status

class FarmResourceOptimizer:
    def __init__(self):
        self.water_optimizer = WaterResourceOptimizer()
        self.energy_optimizer = EnergyOptimizer()
        self.labor_optimizer = LaborOptimizer()
        self.equipment_optimizer = EquipmentOptimizer()
        
    def optimize_resources(self, farm_data: Dict, crop_management: Dict, 
                          livestock_management: Dict) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ñ–µ—Ä–º—ã"""
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        water_optimization = self.water_optimizer.optimize_water_usage(
            farm_data, crop_management, livestock_management
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        energy_optimization = self.energy_optimizer.optimize_energy_usage(
            farm_data, crop_management, livestock_management
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä—É–¥–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        labor_optimization = self.labor_optimizer.optimize_labor_allocation(
            farm_data, crop_management, livestock_management
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏
        equipment_optimization = self.equipment_optimizer.optimize_equipment_usage(
            farm_data, crop_management
        )
        
        return {
            'water_optimization': water_optimization,
            'energy_optimization': energy_optimization,
            'labor_optimization': labor_optimization,
            'equipment_optimization': equipment_optimization,
            'total_cost_savings': self.calculate_total_savings(
                water_optimization, energy_optimization, 
                labor_optimization, equipment_optimization
            )
        }

class YieldPredictionSystem:
    def __init__(self):
        self.yield_models = {
            'wheat': WheatYieldModel(),
            'corn': CornYieldModel(),
            'soybean': SoybeanYieldModel(),
            'potato': PotatoYieldModel(),
            'sunflower': SunflowerYieldModel()
        }
        
    def predict_yields(self, fields: List[Field], weather_forecast: Dict, 
                      crop_management: Dict) -> Dict:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏"""
        yield_predictions = {}
        
        for field in fields:
            crop_type = field.current_crop.lower()
            
            if crop_type in self.yield_models:
                model = self.yield_models[crop_type]
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
                model_input = self.prepare_model_input(
                    field, weather_forecast, crop_management
                )
                
                # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
                yield_prediction = model.predict_yield(model_input)
                
                # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å
                yield_factors = model.analyze_yield_factors(model_input)
                
                # –°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                scenario_analysis = self.perform_scenario_analysis(
                    field, model, model_input
                )
                
                yield_predictions[field.field_id] = {
                    'predicted_yield': yield_prediction,
                    'yield_factors': yield_factors,
                    'scenario_analysis': scenario_analysis,
                    'confidence_interval': model.get_confidence_interval(model_input),
                    'harvest_timing': self.optimize_harvest_timing(field, yield_prediction)
                }
        
        return yield_predictions

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–µ—Ä–º–æ–π
    farm_system = IntelligentFarmManagementSystem()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–µ—Ä–º—ã
    farm_data = {
        'farm_id': 'FARM_001',
        'name': '–ê–≥—Ä–æ—Ö–æ–ª–¥–∏–Ω–≥ "–ó–æ–ª–æ—Ç—ã–µ –ø–æ–ª—è"',
        'location': (55.7558, 37.6176),  # –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
        'total_area': 5000,  # –≥–∞
        'fields': [
            Field(
                field_id='F001',
                name='–ü–æ–ª–µ ‚Ññ1',
                area=500,
                geometry=Polygon([(0, 0), (1000, 0), (1000, 1000), (0, 1000)]),
                soil_type='chernozem',
                crop_rotation=['wheat', 'soybean', 'corn'],
                current_crop='wheat',
                planting_date=datetime(2024, 5, 15),
                expected_harvest=datetime(2024, 8, 20),
                irrigation_system=True
            )
        ],
        'animals': [
            Animal(
                animal_id='A001',
                species='cattle',
                breed='holstein',
                birth_date=datetime(2022, 3, 15),
                weight=550.0,
                health_status='healthy',
                productivity_data={'daily_milk': 25.5},
                location='barn_1'
            )
        ],
        'facilities': {
            'barns': ['barn_1', 'barn_2'],
            'feed_storage': {'capacity': 1000, 'current_stock': 750},
            'milk_parlor': {'capacity': 100, 'automation_level': 'high'},
            'grain_storage': {'capacity': 5000, 'current_stock': 2000}
        },
        'equipment': {
            'tractors': 5,
            'combines': 2,
            'irrigation_systems': 3,
            'milking_robots': 4
        }
    }
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–æ–π
    management_plan = await farm_system.manage_farm(farm_data)
    
    print("=== –ü–õ–ê–ù –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–ì–†–û–ü–†–ï–î–ü–†–ò–Ø–¢–ò–ï–ú ===")
    print(f"–§–µ—Ä–º–∞: {farm_data['name']}")
    print(f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {farm_data['total_area']} –≥–∞")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: {len(farm_data['fields'])}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {len(farm_data['animals'])}")

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

\`\`\`python
class FarmSystemROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'software_development': {
                'ai_platform': 30000000,      # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                'mobile_apps': 8000000,       # –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                'gis_integration': 6000000,   # –ì–ò–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
                'weather_integration': 4000000, # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–µ—Ç–µ–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏
                'testing': 6000000,           # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                'deployment': 5000000         # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            },
            'hardware_infrastructure': {
                'servers': 8000000,           # –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'iot_sensors': 25000000,      # IoT –¥–∞—Ç—á–∏–∫–∏ (–ø–æ—á–≤–∞, –ø–æ–≥–æ–¥–∞, –∂–∏–≤–æ—Ç–Ω—ã–µ)
                'drones': 5000000,            # –î—Ä–æ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                'satellite_data': 3000000,    # –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                'networking': 4000000,        # –°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'storage': 4000000            # –°–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
            },
            'annual_operating': {
                'maintenance': 5000000,       # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                'support': 4000000,           # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                'data_services': 6000000,     # –í–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–≥–æ–¥–∞, —Ä—ã–Ω–∫–∏)
                'personnel': 24000000,        # –ü–µ—Ä—Å–æ–Ω–∞–ª (25 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
                'licenses': 3000000           # –õ–∏—Ü–µ–Ω–∑–∏–∏ –ü–û
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'yield_increase': {
                'current_yield': 4.5,                  # —Ç/–≥–∞ —Å—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å
                'yield_improvement': 0.15,             # 15% —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
                'crop_area': 50000,                    # –≥–∞ –ø–æ—Å–µ–≤–Ω—ã—Ö –ø–ª–æ—â–∞–¥–µ–π
                'crop_price': 25000,                   # —Ä—É–±/—Ç —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                'description': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –∫—É–ª—å—Ç—É—Ä'
            },
            'resource_optimization': {
                'fertilizer_cost': 800000000,          # 800 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —É–¥–æ–±—Ä–µ–Ω–∏—è
                'fertilizer_savings': 0.20,           # 20% —ç–∫–æ–Ω–æ–º–∏—è —É–¥–æ–±—Ä–µ–Ω–∏–π
                'fuel_cost': 400000000,               # 400 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ
                'fuel_savings': 0.15,                 # 15% —ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞
                'water_cost': 200000000,              # 200 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –≤–æ–¥—É
                'water_savings': 0.25,                # 25% —ç–∫–æ–Ω–æ–º–∏—è –≤–æ–¥—ã
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤'
            },
            'livestock_productivity': {
                'milk_production': 100000,             # —Ç–æ–Ω–Ω –º–æ–ª–æ–∫–∞ –≤ –≥–æ–¥
                'milk_price': 35000,                   # —Ä—É–±/—Ç
                'productivity_increase': 0.12,        # 12% —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                'feed_cost': 600000000,               # 600 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∫–æ—Ä–º–∞
                'feed_optimization': 0.18,            # 18% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞'
            },
            'quality_improvement': {
                'quality_premium': 0.08,               # 8% –ø—Ä–µ–º–∏—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ
                'total_production_value': 5000000000,  # 5 –º–ª—Ä–¥ —Ä—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                'waste_reduction': 0.30,               # 30% —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
                'current_waste_cost': 300000000,       # 300 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –ø–æ—Ç–µ—Ä–∏
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏'
            },
            'labor_optimization': {
                'labor_cost': 1200000000,              # 1.2 –º–ª—Ä–¥ —Ä—É–±/–≥–æ–¥ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä—É–¥
                'efficiency_gain': 0.25,               # 25% –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä—É–¥–∞
                'automation_savings': 0.15,           # 15% —ç–∫–æ–Ω–æ–º–∏—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä—É–¥–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤'
            },
            'risk_management': {
                'insurance_cost': 150000000,           # 150 –º–ª–Ω —Ä—É–±/–≥–æ–¥ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ
                'risk_reduction': 0.40,                # 40% —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
                'weather_damage': 400000000,           # 400 –º–ª–Ω —Ä—É–±/–≥–æ–¥ –ø–æ—Ç–µ—Ä–∏ –æ—Ç –ø–æ–≥–æ–¥—ã
                'damage_reduction': 0.35,              # 35% —Å–Ω–∏–∂–µ–Ω–∏–µ —É—â–µ—Ä–±–∞
                'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏'
            },
            'market_optimization': {
                'marketing_efficiency': 0.10,          # 10% —É–ª—É—á—à–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞
                'price_optimization': 0.05,            # 5% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
                'total_revenue': 6000000000,           # 6 –º–ª—Ä–¥ —Ä—É–± –æ–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        software_costs = sum(costs['software_development'].values())
        hardware_costs = sum(costs['hardware_infrastructure'].values())
        
        total_investment = software_costs + hardware_costs
        
        return {
            'software_development': software_costs,
            'hardware_infrastructure': hardware_costs,
            'total_capex': total_investment,
            'annual_opex': sum(costs['annual_operating'].values())
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
        yield_benefits = (
            benefits['yield_increase']['current_yield'] *
            benefits['yield_increase']['yield_improvement'] *
            benefits['yield_increase']['crop_area'] *
            benefits['yield_increase']['crop_price']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        fertilizer_savings = (
            benefits['resource_optimization']['fertilizer_cost'] *
            benefits['resource_optimization']['fertilizer_savings']
        )
        fuel_savings = (
            benefits['resource_optimization']['fuel_cost'] *
            benefits['resource_optimization']['fuel_savings']
        )
        water_savings = (
            benefits['resource_optimization']['water_cost'] *
            benefits['resource_optimization']['water_savings']
        )
        resource_savings = fertilizer_savings + fuel_savings + water_savings
        
        # –ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ
        milk_revenue_increase = (
            benefits['livestock_productivity']['milk_production'] *
            benefits['livestock_productivity']['milk_price'] *
            benefits['livestock_productivity']['productivity_increase']
        )
        feed_cost_savings = (
            benefits['livestock_productivity']['feed_cost'] *
            benefits['livestock_productivity']['feed_optimization']
        )
        livestock_benefits = milk_revenue_increase + feed_cost_savings
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        quality_premium = (
            benefits['quality_improvement']['total_production_value'] *
            benefits['quality_improvement']['quality_premium']
        )
        waste_reduction = (
            benefits['quality_improvement']['current_waste_cost'] *
            benefits['quality_improvement']['waste_reduction']
        )
        quality_benefits = quality_premium + waste_reduction
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä—É–¥–∞
        labor_benefits = (
            benefits['labor_optimization']['labor_cost'] *
            (benefits['labor_optimization']['efficiency_gain'] + 
             benefits['labor_optimization']['automation_savings'])
        )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        insurance_savings = (
            benefits['risk_management']['insurance_cost'] *
            benefits['risk_management']['risk_reduction']
        )
        damage_reduction = (
            benefits['risk_management']['weather_damage'] *
            benefits['risk_management']['damage_reduction']
        )
        risk_benefits = insurance_savings + damage_reduction
        
        # –†—ã–Ω–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        market_benefits = (
            benefits['market_optimization']['total_revenue'] *
            (benefits['market_optimization']['marketing_efficiency'] +
             benefits['market_optimization']['price_optimization'])
        )
        
        total_annual_benefits = (
            yield_benefits + resource_savings + livestock_benefits +
            quality_benefits + labor_benefits + risk_benefits + market_benefits
        )
        
        return {
            'yield_increase': yield_benefits,
            'resource_optimization': resource_savings,
            'livestock_productivity': livestock_benefits,
            'quality_improvement': quality_benefits,
            'labor_optimization': labor_benefits,
            'risk_management': risk_benefits,
            'market_optimization': market_benefits,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=10):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        
        net_annual_benefits = (
            annual_benefits['total_annual_benefits'] - 
            investment['annual_opex']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total_capex'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.12  # 12% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        npv = -investment['total_capex']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total_capex']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total_capex']) / investment['total_capex']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
roi_calculator = FarmSystemROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total_capex']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total_annual_benefits']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['investment']['annual_opex']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 10 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")

print("\\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ì–û–î ===")
benefits = roi_metrics['annual_benefits']
print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏: {benefits['yield_increase']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {benefits['resource_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞: {benefits['livestock_productivity']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {benefits['quality_improvement']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä—É–¥–∞: {benefits['labor_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏: {benefits['risk_management']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–†—ã–Ω–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {benefits['market_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Ç–æ—á–Ω–æ–µ –∑–µ–º–ª–µ–¥–µ–ª–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π —Å –∂–∏–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø—Ä–∏—Ä–æ–¥–Ω–æ-–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –∫–∞—á–µ—Å—Ç–≤—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∞–≥—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞.

–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI-—Ä–µ—à–µ–Ω–∏–π. –ü—Ä–∏—Ä–æ–¥–Ω–æ-–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏, –≤–ª–∏—è—é—â–∏–º–∏ –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å AI-—Å–∏—Å—Ç–µ–º.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –≤—ã—Å–æ–∫–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª–µ–µ 2.4 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –æ–∫–æ–ª–æ 101 –º–ª–Ω —Ä—É–±–ª–µ–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ –∏ ROI –±–æ–ª–µ–µ 2200%.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ AI –≤ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞, —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ñ–µ—Ä–º, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ –ø–∏—â–µ–≤—ã—Ö —Ü–µ–ø–æ—á–µ–∫. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ.
`
  },

  27: {
    title: "AI –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–µ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
    duration: 180,
    type: "theory",
    module: 5,
    content: `
# –£—Ä–æ–∫ 27: AI –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–µ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö –∏ —Å—Ç—Ä–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏, –≥–¥–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å—Ç—Ä–æ–∂–∞–π—à–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ —Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã—Å–æ–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –Ω–∞—É–∫–æ–µ–º–∫–æ—Å—Ç—å—é, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å—Ç—Ä–æ–≥–∏–º —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 10-15 –ª–µ—Ç –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ —Ä–∞–∑–º–µ—Ä–µ 1-3 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –¥–æ–ª–ª–∞—Ä–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–æ—Ö–æ–¥–∏—Ç –¥–æ —Ä—ã–Ω–∫–∞.

–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞: –æ—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –º–æ–ª–µ–∫—É–ª –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤ –¥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –ø–æ—Å—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å–Ω–∏–∑–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã, –ø–æ–≤—ã—Å–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ 2030 –≥–æ–¥–∞ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, —Ä–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –º–∏—Ä–æ–≤–æ–º —Ä—ã–Ω–∫–µ.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –æ—Ç—Ä–∞—Å–ª–∏, –≤–∫–ª—é—á–∞—è —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º Good Manufacturing Practice (GMP), Good Clinical Practice (GCP) –∏ –¥—Ä—É–≥–∏–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞

–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é AI-—Å–∏—Å—Ç–µ–º.

**–°—Ç—Ä–æ–≥–æ–µ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:**

–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã—Ö –≤ –º–∏—Ä–µ. –†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ FDA (–°–®–ê), EMA (–ï–≤—Ä–æ–ø–∞), –ú–∏–Ω–∑–¥—Ä–∞–≤ –†–æ—Å—Å–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –∂–µ—Å—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É, –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.

–ü—Ä–∏–Ω—Ü–∏–ø—ã Good Manufacturing Practice (GMP) —Ç—Ä–µ–±—É—é—Ç, —á—Ç–æ–±—ã –≤—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—ã–ª–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ, –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é, –≤–∫–ª—é—á–∞—è Installation Qualification (IQ), Operational Qualification (OQ) –∏ Performance Qualification (PQ).

**–í—ã—Å–æ–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**

–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è—é—Ç –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω—å –ª—é–¥–µ–π, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏ –æ—à–∏–±–æ–∫ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ (Quality Risk Management, QRM) –¥–æ–ª–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å AI-–∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤. –ü—Ä–∏–Ω—Ü–∏–ø—ã FMEA (Failure Mode and Effects Analysis) –∏ HACCP (Hazard Analysis and Critical Control Points) –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ AI-—Å–∏—Å—Ç–µ–º –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

**–°–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:**

–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—É–∫–∞ –∏–º–µ–µ—Ç –¥–µ–ª–æ —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∏ —Ö–∏–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –Ω–∞ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–º —É—Ä–æ–≤–Ω–µ. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –æ—Å–Ω–æ–≤—ã —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏–∏, —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏, —Ñ–∞—Ä–º–∞–∫–æ–¥–∏–Ω–∞–º–∏–∫–∏, —Ç–æ–∫—Å–∏–∫–æ–ª–æ–≥–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.

–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ —Å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å—é. AI-–º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–ª–µ–∫—É–ª, –∏—Ö —Ñ–∏–∑–∏–∫–æ-—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∏—à–µ–Ω–∏, –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.

**–î–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:**

–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –ª–µ—Ç –∏ –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã: –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –¥–æ–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è I-III —Ñ–∞–∑, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ—Å—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–µ–µ–º—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏—Ö —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

**–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—à–∏–±–æ–∫:**

–û—à–∏–±–∫–∏ –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–µ—Ä—å–µ–∑–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –æ—Ç–∑—ã–≤—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–º —Å–∞–Ω–∫—Ü–∏—è–º –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ—Ç–µ—Ä—è–º. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤ –æ—à–∏–±–æ–∫.

–ü—Ä–∏–Ω—Ü–∏–ø—ã fail-safe design —Ç—Ä–µ–±—É—é—Ç, —á—Ç–æ–±—ã AI-—Å–∏—Å—Ç–µ–º—ã –±—ã–ª–∏ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–∫–∞–∑—ã –Ω–µ –ø—Ä–∏–≤–æ–¥–∏–ª–∏ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º—ã —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º.

**–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:**

–§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –ø–∞—Ç–µ–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.

–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π GDPR, HIPAA –∏ –¥—Ä—É–≥–∏—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤ –ø–æ –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ privacy by design –∏ data minimization.

### –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤

–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –ø–æ–∑–≤–æ–ª—è—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å –∏ —É–¥–µ—à–µ–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.

**Drug Discovery –∏ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–π –¥–∏–∑–∞–π–Ω:**

AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–∏—à–µ–Ω–µ–π –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.

–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Variational Autoencoders (VAE) –∏ Generative Adversarial Networks (GAN), —Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤—ã–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏. –≠—Ç–∏ –º–æ–¥–µ–ª–∏ –æ–±—É—á–∞—é—Ç—Å—è –Ω–∞ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω—ã –Ω–æ–≤—ã—Ö –º–æ–ª–µ–∫—É–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞.

–ú–µ—Ç–æ–¥—ã reinforcement learning –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –±–µ–ª–∫–∞, —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏, —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º —Å–≤–æ–π—Å—Ç–≤–∞–º. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É—è –∂–µ–ª–∞–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã.

**–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ADMET —Å–≤–æ–π—Å—Ç–≤:**

ADMET (Absorption, Distribution, Metabolism, Excretion, Toxicity) —Å–≤–æ–π—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ –≤–µ–¥–µ—Ç —Å–µ–±—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ. AI-–º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç —ç—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–µ–∏–≤–∞—Ç—å –Ω–µ–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞–Ω–Ω–∏—Ö —Å—Ç–∞–¥–∏—è—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–ú–æ–¥–µ–ª–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã, —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ—Ö–º–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –≥–µ–º–∞—Ç–æ—ç–Ω—Ü–µ—Ñ–∞–ª–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä, –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.

**–†–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤:**

AI –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä, —Å–µ—Ç–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±–µ–ª–∫–æ–≤ –∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã—è–≤–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.

–°–µ—Ç–µ–≤–∞—è —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏, –º–∏—à–µ–Ω—è–º–∏ –∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–≤—è–∑–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:**

AI –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∑–∞–π–Ω –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –æ—Ç–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—Ö–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–æ–≤ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –¥–∏–∑–∞–π–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–æ–≤—ã—Å–∏—Ç—å –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.

### AI –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

**–ü—Ä–æ—Ü–µ—Å—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è (PAT):**

PAT –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –°–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã (NIR, Raman, UV-Vis) –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å—ã—Ä—å—è, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

–ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤—ã—è–≤–ª—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.

Predictive control –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ—Ç—Ö–æ–¥—ã.

**–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**

AI –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –≤—ã—è–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ç–∞–±–ª–µ—Ç–æ–∫, –∫–∞–ø—Å—É–ª –∏ —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤.

–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (SPC) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç, –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Å–æ–±—ã—Ö –ø—Ä–∏—á–∏–Ω –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π, –æ—Ü–µ–Ω–∫–∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (CAPA).

**–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:**

AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –≠—Ç–æ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

–í–∏–±—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, —Ç–µ—Ä–º–æ–≥—Ä–∞—Ñ–∏—è –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤—ã—è–≤–ª—è—é—Ç —Ä–∞–Ω–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–Ω–æ—Å–∞ –∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫:**

AI –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏, —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –∫–æ–ª–µ–±–∞–Ω–∏–π —Å–ø—Ä–æ—Å–∞. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ —Ü–µ–ø–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑, –æ—Ü–µ–Ω–∫–∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–æ–≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º.

**–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:**

–†–æ—Å—Å–∏–π—Å–∫–æ–µ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º –∑–∞–∫–æ–Ω–µ "–û–± –æ–±—Ä–∞—â–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤" –∏ –≤–∫–ª—é—á–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É, –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—é –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º GMP, GCP, GLP.

–†–æ—Å–∑–¥—Ä–∞–≤–Ω–∞–¥–∑–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Ä—É–∫–æ–≤–æ–¥—è—â–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

**–ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:**

–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–ø–æ—Ä—Ç–∞. AI-—Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å.

–†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—É–∫–∏ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤, —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞:**

–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –¥–æ–ª–µ–π –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤, —Ä–∞–∑–≤–∏—Ç–∏–µ–º –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –∏ —Ä–∞—Å—Ç—É—â–∏–º —Å–ø—Ä–æ—Å–æ–º –Ω–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.

–°–∏—Å—Ç–µ–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤. AI-–º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä—ã –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–π drug discovery, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–≤–æ–π—Å—Ç–≤, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ADMET –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch_geometric.nn import GCNConv, GATConv, global_mean_pool
from torch_geometric.data import Data, DataLoader
from rdkit import Chem
from rdkit.Chem import Descriptors, Crippen, Lipinski
from rdkit.Chem.rdMolDescriptors import CalcMolFormula
import networkx as nx
from sklearn.ensemble import RandomForestRegressor, GradientBoostingClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, accuracy_score, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns
from dataclasses import dataclass
from typing import List, Dict, Optional, Tuple, Any
import logging
import asyncio
import aiohttp
from datetime import datetime, timedelta
import json
import sqlite3
from pathlib import Path

@dataclass
class Compound:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    compound_id: str
    smiles: str
    name: str
    molecular_weight: float
    logp: float
    hbd: int  # hydrogen bond donors
    hba: int  # hydrogen bond acceptors
    tpsa: float  # topological polar surface area
    rotatable_bonds: int
    target_activity: Optional[float] = None
    admet_properties: Optional[Dict[str, float]] = None
    synthesis_feasibility: Optional[float] = None

@dataclass
class DrugTarget:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –º–∏—à–µ–Ω–∏"""
    target_id: str
    name: str
    protein_class: str
    organism: str
    sequence: str
    known_ligands: List[str]
    binding_site: Optional[Dict] = None

@dataclass
class ClinicalTrial:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    trial_id: str
    compound_id: str
    phase: int
    indication: str
    patient_population: Dict[str, Any]
    primary_endpoint: str
    secondary_endpoints: List[str]
    estimated_duration: int  # months
    estimated_cost: float

class IntelligentDrugDiscoverySystem:
    def __init__(self):
        self.molecular_generator = MolecularGenerator()
        self.admet_predictor = ADMETPredictor()
        self.activity_predictor = ActivityPredictor()
        self.synthesis_planner = SynthesisPlanner()
        self.clinical_optimizer = ClinicalTrialOptimizer()
        self.safety_assessor = SafetyAssessor()
        self.market_analyzer = MarketAnalyzer()
        
    async def discover_drug_candidates(self, target: DrugTarget, 
                                     requirements: Dict) -> List[Compound]:
        """–ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤"""
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            candidates = await self.molecular_generator.generate_candidates(
                target, requirements
            )
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_predictions = self.activity_predictor.predict_activity(
                candidates, target
            )
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ADMET —Å–≤–æ–π—Å—Ç–≤
            admet_predictions = self.admet_predictor.predict_admet(candidates)
            
            # –û—Ü–µ–Ω–∫–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            synthesis_scores = self.synthesis_planner.assess_feasibility(candidates)
            
            # –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            safety_scores = self.safety_assessor.assess_safety(candidates)
            
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            scored_candidates = self.integrate_predictions(
                candidates, activity_predictions, admet_predictions,
                synthesis_scores, safety_scores
            )
            
            # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            top_candidates = self.rank_candidates(scored_candidates, requirements)
            
            return top_candidates
            
        except Exception as e:
            logging.error(f"Error in drug discovery: {e}")
            raise

class MolecularGenerator(nn.Module):
    def __init__(self, vocab_size=100, hidden_size=512, num_layers=3):
        super(MolecularGenerator, self).__init__()
        
        # Encoder –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –±–µ–ª–∫–∞
        self.protein_encoder = ProteinEncoder(hidden_size)
        
        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–ª–µ–∫—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ LSTM
        self.embedding = nn.Embedding(vocab_size, hidden_size)
        self.lstm = nn.LSTM(
            input_size=hidden_size,
            hidden_size=hidden_size,
            num_layers=num_layers,
            batch_first=True,
            dropout=0.2
        )
        
        # Attention –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≤–∞–∂–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –±–µ–ª–∫–∞
        self.attention = nn.MultiheadAttention(
            embed_dim=hidden_size,
            num_heads=8,
            dropout=0.1
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä SMILES
        self.smiles_generator = nn.Sequential(
            nn.Linear(hidden_size * 2, hidden_size),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(hidden_size, vocab_size),
            nn.Softmax(dim=-1)
        )
        
        # –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–ª–µ–∫—É–ª
        self.discriminator = MolecularDiscriminator(hidden_size)
        
    async def generate_candidates(self, target: DrugTarget, 
                                requirements: Dict) -> List[Compound]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –±–µ–ª–∫–∞
        protein_features = self.protein_encoder.encode(target.sequence)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª
        generated_smiles = []
        for _ in range(requirements.get('num_candidates', 1000)):
            smiles = self.generate_smiles(protein_features, requirements)
            if self.validate_smiles(smiles):
                generated_smiles.append(smiles)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ–±—ä–µ–∫—Ç—ã Compound
        compounds = []
        for i, smiles in enumerate(generated_smiles):
            mol = Chem.MolFromSmiles(smiles)
            if mol is not None:
                compound = Compound(
                    compound_id=f"GEN_{i:06d}",
                    smiles=smiles,
                    name=f"Generated_Compound_{i}",
                    molecular_weight=Descriptors.MolWt(mol),
                    logp=Crippen.MolLogP(mol),
                    hbd=Descriptors.NumHDonors(mol),
                    hba=Descriptors.NumHAcceptors(mol),
                    tpsa=Descriptors.TPSA(mol),
                    rotatable_bonds=Descriptors.NumRotatableBonds(mol)
                )
                compounds.append(compound)
        
        return compounds
        
    def generate_smiles(self, protein_features: torch.Tensor, 
                       requirements: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SMILES —Å—Ç—Ä–æ–∫–∏"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        batch_size = 1
        max_length = requirements.get('max_length', 100)
        
        # –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        input_ids = torch.tensor([[1]], dtype=torch.long)  # START token
        hidden = None
        
        generated_tokens = []
        
        for _ in range(max_length):
            # Embedding
            embedded = self.embedding(input_ids)
            
            # LSTM
            output, hidden = self.lstm(embedded, hidden)
            
            # Attention —Å –±–µ–ª–∫–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
            attended, _ = self.attention(
                output, protein_features.unsqueeze(0), protein_features.unsqueeze(0)
            )
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–µ–ª–∫–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
            combined = torch.cat([attended, protein_features.unsqueeze(0).expand_as(attended)], dim=-1)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
            logits = self.smiles_generator(combined[:, -1, :])
            next_token = torch.multinomial(logits, 1)
            
            generated_tokens.append(next_token.item())
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if next_token.item() == 2:  # END token
                break
                
            input_ids = next_token.unsqueeze(0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ SMILES
        smiles = self.tokens_to_smiles(generated_tokens)
        return smiles

class ADMETPredictor:
    def __init__(self):
        self.absorption_model = AbsorptionModel()
        self.distribution_model = DistributionModel()
        self.metabolism_model = MetabolismModel()
        self.excretion_model = ExcretionModel()
        self.toxicity_model = ToxicityModel()
        
    def predict_admet(self, compounds: List[Compound]) -> Dict[str, Dict[str, float]]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ADMET —Å–≤–æ–π—Å—Ç–≤"""
        admet_predictions = {}
        
        for compound in compounds:
            mol = Chem.MolFromSmiles(compound.smiles)
            if mol is None:
                continue
                
            # –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
            descriptors = self.calculate_descriptors(mol)
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ ADMET —Å–≤–æ–π—Å—Ç–≤–∞
            predictions = {
                'absorption': {
                    'bioavailability': self.absorption_model.predict_bioavailability(descriptors),
                    'permeability': self.absorption_model.predict_permeability(descriptors),
                    'solubility': self.absorption_model.predict_solubility(descriptors)
                },
                'distribution': {
                    'vd': self.distribution_model.predict_volume_distribution(descriptors),
                    'protein_binding': self.distribution_model.predict_protein_binding(descriptors),
                    'bbb_permeability': self.distribution_model.predict_bbb_permeability(descriptors)
                },
                'metabolism': {
                    'clearance': self.metabolism_model.predict_clearance(descriptors),
                    'half_life': self.metabolism_model.predict_half_life(descriptors),
                    'cyp_inhibition': self.metabolism_model.predict_cyp_inhibition(descriptors)
                },
                'excretion': {
                    'renal_clearance': self.excretion_model.predict_renal_clearance(descriptors),
                    'biliary_excretion': self.excretion_model.predict_biliary_excretion(descriptors)
                },
                'toxicity': {
                    'hepatotoxicity': self.toxicity_model.predict_hepatotoxicity(descriptors),
                    'cardiotoxicity': self.toxicity_model.predict_cardiotoxicity(descriptors),
                    'mutagenicity': self.toxicity_model.predict_mutagenicity(descriptors),
                    'ld50': self.toxicity_model.predict_ld50(descriptors)
                }
            }
            
            admet_predictions[compound.compound_id] = predictions
            
        return admet_predictions

class ActivityPredictor(nn.Module):
    def __init__(self, input_size=2048, hidden_size=512):
        super(ActivityPredictor, self).__init__()
        
        # –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–π —ç–Ω–∫–æ–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ Graph Neural Network
        self.molecular_encoder = MolecularGNN(hidden_size)
        
        # –ë–µ–ª–∫–æ–≤—ã–π —ç–Ω–∫–æ–¥–µ—Ä
        self.protein_encoder = ProteinEncoder(hidden_size)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        self.interaction_predictor = nn.Sequential(
            nn.Linear(hidden_size * 2, hidden_size),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(hidden_size // 2, 1),
            nn.Sigmoid()
        )
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –∞—Ñ—Ñ–∏–Ω–Ω–æ—Å—Ç–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
        self.affinity_predictor = nn.Sequential(
            nn.Linear(hidden_size * 2, hidden_size),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(hidden_size, hidden_size // 2),
            nn.ReLU(),
            nn.Linear(hidden_size // 2, 1)
        )
        
    def predict_activity(self, compounds: List[Compound], 
                        target: DrugTarget) -> Dict[str, Dict[str, float]]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        activity_predictions = {}
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –±–µ–ª–∫–∞
        protein_features = self.protein_encoder.encode(target.sequence)
        
        for compound in compounds:
            mol = Chem.MolFromSmiles(compound.smiles)
            if mol is None:
                continue
                
            # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–ª–µ–∫—É–ª—ã
            mol_graph = self.smiles_to_graph(compound.smiles)
            mol_features = self.molecular_encoder(mol_graph)
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –∏ –±–µ–ª–∫–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            combined_features = torch.cat([mol_features, protein_features], dim=-1)
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            interaction_prob = self.interaction_predictor(combined_features).item()
            binding_affinity = self.affinity_predictor(combined_features).item()
            
            # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            selectivity = self.calculate_selectivity(mol_features, target)
            druggability = self.calculate_druggability(compound)
            
            activity_predictions[compound.compound_id] = {
                'interaction_probability': interaction_prob,
                'binding_affinity': binding_affinity,
                'selectivity': selectivity,
                'druggability': druggability
            }
            
        return activity_predictions

class ClinicalTrialOptimizer:
    def __init__(self):
        self.trial_predictor = ClinicalTrialPredictor()
        self.patient_stratifier = PatientStratifier()
        self.endpoint_optimizer = EndpointOptimizer()
        self.cost_estimator = CostEstimator()
        
    def optimize_trial_design(self, compound: Compound, indication: str) -> ClinicalTrial:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        historical_data = self.get_historical_trials(indication)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success_probability = self.trial_predictor.predict_success(
            compound, indication, historical_data
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        optimal_population = self.patient_stratifier.optimize_population(
            compound, indication, success_probability
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω–µ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
        optimal_endpoints = self.endpoint_optimizer.optimize_endpoints(
            compound, indication, optimal_population
        )
        
        # –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        cost_estimate = self.cost_estimator.estimate_cost(
            optimal_population, optimal_endpoints
        )
        
        trial = ClinicalTrial(
            trial_id=f"TRIAL_{compound.compound_id}_{indication}",
            compound_id=compound.compound_id,
            phase=1,  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ñ–∞–∑—ã I
            indication=indication,
            patient_population=optimal_population,
            primary_endpoint=optimal_endpoints['primary'],
            secondary_endpoints=optimal_endpoints['secondary'],
            estimated_duration=cost_estimate['duration'],
            estimated_cost=cost_estimate['cost']
        )
        
        return trial

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
    drug_discovery = IntelligentDrugDiscoverySystem()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –±–µ–ª–∫–∞
    target = DrugTarget(
        target_id="EGFR",
        name="Epidermal Growth Factor Receptor",
        protein_class="Receptor tyrosine kinase",
        organism="Homo sapiens",
        sequence="MRPSGTAGAALLALLAALCPASRALEEKKVCQGTSNKLTQLGTFEDHFLSLQRMFNNCEVVLGNLEITYVQRNYDLSFLKTIQEVAGYVLIALNTVERIPLENLQIIRGNMYYENSYALAVLSNYDANKTGLKELPMRNLQEILHGAVRFSNNPALCNVESIQWRDIVSSDFLSNMSMDFQNHLGSCQKCDPSCPNGSCWGAGEENCQKLTKIICAQQCSGRCRGKSPSDCCHNQCAAGCTGPRESDCLVCRKFRDEATCKDTCPPLMLYNPTTYQMDVNPEGKYSFGATCVKKCPRNYVVTDHGSCVRACGADSYEMEEDGVRKCKKCEGPCRKVCNGIGIGEFKDSLSINATNIKHFKNCTSISGDLHILPVAFRGDSFTHTPPLDPQELDILKTVKEITGFLLIQAWPENRTDLHAFENLEIIRGRTKQHGQFSLAVVSLNITSLGLRSLKEISDGDVIISGNKNLCYANTINWKKLFGTSGQKTKIISNRGENSCKATGQVCHALCSPEGCWGPEPRDCVSCRNVSRGRECVDKCNLLEGEPREFVENSECIQCHPECLPQAMNITCTGRGPDNCIQCAHYIDGPHCVKTCPAGVMGENNTLVWKYADAGHVCHLCHPNCTYGCTGPGLEGCPTNGPKIPSIATGMVGALLLLLVVALGIGLFMRRRHIVRKRTLRRLLQERELVEPLTPSGEAPNQALLRILKETEFKKIKVLGSGAFGTVYKGLWIPEGEKVKIPVAIKELREATSPKANKEILDEAYVMASVDNPHVCRLLGICLTSTVQLITQLMPFGCLLDYVREHKDNIGSQYLLNWCVQIAKGMNYLEDRRLVHRDLAARNVLVKTPQHVKITDFGLAKLLGAEEKEYHAEGGKVPIKWMALESILHRIYTHQSDVWSYGVTVWELMTFGSKPYDGIPASEISSILEKGERLPQPPICTIDVYMIMVKCWMIDADSRPKFRELIIEFSKMARDPQRYLVIQGDERMHLPSPTDSNFYRALMDEEDMDDVVDADEYLIPQQGFFSSPSTSRTPLLSSLSATSNNSTVACIDRNGLQSCPIKEDSFLQRYSSDPTGALTEDSIDDTFLPVPEYINQSVPKRPAGSVQNPVYHNQPLNPAPSRDPHYQDPHSTAVGNPEYLNTVQPTCVNSTFDSPAHWAQKGSHQISLDNPDYQQDFFPKEAKPNGIFKGSTAENAEYLRVAPQSSEFIGA",
        known_ligands=["erlotinib", "gefitinib", "lapatinib"]
    )
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
    requirements = {
        'num_candidates': 1000,
        'max_molecular_weight': 500,
        'min_activity': 0.7,
        'max_toxicity': 0.3,
        'druglike': True
    }
    
    # –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = await drug_discovery.discover_drug_candidates(target, requirements)
    
    print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –õ–ï–ö–ê–†–°–¢–í–ï–ù–ù–´–• –ö–ê–ù–î–ò–î–ê–¢–û–í ===")
    print(f"–¶–µ–ª–µ–≤–æ–π –±–µ–ª–æ–∫: {target.name}")
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
    
    # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    top_candidates = candidates[:10]
    for i, candidate in enumerate(top_candidates, 1):
        print(f"\\n--- –ö–∞–Ω–¥–∏–¥–∞—Ç {i} ---")
        print(f"ID: {candidate.compound_id}")
        print(f"SMILES: {candidate.smiles}")
        print(f"–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞: {candidate.molecular_weight:.1f}")
        print(f"LogP: {candidate.logp:.2f}")
        print(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {candidate.target_activity:.3f}")

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É.

\`\`\`python
class PharmaDrugDiscoveryROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'ai_platform_development': {
                'molecular_generation': 80000000,     # –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–ª–µ–∫—É–ª
                'admet_prediction': 60000000,         # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ADMET
                'activity_prediction': 70000000,      # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                'clinical_optimization': 50000000,    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
                'safety_assessment': 40000000,        # –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                'integration_platform': 45000000,    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'validation_testing': 35000000       # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            },
            'infrastructure': {
                'computing_cluster': 120000000,       # –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä
                'gpu_infrastructure': 80000000,      # GPU –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                'storage_systems': 40000000,         # –°–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
                'networking': 25000000,              # –°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                'security_systems': 30000000,        # –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                'backup_systems': 20000000           # –°–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            },
            'data_and_licenses': {
                'chemical_databases': 50000000,      # –•–∏–º–∏—á–µ—Å–∫–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                'biological_databases': 40000000,    # –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                'literature_access': 15000000,       # –î–æ—Å—Ç—É–ø –∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ
                'software_licenses': 35000000,       # –õ–∏—Ü–µ–Ω–∑–∏–∏ –ü–û
                'cloud_services': 25000000           # –û–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            },
            'annual_operating': {
                'personnel': 180000000,              # –ü–µ—Ä—Å–æ–Ω–∞–ª (30 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
                'maintenance': 25000000,             # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
                'data_updates': 20000000,            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                'cloud_costs': 30000000,             # –û–±–ª–∞—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                'licenses_renewal': 15000000,        # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π
                'training': 10000000                 # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'development_acceleration': {
                'traditional_timeline': 12,           # –ª–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
                'ai_timeline': 8,                     # –ª–µ—Ç —Å AI
                'time_savings': 4,                    # –ª–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                'annual_revenue_potential': 15000000000,  # 15 –º–ª—Ä–¥ —Ä—É–± –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞
                'description': '–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤'
            },
            'cost_reduction': {
                'traditional_rd_cost': 75000000000,   # 75 –º–ª—Ä–¥ —Ä—É–± —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ R&D
                'ai_rd_cost': 45000000000,           # 45 –º–ª—Ä–¥ —Ä—É–± —Å AI
                'cost_savings': 30000000000,         # 30 –º–ª—Ä–¥ —Ä—É–± —ç–∫–æ–Ω–æ–º–∏—è
                'success_rate_improvement': 0.4,     # 40% —É–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                'description': '–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ R&D'
            },
            'hit_rate_improvement': {
                'traditional_success_rate': 0.12,    # 12% —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                'ai_success_rate': 0.18,             # 18% —Å AI
                'improvement_factor': 1.5,           # 1.5x —É–ª—É—á—à–µ–Ω–∏–µ
                'projects_per_year': 20,             # –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –≥–æ–¥
                'average_project_value': 5000000000, # 5 –º–ª—Ä–¥ —Ä—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
            },
            'clinical_optimization': {
                'traditional_clinical_cost': 25000000000,  # 25 –º–ª—Ä–¥ —Ä—É–± –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                'ai_clinical_cost': 18000000000,     # 18 –º–ª—Ä–¥ —Ä—É–± —Å AI
                'clinical_savings': 7000000000,      # 7 –º–ª—Ä–¥ —Ä—É–± —ç–∫–æ–Ω–æ–º–∏—è
                'trial_duration_reduction': 0.25,   # 25% —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π'
            },
            'quality_improvement': {
                'admet_prediction_accuracy': 0.85,   # 85% —Ç–æ—á–Ω–æ—Å—Ç—å ADMET
                'early_failure_prevention': 0.60,   # 60% –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–Ω–Ω–∏—Ö –Ω–µ—É–¥–∞—á
                'late_stage_failure_cost': 8000000000,  # 8 –º–ª—Ä–¥ —Ä—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–¥–Ω–∏—Ö –Ω–µ—É–¥–∞—á
                'prevented_failures': 3,            # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á –≤ –≥–æ–¥
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤'
            },
            'portfolio_optimization': {
                'portfolio_size': 50,                # —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
                'optimization_improvement': 0.30,   # 30% —É–ª—É—á—à–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                'average_portfolio_value': 100000000000,  # 100 –º–ª—Ä–¥ —Ä—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤'
            },
            'regulatory_efficiency': {
                'regulatory_cost_reduction': 0.20,  # 20% —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç
                'regulatory_costs': 5000000000,     # 5 –º–ª—Ä–¥ —Ä—É–± —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
                'approval_acceleration': 0.15,      # 15% —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        platform_costs = sum(costs['ai_platform_development'].values())
        infrastructure_costs = sum(costs['infrastructure'].values())
        data_costs = sum(costs['data_and_licenses'].values())
        
        total_capex = platform_costs + infrastructure_costs + data_costs
        annual_opex = sum(costs['annual_operating'].values())
        
        return {
            'ai_platform_development': platform_costs,
            'infrastructure': infrastructure_costs,
            'data_and_licenses': data_costs,
            'total_capex': total_capex,
            'annual_opex': annual_opex
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        development_benefits = (
            benefits['development_acceleration']['time_savings'] *
            benefits['development_acceleration']['annual_revenue_potential']
        )
        
        # –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ R&D
        rd_cost_savings = benefits['cost_reduction']['cost_savings']
        
        # –£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        hit_rate_benefits = (
            (benefits['hit_rate_improvement']['ai_success_rate'] - 
             benefits['hit_rate_improvement']['traditional_success_rate']) *
            benefits['hit_rate_improvement']['projects_per_year'] *
            benefits['hit_rate_improvement']['average_project_value']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        clinical_savings = benefits['clinical_optimization']['clinical_savings']
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–∑–¥–Ω–∏—Ö –Ω–µ—É–¥–∞—á
        quality_benefits = (
            benefits['quality_improvement']['prevented_failures'] *
            benefits['quality_improvement']['late_stage_failure_cost']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_benefits = (
            benefits['portfolio_optimization']['average_portfolio_value'] *
            benefits['portfolio_optimization']['optimization_improvement']
        )
        
        # –†–µ–≥—É–ª—è—Ç–∏–≤–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        regulatory_benefits = (
            benefits['regulatory_efficiency']['regulatory_costs'] *
            benefits['regulatory_efficiency']['regulatory_cost_reduction']
        )
        
        total_annual_benefits = (
            development_benefits + rd_cost_savings + hit_rate_benefits +
            clinical_savings + quality_benefits + portfolio_benefits + regulatory_benefits
        )
        
        return {
            'development_acceleration': development_benefits,
            'rd_cost_reduction': rd_cost_savings,
            'hit_rate_improvement': hit_rate_benefits,
            'clinical_optimization': clinical_savings,
            'quality_improvement': quality_benefits,
            'portfolio_optimization': portfolio_benefits,
            'regulatory_efficiency': regulatory_benefits,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=10):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        
        net_annual_benefits = (
            annual_benefits['total_annual_benefits'] - 
            investment['annual_opex']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total_capex'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.15  # 15% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
        npv = -investment['total_capex']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total_capex']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total_capex']) / investment['total_capex']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
roi_calculator = PharmaDrugDiscoveryROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total_capex']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total_annual_benefits']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['investment']['annual_opex']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 10 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")

print("\\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ì–û–î ===")
benefits = roi_metrics['annual_benefits']
print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {benefits['development_acceleration']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç R&D: {benefits['rd_cost_reduction']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {benefits['hit_rate_improvement']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {benefits['clinical_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {benefits['quality_improvement']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {benefits['portfolio_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–†–µ–≥—É–ª—è—Ç–∏–≤–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {benefits['regulatory_efficiency']:,.0f} —Ä—É–±/–≥–æ–¥")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å drug discovery, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—É.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Å—Ç—Ä–æ–∂–∞–π—à–∏—Ö —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—É–∫–∏, —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.

–†–æ—Å—Å–∏–π—Å–∫–∞—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —É—Å–ª–æ–≤–∏—è—Ö —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—é. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–µ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ª–µ–∫–∞—Ä—Å—Ç–≤, –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª–µ–µ 106 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –æ–∫–æ–ª–æ 645 –º–ª–Ω —Ä—É–±–ª–µ–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ –∏ ROI –±–æ–ª–µ–µ 1500%.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ AI –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã, —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–≤–æ–π–Ω–∏–∫–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ drug discovery. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏.
`
  },

  28: {
    title: "AI –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: 170,
    type: "theory",
    module: 5,
    content: `
# –£—Ä–æ–∫ 28: AI –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏

–ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏, –≥–¥–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ—á–∞–π—à–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞, —Å—Ç—Ä–æ–≥–∏–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏, –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ª–µ—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞ –∏–ª–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, —Å–ª–æ–∂–Ω–µ–π—à–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏: –æ—Ç –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ—Ç–æ–º, –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–æ–≤—ã—à–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –º–∏—Å—Å–∏–π.

–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç –±–æ–≥–∞—Ç—ã–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏ –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º. –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Ä–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –†–æ—Å—Å–∏–∏ –Ω–∞ –º–∏—Ä–æ–≤–æ–º —Ä—ã–Ω–∫–µ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –æ—Ç—Ä–∞—Å–ª–∏, –≤–∫–ª—é—á–∞—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ—Ä–º—ã –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–æ–∂–∞–π—à–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞

–ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é AI-—Å–∏—Å—Ç–µ–º.

**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**

–ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –Ω—É–ª–µ–≤–æ–π —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é –∫ –æ—Ç–∫–∞–∑–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ DO-178C –¥–ª—è –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ ECSS-E-ST-40C –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –ö–∞–∂–¥—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–∂–∞–π—à—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é.

–ü—Ä–∏–Ω—Ü–∏–ø—ã Design Assurance Level (DAL) –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —É—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Ç DAL A (–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞–∑) –¥–æ DAL E (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å). AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö, –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º DAL A –∏–ª–∏ DAL B, —á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω—É—é –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

**–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏:**

–ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —É—Å–ª–æ–≤–∏—è—Ö —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, –¥–∞–≤–ª–µ–Ω–∏—è, —Ä–∞–¥–∏–∞—Ü–∏–∏, –≤–∏–±—Ä–∞—Ü–∏–π –∏ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –ø–æ–º–µ—Ö. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö –æ—Ç -200¬∞C –¥–æ +1000¬∞C, –≤ —É—Å–ª–æ–≤–∏—è—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Ä–∞–¥–∏–∞—Ü–∏–∏, –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞—Ö –¥–æ 10g –∏ –≤ —É—Å–ª–æ–≤–∏—è—Ö –≥–ª—É–±–æ–∫–æ–≥–æ –≤–∞–∫—É—É–º–∞.

–†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö AI-—Å–∏—Å—Ç–µ–º. –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å single event upsets (SEU), multiple bit upsets (MBU) –∏ total ionizing dose (TID) —ç—Ñ—Ñ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫, —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–æ-—Å—Ç–æ–π–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.

**–°—Ç—Ä–æ–≥–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**

–ê–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ EASA CS-25, FAA Part 25, –ê–ü-25 (–†–æ—Å—Å–∏—è) –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤. –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ECSS, NASA-STD, –ì–û–°–¢ –† —Å–µ—Ä–∏–∏ 56000. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.

–ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º. –î–ª—è AI-—Å–∏—Å—Ç–µ–º –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏–π, –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã.

**–î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã:**

–ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É—é—Ç—Å—è –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è–º–∏. –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å–∞–º–æ–ª–µ—Ç—ã —Å–ª—É–∂–∞—Ç 20-30 –ª–µ—Ç, –≤–æ–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã - –¥–æ 50 –ª–µ—Ç, –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∞–ø–ø–∞—Ä–∞—Ç—ã - –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–µ—Ç –¥–æ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ–±–Ω–æ–≤–ª—è–µ–º–æ—Å—Ç—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–º–∏—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–º–æ–¥–µ–ª–µ–π —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–µ—Ä—Å–∏—è–º. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.

**–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:**

–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ–º–∏–ª–ª–∏–∞—Ä–¥–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ —É—á–∞—Å—Ç–∏—è —Ç—ã—Å—è—á –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ—Ç–Ω–∏ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –¥–æ–ª–ª–∞—Ä–æ–≤. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é —Ä–∏—Å–∫–æ–≤.

–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏ –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

**–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è:**

–ê–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ICAO, ITU, ISO, IEEE –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.

–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã ARINC, STANAG, MIL-STD –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º, –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º —Å–≤—è–∑–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–∏—Å—Ç–µ–º. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.

### –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö

–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—É—é –æ—Ç—Ä–∞—Å–ª—å, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–æ–≤.

**–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–º:**

AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–º –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–º –∞–ø–ø–∞—Ä–∞—Ç–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

–°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ, LIDAR, —Ä–∞–¥–∞—Ä—ã –∏ –∏–Ω–µ—Ä—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π –∏ –ø–æ–ª–µ—Ç–æ–≤ –≤ —É—Å–ª–æ–≤–∏—è—Ö GPS-jamming.

–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç reinforcement learning –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–ª–µ—Ç–∞ –≤ –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è —É—Å–ª–æ–≤–∏—è—Ö. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –º–∞—Å—Å—ã, —Ü–µ–Ω—Ç—Ä–æ–≤–∫–∏, –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –≤–Ω–µ—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ª–µ—Ç–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.

**–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:**

AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Ç—ã—Å—è—á –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –æ—Ç–∫–∞–∑—ã –≤ –ø–æ–ª–µ—Ç–µ, —Å–Ω–∏–∂–∞—Ç—å —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø–æ–≤—ã—à–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–æ–≤.

–ê–Ω–∞–ª–∏–∑ –≤–∏–±—Ä–∞—Ü–∏–π, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, –¥–∞–≤–ª–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—è–≤–ª—è—Ç—å —Ä–∞–Ω–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–Ω–æ—Å–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤, –ª–æ–ø–∞—Ç–æ–∫ —Ç—É—Ä–±–∏–Ω—ã, –∫–∞–º–µ—Ä —Å–≥–æ—Ä–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. AI-–º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ—Ç–Ω—ã—Ö —á–∞—Å–æ–≤.

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø–∞—Å–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–ª–∞–Ω–æ–≤ –ø–æ–ª–µ—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–∞–∑–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–ª–æ—Ç–∞.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∏ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:**

–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç—å—é. –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞—é—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–∞–º –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

Computational Fluid Dynamics (CFD) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI —É—Å–∫–æ—Ä—è–µ—Ç –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã –≤ —Ç—ã—Å—è—á–∏ —Ä–∞–∑. –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –æ–±—É—á–∞—é—Ç—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–æ—á–Ω—ã—Ö CFD —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.

–ú—É–ª—å—Ç–∏–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (MDO) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∏, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º—É–º—ã, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.

**–°–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π:**

AI-—Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞–¥–∞—Ä–æ–≤, ADS-B, –∫–∞–º–µ—Ä –∏ –¥—Ä—É–≥–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–≤—ã—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π.

Sense and Avoid —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –±–µ—Å–ø–∏–ª–æ—Ç–Ω—ã—Ö –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–æ–≤, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –≤—ã–±–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–∞–Ω–µ–≤—Ä–æ–≤ —É–∫–ª–æ–Ω–µ–Ω–∏—è. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ë–ü–õ–ê –≤ –æ–±—â–µ–µ –≤–æ–∑–¥—É—à–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.

**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—à–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º:**

AI –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞, —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∏ —ç–º–∏—Å—Å–∏–∏.

–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–¥—É—à–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è (NextGen, SESAR) –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å–µ–∫—Ç–æ—Ä–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∑–ª–µ—Ç–æ–≤ –∏ –ø–æ—Å–∞–¥–æ–∫, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏.

### –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö

–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ —É—Å–ª–æ–≤–∏—è—Ö –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö –æ—Ç –ó–µ–º–ª–∏.

**–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**

–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∞–ø–ø–∞—Ä–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤ –∏ –ª–µ—Ç –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –ó–µ–º–ª–∏. AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–π, –Ω–∞–≤–∏–≥–∞—Ü–∏—é, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö –∑–∞–¥–∞—á.

–í–∏–∑—É–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–ª–∞–Ω–µ—Ç, –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤, –∫–æ–º–µ—Ç –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–±–µ—Å–Ω—ã—Ö —Ç–µ–ª. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–Ω–µ–≤—Ä–æ–≤.

–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å—Ç—ã–∫–æ–≤–∫–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∞–ø–ø–∞—Ä–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–±–ª–∏–∂–µ–Ω–∏–µ–º, –∑–∞—Ö–≤–∞—Ç–æ–º –∏ —Å—Ç—ã–∫–æ–≤–∫–æ–π –±–µ–∑ —É—á–∞—Å—Ç–∏—è –Ω–∞–∑–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –º–∏—Å—Å–∏–π –∫ –¥–∞–ª—å–Ω–∏–º –ø–ª–∞–Ω–µ—Ç–∞–º, –≥–¥–µ –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–≤—è–∑–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞—Å—ã.

**–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:**

–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –º–∏—Å—Å–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –æ–±—ä–µ–º—ã –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞ –ó–µ–º–ª—é –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏. AI-—Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –∞–ø–ø–∞—Ä–∞—Ç–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã—è–≤–ª—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–∏–±–æ—Ä—ã –¥–ª—è –∏—Ö –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.

–ö–æ–º–ø—Ä–µ—Å—Å–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏. –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –Ω–∞—É—á–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç –∏—Ö –ø–µ—Ä–µ–¥–∞—á—É.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–≤–µ–∑–¥–∏—è–º–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤:**

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–≥–∞—Å–æ–∑–≤–µ–∑–¥–∏—è –≤–∫–ª—é—á–∞—é—Ç —Ç—ã—Å—è—á–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–≤—è–∑–∏, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ó–µ–º–ª–∏ –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. AI-—Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª—è—é—Ç –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–º–∏ –º–∞–Ω–µ–≤—Ä–∞–º–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ–∫—Ä—ã—Ç–∏—è.

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–æ—Å–º–æ—Å–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –º–∞–Ω–µ–≤—Ä—ã —É–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π. –≠—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –º—É—Å–æ—Ä–∞.

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–∑–≤–µ–∑–¥–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É—Å–ª–æ–≤–∏–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏.

**–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–ª—å–Ω–µ–≥–æ –∫–æ—Å–º–æ—Å–∞:**

AI-—Å–∏—Å—Ç–µ–º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –º–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –º–∏—Å—Å–∏–π, –≥–¥–µ —Å–≤—è–∑—å —Å –ó–µ–º–ª–µ–π –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ä–æ–≤–µ—Ä—ã –Ω–∞ –ú–∞—Ä—Å–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤, –≤—ã–±–æ—Ä–∞ –Ω–∞—É—á–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.

–ü–æ–∏—Å–∫ –∂–∏–∑–Ω–∏ –∏ –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑—Ü–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∏–æ—Å–∏–≥–Ω–∞—Ç—É—Ä –≤ –æ–±—Ä–∞–∑—Ü–∞—Ö –≥—Ä—É–Ω—Ç–∞, –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –≤–æ–¥—ã. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–µ–∫—Ç—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∂–∏–∑–Ω–∏.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã

–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º.

**–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:**

–†–æ—Å—Å–∏–π—Å–∫–æ–µ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤–∫–ª—é—á–∞–µ—Ç –í–æ–∑–¥—É—à–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§, –ó–∞–∫–æ–Ω "–û –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–ê–ü) –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã (–ì–û–°–¢ –†). AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

–†–æ—Å–∞–≤–∏–∞—Ü–∏—è –∏ –†–æ—Å–∫–æ—Å–º–æ—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ AI-—Å–∏—Å—Ç–µ–º –≤ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:**

–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. AI-—Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±–∞–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç.

–†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç–Ω–æ–π –±–∞–∑—ã –¥–ª—è AI-—Å–∏—Å—Ç–µ–º –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–æ-—Å—Ç–æ–π–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AI-—á–∏–ø–æ–≤ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**

–†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –∞–≤–∏–∞—Ü–∏–∏ (–ú–°-21, –°—É–ø–µ—Ä–¥–∂–µ—Ç), —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º (–§–µ–¥–µ—Ä–∞—Ü–∏—è, –ê–Ω–≥–∞—Ä–∞), —Ä–∞–∑–≤–∏—Ç–∏–µ –ì–õ–û–ù–ê–°–° –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.

AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ –º–∏—Ä–æ–≤–æ–º —Ä—ã–Ω–∫–µ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –†–æ—Å—Å–∏–∏ –≤ –∫–æ—Å–º–æ—Å–µ.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –º–∏—Å—Å–∏–µ–π

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –º–∏—Å—Å–∏–µ–π –∫ –∞—Å—Ç–µ—Ä–æ–∏–¥—É.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.optim import Adam, AdamW
import cv2
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
from dataclasses import dataclass
from typing import List, Dict, Optional, Tuple, Any
import logging
import asyncio
from datetime import datetime, timedelta
import json
import sqlite3
from pathlib import Path
import astropy.units as u
from astropy.coordinates import SkyCoord
from astropy.time import Time
import spiceypy as spice

@dataclass
class SpacecraftState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞"""
    timestamp: datetime
    position: np.ndarray  # [x, y, z] –≤ –∫–º
    velocity: np.ndarray  # [vx, vy, vz] –≤ –∫–º/—Å
    attitude: np.ndarray  # –∫–≤–∞—Ç–µ—Ä–Ω–∏–æ–Ω –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    angular_velocity: np.ndarray  # —É–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å [wx, wy, wz]
    fuel_mass: float  # –º–∞—Å—Å–∞ —Ç–æ–ø–ª–∏–≤–∞ –≤ –∫–≥
    power_level: float  # —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–π 0-1
    temperature: float  # —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ö–ê –≤ ¬∞C
    communication_status: bool  # —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ —Å –ó–µ–º–ª–µ–π

@dataclass
class ScientificTarget:
    """–ù–∞—É—á–Ω–∞—è —Ü–µ–ª—å –º–∏—Å—Å–∏–∏"""
    target_id: str
    name: str
    coordinates: np.ndarray  # [x, y, z] –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
    priority: float  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0-1
    observation_type: str  # —Ç–∏–ø –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    required_instruments: List[str]
    observation_duration: float  # –≤—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    optimal_distance: float  # –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ –∫–º

@dataclass
class MissionPlan:
    """–ü–ª–∞–Ω –º–∏—Å—Å–∏–∏"""
    plan_id: str
    targets: List[ScientificTarget]
    trajectory_points: List[np.ndarray]
    maneuver_times: List[datetime]
    fuel_consumption: float
    mission_duration: float
    scientific_value: float

class AutonomousSpaceMissionSystem:
    def __init__(self):
        self.navigation_system = AutonomousNavigation()
        self.mission_planner = MissionPlanner()
        self.attitude_controller = AttitudeController()
        self.power_manager = PowerManager()
        self.communication_manager = CommunicationManager()
        self.scientific_scheduler = ScientificScheduler()
        self.anomaly_detector = AnomalyDetector()
        self.decision_engine = DecisionEngine()
        
    async def execute_mission(self, mission_parameters: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –º–∏—Å—Å–∏–∏"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏—Å—Å–∏–∏
            current_state = self.initialize_mission(mission_parameters)
            mission_log = []
            
            while not self.mission_completed(current_state):
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ö–ê
                current_state = await self.update_spacecraft_state(current_state)
                
                # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
                navigation_data = self.navigation_system.update_position(current_state)
                
                # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                science_plan = self.scientific_scheduler.plan_observations(
                    current_state, navigation_data
                )
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
                attitude_commands = self.attitude_controller.compute_commands(
                    current_state, science_plan
                )
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º
                power_plan = self.power_manager.optimize_power(
                    current_state, science_plan
                )
                
                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
                anomalies = self.anomaly_detector.detect_anomalies(current_state)
                
                # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
                decisions = self.decision_engine.make_decisions(
                    current_state, science_plan, anomalies
                )
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
                current_state = await self.execute_commands(
                    current_state, decisions
                )
                
                # –°–≤—è–∑—å —Å –ó–µ–º–ª–µ–π
                await self.communication_manager.transmit_data(
                    current_state, science_plan, decisions
                )
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                mission_log.append({
                    'timestamp': current_state.timestamp,
                    'state': current_state,
                    'decisions': decisions,
                    'scientific_value': science_plan.get('scientific_value', 0)
                })
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ = 1 —á–∞—Å –º–∏—Å—Å–∏–∏
                
            return {
                'mission_status': 'completed',
                'mission_log': mission_log,
                'total_scientific_value': sum(log['scientific_value'] for log in mission_log),
                'fuel_consumed': mission_parameters['initial_fuel'] - current_state.fuel_mass
            }
            
        except Exception as e:
            logging.error(f"Mission execution error: {e}")
            return {'mission_status': 'failed', 'error': str(e)}

class AutonomousNavigation(nn.Module):
    def __init__(self, state_dim=12, hidden_dim=256):
        super(AutonomousNavigation, self).__init__()
        
        # –í–∏–∑—É–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        self.visual_encoder = VisualNavigationCNN()
        
        # –ò–Ω–µ—Ä—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        self.imu_processor = IMUProcessor(hidden_dim)
        
        # –†–∞–¥–∏–æ–Ω–∞–≤–∏–≥–∞—Ü–∏—è
        self.radio_processor = RadioNavigationProcessor(hidden_dim)
        
        # –§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö
        self.neural_kalman = NeuralKalmanFilter(state_dim, hidden_dim)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ä–±–∏—Ç—ã
        self.orbit_predictor = OrbitPredictor(hidden_dim)
        
    def update_position(self, spacecraft_state: SpacecraftState) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        visual_features = self.process_visual_navigation(spacecraft_state)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–µ—Ä—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        imu_features = self.imu_processor.process(
            spacecraft_state.angular_velocity,
            spacecraft_state.attitude
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏–æ–Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        radio_features = self.radio_processor.process(spacecraft_state)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        combined_features = torch.cat([visual_features, imu_features, radio_features], dim=-1)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        filtered_state = self.neural_kalman.update(
            combined_features,
            spacecraft_state.position,
            spacecraft_state.velocity
        )
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ä–±–∏—Ç—ã
        orbit_prediction = self.orbit_predictor.predict(filtered_state)
        
        return {
            'position': filtered_state['position'],
            'velocity': filtered_state['velocity'],
            'position_uncertainty': filtered_state['uncertainty'],
            'orbit_prediction': orbit_prediction,
            'navigation_quality': self.assess_navigation_quality(filtered_state)
        }
        
    def process_visual_navigation(self, spacecraft_state: SpacecraftState) -> torch.Tensor:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä—ã
        camera_image = self.simulate_camera_image(spacecraft_state)
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–±–µ—Å–Ω—ã—Ö —Ç–µ–ª
        celestial_bodies = self.visual_encoder.detect_bodies(camera_image)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ–ª
        relative_position = self.visual_encoder.estimate_position(
            celestial_bodies, spacecraft_state
        )
        
        return relative_position

class MissionPlanner(nn.Module):
    def __init__(self, action_dim=6, state_dim=20, hidden_dim=512):
        super(MissionPlanner, self).__init__()
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        self.trajectory_planner = TrajectoryPlanner(hidden_dim)
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—É—á–Ω—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        self.science_planner = SciencePlanner(hidden_dim)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
        self.resource_optimizer = ResourceOptimizer(hidden_dim)
        
        # –û—Ü–µ–Ω—â–∏–∫ —Ä–∏—Å–∫–æ–≤
        self.risk_assessor = RiskAssessor(hidden_dim)
        
    def plan_mission(self, current_state: SpacecraftState, 
                    targets: List[ScientificTarget]) -> MissionPlan:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏"""
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectory = self.trajectory_planner.plan_trajectory(
            current_state, targets
        )
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        science_schedule = self.science_planner.schedule_observations(
            trajectory, targets
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_plan = self.resource_optimizer.optimize(
            trajectory, science_schedule, current_state
        )
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
        risk_assessment = self.risk_assessor.assess_risks(
            trajectory, science_schedule, resource_plan
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏—Å—Å–∏–∏
        mission_plan = MissionPlan(
            plan_id=f"PLAN_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            targets=targets,
            trajectory_points=trajectory['waypoints'],
            maneuver_times=trajectory['maneuver_times'],
            fuel_consumption=resource_plan['fuel_consumption'],
            mission_duration=trajectory['duration'],
            scientific_value=science_schedule['total_value']
        )
        
        return mission_plan

class ScientificScheduler:
    def __init__(self):
        self.target_classifier = TargetClassifier()
        self.observation_optimizer = ObservationOptimizer()
        self.data_prioritizer = DataPrioritizer()
        
    def plan_observations(self, spacecraft_state: SpacecraftState, 
                         navigation_data: Dict) -> Dict:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π"""
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
        potential_targets = self.detect_targets(spacecraft_state, navigation_data)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ü–µ–ª–µ–π –ø–æ –Ω–∞—É—á–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
        classified_targets = self.target_classifier.classify(potential_targets)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        observation_schedule = self.observation_optimizer.optimize(
            classified_targets, spacecraft_state
        )
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        data_priorities = self.data_prioritizer.prioritize(observation_schedule)
        
        return {
            'targets': classified_targets,
            'schedule': observation_schedule,
            'data_priorities': data_priorities,
            'scientific_value': sum(t.priority for t in classified_targets)
        }
        
    def detect_targets(self, spacecraft_state: SpacecraftState, 
                      navigation_data: Dict) -> List[ScientificTarget]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ü–µ–ª–µ–π"""
        targets = []
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
        surface_features = self.analyze_surface(spacecraft_state)
        
        for i, feature in enumerate(surface_features):
            target = ScientificTarget(
                target_id=f"TARGET_{i:03d}",
                name=f"Surface_Feature_{i}",
                coordinates=feature['coordinates'],
                priority=feature['scientific_interest'],
                observation_type=feature['type'],
                required_instruments=feature['instruments'],
                observation_duration=feature['duration'],
                optimal_distance=feature['optimal_distance']
            )
            targets.append(target)
            
        return targets

class AnomalyDetector:
    def __init__(self):
        self.isolation_forest = IsolationForest(contamination=0.1, random_state=42)
        self.lstm_detector = LSTMAnomalyDetector()
        self.threshold_detector = ThresholdAnomalyDetector()
        
    def detect_anomalies(self, spacecraft_state: SpacecraftState) -> List[Dict]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–∞–±–æ—Ç–µ –ö–ê"""
        anomalies = []
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        state_vector = self.prepare_state_vector(spacecraft_state)
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –º–µ—Ç–æ–¥–æ–º –∏–∑–æ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –ª–µ—Å–∞
        isolation_anomaly = self.isolation_forest.predict([state_vector])[0]
        if isolation_anomaly == -1:
            anomalies.append({
                'type': 'statistical_anomaly',
                'severity': 'medium',
                'description': '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ö–ê',
                'timestamp': spacecraft_state.timestamp
            })
            
        # LSTM –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        lstm_anomaly = self.lstm_detector.detect(state_vector)
        if lstm_anomaly['is_anomaly']:
            anomalies.append({
                'type': 'temporal_anomaly',
                'severity': lstm_anomaly['severity'],
                'description': '–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã',
                'timestamp': spacecraft_state.timestamp
            })
            
        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        threshold_anomalies = self.threshold_detector.check_thresholds(spacecraft_state)
        anomalies.extend(threshold_anomalies)
        
        return anomalies
        
    def prepare_state_vector(self, spacecraft_state: SpacecraftState) -> np.ndarray:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return np.array([
            *spacecraft_state.position,
            *spacecraft_state.velocity,
            *spacecraft_state.attitude,
            *spacecraft_state.angular_velocity,
            spacecraft_state.fuel_mass,
            spacecraft_state.power_level,
            spacecraft_state.temperature
        ])

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏—Å—Å–∏–µ–π
    mission_system = AutonomousSpaceMissionSystem()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∏—Å—Å–∏–∏ –∫ –∞—Å—Ç–µ—Ä–æ–∏–¥—É
    mission_parameters = {
        'target_asteroid': 'Bennu',
        'mission_duration': 365,  # –¥–Ω–µ–π
        'initial_fuel': 1000,  # –∫–≥
        'scientific_objectives': [
            'surface_mapping',
            'composition_analysis',
            'gravity_measurement',
            'sample_collection'
        ],
        'communication_windows': [
            {'start': '2024-01-01', 'duration': 8},  # —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
            {'start': '2024-06-01', 'duration': 4}
        ]
    }
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏
    mission_result = await mission_system.execute_mission(mission_parameters)
    
    print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–í–¢–û–ù–û–ú–ù–û–ô –ö–û–°–ú–ò–ß–ï–°–ö–û–ô –ú–ò–°–°–ò–ò ===")
    print(f"–°—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏: {mission_result['mission_status']}")
    
    if mission_result['mission_status'] == 'completed':
        print(f"–û–±—â–∞—è –Ω–∞—É—á–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: {mission_result['total_scientific_value']:.2f}")
        print(f"–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {mission_result['fuel_consumed']:.1f} –∫–≥")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(mission_result['mission_log'])}")
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∏—Å—Å–∏–∏
        mission_log = mission_result['mission_log']
        scientific_values = [log['scientific_value'] for log in mission_log]
        
        print(f"\\n–°—Ä–µ–¥–Ω—è—è –Ω–∞—É—á–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ü–∏–∫–ª: {np.mean(scientific_values):.3f}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—É—á–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: {np.max(scientific_values):.3f}")
        print(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞: {mission_result['total_scientific_value']/mission_result['fuel_consumed']:.3f} —Ü–µ–Ω–Ω–æ—Å—Ç—å/–∫–≥")

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ –º–∏—Å—Å–∏—è–º–∏ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏, –Ω–∞—É—á–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –º–∏—Å—Å–∏–π.

\`\`\`python
class AerospaceAIROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'ai_system_development': {
                'autonomous_navigation': 150000000,    # –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
                'mission_planning': 120000000,         # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–π
                'anomaly_detection': 80000000,         # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
                'scientific_scheduling': 100000000,    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                'decision_engine': 90000000,           # –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
                'communication_ai': 70000000,          # –ò–ò –¥–ª—è —Å–≤—è–∑–∏
                'integration_platform': 85000000,     # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'certification_validation': 60000000  # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            },
            'infrastructure': {
                'ground_control_systems': 200000000,   # –ù–∞–∑–µ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                'simulation_environment': 150000000,   # –°—Ä–µ–¥–∞ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                'testing_facilities': 180000000,       # –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã
                'communication_networks': 120000000,   # –°–µ—Ç–∏ —Å–≤—è–∑–∏
                'data_processing_centers': 100000000,  # –¶–µ–Ω—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                'backup_systems': 80000000             # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            },
            'spacecraft_integration': {
                'ai_hardware': 300000000,              # –ò–ò –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ö–ê
                'radiation_hardening': 150000000,     # –†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞
                'redundant_systems': 200000000,       # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                'testing_integration': 100000000,     # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                'flight_qualification': 120000000     # –õ–µ—Ç–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
            },
            'annual_operating': {
                'personnel': 250000000,               # –ü–µ—Ä—Å–æ–Ω–∞–ª (40 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
                'mission_operations': 180000000,      # –û–ø–µ—Ä–∞—Ü–∏–∏ –º–∏—Å—Å–∏–π
                'system_maintenance': 50000000,       # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º
                'data_processing': 40000000,          # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                'software_updates': 30000000,         # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–û
                'training': 20000000                  # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'mission_success_improvement': {
                'traditional_success_rate': 0.75,     # 75% —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                'ai_success_rate': 0.92,              # 92% —Å –ò–ò
                'average_mission_cost': 8000000000,   # 8 –º–ª—Ä–¥ —Ä—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∏—Å—Å–∏–∏
                'missions_per_year': 5,               # –º–∏—Å—Å–∏–π –≤ –≥–æ–¥
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –º–∏—Å—Å–∏–π'
            },
            'autonomous_operations': {
                'ground_control_reduction': 0.60,     # 60% —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–µ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                'ground_operations_cost': 2000000000, # 2 –º–ª—Ä–¥ —Ä—É–± –æ–ø–µ—Ä–∞—Ü–∏–∏
                'extended_mission_capability': 1.5,   # 1.5x –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏–π
                'deep_space_missions': 3,             # –º–∏—Å—Å–∏–π –¥–∞–ª—å–Ω–µ–≥–æ –∫–æ—Å–º–æ—Å–∞ –≤ –≥–æ–¥
                'description': '–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π'
            },
            'scientific_value_increase': {
                'traditional_data_utilization': 0.30, # 30% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                'ai_data_utilization': 0.85,          # 85% —Å –ò–ò
                'scientific_data_value': 5000000000,  # 5 –º–ª—Ä–¥ —Ä—É–± —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                'discovery_acceleration': 2.0,        # 2x —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏–π
                'description': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—É—á–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏'
            },
            'operational_efficiency': {
                'fuel_optimization': 0.15,            # 15% —ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞
                'mission_duration_extension': 0.25,   # 25% –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏–π
                'average_fuel_cost': 1000000000,      # 1 –º–ª—Ä–¥ —Ä—É–± —Ç–æ–ø–ª–∏–≤–æ –Ω–∞ –º–∏—Å—Å–∏—é
                'maintenance_reduction': 0.30,        # 30% —Å–Ω–∏–∂–µ–Ω–∏–µ –¢–û
                'description': '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
            },
            'risk_mitigation': {
                'anomaly_prevention': 0.80,           # 80% –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
                'average_anomaly_cost': 3000000000,   # 3 –º–ª—Ä–¥ —Ä—É–± —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏
                'anomalies_per_year': 2,              # –∞–Ω–æ–º–∞–ª–∏–π –≤ –≥–æ–¥
                'insurance_reduction': 0.25,          # 25% —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
                'insurance_cost': 800000000,          # 800 –º–ª–Ω —Ä—É–± —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ
                'description': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤'
            },
            'commercial_applications': {
                'satellite_constellation_optimization': 15000000000,  # 15 –º–ª—Ä–¥ —Ä—É–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–∑–≤–µ–∑–¥–∏–π
                'earth_observation_enhancement': 8000000000,          # 8 –º–ª—Ä–¥ —Ä—É–± —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                'communication_efficiency': 5000000000,              # 5 –º–ª—Ä–¥ —Ä—É–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏
                'space_tourism_safety': 3000000000,                  # 3 –º–ª—Ä–¥ —Ä—É–± –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—É—Ä–∏–∑–º–∞
                'description': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        ai_development = sum(costs['ai_system_development'].values())
        infrastructure = sum(costs['infrastructure'].values())
        spacecraft_integration = sum(costs['spacecraft_integration'].values())
        
        total_capex = ai_development + infrastructure + spacecraft_integration
        annual_opex = sum(costs['annual_operating'].values())
        
        return {
            'ai_system_development': ai_development,
            'infrastructure': infrastructure,
            'spacecraft_integration': spacecraft_integration,
            'total_capex': total_capex,
            'annual_opex': annual_opex
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –º–∏—Å—Å–∏–π
        mission_success_benefits = (
            (benefits['mission_success_improvement']['ai_success_rate'] - 
             benefits['mission_success_improvement']['traditional_success_rate']) *
            benefits['mission_success_improvement']['missions_per_year'] *
            benefits['mission_success_improvement']['average_mission_cost']
        )
        
        # –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
        autonomous_benefits = (
            benefits['autonomous_operations']['ground_operations_cost'] *
            benefits['autonomous_operations']['ground_control_reduction'] +
            benefits['autonomous_operations']['deep_space_missions'] *
            benefits['autonomous_operations']['average_mission_cost'] *
            (benefits['autonomous_operations']['extended_mission_capability'] - 1)
        )
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—É—á–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
        scientific_benefits = (
            benefits['scientific_value_increase']['scientific_data_value'] *
            (benefits['scientific_value_increase']['ai_data_utilization'] - 
             benefits['scientific_value_increase']['traditional_data_utilization']) *
            benefits['scientific_value_increase']['discovery_acceleration']
        )
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        efficiency_benefits = (
            benefits['operational_efficiency']['average_fuel_cost'] *
            benefits['operational_efficiency']['fuel_optimization'] *
            benefits['mission_success_improvement']['missions_per_year'] +
            benefits['operational_efficiency']['average_fuel_cost'] *
            benefits['operational_efficiency']['mission_duration_extension'] *
            benefits['mission_success_improvement']['missions_per_year']
        )
        
        # –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
        risk_benefits = (
            benefits['risk_mitigation']['anomalies_per_year'] *
            benefits['risk_mitigation']['average_anomaly_cost'] *
            benefits['risk_mitigation']['anomaly_prevention'] +
            benefits['risk_mitigation']['insurance_cost'] *
            benefits['risk_mitigation']['insurance_reduction']
        )
        
        # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        commercial_benefits = sum(benefits['commercial_applications'].values()) - \
                            benefits['commercial_applications']['description']  # –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫—É
        
        total_annual_benefits = (
            mission_success_benefits + autonomous_benefits + scientific_benefits +
            efficiency_benefits + risk_benefits + commercial_benefits
        )
        
        return {
            'mission_success_improvement': mission_success_benefits,
            'autonomous_operations': autonomous_benefits,
            'scientific_value_increase': scientific_benefits,
            'operational_efficiency': efficiency_benefits,
            'risk_mitigation': risk_benefits,
            'commercial_applications': commercial_benefits,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=15):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        
        net_annual_benefits = (
            annual_benefits['total_annual_benefits'] - 
            investment['annual_opex']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total_capex'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.12  # 12% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        npv = -investment['total_capex']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total_capex']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total_capex']) / investment['total_capex']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
roi_calculator = AerospaceAIROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total_capex']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total_annual_benefits']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['investment']['annual_opex']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 15 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")

print("\\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ì–û–î ===")
benefits = roi_metrics['annual_benefits']
print(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –º–∏—Å—Å–∏–π: {benefits['mission_success_improvement']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π: {benefits['autonomous_operations']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—É—á–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {benefits['scientific_value_increase']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {benefits['operational_efficiency']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤: {benefits['risk_mitigation']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {benefits['commercial_applications']:,.0f} —Ä—É–±/–≥–æ–¥")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ –º–∏—Å—Å–∏—è–º–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∞ —Ç–∞–∫–∂–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞—Ç—å –Ω–∞—É—á–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ —è–≤–ª—è—é—Ç—Å—è —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∂–∞–π—à–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏, —Ä–∞–±–æ—Ç–∞ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã —Å–∏—Å—Ç–µ–º.

–†–æ—Å—Å–∏–π—Å–∫–∞—è –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –†–æ—Å—Å–∏–∏ –≤ –∫–æ—Å–º–æ—Å–µ.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –º–∏—Å—Å–∏–π, —Å–Ω–∏–∂–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –Ω–∞—É—á–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ –º–∏—Å—Å–∏—è–º–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª–µ–µ 40 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –æ–∫–æ–ª–æ 2.6 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –æ–∫–æ–ª–æ 2 –ª–µ—Ç –∏ ROI –±–æ–ª–µ–µ 2000%.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ AI –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ —Å–≤—è–∑–∞–Ω–æ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º, —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å–≤—è–∑–∏, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º AI –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–∞–ª—å–Ω–µ–≥–æ –∫–æ—Å–º–æ—Å–∞ –∏ –ø–æ–∏—Å–∫–∞ –∂–∏–∑–Ω–∏, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AI –≤ —Å–∏—Å—Ç–µ–º—ã –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Ç—É—Ä–∏–∑–º–∞ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è –∫–æ—Å–º–æ—Å–∞. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –∞–≤–∏–∞–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏.
`
  },

  29: {
    title: "AI –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: 180,
    type: "theory",
    module: 5,
    content: `
# –£—Ä–æ–∫ 29: AI –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏

–û–±–æ—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π, –≥–¥–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏–ª, —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –±–æ–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º —Ä–∞–∑–≤–µ–¥–∫–∏ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. –î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –æ–±–æ—Ä–æ–Ω–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, —Å–µ–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏, —ç—Ç–∏—á–µ—Å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –≤–æ–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é —Å–æ–±–ª—é–¥–µ–Ω–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –ø—Ä–∞–≤–∞.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–æ—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ—á–∞–π—à–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤—É, —Å—Ç—Ä–æ–≥–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –æ–±–æ—Ä–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, —É—á–∞—Å—Ç–∏—è –≤–µ–¥—É—â–∏—Ö –Ω–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ –∑–∞—â–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–∞–π–Ω—ã.

–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö –≤–æ–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –æ—Ç —Ä–∞–∑–≤–µ–¥–∫–∏ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –¥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–µ–≤—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –æ—Ç –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è, –ø–æ–≤—ã—à–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—É—é –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ.

–†–æ—Å—Å–∏–π—Å–∫–∞—è –æ–±–æ—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç –º–æ—â–Ω—ã–º –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –∏ –±–æ–≥–∞—Ç—ã–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –≤–æ–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –±–æ—Ä—å–±—ã –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –≤–æ–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —ç—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI-—Å–∏—Å—Ç–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤–æ–µ–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞

–û–±–æ—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é AI-—Å–∏—Å—Ç–µ–º.

**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:**

–û–±–æ—Ä–æ–Ω–Ω—ã–µ AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ —É—Å–ª–æ–≤–∏—è—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –≤–∫–ª—é—á–∞—è –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∏, —Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –±–æ—Ä—å–±—É –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –∂–∏–≤—É—á–µ—Å—Ç—å –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–æ—Å–ª–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π. –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–∂–∞–π—à—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–æ–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.

–ü—Ä–∏–Ω—Ü–∏–ø—ã Defense in Depth —Ç—Ä–µ–±—É—é—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∑–∞—â–∏—Ç—ã AI-—Å–∏—Å—Ç–µ–º –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–≥—Ä–æ–∑. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É –¥–∞–Ω–Ω—ã—Ö, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É–≥—Ä–æ–∑—ã. AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–æ–π—á–∏–≤—ã –∫ adversarial attacks –∏ –ø–æ–ø—ã—Ç–∫–∞–º –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**

–û–±–æ—Ä–æ–Ω–Ω—ã–µ AI-—Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–µ–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏, –æ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π. –°–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ –∑–∞—â–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–∞–π–Ω—ã, –≤–∫–ª—é—á–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä—ã –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

Compartmentalization –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å". AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º, –∞—É–¥–∏—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è –∑–∞—â–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

**–≠—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:**

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –≤–æ–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –ø—Ä–∞–≤–∞, –≤–∫–ª—é—á–∞—è –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ–º–±–∞—Ç–∞–Ω—Ç–∞–º–∏ –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º–∏ –ª–∏—Ü–∞–º–∏, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏.

Meaningful Human Control –ø—Ä–∏–Ω—Ü–∏–ø —Ç—Ä–µ–±—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –ª–µ—Ç–∞–ª—å–Ω–æ–π —Å–∏–ª—ã. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –≤–µ–¥–µ–Ω–∏—è –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:**

–û–±–æ—Ä–æ–Ω–Ω—ã–µ AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±–∞–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∏–º–ø–æ—Ä—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç–Ω–æ–π –±–∞–∑—ã, –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

Supply Chain Security —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–ª–∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Å—Ö–µ–º, –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å legacy —Å–∏—Å—Ç–µ–º–∞–º–∏:**

–û–±–æ—Ä–æ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ legacy —Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ AI-—Ä–µ—à–µ–Ω–∏—è–º–∏. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏—Å—Ç–µ–º –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.

Interoperability —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ NATO STANAG, –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Å—Ç—Ä–∞–Ω. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–∞–ª–∏—Ü–∏–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.

### –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –≤–æ–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö

–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏–ª—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –≤–æ–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

**–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∏ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:**

AI –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –Ω–∞–∑–µ–º–Ω—ã—Ö, –≤–æ–∑–¥—É—à–Ω—ã—Ö, –º–æ—Ä—Å–∫–∏—Ö –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ–µ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–∏–µ–º —á–µ–ª–æ–≤–µ–∫–∞. –ë–µ—Å–ø–∏–ª–æ—Ç–Ω—ã–µ –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ü–µ–ª–µ–π, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

–†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–µ–º–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç AI –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Å–ª–æ–∂–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —É–≥—Ä–æ–∑ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–∞–∑–≤–µ–¥–∫–∞ –∏ –æ–≥–Ω–µ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–æ–±–æ—Ç–∞–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º –∏ –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞.

Swarm Intelligence —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á. –†–æ–∏ –¥—Ä–æ–Ω–æ–≤ –º–æ–≥—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞–∫ –µ–¥–∏–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –∑–∞–¥–∞—á–∏, –æ–±–º–µ–Ω–∏–≤–∞—è—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∞–¥–∞–ø—Ç–∏—Ä—É—è—Å—å –∫ –ø–æ—Ç–µ—Ä–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

**–°–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ–¥–∫–∏ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:**

AI —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–±–æ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏, –∞—ç—Ä–æ—Ñ–æ—Ç–æ—Å—ä–µ–º–∫—É –∏ –≤–∏–¥–µ–æ —Å –ë–ü–õ–ê –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.

Signals Intelligence (SIGINT) —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞, –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤—ã—è–≤–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.

Human Intelligence (HUMINT) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è AI-—Å–∏—Å—Ç–µ–º–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—Ü –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è.

**–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–æ–π–Ω–∞:**

AI –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –∑–∞—â–∏—Ç–µ –≤–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –∏ –≤–µ–¥–µ–Ω–∏–∏ –Ω–∞—Å—Ç—É–ø–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∏–±–µ—Ä–æ–ø–µ—Ä—Ü–∏–π. –°–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ç–æ—Ä–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞, –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û –∏ advanced persistent threats (APT).

Automated Cyber Defense —Å–∏—Å—Ç–µ–º—ã —Å–ø–æ—Å–æ–±–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∏, –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–Ω—Å–∞–π–¥–µ—Ä—Å–∫–∏—Ö —É–≥—Ä–æ–∑ –∏ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.

Information Operations –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. Natural Language Processing –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π, –≤—ã—è–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–Ω–µ–Ω–∏–µ.

**–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π:**

AI –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º. Decision Support Systems –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, –æ—Ü–µ–Ω–∏–≤–∞—é—Ç —Ä–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –∏—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π.

Command and Control (C2) —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ –∫ –∏–∑–º–µ–Ω—è—é—â–µ–π—Å—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ. Machine Learning –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–æ—á–∫–∏, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–∞—Å–∞–º–∏.

Battle Damage Assessment —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–∑–≤–µ–¥–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É–¥–∞—Ä–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞—Ç–∞–∫.

### –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ–±–æ—Ä–æ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

–†–æ—Å—Å–∏–π—Å–∫–∞—è –æ–±–æ—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.

**–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**

–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è –æ–±–æ—Ä–æ–Ω–Ω–æ-–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞, –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.

–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –≤–∫–ª—é—á–∞—è —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–∑–≤–∏—Ç–∏—é —Å–∏—Å—Ç–µ–º —Ä–∞–¥–∏–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –±–æ—Ä—å–±—ã, —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–¥—É—à–Ω–æ-–∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ–±–æ—Ä–æ–Ω—ã –∏ –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è.

**–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞:**

–†–æ—Å—Å–∏–π—Å–∫–æ–µ –æ–±–æ—Ä–æ–Ω–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤–∫–ª—é—á–∞–µ—Ç –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω "–û –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º –æ–±–æ—Ä–æ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ", —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞—â–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–∞–π–Ω—ã, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è.

–í–æ–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã (–ì–û–°–¢ –í, –û–°–¢ –í) –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –∂–∏–≤—É—á–µ—Å—Ç–∏, —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ä—è–≤–ª—è—é—Ç—Å—è –∫ —Å–∏—Å—Ç–µ–º–∞–º, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ—Ä—É–∂–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è.

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:**

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ-–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. AI-—Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±–∞–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö, –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö, –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

–†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç–Ω–æ–π –±–∞–∑—ã –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –¥–ª—è AI-–≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ —Ä–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–æ-—Å—Ç–æ–π–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∫–≤–∞–Ω—Ç–æ–≤–æ-—É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –ø–æ—Å—Ç–∫–≤–∞–Ω—Ç–æ–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

**–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ:**

–†–æ—Å—Å–∏—è —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞—Ö –ø–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –≤–æ–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö, –≤–∫–ª—é—á–∞—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –û–û–ù –ø–æ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è. –†–æ—Å—Å–∏–π—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –ª–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.

–í–æ–µ–Ω–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å —Å–æ—é–∑–Ω—ã–º–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞–º–∏ –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å–∏—Å—Ç–µ–º. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–∑–≤–∏—Ç–∏—é –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ —Ä–∞–º–∫–∞—Ö –û–î–ö–ë –∏ –¥—Ä—É–≥–∏—Ö –≤–æ–µ–Ω–Ω—ã—Ö —Å–æ—é–∑–æ–≤.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä–æ–Ω–æ–π

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä–æ–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.optim import Adam, AdamW
import cv2
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
from dataclasses import dataclass
from typing import List, Dict, Optional, Tuple, Any, Union
import logging
import asyncio
from datetime import datetime, timedelta
import json
import sqlite3
from pathlib import Path
import hashlib
import hmac
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64

@dataclass
class ThreatObject:
    """–û–±—ä–µ–∫—Ç —É–≥—Ä–æ–∑—ã"""
    object_id: str
    object_type: str  # aircraft, missile, ship, ground_vehicle, personnel
    position: np.ndarray  # [lat, lon, alt]
    velocity: np.ndarray  # [vx, vy, vz]
    heading: float  # –∫—É—Ä—Å –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    classification_confidence: float  # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ 0-1
    threat_level: str  # low, medium, high, critical
    detection_time: datetime
    last_update: datetime
    predicted_trajectory: List[np.ndarray]
    engagement_priority: float  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è 0-1

@dataclass
class DefenseAsset:
    """–°—Ä–µ–¥—Å—Ç–≤–æ –æ–±–æ—Ä–æ–Ω—ã"""
    asset_id: str
    asset_type: str  # sam, radar, interceptor, ew_system
    position: np.ndarray  # [lat, lon, alt]
    operational_status: str  # operational, maintenance, damaged, offline
    engagement_range: float  # –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–º
    ammunition_count: int  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    target_capacity: int  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã—Ö —Ü–µ–ª–µ–π
    current_targets: List[str]  # —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏
    effectiveness_rating: float  # —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 0-1

@dataclass
class EngagementPlan:
    """–ü–ª–∞–Ω –ø–æ—Ä–∞–∂–µ–Ω–∏—è"""
    plan_id: str
    target_assignments: Dict[str, str]  # target_id -> asset_id
    engagement_sequence: List[Tuple[str, str, datetime]]  # asset, target, time
    success_probability: float
    collateral_damage_risk: float
    resource_consumption: Dict[str, int]

class IntelligentDefenseSystem:
    def __init__(self):
        self.threat_detector = ThreatDetectionSystem()
        self.situation_assessor = SituationAssessment()
        self.engagement_planner = EngagementPlanner()
        self.asset_manager = AssetManager()
        self.decision_engine = DefenseDecisionEngine()
        self.communication_system = SecureCommunicationSystem()
        self.cyber_defense = CyberDefenseSystem()
        
        # –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_manager = SecurityManager()
        self.access_control = AccessControlSystem()
        
    async def execute_defense_operations(self, operational_parameters: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            await self.initialize_defense_system(operational_parameters)
            
            operation_log = []
            threats_engaged = 0
            
            while self.operation_active:
                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É–≥—Ä–æ–∑
                detected_threats = await self.threat_detector.scan_airspace()
                
                # –û—Ü–µ–Ω–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
                situation_assessment = self.situation_assessor.assess_situation(
                    detected_threats, self.get_current_assets()
                )
                
                # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
                engagement_plan = self.engagement_planner.plan_engagement(
                    situation_assessment['threats'],
                    situation_assessment['assets']
                )
                
                # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
                decisions = self.decision_engine.make_decisions(
                    situation_assessment, engagement_plan
                )
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
                execution_results = await self.execute_decisions(decisions)
                
                # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                battle_damage_assessment = self.assess_engagement_results(
                    execution_results
                )
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
                await self.update_system_state(battle_damage_assessment)
                
                # –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                cyber_status = self.cyber_defense.monitor_threats()
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                operation_log.append({
                    'timestamp': datetime.now(),
                    'threats_detected': len(detected_threats),
                    'threats_engaged': len(engagement_plan.target_assignments),
                    'decisions': decisions,
                    'results': execution_results,
                    'cyber_status': cyber_status
                })
                
                threats_engaged += len(engagement_plan.target_assignments)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(0.1)  # 100–º—Å —Ü–∏–∫–ª
                
            return {
                'operation_status': 'completed',
                'operation_log': operation_log,
                'total_threats_engaged': threats_engaged,
                'system_effectiveness': self.calculate_effectiveness(operation_log)
            }
            
        except Exception as e:
            logging.error(f"Defense operation error: {e}")
            return {'operation_status': 'failed', 'error': str(e)}

class ThreatDetectionSystem(nn.Module):
    def __init__(self, sensor_fusion_dim=512):
        super(ThreatDetectionSystem, self).__init__()
        
        # –†–∞–¥–∏–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self.radar_processor = RadarSignalProcessor()
        
        # –û–ø—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self.optical_processor = OpticalTargetProcessor()
        
        # –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self.acoustic_processor = AcousticSignatureProcessor()
        
        # –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞
        self.elint_processor = ELINTProcessor()
        
        # –°–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.sensor_fusion = SensorFusionNetwork(sensor_fusion_dim)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–≥—Ä–æ–∑
        self.threat_classifier = ThreatClassifier()
        
        # –¢—Ä–µ–∫–µ—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        self.trajectory_tracker = TrajectoryTracker()
        
    async def scan_airspace(self) -> List[ThreatObject]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        threats = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        radar_data = await self.radar_processor.get_radar_contacts()
        optical_data = await self.optical_processor.get_optical_contacts()
        acoustic_data = await self.acoustic_processor.get_acoustic_signatures()
        elint_data = await self.elint_processor.get_electronic_signatures()
        
        # –°–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        fused_contacts = self.sensor_fusion.fuse_sensor_data(
            radar_data, optical_data, acoustic_data, elint_data
        )
        
        for contact in fused_contacts:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É–≥—Ä–æ–∑—ã
            classification = self.threat_classifier.classify_threat(contact)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            trajectory = self.trajectory_tracker.track_object(contact)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —É–≥—Ä–æ–∑—ã
            threat = ThreatObject(
                object_id=f"THREAT_{contact['id']:06d}",
                object_type=classification['type'],
                position=contact['position'],
                velocity=contact['velocity'],
                heading=contact['heading'],
                classification_confidence=classification['confidence'],
                threat_level=self.assess_threat_level(classification, trajectory),
                detection_time=contact['detection_time'],
                last_update=datetime.now(),
                predicted_trajectory=trajectory['predicted_path'],
                engagement_priority=self.calculate_engagement_priority(
                    classification, trajectory
                )
            )
            
            threats.append(threat)
            
        return threats
        
    def assess_threat_level(self, classification: Dict, trajectory: Dict) -> str:
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã"""
        threat_score = 0
        
        # –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞
        type_scores = {
            'ballistic_missile': 1.0,
            'cruise_missile': 0.9,
            'fighter_aircraft': 0.8,
            'bomber_aircraft': 0.9,
            'helicopter': 0.6,
            'drone': 0.7,
            'transport_aircraft': 0.3,
            'civilian_aircraft': 0.1
        }
        threat_score += type_scores.get(classification['type'], 0.5)
        
        # –°–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        speed = np.linalg.norm(trajectory['velocity'])
        if speed > 300:  # –º/—Å (—Å–≤–µ—Ä—Ö–∑–≤—É–∫–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)
            threat_score += 0.3
        elif speed > 100:  # –º/—Å (–≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)
            threat_score += 0.2
            
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (–∫ –∑–∞—â–∏—â–∞–µ–º–æ–º—É –æ–±—ä–µ–∫—Ç—É)
        if trajectory['heading_to_target']:
            threat_score += 0.4
            
        # –í—ã—Å–æ—Ç–∞ –ø–æ–ª–µ—Ç–∞
        altitude = trajectory['position'][2]
        if altitude < 1000:  # –Ω–∏–∑–∫–æ–≤—ã—Å–æ—Ç–Ω–∞—è —Ü–µ–ª—å
            threat_score += 0.2
            
        # –ú–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if trajectory['maneuvering']:
            threat_score += 0.3
            
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã
        if threat_score >= 0.8:
            return 'critical'
        elif threat_score >= 0.6:
            return 'high'
        elif threat_score >= 0.4:
            return 'medium'
        else:
            return 'low'

class EngagementPlanner:
    def __init__(self):
        self.optimization_engine = EngagementOptimizer()
        self.ballistics_calculator = BallisticsCalculator()
        self.effectiveness_predictor = EffectivenessPredictor()
        
    def plan_engagement(self, threats: List[ThreatObject], 
                       assets: List[DefenseAsset]) -> EngagementPlan:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è —É–≥—Ä–æ–∑"""
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≥—Ä–æ–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_threats = [t for t in threats if t.threat_level in ['high', 'critical']]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö –∫ –±–æ—é —Å—Ä–µ–¥—Å—Ç–≤
        available_assets = [a for a in assets if a.operational_status == 'operational']
        
        # –†–∞—Å—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        engagement_matrix = self.calculate_engagement_matrix(
            priority_threats, available_assets
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª–µ–π
        optimal_assignments = self.optimization_engine.optimize_assignments(
            engagement_matrix, priority_threats, available_assets
        )
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        engagement_sequence = self.plan_engagement_sequence(
            optimal_assignments, priority_threats, available_assets
        )
        
        # –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞
        success_probability = self.effectiveness_predictor.predict_success(
            engagement_sequence, priority_threats, available_assets
        )
        
        # –û—Ü–µ–Ω–∫–∞ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—â–µ—Ä–±–∞
        collateral_risk = self.assess_collateral_damage_risk(
            engagement_sequence, priority_threats
        )
        
        return EngagementPlan(
            plan_id=f"PLAN_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            target_assignments=optimal_assignments,
            engagement_sequence=engagement_sequence,
            success_probability=success_probability,
            collateral_damage_risk=collateral_risk,
            resource_consumption=self.calculate_resource_consumption(
                engagement_sequence, available_assets
            )
        )
        
    def calculate_engagement_matrix(self, threats: List[ThreatObject], 
                                  assets: List[DefenseAsset]) -> np.ndarray:
        """–†–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ—Ä–∞–∂–µ–Ω–∏—è"""
        matrix = np.zeros((len(threats), len(assets)))
        
        for i, threat in enumerate(threats):
            for j, asset in enumerate(assets):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª—å–Ω–æ—Å—Ç–∏
                distance = np.linalg.norm(threat.position - asset.position)
                if distance <= asset.engagement_range:
                    # –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
                    hit_probability = self.ballistics_calculator.calculate_hit_probability(
                        threat, asset, distance
                    )
                    
                    # –£—á–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
                    capacity_factor = max(0, (asset.target_capacity - len(asset.current_targets)) / asset.target_capacity)
                    
                    # –£—á–µ—Ç –Ω–∞–ª–∏—á–∏—è –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
                    ammo_factor = min(1.0, asset.ammunition_count / 10)
                    
                    matrix[i, j] = hit_probability * capacity_factor * ammo_factor
                    
        return matrix

class CyberDefenseSystem:
    def __init__(self):
        self.intrusion_detector = IntrusionDetectionSystem()
        self.malware_scanner = MalwareScanner()
        self.network_monitor = NetworkMonitor()
        self.threat_intelligence = ThreatIntelligence()
        
    def monitor_threats(self) -> Dict:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑"""
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏–π
        intrusions = self.intrusion_detector.detect_intrusions()
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–µ –ü–û
        malware_alerts = self.malware_scanner.scan_systems()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
        network_anomalies = self.network_monitor.detect_anomalies()
        
        # –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑
        threat_assessment = self.threat_intelligence.assess_threats(
            intrusions, malware_alerts, network_anomalies
        )
        
        return {
            'intrusions_detected': len(intrusions),
            'malware_alerts': len(malware_alerts),
            'network_anomalies': len(network_anomalies),
            'threat_level': threat_assessment['level'],
            'recommended_actions': threat_assessment['actions']
        }

class SecurityManager:
    def __init__(self):
        self.encryption_key = self.generate_encryption_key()
        self.access_logs = []
        
    def generate_encryption_key(self) -> bytes:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        password = b"defense_system_key_2024"
        salt = b"salt_for_defense_system"
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password))
        return key
        
    def encrypt_data(self, data: str) -> str:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        f = Fernet(self.encryption_key)
        encrypted_data = f.encrypt(data.encode())
        return base64.urlsafe_b64encode(encrypted_data).decode()
        
    def decrypt_data(self, encrypted_data: str) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        f = Fernet(self.encryption_key)
        decoded_data = base64.urlsafe_b64decode(encrypted_data.encode())
        decrypted_data = f.decrypt(decoded_data)
        return decrypted_data.decode()
        
    def log_access(self, user_id: str, action: str, resource: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞"""
        log_entry = {
            'timestamp': datetime.now(),
            'user_id': user_id,
            'action': action,
            'resource': resource,
            'ip_address': self.get_client_ip()
        }
        self.access_logs.append(log_entry)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–æ—Ä–æ–Ω—ã
    defense_system = IntelligentDefenseSystem()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    operational_parameters = {
        'protected_area': {
            'center': [55.7558, 37.6176],  # –ú–æ—Å–∫–≤–∞
            'radius': 100  # –∫–º
        },
        'threat_types': [
            'ballistic_missile',
            'cruise_missile',
            'fighter_aircraft',
            'drone'
        ],
        'defense_assets': [
            {'type': 'sam_s400', 'position': [55.8, 37.6], 'range': 400},
            {'type': 'sam_pantsir', 'position': [55.7, 37.7], 'range': 20},
            {'type': 'radar_nebo', 'position': [55.9, 37.5], 'range': 600},
            {'type': 'ew_krasukha', 'position': [55.6, 37.8], 'range': 300}
        ],
        'operation_duration': 24,  # —á–∞—Å–æ–≤
        'rules_of_engagement': {
            'engagement_authorization': 'automatic',
            'civilian_protection': 'strict',
            'escalation_threshold': 'high'
        }
    }
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation_result = await defense_system.execute_defense_operations(
        operational_parameters
    )
    
    print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–û–†–û–ù–ò–¢–ï–õ–¨–ù–û–ô –û–ü–ï–†–ê–¶–ò–ò ===")
    print(f"–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_result['operation_status']}")
    
    if operation_result['operation_status'] == 'completed':
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑: {operation_result['total_threats_engaged']}")
        print(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {operation_result['system_effectiveness']:.2%}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation_log = operation_result['operation_log']
        total_threats = sum(log['threats_detected'] for log in operation_log)
        total_engaged = sum(log['threats_engaged'] for log in operation_log)
        
        print(f"\\n–í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≥—Ä–æ–∑: {total_threats}")
        print(f"–í—Å–µ–≥–æ –ø–æ—Ä–∞–∂–µ–Ω–æ —É–≥—Ä–æ–∑: {total_engaged}")
        print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {total_engaged/max(total_threats, 1):.2%}")

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä–æ–Ω–æ–π –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞—â–∏—Ç—ã, —Å–Ω–∏–∂–µ–Ω–∏–µ–º –ø–æ—Ç–µ—Ä—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–æ—Ä–æ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.

\`\`\`python
class DefenseAIROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'ai_system_development': {
                'threat_detection_ai': 800000000,        # –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–≥—Ä–æ–∑
                'engagement_planning': 600000000,        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
                'decision_support': 500000000,           # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
                'cyber_defense_ai': 400000000,           # –ö–∏–±–µ—Ä–æ–±–æ—Ä–æ–Ω–∞
                'sensor_fusion': 350000000,              # –°–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
                'trajectory_prediction': 300000000,      # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
                'battle_damage_assessment': 250000000,   # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                'secure_communications': 200000000       # –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
            },
            'infrastructure': {
                'command_control_centers': 2000000000,   # –¶–µ–Ω—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                'sensor_networks': 1500000000,           # –°–µ—Ç–∏ –¥–∞—Ç—á–∏–∫–æ–≤
                'communication_systems': 1200000000,     # –°–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏
                'data_processing_centers': 800000000,    # –¶–µ–Ω—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                'cyber_security_infrastructure': 600000000, # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                'backup_systems': 400000000              # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            },
            'integration_deployment': {
                'legacy_system_integration': 1000000000, # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å legacy —Å–∏—Å—Ç–µ–º–∞–º–∏
                'field_testing': 800000000,              # –ü–æ–ª–µ–≤—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
                'personnel_training': 600000000,         # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
                'certification_validation': 500000000,   # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
                'deployment_support': 300000000          # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            },
            'annual_operating': {
                'personnel': 1500000000,                 # –ü–µ—Ä—Å–æ–Ω–∞–ª (200 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
                'system_maintenance': 400000000,         # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º
                'cyber_security_operations': 300000000,  # –û–ø–µ—Ä–∞—Ü–∏–∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                'intelligence_updates': 200000000,       # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã—Ö
                'software_updates': 150000000,           # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–û
                'training_exercises': 100000000          # –£—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'threat_neutralization_improvement': {
                'traditional_success_rate': 0.70,       # 70% —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                'ai_success_rate': 0.95,                # 95% —Å –ò–ò
                'average_threat_damage': 50000000000,   # 50 –º–ª—Ä–¥ —Ä—É–± –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É—â–µ—Ä–±
                'threats_per_year': 100,                # —É–≥—Ä–æ–∑ –≤ –≥–æ–¥
                'description': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≥—Ä–æ–∑'
            },
            'response_time_reduction': {
                'traditional_response_time': 300,       # 5 –º–∏–Ω—É—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                'ai_response_time': 30,                 # 30 —Å–µ–∫—É–Ω–¥ —Å –ò–ò
                'time_critical_threats': 50,            # –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≥—Ä–æ–∑ –≤ –≥–æ–¥
                'damage_per_minute': 1000000000,        # 1 –º–ª—Ä–¥ —Ä—É–± —É—â–µ—Ä–±–∞ –∑–∞ –º–∏–Ω—É—Ç—É
                'description': '–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
            },
            'resource_optimization': {
                'ammunition_efficiency': 0.40,          # 40% –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
                'fuel_optimization': 0.25,              # 25% —ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞
                'maintenance_optimization': 0.30,       # 30% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¢–û
                'annual_ammunition_cost': 10000000000,  # 10 –º–ª—Ä–¥ —Ä—É–± –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã
                'annual_fuel_cost': 5000000000,         # 5 –º–ª—Ä–¥ —Ä—É–± —Ç–æ–ø–ª–∏–≤–æ
                'annual_maintenance_cost': 8000000000,  # 8 –º–ª—Ä–¥ —Ä—É–± –¢–û
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤'
            },
            'cyber_security_enhancement': {
                'cyber_attack_prevention': 0.85,        # 85% –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–∏–±–µ—Ä–∞—Ç–∞–∫
                'average_cyber_damage': 20000000000,    # 20 –º–ª—Ä–¥ —Ä—É–± —É—â–µ—Ä–± –æ—Ç –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∏
                'cyber_attacks_per_year': 50,           # –∫–∏–±–µ—Ä–∞—Ç–∞–∫ –≤ –≥–æ–¥
                'intelligence_value': 15000000000,      # 15 –º–ª—Ä–¥ —Ä—É–± —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–µ–¥–¥–∞–Ω–Ω—ã—Ö
                'description': '–£—Å–∏–ª–µ–Ω–∏–µ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
            },
            'force_multiplication': {
                'personnel_efficiency': 2.5,            # 2.5x –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
                'equipment_utilization': 1.8,           # 1.8x —É–ª—É—á—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏
                'operational_readiness': 0.20,          # 20% –ø–æ–≤—ã—à–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                'personnel_cost_savings': 3000000000,   # 3 –º–ª—Ä–¥ —Ä—É–± —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ
                'equipment_efficiency_value': 25000000000, # 25 –º–ª—Ä–¥ —Ä—É–± —Ü–µ–Ω–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                'description': '–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ü–∏—è —Å–∏–ª—ã'
            },
            'strategic_advantages': {
                'deterrence_value': 100000000000,       # 100 –º–ª—Ä–¥ —Ä—É–± —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–¥–µ—Ä–∂–∏–≤–∞–Ω–∏—è
                'alliance_strengthening': 50000000000,  # 50 –º–ª—Ä–¥ —Ä—É–± —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ—é–∑–æ–≤
                'technology_export': 30000000000,       # 30 –º–ª—Ä–¥ —Ä—É–± —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
                'geopolitical_influence': 75000000000,  # 75 –º–ª—Ä–¥ —Ä—É–± –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ
                'description': '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞'
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        ai_development = sum(costs['ai_system_development'].values())
        infrastructure = sum(costs['infrastructure'].values())
        integration = sum(costs['integration_deployment'].values())
        
        total_capex = ai_development + infrastructure + integration
        annual_opex = sum(costs['annual_operating'].values())
        
        return {
            'ai_system_development': ai_development,
            'infrastructure': infrastructure,
            'integration_deployment': integration,
            'total_capex': total_capex,
            'annual_opex': annual_opex
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –ü–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≥—Ä–æ–∑
        threat_neutralization_benefits = (
            (benefits['threat_neutralization_improvement']['ai_success_rate'] - 
             benefits['threat_neutralization_improvement']['traditional_success_rate']) *
            benefits['threat_neutralization_improvement']['threats_per_year'] *
            benefits['threat_neutralization_improvement']['average_threat_damage']
        )
        
        # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        response_time_benefits = (
            (benefits['response_time_reduction']['traditional_response_time'] - 
             benefits['response_time_reduction']['ai_response_time']) / 60 *
            benefits['response_time_reduction']['time_critical_threats'] *
            benefits['response_time_reduction']['damage_per_minute']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_benefits = (
            benefits['resource_optimization']['annual_ammunition_cost'] *
            benefits['resource_optimization']['ammunition_efficiency'] +
            benefits['resource_optimization']['annual_fuel_cost'] *
            benefits['resource_optimization']['fuel_optimization'] +
            benefits['resource_optimization']['annual_maintenance_cost'] *
            benefits['resource_optimization']['maintenance_optimization']
        )
        
        # –£—Å–∏–ª–µ–Ω–∏–µ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        cyber_benefits = (
            benefits['cyber_security_enhancement']['cyber_attacks_per_year'] *
            benefits['cyber_security_enhancement']['average_cyber_damage'] *
            benefits['cyber_security_enhancement']['cyber_attack_prevention'] +
            benefits['cyber_security_enhancement']['intelligence_value']
        )
        
        # –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ü–∏—è —Å–∏–ª—ã
        force_multiplication_benefits = (
            benefits['force_multiplication']['personnel_cost_savings'] *
            (benefits['force_multiplication']['personnel_efficiency'] - 1) +
            benefits['force_multiplication']['equipment_efficiency_value'] *
            (benefits['force_multiplication']['equipment_utilization'] - 1) / 
            benefits['force_multiplication']['equipment_utilization']
        )
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        strategic_benefits = (
            benefits['strategic_advantages']['deterrence_value'] * 0.1 +  # 10% –≥–æ–¥–æ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
            benefits['strategic_advantages']['alliance_strengthening'] * 0.05 +  # 5% –≥–æ–¥–æ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
            benefits['strategic_advantages']['technology_export'] +
            benefits['strategic_advantages']['geopolitical_influence'] * 0.02  # 2% –≥–æ–¥–æ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
        )
        
        total_annual_benefits = (
            threat_neutralization_benefits + response_time_benefits + resource_benefits +
            cyber_benefits + force_multiplication_benefits + strategic_benefits
        )
        
        return {
            'threat_neutralization_improvement': threat_neutralization_benefits,
            'response_time_reduction': response_time_benefits,
            'resource_optimization': resource_benefits,
            'cyber_security_enhancement': cyber_benefits,
            'force_multiplication': force_multiplication_benefits,
            'strategic_advantages': strategic_benefits,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=20):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        
        net_annual_benefits = (
            annual_benefits['total_annual_benefits'] - 
            investment['annual_opex']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total_capex'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.08  # 8% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±–æ—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        npv = -investment['total_capex']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total_capex']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total_capex']) / investment['total_capex']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
roi_calculator = DefenseAIROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ –û–ë–û–†–û–ù–´ ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total_capex']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total_annual_benefits']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['investment']['annual_opex']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 20 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")

print("\\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ì–û–î ===")
benefits = roi_metrics['annual_benefits']
print(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏: {benefits['threat_neutralization_improvement']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {benefits['response_time_reduction']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {benefits['resource_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–£—Å–∏–ª–µ–Ω–∏–µ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {benefits['cyber_security_enhancement']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ü–∏—è —Å–∏–ª—ã: {benefits['force_multiplication']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {benefits['strategic_advantages']:,.0f} —Ä—É–±/–≥–æ–¥")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏–ª, —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –±–æ–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º —Ä–∞–∑–≤–µ–¥–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è, –ø–æ–≤—ã—à–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—É—é –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –æ–±–æ—Ä–æ–Ω–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —ç—Ç–∏—á–µ—Å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –≤–æ–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é —Å–æ–±–ª—é–¥–µ–Ω–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–≥–æ –ø—Ä–∞–≤–∞. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ —è–≤–ª—è—é—Ç—Å—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏, –∑–∞—â–∏—Ç–∞ –æ—Ç adversarial attacks, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.

–†–æ—Å—Å–∏–π—Å–∫–∞—è –æ–±–æ—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ–±–æ—Ä–æ–Ω–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∞—Ä–∏—Ç–µ—Ç–∞ —Å –≤–µ–¥—É—â–∏–º–∏ –≤–æ–µ–Ω–Ω—ã–º–∏ –¥–µ—Ä–∂–∞–≤–∞–º–∏.

–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≥—Ä–æ–∑, —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤, —É—Å–∏–ª–µ–Ω–∏–µ–º –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä–æ–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª–µ–µ 1.6 —Ç—Ä–ª–Ω —Ä—É–±–ª–µ–π –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –æ–∫–æ–ª–æ 16 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ –∏ ROI –±–æ–ª–µ–µ 1900%.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ AI –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ —Å–≤—è–∑–∞–Ω–æ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –±–æ–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º, —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è —Å–≤—è–∑–∏ –∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º AI –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –æ–±–æ—Ä–æ–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏—è –≥–∏–ø–µ—Ä–∑–≤—É–∫–æ–≤–æ–º—É –æ—Ä—É–∂–∏—é. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–µ–ª—è—Ç—å—Å—è —ç—Ç–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –≤–æ–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º—É –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–º—É –ø—Ä–∞–≤—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏.
`
  },

  30: {
    title: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–µ–π—Å—ã",
    duration: 200,
    type: "practice",
    module: 5,
    content: `
# –£—Ä–æ–∫ 30: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∫–µ–π—Å—ã

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ AI-–ø—Ä–æ–µ–∫—Ç—ã

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –≤–µ—Ä—à–∏–Ω—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –≥–¥–µ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –æ–ø—ã—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –≠—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é —Å–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –≤—Å–µ –±–æ–ª—å—à–µ –¥–≤–∏–∂–µ—Ç—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º, –≥–¥–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É –æ—Ç—Ä–∞—Å–ª—è–º–∏ —Ä–∞–∑–º—ã–≤–∞—é—Ç—Å—è, –∞ —É—Å–ø–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –º—ã—Å–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Å—Ç—ã–∫–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ AI, –Ω–æ –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö–æ–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç –ø—Ä–æ—Å—Ç—É—é —Å—É–º–º—É —Å–≤–æ–∏—Ö —á–∞—Å—Ç–µ–π. –≠—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞–≤—ã–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –º–µ–∂–¥—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏.

–†–æ—Å—Å–∏–π—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö AI-–ø—Ä–æ–µ–∫—Ç–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞–ª–∏—á–∏—é –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤, —Ä–∞–∑–≤–∏—Ç–æ–π –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –±–∞–∑–µ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏, –≤–∫–ª—é—á–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–æ–ª–¥–∏–Ω–≥–∏, —Å–æ–∑–¥–∞—é—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π, –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –ø–æ–ª–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏.

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ AI-–ø—Ä–æ–µ–∫—Ç—ã –æ–±–ª–∞–¥–∞—é—Ç —Ä—è–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç –∏—Ö –æ—Ç –æ—Ç—Ä–∞—Å–ª–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

**–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:**

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ AI-—Å–∏—Å—Ç–µ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

Enterprise Architecture –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç—Ä–µ–±—É—é—Ç —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ ERP, MES, SCADA –∏ –¥—Ä—É–≥–∏–º–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±–µ—Å—à–æ–≤–Ω—ã–π –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

**–ì–µ—Ç–µ—Ä–æ–≥–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º –∏ –¥–∞–Ω–Ω—ã—Ö:**

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Å legacy —Å–∏—Å—Ç–µ–º–∞–º–∏, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–±–ª–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –∏ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.

Data Integration challenges –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å–µ–º–∞–Ω—Ç–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö, –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á–∞—Å—Ç–æ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏.

**–ú–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è:**

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ç–µ—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π - –æ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–æ–≤ –¥–æ —ç–∫–æ–Ω–æ–º–∏—Å—Ç–æ–≤ –∏ —é—Ä–∏—Å—Ç–æ–≤. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –Ω–∞–≤—ã–∫–∞–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–∞–º–∏.

Change Management —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º, –ø–æ—Å–∫–æ–ª—å–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, —Ä–æ–ª—è—Ö –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞, –æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

**–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ AI-—Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤.

Distributed Computing –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç—Ä–µ–±—É—é—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö AI-—Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –æ–±–ª–∞—á–Ω–æ-–ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –Ω–∏–∑–∫—É—é –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

### –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö AI-–ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∏—Ç—ã–≤–∞—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –º–Ω–æ–≥–æ–∞—Å–ø–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∞–∫–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤.

**–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –≤–∫–ª—é—á–∞—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-—Ä–µ—à–µ–Ω–∏—è.

Business Process Modeling –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ—Ç–∞—Ü–∏–∏ BPMN, UML –∏ ArchiMate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Ç–µ–∫—É—â–∏—Ö –∏ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É AI-—Å–∏—Å—Ç–µ–º—ã.

**–ü–æ—ç—Ç–∞–ø–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:**

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –ø–æ—ç—Ç–∞–ø–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ Agile –∏ DevOps –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≥–∏–±–∫–æ—Å—Ç–∏, —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ—Ä–∏–º—É—é –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Å–Ω–æ–≤—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–∑ –ø—Ä–æ–µ–∫—Ç–∞.

MVP (Minimum Viable Product) –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:**

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –æ—Ü–µ–Ω–∫—É, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–∏—Ç–∏–≥–∞—Ü–∏—é.

Risk Assessment –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å), –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ (—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π) –∏ –±–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–∏ (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∏, –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≤—ã–≥–æ–¥).

## –ö–µ–π—Å 1: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º —Ö–æ–ª–¥–∏–Ω–≥–æ–º

–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–π AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º —Ö–æ–ª–¥–∏–Ω–≥–æ–º, –≤–∫–ª—é—á–∞—é—â–∏–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏, –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏—è, —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.optim import Adam, AdamW
import asyncio
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from typing import List, Dict, Optional, Tuple, Any, Union
import logging
import json
import sqlite3
from pathlib import Path
import networkx as nx
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor, IsolationForest
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.cluster import DBSCAN
import warnings
warnings.filterwarnings('ignore')

@dataclass
class Enterprise:
    """–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Ö–æ–ª–¥–∏–Ω–≥–∞"""
    enterprise_id: str
    name: str
    industry_type: str  # metallurgy, machinery, energy, logistics
    location: Tuple[float, float]  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    production_capacity: Dict[str, float]  # –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏
    current_utilization: float  # —Ç–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ 0-1
    efficiency_rating: float  # —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 0-1
    energy_consumption: float  # –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –ú–í—Ç
    workforce_size: int  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    annual_revenue: float  # –≥–æ–¥–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞
    key_products: List[str]  # –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    suppliers: List[str]  # –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
    customers: List[str]  # –∫–ª–∏–µ–Ω—Ç—ã
    ai_systems: List[str] = field(default_factory=list)  # –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–µ AI-—Å–∏—Å—Ç–µ–º—ã

@dataclass
class SupplyChainLink:
    """–°–≤—è–∑—å –≤ —Ü–µ–ø–∏ –ø–æ—Å—Ç–∞–≤–æ–∫"""
    supplier_id: str
    customer_id: str
    product_type: str
    monthly_volume: float
    lead_time_days: int
    quality_rating: float  # 0-1
    cost_per_unit: float
    reliability_score: float  # 0-1

@dataclass
class OptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    optimization_id: str
    timestamp: datetime
    optimization_type: str  # production, supply_chain, energy, workforce
    affected_enterprises: List[str]
    recommendations: List[Dict]
    expected_benefits: Dict[str, float]
    implementation_complexity: str  # low, medium, high
    roi_estimate: float

class IntegratedHoldingAISystem:
    def __init__(self):
        self.enterprises = {}
        self.supply_chain_network = nx.DiGraph()
        self.production_optimizer = ProductionOptimizer()
        self.supply_chain_optimizer = SupplyChainOptimizer()
        self.energy_optimizer = EnergyOptimizer()
        self.workforce_optimizer = WorkforceOptimizer()
        self.financial_analyzer = FinancialAnalyzer()
        self.risk_manager = RiskManager()
        self.sustainability_tracker = SustainabilityTracker()
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.data_integration_hub = DataIntegrationHub()
        self.decision_coordination_engine = DecisionCoordinationEngine()
        self.performance_monitor = PerformanceMonitor()
        
    async def initialize_holding_system(self, holding_config: Dict) -> Dict:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–ª–¥–∏–Ω–≥–æ–º"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è—Ö
            await self.load_enterprises_data(holding_config['enterprises'])
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ç–∏ —Ü–µ–ø–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫
            await self.build_supply_chain_network(holding_config['supply_chains'])
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–º–æ–¥—É–ª–µ–π
            await self.initialize_ai_modules()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.setup_integration_components()
            
            return {
                'status': 'initialized',
                'enterprises_count': len(self.enterprises),
                'supply_chain_links': self.supply_chain_network.number_of_edges(),
                'ai_modules_active': self.get_active_modules_count()
            }
            
        except Exception as e:
            logging.error(f"Holding system initialization error: {e}")
            return {'status': 'failed', 'error': str(e)}
    
    async def execute_integrated_optimization(self, optimization_scope: str = 'full') -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        optimization_results = []
        
        try:
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
            current_state = await self.collect_enterprise_data()
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_analysis = self.analyze_holding_state(current_state)
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if optimization_scope in ['full', 'production']:
                production_optimization = await self.production_optimizer.optimize_production(
                    self.enterprises, current_state
                )
                optimization_results.append(production_optimization)
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ø–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫
            if optimization_scope in ['full', 'supply_chain']:
                supply_chain_optimization = await self.supply_chain_optimizer.optimize_supply_chain(
                    self.supply_chain_network, current_state
                )
                optimization_results.append(supply_chain_optimization)
            
            # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if optimization_scope in ['full', 'energy']:
                energy_optimization = await self.energy_optimizer.optimize_energy_consumption(
                    self.enterprises, current_state
                )
                optimization_results.append(energy_optimization)
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä—É–¥–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            if optimization_scope in ['full', 'workforce']:
                workforce_optimization = await self.workforce_optimizer.optimize_workforce(
                    self.enterprises, current_state
                )
                optimization_results.append(workforce_optimization)
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π
            coordinated_plan = self.decision_coordination_engine.coordinate_decisions(
                optimization_results
            )
            
            # –û—Ü–µ–Ω–∫–∞ —Å–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            synergy_analysis = self.analyze_synergy_effects(coordinated_plan)
            
            return {
                'optimization_status': 'completed',
                'individual_optimizations': optimization_results,
                'coordinated_plan': coordinated_plan,
                'synergy_effects': synergy_analysis,
                'total_expected_benefits': self.calculate_total_benefits(coordinated_plan)
            }
            
        except Exception as e:
            logging.error(f"Integrated optimization error: {e}")
            return {'optimization_status': 'failed', 'error': str(e)}

class ProductionOptimizer:
    def __init__(self):
        self.demand_forecaster = DemandForecaster()
        self.capacity_planner = CapacityPlanner()
        self.quality_predictor = QualityPredictor()
        
    async def optimize_production(self, enterprises: Dict, current_state: Dict) -> OptimizationResult:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º"""
        recommendations = []
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞
        demand_forecast = self.demand_forecaster.forecast_demand(
            current_state['market_data'], 
            current_state['historical_demand']
        )
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–µ–π
        capacity_plan = self.capacity_planner.plan_capacity(
            enterprises, demand_forecast
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
        for enterprise_id, enterprise in enterprises.items():
            current_utilization = current_state['utilization'][enterprise_id]
            optimal_utilization = capacity_plan[enterprise_id]['optimal_utilization']
            
            if abs(current_utilization - optimal_utilization) > 0.1:
                recommendations.append({
                    'enterprise_id': enterprise_id,
                    'action': 'adjust_production',
                    'current_utilization': current_utilization,
                    'target_utilization': optimal_utilization,
                    'expected_benefit': self.calculate_utilization_benefit(
                        enterprise, current_utilization, optimal_utilization
                    )
                })
        
        # –ú–µ–∂–∑–∞–≤–æ–¥—Å–∫–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è
        coordination_opportunities = self.identify_coordination_opportunities(
            enterprises, capacity_plan
        )
        
        for opportunity in coordination_opportunities:
            recommendations.append({
                'type': 'inter_enterprise_coordination',
                'enterprises': opportunity['enterprises'],
                'action': opportunity['action'],
                'expected_benefit': opportunity['benefit']
            })
        
        expected_benefits = {
            'revenue_increase': sum(r.get('expected_benefit', 0) for r in recommendations),
            'efficiency_improvement': self.calculate_efficiency_improvement(recommendations),
            'cost_reduction': self.calculate_cost_reduction(recommendations)
        }
        
        return OptimizationResult(
            optimization_id=f"PROD_OPT_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            timestamp=datetime.now(),
            optimization_type='production',
            affected_enterprises=list(enterprises.keys()),
            recommendations=recommendations,
            expected_benefits=expected_benefits,
            implementation_complexity='medium',
            roi_estimate=self.calculate_production_roi(expected_benefits, recommendations)
        )

class SupplyChainOptimizer:
    def __init__(self):
        self.network_analyzer = NetworkAnalyzer()
        self.logistics_optimizer = LogisticsOptimizer()
        self.inventory_optimizer = InventoryOptimizer()
        
    async def optimize_supply_chain(self, supply_network: nx.DiGraph, 
                                  current_state: Dict) -> OptimizationResult:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ø–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç –≤ —Å–µ—Ç–∏
        bottlenecks = self.network_analyzer.identify_bottlenecks(supply_network)
        
        for bottleneck in bottlenecks:
            recommendations.append({
                'type': 'bottleneck_resolution',
                'location': bottleneck['node'],
                'issue': bottleneck['issue'],
                'solution': bottleneck['recommended_solution'],
                'expected_benefit': bottleneck['potential_improvement']
            })
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
        route_optimizations = self.logistics_optimizer.optimize_routes(
            supply_network, current_state['logistics_data']
        )
        
        for optimization in route_optimizations:
            recommendations.append({
                'type': 'route_optimization',
                'route': optimization['route'],
                'current_cost': optimization['current_cost'],
                'optimized_cost': optimization['optimized_cost'],
                'savings': optimization['current_cost'] - optimization['optimized_cost']
            })
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø–∞—Å–æ–≤
        inventory_optimizations = self.inventory_optimizer.optimize_inventory_levels(
            supply_network, current_state['inventory_data']
        )
        
        for optimization in inventory_optimizations:
            recommendations.append({
                'type': 'inventory_optimization',
                'enterprise': optimization['enterprise'],
                'product': optimization['product'],
                'current_level': optimization['current_level'],
                'optimal_level': optimization['optimal_level'],
                'cost_impact': optimization['cost_impact']
            })
        
        expected_benefits = {
            'logistics_cost_reduction': sum(r.get('savings', 0) for r in recommendations if r['type'] == 'route_optimization'),
            'inventory_cost_reduction': sum(r.get('cost_impact', 0) for r in recommendations if r['type'] == 'inventory_optimization'),
            'efficiency_improvement': self.calculate_supply_chain_efficiency_improvement(recommendations)
        }
        
        return OptimizationResult(
            optimization_id=f"SC_OPT_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            timestamp=datetime.now(),
            optimization_type='supply_chain',
            affected_enterprises=self.get_affected_enterprises(recommendations),
            recommendations=recommendations,
            expected_benefits=expected_benefits,
            implementation_complexity='high',
            roi_estimate=self.calculate_supply_chain_roi(expected_benefits, recommendations)
        )

class DecisionCoordinationEngine:
    def __init__(self):
        self.conflict_resolver = ConflictResolver()
        self.synergy_detector = SynergyDetector()
        self.priority_manager = PriorityManager()
        
    def coordinate_decisions(self, optimization_results: List[OptimizationResult]) -> Dict:
        """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        conflicts = self.conflict_resolver.identify_conflicts(optimization_results)
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        resolved_conflicts = []
        for conflict in conflicts:
            resolution = self.conflict_resolver.resolve_conflict(conflict)
            resolved_conflicts.append(resolution)
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–µ—Ä–≥–∏–π
        synergies = self.synergy_detector.detect_synergies(optimization_results)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π
        prioritized_actions = self.priority_manager.prioritize_actions(
            optimization_results, resolved_conflicts, synergies
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        coordinated_plan = {
            'high_priority_actions': [a for a in prioritized_actions if a['priority'] == 'high'],
            'medium_priority_actions': [a for a in prioritized_actions if a['priority'] == 'medium'],
            'low_priority_actions': [a for a in prioritized_actions if a['priority'] == 'low'],
            'conflicts_resolved': resolved_conflicts,
            'synergies_identified': synergies,
            'implementation_timeline': self.create_implementation_timeline(prioritized_actions)
        }
        
        return coordinated_plan

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    holding_system = IntegratedHoldingAISystem()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö–æ–ª–¥–∏–Ω–≥–∞
    holding_config = {
        'enterprises': [
            {
                'enterprise_id': 'STEEL_001',
                'name': '–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–π –∑–∞–≤–æ–¥ ‚Ññ1',
                'industry_type': 'metallurgy',
                'location': (55.7558, 37.6176),
                'production_capacity': {'steel': 2000000, 'rolled_products': 1500000},  # —Ç–æ–Ω–Ω/–≥–æ–¥
                'current_utilization': 0.75,
                'efficiency_rating': 0.82,
                'energy_consumption': 450,  # –ú–í—Ç
                'workforce_size': 8500,
                'annual_revenue': 85000000000,  # 85 –º–ª—Ä–¥ —Ä—É–±
                'key_products': ['steel_sheets', 'steel_beams', 'wire_rod'],
                'suppliers': ['COAL_001', 'ORE_001'],
                'customers': ['MACH_001', 'MACH_002']
            },
            {
                'enterprise_id': 'MACH_001',
                'name': '–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ ‚Ññ1',
                'industry_type': 'machinery',
                'location': (55.8558, 37.7176),
                'production_capacity': {'heavy_machinery': 500, 'components': 50000},  # —à—Ç/–≥–æ–¥
                'current_utilization': 0.68,
                'efficiency_rating': 0.78,
                'energy_consumption': 120,  # –ú–í—Ç
                'workforce_size': 3200,
                'annual_revenue': 32000000000,  # 32 –º–ª—Ä–¥ —Ä—É–±
                'key_products': ['excavators', 'cranes', 'industrial_equipment'],
                'suppliers': ['STEEL_001'],
                'customers': ['CONSTR_001', 'MINING_001']
            },
            {
                'enterprise_id': 'ENERGY_001',
                'name': '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å ‚Ññ1',
                'industry_type': 'energy',
                'location': (55.6558, 37.5176),
                'production_capacity': {'electricity': 2000, 'heat': 1500},  # –ú–í—Ç
                'current_utilization': 0.85,
                'efficiency_rating': 0.88,
                'energy_consumption': 0,  # –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —ç–Ω–µ—Ä–≥–∏–∏
                'workforce_size': 1200,
                'annual_revenue': 24000000000,  # 24 –º–ª—Ä–¥ —Ä—É–±
                'key_products': ['electricity', 'heat', 'steam'],
                'suppliers': ['COAL_001', 'GAS_001'],
                'customers': ['STEEL_001', 'MACH_001', 'EXTERNAL']
            },
            {
                'enterprise_id': 'LOGISTICS_001',
                'name': '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ‚Ññ1',
                'industry_type': 'logistics',
                'location': (55.9558, 37.4176),
                'production_capacity': {'cargo_handling': 5000000, 'storage': 200000},  # —Ç–æ–Ω–Ω/–≥–æ–¥, –º¬≥
                'current_utilization': 0.72,
                'efficiency_rating': 0.85,
                'energy_consumption': 25,  # –ú–í—Ç
                'workforce_size': 800,
                'annual_revenue': 8000000000,  # 8 –º–ª—Ä–¥ —Ä—É–±
                'key_products': ['transportation', 'warehousing', 'distribution'],
                'suppliers': ['EXTERNAL'],
                'customers': ['STEEL_001', 'MACH_001', 'EXTERNAL']
            }
        ],
        'supply_chains': [
            {'supplier': 'COAL_001', 'customer': 'STEEL_001', 'product': 'coal', 'volume': 150000, 'lead_time': 7},
            {'supplier': 'ORE_001', 'customer': 'STEEL_001', 'product': 'iron_ore', 'volume': 300000, 'lead_time': 10},
            {'supplier': 'STEEL_001', 'customer': 'MACH_001', 'product': 'steel_sheets', 'volume': 80000, 'lead_time': 3},
            {'supplier': 'COAL_001', 'customer': 'ENERGY_001', 'product': 'coal', 'volume': 200000, 'lead_time': 5},
            {'supplier': 'ENERGY_001', 'customer': 'STEEL_001', 'product': 'electricity', 'volume': 450, 'lead_time': 0},
            {'supplier': 'ENERGY_001', 'customer': 'MACH_001', 'product': 'electricity', 'volume': 120, 'lead_time': 0},
            {'supplier': 'LOGISTICS_001', 'customer': 'STEEL_001', 'product': 'transportation', 'volume': 500000, 'lead_time': 2},
            {'supplier': 'LOGISTICS_001', 'customer': 'MACH_001', 'product': 'transportation', 'volume': 100000, 'lead_time': 2}
        ]
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    init_result = await holding_system.initialize_holding_system(holding_config)
    print("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ ===")
    print(f"–°—Ç–∞—Ç—É—Å: {init_result['status']}")
    print(f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π: {init_result['enterprises_count']}")
    print(f"–°–≤—è–∑–µ–π –≤ —Ü–µ–ø–∏ –ø–æ—Å—Ç–∞–≤–æ–∫: {init_result['supply_chain_links']}")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_result = await holding_system.execute_integrated_optimization('full')
    
    print("\\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===")
    print(f"–°—Ç–∞—Ç—É—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimization_result['optimization_status']}")
    
    if optimization_result['optimization_status'] == 'completed':
        total_benefits = optimization_result['total_expected_benefits']
        print(f"\\n–û–±—â–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –≤—ã–≥–æ–¥—ã:")
        print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏: {total_benefits.get('revenue_increase', 0):,.0f} —Ä—É–±/–≥–æ–¥")
        print(f"–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç: {total_benefits.get('cost_reduction', 0):,.0f} —Ä—É–±/–≥–æ–¥")
        print(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {total_benefits.get('efficiency_improvement', 0):.1%}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        synergy_effects = optimization_result['synergy_effects']
        print(f"\\n–°–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:")
        print(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞ –æ—Ç —Å–∏–Ω–µ—Ä–≥–∏–∏: {synergy_effects.get('additional_benefits', 0):,.0f} —Ä—É–±/–≥–æ–¥")
        print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∏–Ω–µ—Ä–≥–∏–∏: {synergy_effects.get('synergy_coefficient', 1):.2f}")
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
        coordinated_plan = optimization_result['coordinated_plan']
        print(f"\\n–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω:")
        print(f"–í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(coordinated_plan['high_priority_actions'])}")
        print(f"–°—Ä–µ–¥–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(coordinated_plan['medium_priority_actions'])}")
        print(f"–ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(coordinated_plan['low_priority_actions'])}")
        print(f"–†–∞–∑—Ä–µ—à–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(coordinated_plan['conflicts_resolved'])}")
        print(f"–í—ã—è–≤–ª–µ–Ω–æ —Å–∏–Ω–µ—Ä–≥–∏–π: {len(coordinated_plan['synergies_identified'])}")

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`python
class IntegratedHoldingROICalculator:
    def __init__(self):
        self.cost_factors = self.define_cost_factors()
        self.benefit_factors = self.define_benefit_factors()
        
    def define_cost_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞—Ç"""
        return {
            'ai_platform_development': {
                'core_integration_platform': 2500000000,    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
                'production_optimization_ai': 800000000,    # AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                'supply_chain_ai': 600000000,               # AI —Ü–µ–ø–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫
                'energy_optimization_ai': 500000000,        # AI —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                'workforce_optimization_ai': 400000000,     # AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
                'financial_analytics_ai': 350000000,        # AI —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                'risk_management_ai': 300000000,            # AI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
                'sustainability_ai': 250000000              # AI —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
            },
            'infrastructure_integration': {
                'enterprise_data_integration': 1500000000,  # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
                'legacy_system_modernization': 2000000000,  # –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è legacy —Å–∏—Å—Ç–µ–º
                'cloud_infrastructure': 800000000,          # –û–±–ª–∞—á–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                'edge_computing_deployment': 600000000,     # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ edge computing
                'network_infrastructure': 500000000,        # –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                'security_infrastructure': 400000000,       # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                'backup_disaster_recovery': 300000000       # –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            },
            'change_management': {
                'organizational_transformation': 1200000000, # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
                'process_reengineering': 800000000,          # –†–µ–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                'training_development': 600000000,           # –û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ
                'change_management_consulting': 400000000,   # –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                'communication_engagement': 200000000       # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ
            },
            'annual_operating': {
                'ai_platform_maintenance': 500000000,       # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                'infrastructure_operations': 400000000,     # –û–ø–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                'specialized_personnel': 800000000,         # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª (100 —á–µ–ª)
                'external_services': 300000000,             # –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
                'continuous_improvement': 200000000,        # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                'compliance_audit': 100000000               # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∞—É–¥–∏—Ç
            }
        }
        
    def define_benefit_factors(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ–¥"""
        return {
            'production_optimization': {
                'capacity_utilization_improvement': 0.15,   # 15% —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                'quality_improvement': 0.12,                # 12% —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
                'waste_reduction': 0.20,                    # 20% —Å–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ö–æ–¥–æ–≤
                'maintenance_cost_reduction': 0.25,         # 25% —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –¢–û
                'total_production_value': 149000000000,     # 149 –º–ª—Ä–¥ —Ä—É–± –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                'maintenance_costs': 7450000000             # 7.45 –º–ª—Ä–¥ —Ä—É–± –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –¢–û
            },
            'supply_chain_optimization': {
                'logistics_cost_reduction': 0.18,           # 18% —Å–Ω–∏–∂–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞—Ç—Ä–∞—Ç
                'inventory_optimization': 0.22,             # 22% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø–∞—Å–æ–≤
                'supplier_efficiency': 0.15,                # 15% –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                'demand_forecast_accuracy': 0.30,           # 30% —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                'total_logistics_costs': 8950000000,        # 8.95 –º–ª—Ä–¥ —Ä—É–± –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
                'inventory_carrying_costs': 5970000000,     # 5.97 –º–ª—Ä–¥ —Ä—É–± –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∑–∞–ø–∞—Å—ã
                'supplier_costs': 89500000000               # 89.5 –º–ª—Ä–¥ —Ä—É–± –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            },
            'energy_optimization': {
                'energy_efficiency_improvement': 0.25,      # 25% –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                'renewable_energy_integration': 0.15,       # 15% –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –í–ò–≠
                'peak_load_management': 0.20,               # 20% —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤—ã–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏
                'energy_trading_optimization': 0.12,        # 12% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —ç–Ω–µ—Ä–≥–∏–µ–π
                'total_energy_costs': 17900000000,          # 17.9 –º–ª—Ä–¥ —Ä—É–± —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
                'energy_trading_revenue': 24000000000       # 24 –º–ª—Ä–¥ —Ä—É–± –≤—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ —ç–Ω–µ—Ä–≥–∏–∏
            },
            'workforce_optimization': {
                'productivity_improvement': 0.20,           # 20% –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                'skill_development_efficiency': 0.25,       # 25% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤
                'workforce_planning_optimization': 0.18,    # 18% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
                'safety_improvement': 0.30,                 # 30% —É–ª—É—á—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                'total_labor_costs': 26800000000,           # 26.8 –º–ª—Ä–¥ —Ä—É–± –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª
                'safety_related_costs': 1340000000          # 1.34 –º–ª—Ä–¥ —Ä—É–± –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            },
            'financial_synergies': {
                'working_capital_optimization': 0.15,       # 15% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±–æ—Ä–æ—Ç–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
                'investment_efficiency': 0.20,              # 20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
                'risk_mitigation_value': 0.25,              # 25% —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
                'market_opportunities': 0.18,               # 18% –Ω–æ–≤—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                'working_capital': 29800000000,             # 29.8 –º–ª—Ä–¥ —Ä—É–± –æ–±–æ—Ä–æ—Ç–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
                'annual_investments': 14900000000,          # 14.9 –º–ª—Ä–¥ —Ä—É–± –≥–æ–¥–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
                'risk_related_costs': 2980000000,           # 2.98 –º–ª—Ä–¥ —Ä—É–± –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∏—Å–∫–∏
                'market_expansion_potential': 17920000000   # 17.92 –º–ª—Ä–¥ —Ä—É–± –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            },
            'sustainability_benefits': {
                'carbon_footprint_reduction': 0.30,         # 30% —Å–Ω–∏–∂–µ–Ω–∏–µ —É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞
                'waste_management_improvement': 0.25,       # 25% —É–ª—É—á—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Ö–æ–¥–∞–º–∏
                'water_usage_optimization': 0.20,           # 20% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–æ–¥–æ–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                'circular_economy_benefits': 0.15,          # 15% –≤—ã–≥–æ–¥—ã —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏
                'environmental_compliance_costs': 2980000000, # 2.98 –º–ª—Ä–¥ —Ä—É–± –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —ç–∫–æ–ª–æ–≥–∏—é
                'waste_management_costs': 1490000000,       # 1.49 –º–ª—Ä–¥ —Ä—É–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ö–æ–¥–∞–º–∏
                'water_costs': 745000000,                   # 745 –º–ª–Ω —Ä—É–± –≤–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                'circular_economy_potential': 8960000000    # 8.96 –º–ª—Ä–¥ —Ä—É–± –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏
            }
        }
        
    def calculate_total_investment(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        costs = self.cost_factors
        
        ai_platform = sum(costs['ai_platform_development'].values())
        infrastructure = sum(costs['infrastructure_integration'].values())
        change_management = sum(costs['change_management'].values())
        
        total_capex = ai_platform + infrastructure + change_management
        annual_opex = sum(costs['annual_operating'].values())
        
        return {
            'ai_platform_development': ai_platform,
            'infrastructure_integration': infrastructure,
            'change_management': change_management,
            'total_capex': total_capex,
            'annual_opex': annual_opex
        }
        
    def calculate_annual_benefits(self):
        """–†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥"""
        benefits = self.benefit_factors
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        production_benefits = (
            benefits['production_optimization']['total_production_value'] *
            (benefits['production_optimization']['capacity_utilization_improvement'] +
             benefits['production_optimization']['quality_improvement'] +
             benefits['production_optimization']['waste_reduction']) / 3 +
            benefits['production_optimization']['maintenance_costs'] *
            benefits['production_optimization']['maintenance_cost_reduction']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ø–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫
        supply_chain_benefits = (
            benefits['supply_chain_optimization']['total_logistics_costs'] *
            benefits['supply_chain_optimization']['logistics_cost_reduction'] +
            benefits['supply_chain_optimization']['inventory_carrying_costs'] *
            benefits['supply_chain_optimization']['inventory_optimization'] +
            benefits['supply_chain_optimization']['supplier_costs'] *
            benefits['supply_chain_optimization']['supplier_efficiency'] * 0.1  # 10% –æ—Ç —É–ª—É—á—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        )
        
        # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        energy_benefits = (
            benefits['energy_optimization']['total_energy_costs'] *
            benefits['energy_optimization']['energy_efficiency_improvement'] +
            benefits['energy_optimization']['energy_trading_revenue'] *
            benefits['energy_optimization']['energy_trading_optimization']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        workforce_benefits = (
            benefits['workforce_optimization']['total_labor_costs'] *
            benefits['workforce_optimization']['productivity_improvement'] * 0.5 +  # 50% –æ—Ç —Ä–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            benefits['workforce_optimization']['safety_related_costs'] *
            benefits['workforce_optimization']['safety_improvement']
        )
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–∏–Ω–µ—Ä–≥–∏–∏
        financial_benefits = (
            benefits['financial_synergies']['working_capital'] *
            benefits['financial_synergies']['working_capital_optimization'] * 0.1 +  # 10% –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞
            benefits['financial_synergies']['annual_investments'] *
            benefits['financial_synergies']['investment_efficiency'] * 0.2 +  # 20% –æ—Ç —É–ª—É—á—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            benefits['financial_synergies']['risk_related_costs'] *
            benefits['financial_synergies']['risk_mitigation_value'] +
            benefits['financial_synergies']['market_expansion_potential'] *
            benefits['financial_synergies']['market_opportunities'] * 0.1  # 10% —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        )
        
        # –£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
        sustainability_benefits = (
            benefits['sustainability_benefits']['environmental_compliance_costs'] *
            benefits['sustainability_benefits']['carbon_footprint_reduction'] +
            benefits['sustainability_benefits']['waste_management_costs'] *
            benefits['sustainability_benefits']['waste_management_improvement'] +
            benefits['sustainability_benefits']['water_costs'] *
            benefits['sustainability_benefits']['water_usage_optimization'] +
            benefits['sustainability_benefits']['circular_economy_potential'] *
            benefits['sustainability_benefits']['circular_economy_benefits'] * 0.05  # 5% —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        )
        
        total_annual_benefits = (
            production_benefits + supply_chain_benefits + energy_benefits +
            workforce_benefits + financial_benefits + sustainability_benefits
        )
        
        return {
            'production_optimization': production_benefits,
            'supply_chain_optimization': supply_chain_benefits,
            'energy_optimization': energy_benefits,
            'workforce_optimization': workforce_benefits,
            'financial_synergies': financial_benefits,
            'sustainability_benefits': sustainability_benefits,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi_metrics(self, analysis_period=15):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ ROI"""
        investment = self.calculate_total_investment()
        annual_benefits = self.calculate_annual_benefits()
        
        net_annual_benefits = (
            annual_benefits['total_annual_benefits'] - 
            investment['annual_opex']
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        payback_period = investment['total_capex'] / net_annual_benefits
        
        # NPV —Ä–∞—Å—á–µ—Ç
        discount_rate = 0.10  # 10% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        npv = -investment['total_capex']
        
        for year in range(1, analysis_period + 1):
            discounted_benefit = net_annual_benefits / ((1 + discount_rate) ** year)
            npv += discounted_benefit
            
        # IRR –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefits / investment['total_capex']) - 1
        
        # ROI
        total_benefits = net_annual_benefits * analysis_period
        roi = ((total_benefits - investment['total_capex']) / investment['total_capex']) * 100
        
        return {
            'investment': investment,
            'annual_benefits': annual_benefits,
            'net_annual_benefits': net_annual_benefits,
            'payback_period_years': payback_period,
            'npv': npv,
            'irr': irr * 100,
            'roi_percent': roi,
            'analysis_period': analysis_period
        }

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
roi_calculator = IntegratedHoldingROICalculator()
roi_metrics = roi_calculator.calculate_roi_metrics()

print("=== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –ü–†–û–ï–ö–¢–ê ===")
print(f"–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {roi_metrics['investment']['total_capex']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['annual_benefits']['total_annual_benefits']:,.0f} —Ä—É–±")
print(f"–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {roi_metrics['investment']['annual_opex']:,.0f} —Ä—É–±")
print(f"–ß–∏—Å—Ç—ã–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {roi_metrics['net_annual_benefits']:,.0f} —Ä—É–±")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
print(f"ROI –∑–∞ 15 –ª–µ—Ç: {roi_metrics['roi_percent']:.1f}%")
print(f"NPV: {roi_metrics['npv']:,.0f} —Ä—É–±")
print(f"IRR: {roi_metrics['irr']:.1f}%")

print("\\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –í–´–ì–û–î ===")
benefits = roi_metrics['annual_benefits']
print(f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {benefits['production_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ø–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫: {benefits['supply_chain_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {benefits['energy_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {benefits['workforce_optimization']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–∏–Ω–µ—Ä–≥–∏–∏: {benefits['financial_synergies']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–£—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ: {benefits['sustainability_benefits']:,.0f} —Ä—É–±/–≥–æ–¥")
\`\`\`

## –ö–µ–π—Å 2: –£–º–Ω—ã–π –≥–æ—Ä–æ–¥ –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞

–í—Ç–æ—Ä–æ–π –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–µ–π—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≥–æ—Ä–æ–¥—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —É–º–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞

\`\`\`python
@dataclass
class CityDistrict:
    """–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ä–∞–π–æ–Ω"""
    district_id: str
    name: str
    area_km2: float
    population: int
    residential_buildings: int
    commercial_buildings: int
    industrial_facilities: int
    transport_hubs: List[str]
    energy_consumption_mw: float
    waste_generation_tons_day: float
    water_consumption_m3_day: float
    air_quality_index: float
    crime_rate: float
    economic_activity_index: float

@dataclass
class SmartCityService:
    """–ì–æ—Ä–æ–¥—Å–∫–æ–π —Å–µ—Ä–≤–∏—Å"""
    service_id: str
    service_type: str  # transport, energy, safety, environment, healthcare, education
    coverage_area: List[str]  # district_ids
    service_level: float  # 0-1
    user_satisfaction: float  # 0-1
    operational_cost: float
    ai_enhancement_level: float  # 0-1

class SmartCityAISystem:
    def __init__(self):
        self.districts = {}
        self.services = {}
        self.transport_optimizer = TransportOptimizer()
        self.energy_manager = CityEnergyManager()
        self.safety_system = CitySafetySystem()
        self.environment_monitor = EnvironmentMonitor()
        self.citizen_services = CitizenServicesManager()
        self.economic_analyzer = CityEconomicAnalyzer()
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.city_data_platform = CityDataPlatform()
        self.predictive_analytics = CityPredictiveAnalytics()
        self.resource_coordinator = CityResourceCoordinator()
        
    async def optimize_city_operations(self, optimization_scope: str = 'full') -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        optimization_results = []
        
        try:
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ä–∞–π–æ–Ω–∞–º –∏ —Å–µ—Ä–≤–∏—Å–∞–º
            city_state = await self.collect_city_data()
            
            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if optimization_scope in ['full', 'transport']:
                transport_optimization = await self.transport_optimizer.optimize_city_transport(
                    self.districts, city_state
                )
                optimization_results.append(transport_optimization)
            
            # –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if optimization_scope in ['full', 'energy']:
                energy_optimization = await self.energy_manager.optimize_city_energy(
                    self.districts, city_state
                )
                optimization_results.append(energy_optimization)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–æ–ø–æ—Ä—è–¥–æ–∫
            if optimization_scope in ['full', 'safety']:
                safety_optimization = await self.safety_system.optimize_city_safety(
                    self.districts, city_state
                )
                optimization_results.append(safety_optimization)
            
            # –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if optimization_scope in ['full', 'environment']:
                environment_optimization = await self.environment_monitor.optimize_environment(
                    self.districts, city_state
                )
                optimization_results.append(environment_optimization)
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            coordinated_plan = self.resource_coordinator.coordinate_city_resources(
                optimization_results
            )
            
            return {
                'optimization_status': 'completed',
                'individual_optimizations': optimization_results,
                'coordinated_plan': coordinated_plan,
                'citizen_impact_assessment': self.assess_citizen_impact(coordinated_plan),
                'sustainability_metrics': self.calculate_sustainability_metrics(coordinated_plan)
            }
            
        except Exception as e:
            logging.error(f"City optimization error: {e}")
            return {'optimization_status': 'failed', 'error': str(e)}

class TransportOptimizer:
    def __init__(self):
        self.traffic_predictor = TrafficPredictor()
        self.route_optimizer = RouteOptimizer()
        self.public_transport_optimizer = PublicTransportOptimizer()
        
    async def optimize_city_transport(self, districts: Dict, city_state: Dict) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        recommendations = []
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
        traffic_forecast = self.traffic_predictor.predict_traffic_patterns(
            city_state['traffic_data'], city_state['events_calendar']
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
        traffic_light_optimizations = self.optimize_traffic_lights(
            traffic_forecast, city_state['traffic_lights']
        )
        
        for optimization in traffic_light_optimizations:
            recommendations.append({
                'type': 'traffic_light_optimization',
                'intersection': optimization['intersection'],
                'current_timing': optimization['current_timing'],
                'optimized_timing': optimization['optimized_timing'],
                'expected_improvement': optimization['flow_improvement']
            })
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        public_transport_optimizations = self.public_transport_optimizer.optimize_schedules(
            city_state['public_transport_data'], traffic_forecast
        )
        
        for optimization in public_transport_optimizations:
            recommendations.append({
                'type': 'public_transport_optimization',
                'route': optimization['route'],
                'schedule_adjustment': optimization['schedule_adjustment'],
                'capacity_optimization': optimization['capacity_optimization'],
                'passenger_satisfaction_impact': optimization['satisfaction_impact']
            })
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∞–º–∏
        parking_optimizations = self.optimize_parking_management(
            city_state['parking_data'], traffic_forecast
        )
        
        for optimization in parking_optimizations:
            recommendations.append({
                'type': 'parking_optimization',
                'parking_zone': optimization['zone'],
                'dynamic_pricing': optimization['pricing_strategy'],
                'capacity_management': optimization['capacity_strategy'],
                'revenue_impact': optimization['revenue_impact']
            })
        
        expected_benefits = {
            'travel_time_reduction': self.calculate_travel_time_reduction(recommendations),
            'fuel_consumption_reduction': self.calculate_fuel_savings(recommendations),
            'emission_reduction': self.calculate_emission_reduction(recommendations),
            'citizen_satisfaction_improvement': self.calculate_satisfaction_improvement(recommendations)
        }
        
        return {
            'optimization_type': 'transport',
            'recommendations': recommendations,
            'expected_benefits': expected_benefits,
            'implementation_timeline': self.create_transport_timeline(recommendations)
        }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
async def smart_city_example():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    smart_city = SmartCityAISystem()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
    city_config = {
        'districts': [
            {
                'district_id': 'CENTER',
                'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω',
                'area_km2': 25.5,
                'population': 150000,
                'residential_buildings': 2500,
                'commercial_buildings': 800,
                'industrial_facilities': 50,
                'transport_hubs': ['METRO_CENTER', 'BUS_STATION_1'],
                'energy_consumption_mw': 180,
                'waste_generation_tons_day': 450,
                'water_consumption_m3_day': 22500,
                'air_quality_index': 65,
                'crime_rate': 2.1,
                'economic_activity_index': 0.85
            },
            {
                'district_id': 'INDUSTRIAL',
                'name': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ä–∞–π–æ–Ω',
                'area_km2': 45.2,
                'population': 80000,
                'residential_buildings': 1200,
                'commercial_buildings': 300,
                'industrial_facilities': 150,
                'transport_hubs': ['CARGO_TERMINAL', 'INDUSTRIAL_STATION'],
                'energy_consumption_mw': 320,
                'waste_generation_tons_day': 280,
                'water_consumption_m3_day': 12000,
                'air_quality_index': 45,
                'crime_rate': 1.8,
                'economic_activity_index': 0.92
            },
            {
                'district_id': 'RESIDENTIAL',
                'name': '–ñ–∏–ª–æ–π —Ä–∞–π–æ–Ω',
                'area_km2': 35.8,
                'population': 220000,
                'residential_buildings': 4500,
                'commercial_buildings': 400,
                'industrial_facilities': 20,
                'transport_hubs': ['METRO_RESIDENTIAL', 'BUS_STATION_2'],
                'energy_consumption_mw': 150,
                'waste_generation_tons_day': 330,
                'water_consumption_m3_day': 33000,
                'air_quality_index': 72,
                'crime_rate': 1.2,
                'economic_activity_index': 0.68
            }
        ]
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–π–æ–Ω–æ–≤
    for district_config in city_config['districts']:
        district = CityDistrict(**district_config)
        smart_city.districts[district.district_id] = district
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_result = await smart_city.optimize_city_operations('full')
    
    print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –£–ú–ù–û–ì–û –ì–û–†–û–î–ê ===")
    print(f"–°—Ç–∞—Ç—É—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimization_result['optimization_status']}")
    
    if optimization_result['optimization_status'] == 'completed':
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω
        citizen_impact = optimization_result['citizen_impact_assessment']
        print(f"\\n–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω:")
        print(f"–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏: {citizen_impact.get('quality_of_life_improvement', 0):.1%}")
        print(f"–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≥—Ä–∞–∂–¥–∞–Ω: {citizen_impact.get('time_savings_hours_year', 0):,.0f} —á–∞—Å–æ–≤/–≥–æ–¥")
        print(f"–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω: {citizen_impact.get('cost_savings_rub_year', 0):,.0f} —Ä—É–±/–≥–æ–¥")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        sustainability = optimization_result['sustainability_metrics']
        print(f"\\n–ú–µ—Ç—Ä–∏–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏:")
        print(f"–°–Ω–∏–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ CO2: {sustainability.get('co2_reduction_tons_year', 0):,.0f} —Ç–æ–Ω–Ω/–≥–æ–¥")
        print(f"–≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏: {sustainability.get('energy_savings_mwh_year', 0):,.0f} –ú–í—Ç¬∑—á/–≥–æ–¥")
        print(f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç—Ö–æ–¥–æ–≤: {sustainability.get('waste_reduction_tons_year', 0):,.0f} —Ç–æ–Ω–Ω/–≥–æ–¥")

if __name__ == "__main__":
    asyncio.run(smart_city_example())
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –≤–µ—Ä—à–∏–Ω—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –≥–¥–µ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è, –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç –ø—Ä–æ—Å—Ç—É—é —Å—É–º–º—É —Å–≤–æ–∏—Ö —á–∞—Å—Ç–µ–π. –≠—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é —Å–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π, –≤–∫–ª—é—á–∞—é—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ—ç—Ç–∞–ø–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ Agile –∏ DevOps, –∞ —Ç–∞–∫–∂–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ —è–≤–ª—è—é—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–µ—Ç–µ—Ä–æ–≥–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–µ–π—Å—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º —Ö–æ–ª–¥–∏–Ω–≥–æ–º –∏ —É–º–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π, –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–ª–¥–∏–Ω–≥–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤—ã—Ö –≤—ã–≥–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª–µ–µ 45 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –æ–∫–æ–ª–æ 12 –º–ª—Ä–¥ —Ä—É–±–ª–µ–π, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –º–µ–Ω–µ–µ 3 –ª–µ—Ç –∏ ROI –±–æ–ª–µ–µ 400%.

–†–æ—Å—Å–∏–π—Å–∫–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –æ–±–ª–∞–¥–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö AI-–ø—Ä–æ–µ–∫—Ç–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞–ª–∏—á–∏—é –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤, —Ä–∞–∑–≤–∏—Ç–æ–π –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –±–∞–∑–µ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏, –≤–∫–ª—é—á–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–æ–ª–¥–∏–Ω–≥–∏, —Å–æ–∑–¥–∞—é—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π, –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –ø–æ–ª–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏.

–ë—É–¥—É—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö AI-–ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–≤—è–∑–∞–Ω–æ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º, —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ñ–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–∞–º–æ–∞–¥–∞–ø—Ç–∏—Ä—É—é—â–∏—Ö—Å—è AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–µ–ª—è—Ç—å—Å—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —ç—Ç–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ —Å–æ–∑–¥–∞–Ω–∏—é —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–≤—ã—à–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –Ω–æ –∏ —Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–π, —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏. –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–∫–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤.
`
  },

  31: {
    title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ MLOps –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: 120,
    type: "theory",
    module: 6,
    content: `
# –£—Ä–æ–∫ 31: –í–≤–µ–¥–µ–Ω–∏–µ –≤ MLOps –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

## –¶–µ–ª–∏ —É—Ä–æ–∫–∞
- –ü–æ–Ω—è—Ç—å —Ä–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ MLOps –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
- –ò–∑—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É MLOps –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
- –û—Å–≤–æ–∏—Ç—å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã MLOps
- –ü–æ–Ω—è—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ML-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ

## –†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ MLOps

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö MLOps –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö DevOps, –≥–¥–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å –Ω–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, MLOps —Ç—Ä–µ–±—É–µ—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π.

–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ MLOps –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ML-–ø–∞–π–ø–ª–∞–π–Ω–æ–≤, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –±–∏–∑–Ω–µ—Å–∞, –∞ —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

## –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö MLOps

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ MLOps —Å–∏—Å—Ç–µ–º—ã –∏–º–µ—é—Ç —Ä—è–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç –∏—Ö –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –≤—ã—Å–æ–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞—é—Ç 24/7 —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.

–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º (ISO 27001, IEC 61508, –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001), –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å legacy —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ (OPC UA, Modbus, PROFINET), —Ä–∞–±–æ—Ç—É –≤ —É—Å–ª–æ–≤–∏—è—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∏ edge computing, –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä–æ–≥–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ –∏ –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π.

## –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ML-—Å–∏—Å—Ç–µ–º

–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ML-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —ç—Ç–∞–ø–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.

### –≠—Ç–∞–ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≥–∏–ø–æ—Ç–µ–∑. –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–∫–ª—é—á–∞—é—Ç Jupyter Notebooks –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤, MLflow –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤, DVC –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∏ Git –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.

### –≠—Ç–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É

–í–∫–ª—é—á–∞–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞, —Å–æ–∑–¥–∞–Ω–∏–µ production-ready –ø–∞–π–ø–ª–∞–π–Ω–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫—É CI/CD –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ (Docker, Kubernetes), —Å–∏—Å—Ç–µ–º—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ (Apache Airflow, Kubeflow), –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

### –≠—Ç–∞–ø —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ production —Å—Ä–µ–¥–µ —Å –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ blue-green deployment, canary releases, –∏ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

### –≠—Ç–∞–ø —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫. –í–∫–ª—é—á–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ drift'–∞ –¥–∞–Ω–Ω—ã—Ö, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏.

## –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã MLOps

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π. –í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö, –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π, —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.

### –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å

–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—á–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ª—é–±–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è. –î–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞, –¥–∞–Ω–Ω—ã—Ö, –º–æ–¥–µ–ª–µ–π –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è.

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ ML-—Å–∏—Å—Ç–µ–º—ã: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫.

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏

–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π.

## –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ MLOps

### –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏
- **MLflow**: –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º ML
- **Weights & Biases**: –æ–±–ª–∞—á–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
- **Neptune**: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å ML —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏

### –°–∏—Å—Ç–µ–º—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
- **Apache Airflow**: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è workflow
- **Kubeflow**: ML –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è Kubernetes
- **Prefect**: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

### –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- **DVC**: —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
- **Pachyderm**: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- **LakeFS**: Git-–ø–æ–¥–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è data lakes

### –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
- **Seldon Core**: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π –≤ Kubernetes
- **BentoML**: —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ML —Å–µ—Ä–≤–∏—Å–æ–≤
- **TorchServe**: —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è PyTorch –º–æ–¥–µ–ª–µ–π

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ MLOps

### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º (152-–§–ó "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"), –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥—Ä–∞–∂–¥–∞–Ω –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã MLOps —Å–∏—Å—Ç–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä–∞–º–∏.

### –ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ: —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –æ–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (Yandex Cloud, VK Cloud, SberCloud), –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –°–£–ë–î (PostgresPro, ClickHouse, Tarantool), —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä–∞ –∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞–º. –í–∫–ª—é—á–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º, –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ MLOps –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

\`\`\`python
import mlflow
import docker
import kubernetes
from airflow import DAG
from datetime import datetime, timedelta

class IndustrialMLOpsArchitecture:
    """
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ MLOps –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    """
    
    def __init__(self, config):
        self.config = config
        self.mlflow_client = mlflow.tracking.MlflowClient()
        self.docker_client = docker.from_env()
        
    def setup_experiment_tracking(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
        mlflow.set_tracking_uri(self.config['mlflow_uri'])
        mlflow.set_experiment(self.config['experiment_name'])
        
    def create_training_pipeline(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
        default_args = {
            'owner': 'ai-architect',
            'depends_on_past': False,
            'start_date': datetime(2024, 1, 1),
            'email_on_failure': True,
            'email_on_retry': False,
            'retries': 2,
            'retry_delay': timedelta(minutes=5)
        }
        
        dag = DAG(
            'industrial_ml_training',
            default_args=default_args,
            description='–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π ML –ø–∞–π–ø–ª–∞–π–Ω',
            schedule_interval='@daily',
            catchup=False
        )
        
        return dag
        
    def deploy_model(self, model_uri, deployment_config):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ production"""
        # –°–æ–∑–¥–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
        dockerfile = f"""
        FROM python:3.9-slim
        
        COPY requirements.txt .
        RUN pip install -r requirements.txt
        
        COPY model/ /app/model/
        COPY serve.py /app/
        
        WORKDIR /app
        EXPOSE 8080
        
        CMD ["python", "serve.py"]
        """
        
        # –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
        image = self.docker_client.images.build(
            fileobj=dockerfile,
            tag=f"ml-model:{deployment_config['version']}"
        )
        
        return image
        
    def monitor_model_performance(self, model_name):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        metrics = {
            'accuracy': self.calculate_accuracy(),
            'latency': self.measure_latency(),
            'throughput': self.measure_throughput(),
            'data_drift': self.detect_data_drift()
        }
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ MLflow
        with mlflow.start_run():
            for metric_name, value in metrics.items():
                mlflow.log_metric(metric_name, value)
                
        return metrics
        
    def calculate_accuracy(self):
        """–†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        return 0.95
        
    def measure_latency(self):
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        return 50  # –º—Å
        
    def measure_throughput(self):
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è throughput
        return 1000  # –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫
        
    def detect_data_drift(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–∏—Ñ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—Ä–∏—Ñ—Ç–∞
        return 0.02  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥—Ä–∏—Ñ—Ç–∞

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
config = {
    'mlflow_uri': 'http://mlflow-server:5000',
    'experiment_name': 'industrial_quality_control',
    'model_registry': 'production'
}

mlops_arch = IndustrialMLOpsArchitecture(config)
mlops_arch.setup_experiment_tracking()

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥–µ–ª–∏
performance_metrics = mlops_arch.monitor_model_performance('quality_control_v1')
print(f"–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance_metrics}")
\`\`\`

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å MLOps

–í–Ω–µ–¥—Ä–µ–Ω–∏–µ MLOps –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –≤—ã–≥–æ–¥—É —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä—ã–Ω–æ–∫.

### –†–∞—Å—á–µ—Ç ROI –¥–ª—è MLOps

\`\`\`python
class MLOpsROICalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI –¥–ª—è MLOps –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.metrics = {}
        
    def calculate_development_savings(self, 
                                   manual_deployment_time=40,  # —á–∞—Å–æ–≤
                                   automated_deployment_time=2,  # —á–∞—Å–æ–≤
                                   deployments_per_month=8,
                                   developer_hourly_rate=3000):  # —Ä—É–±/—á–∞—Å
        """–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
        
        time_saved_per_deployment = manual_deployment_time - automated_deployment_time
        monthly_time_savings = time_saved_per_deployment * deployments_per_month
        monthly_cost_savings = monthly_time_savings * developer_hourly_rate
        annual_savings = monthly_cost_savings * 12
        
        self.metrics['development_savings'] = annual_savings
        return annual_savings
        
    def calculate_quality_improvements(self,
                                     error_reduction=0.6,  # 60% —Å–Ω–∏–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
                                     avg_error_cost=500000,  # —Ä—É–± –∑–∞ –æ—à–∏–±–∫—É
                                     errors_per_month=2):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        monthly_error_cost = errors_per_month * avg_error_cost
        monthly_savings = monthly_error_cost * error_reduction
        annual_savings = monthly_savings * 12
        
        self.metrics['quality_savings'] = annual_savings
        return annual_savings
        
    def calculate_faster_iteration(self,
                                 model_improvement_value=2000000,  # —Ä—É–±
                                 time_to_market_reduction=0.4):  # 40% —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π"""
        
        annual_savings = model_improvement_value * time_to_market_reduction
        self.metrics['iteration_savings'] = annual_savings
        return annual_savings
        
    def calculate_total_roi(self, implementation_cost=5000000):  # —Ä—É–±
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ ROI"""
        
        total_savings = sum(self.metrics.values())
        roi_percentage = ((total_savings - implementation_cost) / implementation_cost) * 100
        payback_period = implementation_cost / (total_savings / 12)  # –º–µ—Å—è—Ü—ã
        
        return {
            'total_annual_savings': total_savings,
            'implementation_cost': implementation_cost,
            'roi_percentage': roi_percentage,
            'payback_period_months': payback_period,
            'net_benefit': total_savings - implementation_cost
        }

# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
roi_calc = MLOpsROICalculator()

# –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
dev_savings = roi_calc.calculate_development_savings()
quality_savings = roi_calc.calculate_quality_improvements()
iteration_savings = roi_calc.calculate_faster_iteration()

# –û–±—â–∏–π ROI
roi_results = roi_calc.calculate_total_roi()

print("=== –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å MLOps ===")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: {dev_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {quality_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è: {iteration_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {roi_results['total_annual_savings']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi_results['roi_percentage']:.1f}%")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_results['payback_period_months']:.1f} –º–µ—Å—è—Ü–µ–≤")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

MLOps —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ MLOps –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ML-—Å–∏—Å—Ç–µ–º.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ MLOps, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è

1. –°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ MLOps –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
2. –°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è MLOps –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
3. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ ROI –¥–ª—è MLOps –ø—Ä–æ–µ–∫—Ç–∞ –≤ –≤–∞—à–µ–π –æ—Ç—Ä–∞—Å–ª–∏
4. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML-–º–æ–¥–µ–ª–∏ –≤ production

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è MLflow: https://mlflow.org/docs/
- Kubeflow User Guide: https://www.kubeflow.org/docs/
- Google MLOps Best Practices: https://cloud.google.com/architecture/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning
- –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–æ –ò–ë: https://fstec.ru/
`
  },

  32: {
    title: "CI/CD –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
    duration: 140,
    type: "theory",
    module: 6,
    content: `
# –£—Ä–æ–∫ 32: CI/CD –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

## –¶–µ–ª–∏ —É—Ä–æ–∫–∞
- –ü–æ–Ω—è—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É CI/CD –¥–ª—è ML-–ø—Ä–æ–µ–∫—Ç–æ–≤
- –ò–∑—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ ML CI/CD
- –û—Å–≤–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML-—Å–∏—Å—Ç–µ–º
- –ù–∞—É—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ ML CI/CD

Continuous Integration –∏ Continuous Deployment (CI/CD) –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–º–µ—é—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –í ML-–ø—Ä–æ–µ–∫—Ç–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥, –Ω–æ –∏ –¥–∞–Ω–Ω—ã–µ, –º–æ–¥–µ–ª–∏, –∏—Ö –≤–µ—Ä—Å–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ ML CI/CD –≤–∫–ª—é—á–∞–µ—Ç —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: CI –¥–ª—è –∫–æ–¥–∞ (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏), CI –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö), –∏ CI –¥–ª—è –º–æ–¥–µ–ª–µ–π (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π).

## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ ML CI/CD

### –ú–Ω–æ–≥–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ—Å—Ç—å ML-—Å–∏—Å—Ç–µ–º

ML-—Å–∏—Å—Ç–µ–º—ã —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã. –ö–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.

### –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–∞–Ω–Ω—ã—Ö

–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ü–û, ML-—Å–∏—Å—Ç–µ–º—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –¥–∞–∂–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ. –ü–æ—ç—Ç–æ–º—É ML CI/CD –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Ö –∫–∞—á–µ—Å—Ç–≤–∞.

### –ù–µ–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å

ML-–∞–ª–≥–æ—Ä–∏—Ç–º—ã —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

### –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è

–û–±—É—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å —á–∞—Å—ã –∏–ª–∏ –¥–Ω–∏, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å CI/CD –ø–∞–π–ø–ª–∞–π–Ω–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –º–µ–∂–¥—É –ø–æ–ª–Ω–æ—Ç–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ ML CI/CD –ø–∞–π–ø–ª–∞–π–Ω–∞

### –≠—Ç–∞–ø—ã ML CI/CD

–ü–æ–ª–Ω—ã–π ML CI/CD –ø–∞–π–ø–ª–∞–π–Ω –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã:

1. **–¢—Ä–∏–≥–≥–µ—Ä—ã**: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ, –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
2. **–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞**: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –ª–∏–Ω—Ç–∏–Ω–≥, unit-—Ç–µ—Å—Ç—ã
3. **–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö**: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã, –∫–∞—á–µ—Å—Ç–≤–∞, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
4. **–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏**: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
5. **–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏**: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
6. **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã**: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
7. **–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ**: –ø–æ—ç—Ç–∞–ø–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ production
8. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ production

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ML CI/CD

\`\`\`python
import os
import yaml
import pytest
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
import mlflow
import mlflow.sklearn
from evidently import ColumnMapping
from evidently.report import Report
from evidently.metric_preset import DataDriftPreset, DataQualityPreset

class MLCICDPipeline:
    """
    –ü–∞–π–ø–ª–∞–π–Ω CI/CD –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    
    def __init__(self, config_path):
        with open(config_path, 'r') as f:
            self.config = yaml.safe_load(f)
        
        self.model = None
        self.metrics = {}
        
    def validate_code_quality(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        # –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–æ–≤ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        os.system("flake8 src/ --max-line-length=88")
        os.system("black --check src/")
        os.system("mypy src/")
        
        # –ó–∞–ø—É—Å–∫ unit-—Ç–µ—Å—Ç–æ–≤
        pytest_result = pytest.main(["-v", "tests/unit/"])
        
        if pytest_result != 0:
            raise Exception("Unit tests failed")
            
        return True
        
    def validate_data_quality(self, data_path):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        data = pd.read_csv(data_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö
        expected_columns = self.config['data']['expected_columns']
        if not all(col in data.columns for col in expected_columns):
            raise ValueError("Data schema validation failed")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        missing_threshold = self.config['data']['missing_threshold']
        missing_ratio = data.isnull().sum() / len(data)
        
        if (missing_ratio > missing_threshold).any():
            raise ValueError("Data quality validation failed: too many missing values")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        if hasattr(self, 'reference_data'):
            drift_report = Report(metrics=[DataDriftPreset()])
            drift_report.run(reference_data=self.reference_data, current_data=data)
            
            if drift_report.as_dict()['metrics'][0]['result']['dataset_drift']:
                raise ValueError("Data drift detected")
                
        return True
        
    def train_model(self, data_path):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        data = pd.read_csv(data_path)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        feature_columns = self.config['model']['features']
        target_column = self.config['model']['target']
        
        X = data[feature_columns]
        y = data[target_column]
        
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        self.model = RandomForestClassifier(
            **self.config['model']['hyperparameters']
        )
        
        with mlflow.start_run():
            self.model.fit(X_train, y_train)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
            y_pred = self.model.predict(X_test)
            
            accuracy = accuracy_score(y_test, y_pred)
            precision = precision_score(y_test, y_pred, average='weighted')
            recall = recall_score(y_test, y_pred, average='weighted')
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            mlflow.log_metric("accuracy", accuracy)
            mlflow.log_metric("precision", precision)
            mlflow.log_metric("recall", recall)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            mlflow.sklearn.log_model(self.model, "model")
            
            self.metrics = {
                'accuracy': accuracy,
                'precision': precision,
                'recall': recall
            }
            
        return self.model
        
    def validate_model_performance(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        min_accuracy = self.config['model']['min_accuracy']
        min_precision = self.config['model']['min_precision']
        min_recall = self.config['model']['min_recall']
        
        if self.metrics['accuracy'] < min_accuracy:
            raise ValueError(f"Model accuracy {self.metrics['accuracy']:.3f} below threshold {min_accuracy}")
            
        if self.metrics['precision'] < min_precision:
            raise ValueError(f"Model precision {self.metrics['precision']:.3f} below threshold {min_precision}")
            
        if self.metrics['recall'] < min_recall:
            raise ValueError(f"Model recall {self.metrics['recall']:.3f} below threshold {min_recall}")
            
        return True
        
    def run_integration_tests(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        # –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        pytest_result = pytest.main(["-v", "tests/integration/"])
        
        if pytest_result != 0:
            raise Exception("Integration tests failed")
            
        return True
        
    def deploy_model(self, environment='staging'):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if environment == 'staging':
            # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ staging —Å—Ä–µ–¥—É
            self._deploy_to_staging()
        elif environment == 'production':
            # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ production
            self._deploy_to_production()
            
    def _deploy_to_staging(self):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ staging"""
        # –°–æ–∑–¥–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
        dockerfile_content = """
        FROM python:3.9-slim
        
        COPY requirements.txt .
        RUN pip install -r requirements.txt
        
        COPY model/ /app/model/
        COPY src/ /app/src/
        
        WORKDIR /app
        EXPOSE 8080
        
        CMD ["python", "src/serve.py"]
        """
        
        # –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
        os.system("docker build -t ml-model:staging .")
        os.system("docker run -d -p 8080:8080 ml-model:staging")
        
    def _deploy_to_production(self):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ production"""
        # Blue-Green deployment
        os.system("kubectl apply -f k8s/blue-green-deployment.yaml")
        
    def run_full_pipeline(self, data_path):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        try:
            print("1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
            self.validate_code_quality()
            
            print("2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...")
            self.validate_data_quality(data_path)
            
            print("3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            self.train_model(data_path)
            
            print("4. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏...")
            self.validate_model_performance()
            
            print("5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...")
            self.run_integration_tests()
            
            print("6. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ staging...")
            self.deploy_model('staging')
            
            print("Pipeline completed successfully!")
            return True
            
        except Exception as e:
            print(f"Pipeline failed: {str(e)}")
            return False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª (config.yaml)
config_example = """
data:
  expected_columns: ['feature1', 'feature2', 'feature3', 'target']
  missing_threshold: 0.1

model:
  features: ['feature1', 'feature2', 'feature3']
  target: 'target'
  hyperparameters:
    n_estimators: 100
    max_depth: 10
    random_state: 42
  min_accuracy: 0.85
  min_precision: 0.80
  min_recall: 0.80

deployment:
  staging_endpoint: 'http://staging-api:8080'
  production_endpoint: 'http://prod-api:8080'
"""

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open('config.yaml', 'w') as f:
        f.write(config_example)
    
    # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
    pipeline = MLCICDPipeline('config.yaml')
    success = pipeline.run_full_pipeline('data/training_data.csv')
    
    if success:
        print("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ production")
    else:
        print("–ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
\`\`\`

## –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º

### –¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –≤ ML

ML-—Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏—Å—Ç–µ–º—ã.

#### Unit-—Ç–µ—Å—Ç—ã –¥–ª—è ML

\`\`\`python
import pytest
import numpy as np
import pandas as pd
from src.data_preprocessing import DataPreprocessor
from src.model import MLModel

class TestDataPreprocessor:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def setup_method(self):
        self.preprocessor = DataPreprocessor()
        
    def test_handle_missing_values(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        data = pd.DataFrame({
            'feature1': [1, 2, np.nan, 4],
            'feature2': [1, np.nan, 3, 4]
        })
        
        result = self.preprocessor.handle_missing_values(data)
        
        assert not result.isnull().any().any()
        assert len(result) == len(data)
        
    def test_feature_scaling(self):
        """–¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        data = pd.DataFrame({
            'feature1': [1, 2, 3, 4],
            'feature2': [10, 20, 30, 40]
        })
        
        result = self.preprocessor.scale_features(data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        assert abs(result.mean().mean()) < 1e-10
        assert abs(result.std().mean() - 1) < 1e-10
        
    def test_outlier_detection(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤"""
        data = pd.DataFrame({
            'feature1': [1, 2, 3, 4, 100]  # 100 - –≤—ã–±—Ä–æ—Å
        })
        
        outliers = self.preprocessor.detect_outliers(data)
        
        assert len(outliers) == 1
        assert outliers[0] == 4  # –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–æ—Å–∞

class TestMLModel:
    """–¢–µ—Å—Ç—ã –¥–ª—è ML –º–æ–¥–µ–ª–∏"""
    
    def setup_method(self):
        self.model = MLModel()
        
    def test_model_training(self):
        """–¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        X = np.random.rand(100, 5)
        y = np.random.randint(0, 2, 100)
        
        self.model.fit(X, y)
        
        assert hasattr(self.model, 'is_fitted')
        assert self.model.is_fitted
        
    def test_model_prediction(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"""
        X_train = np.random.rand(100, 5)
        y_train = np.random.randint(0, 2, 100)
        X_test = np.random.rand(20, 5)
        
        self.model.fit(X_train, y_train)
        predictions = self.model.predict(X_test)
        
        assert len(predictions) == len(X_test)
        assert all(pred in [0, 1] for pred in predictions)
        
    def test_model_performance_bounds(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—Ü –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
        X = np.random.rand(1000, 5)
        y = (X[:, 0] + X[:, 1] > 1).astype(int)
        
        self.model.fit(X, y)
        predictions = self.model.predict(X)
        accuracy = (predictions == y).mean()
        
        # –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –¥–æ—Å—Ç–∏—á—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        assert accuracy > 0.7
\`\`\`

#### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

\`\`\`python
import requests
import json
import time

class TestMLAPIIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è ML API"""
    
    def setup_method(self):
        self.api_url = "http://localhost:8080"
        self.wait_for_api()
        
    def wait_for_api(self, timeout=30):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                response = requests.get(f"{self.api_url}/health")
                if response.status_code == 200:
                    return
            except requests.exceptions.ConnectionError:
                pass
            time.sleep(1)
        raise Exception("API not ready within timeout")
        
    def test_health_endpoint(self):
        """–¢–µ—Å—Ç health check —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        response = requests.get(f"{self.api_url}/health")
        
        assert response.status_code == 200
        assert response.json()['status'] == 'healthy'
        
    def test_prediction_endpoint(self):
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        test_data = {
            'features': [1.0, 2.0, 3.0, 4.0, 5.0]
        }
        
        response = requests.post(
            f"{self.api_url}/predict",
            json=test_data
        )
        
        assert response.status_code == 200
        result = response.json()
        assert 'prediction' in result
        assert 'confidence' in result
        
    def test_batch_prediction(self):
        """–¢–µ—Å—Ç batch –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        test_data = {
            'features': [
                [1.0, 2.0, 3.0, 4.0, 5.0],
                [2.0, 3.0, 4.0, 5.0, 6.0]
            ]
        }
        
        response = requests.post(
            f"{self.api_url}/predict_batch",
            json=test_data
        )
        
        assert response.status_code == 200
        result = response.json()
        assert len(result['predictions']) == 2
        
    def test_model_metadata(self):
        """–¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏"""
        response = requests.get(f"{self.api_url}/model/metadata")
        
        assert response.status_code == 200
        metadata = response.json()
        assert 'version' in metadata
        assert 'training_date' in metadata
        assert 'metrics' in metadata
\`\`\`

## GitHub Actions –¥–ª—è ML CI/CD

### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub Actions

\`\`\`yaml
# .github/workflows/ml-cicd.yml
name: ML CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.9
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pytest
        pip install -r requirements.txt
        
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Format check with black
      run: black --check src/
      
    - name: Type check with mypy
      run: mypy src/

  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  data-validation:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download training data
      run: |
        python scripts/download_data.py
        
    - name: Validate data quality
      run: |
        python scripts/validate_data.py --data-path data/training_data.csv

  model-training:
    runs-on: ubuntu-latest
    needs: data-validation
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Train model
      run: |
        python scripts/train_model.py --config config/training_config.yaml
        
    - name: Validate model performance
      run: |
        python scripts/validate_model.py --model-path models/latest_model.pkl

  integration-tests:
    runs-on: ubuntu-latest
    needs: model-training
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start ML API
      run: |
        python src/serve.py &
        sleep 30
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v

  deploy-staging:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t ml-model:${{ github.sha }} .
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # –ó–¥–µ—Å—å –∫–æ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t ml-model:${{ github.sha }} .
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # –ó–¥–µ—Å—å –∫–æ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ production
\`\`\`

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥ –≤ CI/CD

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞

\`\`\`python
import time
import logging
from datetime import datetime
from dataclasses import dataclass
from typing import Dict, List, Optional
import requests

@dataclass
class PipelineMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ CI/CD"""
    pipeline_id: str
    start_time: datetime
    end_time: Optional[datetime] = None
    status: str = "running"
    stages: Dict[str, Dict] = None
    
    def __post_init__(self):
        if self.stages is None:
            self.stages = {}

class PipelineMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–π–ø–ª–∞–π–Ω–∞ CI/CD"""
    
    def __init__(self, webhook_url: str = None):
        self.webhook_url = webhook_url
        self.logger = logging.getLogger(__name__)
        
    def start_pipeline(self, pipeline_id: str) -> PipelineMetrics:
        """–ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        metrics = PipelineMetrics(
            pipeline_id=pipeline_id,
            start_time=datetime.now()
        )
        
        self.logger.info(f"Pipeline {pipeline_id} started")
        return metrics
        
    def start_stage(self, metrics: PipelineMetrics, stage_name: str):
        """–ù–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        metrics.stages[stage_name] = {
            'start_time': datetime.now(),
            'status': 'running'
        }
        
        self.logger.info(f"Stage {stage_name} started")
        
    def complete_stage(self, metrics: PipelineMetrics, stage_name: str, 
                      status: str = "success", error: str = None):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        if stage_name in metrics.stages:
            metrics.stages[stage_name].update({
                'end_time': datetime.now(),
                'status': status,
                'error': error
            })
            
            duration = (metrics.stages[stage_name]['end_time'] - 
                       metrics.stages[stage_name]['start_time']).total_seconds()
            
            self.logger.info(f"Stage {stage_name} completed with status {status} in {duration:.2f}s")
            
            if status == "failed" and self.webhook_url:
                self._send_alert(f"Stage {stage_name} failed: {error}")
                
    def complete_pipeline(self, metrics: PipelineMetrics, status: str = "success"):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        metrics.end_time = datetime.now()
        metrics.status = status
        
        duration = (metrics.end_time - metrics.start_time).total_seconds()
        self.logger.info(f"Pipeline {metrics.pipeline_id} completed with status {status} in {duration:.2f}s")
        
        if status == "failed" and self.webhook_url:
            self._send_alert(f"Pipeline {metrics.pipeline_id} failed")
            
    def _send_alert(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        try:
            payload = {
                "text": f"üö® ML Pipeline Alert: {message}",
                "timestamp": datetime.now().isoformat()
            }
            requests.post(self.webhook_url, json=payload, timeout=10)
        except Exception as e:
            self.logger.error(f"Failed to send alert: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def monitored_pipeline():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    monitor = PipelineMonitor(webhook_url="https://hooks.slack.com/services/...")
    metrics = monitor.start_pipeline("ml-pipeline-001")
    
    try:
        # –≠—Ç–∞–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞
        monitor.start_stage(metrics, "code_validation")
        time.sleep(2)  # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        monitor.complete_stage(metrics, "code_validation", "success")
        
        # –≠—Ç–∞–ø –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        monitor.start_stage(metrics, "model_training")
        time.sleep(10)  # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        monitor.complete_stage(metrics, "model_training", "success")
        
        # –≠—Ç–∞–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        monitor.start_stage(metrics, "testing")
        time.sleep(3)  # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        monitor.complete_stage(metrics, "testing", "success")
        
        monitor.complete_pipeline(metrics, "success")
        
    except Exception as e:
        monitor.complete_pipeline(metrics, "failed")
        raise e
        
    return metrics
\`\`\`

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ ML CI/CD

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö ML CI/CD –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—è –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001 –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–°–¢–≠–ö –†–æ—Å—Å–∏–∏.

### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: GitLab CE –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–º, —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –æ–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è, –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

### –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å 152-–§–ó —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã CI/CD —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä–∞–º–∏.

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ML CI/CD

### –†–∞—Å—á–µ—Ç ROI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

\`\`\`python
class MLCICDROICalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI –¥–ª—è ML CI/CD"""
    
    def calculate_automation_savings(self,
                                   manual_deployment_hours=16,
                                   automated_deployment_hours=1,
                                   deployments_per_month=12,
                                   developer_hourly_rate=3500):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        
        hours_saved_per_deployment = manual_deployment_hours - automated_deployment_hours
        monthly_hours_saved = hours_saved_per_deployment * deployments_per_month
        annual_savings = monthly_hours_saved * 12 * developer_hourly_rate
        
        return annual_savings
        
    def calculate_quality_improvements(self,
                                     bug_reduction_rate=0.7,
                                     avg_bug_cost=200000,
                                     bugs_per_month=3):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        monthly_bug_cost = bugs_per_month * avg_bug_cost
        monthly_savings = monthly_bug_cost * bug_reduction_rate
        annual_savings = monthly_savings * 12
        
        return annual_savings
        
    def calculate_faster_feedback(self,
                                feature_value=1500000,
                                feedback_acceleration=0.5):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        
        annual_savings = feature_value * feedback_acceleration * 4  # 4 –∫–≤–∞—Ä—Ç–∞–ª–∞
        return annual_savings

# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
roi_calc = MLCICDROICalculator()

automation_savings = roi_calc.calculate_automation_savings()
quality_savings = roi_calc.calculate_quality_improvements()
feedback_savings = roi_calc.calculate_faster_feedback()

total_savings = automation_savings + quality_savings + feedback_savings
implementation_cost = 8000000  # 8 –º–ª–Ω —Ä—É–±

roi_percentage = ((total_savings - implementation_cost) / implementation_cost) * 100
payback_months = implementation_cost / (total_savings / 12)

print("=== ROI ML CI/CD ===")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {automation_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {quality_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è: {feedback_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi_percentage:.1f}%")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–µ–≤")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

CI/CD –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ML-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ ML CI/CD –ø–∞–π–ø–ª–∞–π–Ω—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫–∏ –∏ –ø–æ–≤—ã—à–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É ML CI/CD –∏ —É–º–µ—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ DevOps –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏, –º–æ–¥–µ–ª—è–º–∏ –∏ –∏—Ö –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è

1. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π CI/CD –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è ML-–ø—Ä–æ–µ–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GitHub Actions
2. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥ –¥–ª—è ML –ø–∞–π–ø–ª–∞–π–Ω–∞
4. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ ROI –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è ML CI/CD –≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

- GitHub Actions Documentation: https://docs.github.com/en/actions
- MLOps Community: https://mlops.community/
- Continuous Delivery for Machine Learning: https://martinfowler.com/articles/cd4ml.html
- –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001: https://fstec.ru/
`
  },

  33: {
    title: "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è ML-—Å–∏—Å—Ç–µ–º",
    duration: 160,
    type: "theory",
    module: 6,
    content: `
# –£—Ä–æ–∫ 33: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è ML-—Å–∏—Å—Ç–µ–º

## –¶–µ–ª–∏ —É—Ä–æ–∫–∞
- –ü–æ–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ ML-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- –ò–∑—É—á–∏—Ç—å Docker –¥–ª—è ML-—Å–∏—Å—Ç–µ–º
- –û—Å–≤–æ–∏—Ç—å Kubernetes –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ ML-—Å–µ—Ä–≤–∏—Å–æ–≤
- –ù–∞—É—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ ML-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—é ML-—Å–∏—Å—Ç–µ–º

–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ML-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ. –û–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å –∏ –ø–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å ML-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ production.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ ML-—Å–∏—Å—Ç–µ–º—ã –∏–º–µ—é—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Python, –±–∏–±–ª–∏–æ—Ç–µ–∫ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, CUDA –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –¥–ª—è GPU, –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–µ–π –º–∞—à–∏–Ω–µ" –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

## –û—Å–Ω–æ–≤—ã Docker –¥–ª—è ML

### –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ ML-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

ML-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏. –í–æ-–ø–µ—Ä–≤—ã—Ö, –æ–Ω–∏ —á–∞—Å—Ç–æ —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π. –í–æ-–≤—Ç–æ—Ä—ã—Ö, –∏–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ—Å—Ç—É–ø –∫ GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π. –í-—Ç—Ä–µ—Ç—å–∏—Ö, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö.

### –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤

\`\`\`dockerfile
# –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è ML-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
FROM nvidia/cuda:11.8-devel-ubuntu20.04 as builder

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    python3.9 \\
    python3.9-dev \\
    python3-pip \\
    build-essential \\
    cmake \\
    git \\
    && rm -rf /var/lib/apt/lists/*

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
RUN python3.9 -m pip install --upgrade pip
RUN python3.9 -m pip install virtualenv
RUN python3.9 -m virtualenv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
FROM nvidia/cuda:11.8-runtime-ubuntu20.04

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ runtime –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    python3.9 \\
    python3.9-distutils \\
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN groupadd -r mluser && useradd -r -g mluser mluser
RUN mkdir -p /app && chown mluser:mluser /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY --chown=mluser:mluser src/ /app/src/
COPY --chown=mluser:mluser models/ /app/models/
COPY --chown=mluser:mluser config/ /app/config/

WORKDIR /app
USER mluser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONPATH=/app
ENV MODEL_PATH=/app/models
ENV CONFIG_PATH=/app/config

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\
    CMD python3.9 -c "import requests; requests.get('http://localhost:8080/health')"

# –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Ä—Ç–æ–≤
EXPOSE 8080

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CMD ["python3.9", "src/serve.py"]
\`\`\`

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤

\`\`\`python
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ Docker —Å–ª–æ–µ–≤
import subprocess
import json
from typing import List, Dict

class DockerImageAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ Docker –æ–±—Ä–∞–∑–æ–≤"""
    
    def __init__(self, image_name: str):
        self.image_name = image_name
        
    def analyze_layers(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤ –æ–±—Ä–∞–∑–∞"""
        cmd = f"docker history {self.image_name} --format json"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        layers = []
        for line in result.stdout.strip().split('\\n'):
            if line:
                layer = json.loads(line)
                layers.append({
                    'id': layer['ID'][:12],
                    'created_by': layer['CreatedBy'][:50] + '...' if len(layer['CreatedBy']) > 50 else layer['CreatedBy'],
                    'size': self._parse_size(layer['Size'])
                })
        
        return layers
        
    def _parse_size(self, size_str: str) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç—ã"""
        if size_str == '0B':
            return 0
            
        units = {'B': 1, 'KB': 1024, 'MB': 1024**2, 'GB': 1024**3}
        
        for unit, multiplier in units.items():
            if size_str.endswith(unit):
                return int(float(size_str[:-len(unit)]) * multiplier)
        
        return 0
        
    def get_optimization_suggestions(self) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        layers = self.analyze_layers()
        suggestions = []
        
        total_size = sum(layer['size'] for layer in layers)
        
        if total_size > 2 * 1024**3:  # > 2GB
            suggestions.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–π —Å–±–æ—Ä–∫–∏")
            
        large_layers = [l for l in layers if l['size'] > 500 * 1024**2]  # > 500MB
        if large_layers:
            suggestions.append("–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ RUN –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–µ–≤")
            
        if any('apt-get update' in l['created_by'] for l in layers):
            suggestions.append("–î–æ–±–∞–≤—å—Ç–µ rm -rf /var/lib/apt/lists/* –ø–æ—Å–ª–µ apt-get install")
            
        return suggestions

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
analyzer = DockerImageAnalyzer("ml-model:latest")
layers = analyzer.analyze_layers()
suggestions = analyzer.get_optimization_suggestions()

print("=== –ê–Ω–∞–ª–∏–∑ Docker –æ–±—Ä–∞–∑–∞ ===")
for layer in layers:
    print(f"{layer['id']}: {layer['size']/1024**2:.1f}MB - {layer['created_by']}")

print("\\n=== –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ===")
for suggestion in suggestions:
    print(f"- {suggestion}")
\`\`\`

## Kubernetes –¥–ª—è ML-—Å–∏—Å—Ç–µ–º

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ ML-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ Kubernetes

Kubernetes –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ—â–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ ML-—Å–µ—Ä–≤–∏—Å–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –Ω–∞–≥—Ä—É–∑–∫–∏, –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏. ML-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ Kubernetes –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

### –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏ –≤ Kubernetes

\`\`\`yaml
# ml-model-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-model-deployment
  labels:
    app: ml-model
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ml-model
  template:
    metadata:
      labels:
        app: ml-model
        version: v1.0.0
    spec:
      containers:
      - name: ml-model
        image: ml-model:v1.0.0
        ports:
        - containerPort: 8080
        env:
        - name: MODEL_PATH
          value: "/app/models"
        - name: LOG_LEVEL
          value: "INFO"
        - name: WORKERS
          value: "4"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
          limits:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
          readOnly: true
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-pvc
      - name: config-volume
        configMap:
          name: ml-model-config
      nodeSelector:
        gpu: "true"
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: ml-model-service
  labels:
    app: ml-model
spec:
  selector:
    app: ml-model
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ml-model-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - ml-api.company.com
    secretName: ml-api-tls
  rules:
  - host: ml-api.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ml-model-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-model-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-model-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
\`\`\`

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏

\`\`\`yaml
# ml-model-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ml-model-config
data:
  app.yaml: |
    model:
      name: "production_model_v1"
      version: "1.0.0"
      batch_size: 32
      max_sequence_length: 512
    
    inference:
      timeout: 30
      max_concurrent_requests: 100
      enable_caching: true
      cache_ttl: 3600
    
    logging:
      level: "INFO"
      format: "json"
      
    monitoring:
      enable_metrics: true
      metrics_port: 9090

---
apiVersion: v1
kind: Secret
metadata:
  name: ml-model-secrets
type: Opaque
data:
  # Base64 encoded values
  database_url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkYi5leGFtcGxlLmNvbS9tbGRi
  api_key: YWJjZGVmZ2hpams=
  model_encryption_key: bXlfc2VjcmV0X2tleV8xMjM=

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-pvc
spec:
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
\`\`\`

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

\`\`\`python
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus –∏ Grafana
from prometheus_client import Counter, Histogram, Gauge, start_http_server
import time
import logging
import json
from datetime import datetime

class MLModelMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è ML-–º–æ–¥–µ–ª–∏"""
    
    def __init__(self):
        # –°—á–µ—Ç—á–∏–∫–∏
        self.prediction_counter = Counter(
            'ml_predictions_total',
            'Total number of predictions made',
            ['model_version', 'status']
        )
        
        self.error_counter = Counter(
            'ml_errors_total',
            'Total number of errors',
            ['error_type', 'model_version']
        )
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        self.prediction_duration = Histogram(
            'ml_prediction_duration_seconds',
            'Time spent on predictions',
            ['model_version'],
            buckets=[0.1, 0.5, 1.0, 2.0, 5.0, 10.0]
        )
        
        self.batch_size_histogram = Histogram(
            'ml_batch_size',
            'Batch size distribution',
            ['model_version'],
            buckets=[1, 5, 10, 20, 50, 100]
        )
        
        # –ì–µ–π–¥–∂–∏
        self.model_accuracy = Gauge(
            'ml_model_accuracy',
            'Current model accuracy',
            ['model_version']
        )
        
        self.active_connections = Gauge(
            'ml_active_connections',
            'Number of active connections'
        )
        
        self.memory_usage = Gauge(
            'ml_memory_usage_bytes',
            'Memory usage in bytes'
        )
        
    def record_prediction(self, model_version: str, duration: float, 
                         batch_size: int, status: str = 'success'):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        self.prediction_counter.labels(
            model_version=model_version, 
            status=status
        ).inc()
        
        self.prediction_duration.labels(
            model_version=model_version
        ).observe(duration)
        
        self.batch_size_histogram.labels(
            model_version=model_version
        ).observe(batch_size)
        
    def record_error(self, error_type: str, model_version: str):
        """–ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏"""
        self.error_counter.labels(
            error_type=error_type,
            model_version=model_version
        ).inc()
        
    def update_model_accuracy(self, model_version: str, accuracy: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        self.model_accuracy.labels(model_version=model_version).set(accuracy)

class StructuredLogger:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ML-—Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self, service_name: str):
        self.service_name = service_name
        self.logger = logging.getLogger(service_name)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)
        
    def log_prediction(self, request_id: str, model_version: str, 
                      input_shape: tuple, prediction_time: float, 
                      confidence: float = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        log_entry = {
            'timestamp': datetime.utcnow().isoformat(),
            'service': self.service_name,
            'event_type': 'prediction',
            'request_id': request_id,
            'model_version': model_version,
            'input_shape': input_shape,
            'prediction_time': prediction_time,
            'confidence': confidence
        }
        
        self.logger.info(json.dumps(log_entry))
        
    def log_error(self, request_id: str, error_type: str, error_message: str, 
                  model_version: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        log_entry = {
            'timestamp': datetime.utcnow().isoformat(),
            'service': self.service_name,
            'event_type': 'error',
            'request_id': request_id,
            'error_type': error_type,
            'error_message': error_message,
            'model_version': model_version
        }
        
        self.logger.error(json.dumps(log_entry))

# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ ML-—Å–µ—Ä–≤–∏—Å
class MLService:
    """ML-—Å–µ—Ä–≤–∏—Å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    
    def __init__(self):
        self.metrics = MLModelMetrics()
        self.logger = StructuredLogger('ml-model-service')
        self.model_version = "v1.0.0"
        
        # –ó–∞–ø—É—Å–∫ Prometheus –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
        start_http_server(9090)
        
    def predict(self, data, request_id: str):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        start_time = time.time()
        
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            batch_size = len(data) if hasattr(data, '__len__') else 1
            
            # –ó–¥–µ—Å—å –∫–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
            prediction = self._run_inference(data)
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            duration = time.time() - start_time
            
            # –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫
            self.metrics.record_prediction(
                model_version=self.model_version,
                duration=duration,
                batch_size=batch_size,
                status='success'
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.logger.log_prediction(
                request_id=request_id,
                model_version=self.model_version,
                input_shape=data.shape if hasattr(data, 'shape') else (batch_size,),
                prediction_time=duration,
                confidence=0.95  # –ü—Ä–∏–º–µ—Ä
            )
            
            return prediction
            
        except Exception as e:
            # –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏
            self.metrics.record_error(
                error_type=type(e).__name__,
                model_version=self.model_version
            )
            
            self.logger.log_error(
                request_id=request_id,
                error_type=type(e).__name__,
                error_message=str(e),
                model_version=self.model_version
            )
            
            raise e
            
    def _run_inference(self, data):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏"""
        # –ó–¥–µ—Å—å –∫–æ–¥ –º–æ–¥–µ–ª–∏
        time.sleep(0.1)  # –°–∏–º—É–ª—è—Ü–∏—è
        return {"prediction": "example"}
\`\`\`

## Helm –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ML-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏

### –°–æ–∑–¥–∞–Ω–∏–µ Helm Chart –¥–ª—è ML-–º–æ–¥–µ–ª–∏

\`\`\`yaml
# Chart.yaml
apiVersion: v2
name: ml-model
description: A Helm chart for ML model deployment
type: application
version: 0.1.0
appVersion: "1.0.0"

dependencies:
- name: postgresql
  version: "11.9.13"
  repository: "https://charts.bitnami.com/bitnami"
  condition: postgresql.enabled
- name: redis
  version: "17.3.7"
  repository: "https://charts.bitnami.com/bitnami"
  condition: redis.enabled
\`\`\`

\`\`\`yaml
# values.yaml
replicaCount: 3

image:
  repository: ml-model
  pullPolicy: IfNotPresent
  tag: "v1.0.0"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
  hosts:
    - host: ml-api.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: ml-api-tls
      hosts:
        - ml-api.local

resources:
  limits:
    cpu: 2000m
    memory: 4Gi
    nvidia.com/gpu: 1
  requests:
    cpu: 1000m
    memory: 2Gi
    nvidia.com/gpu: 1

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector:
  gpu: "true"

tolerations:
  - key: "nvidia.com/gpu"
    operator: "Exists"
    effect: "NoSchedule"

affinity: {}

# ML-specific configurations
model:
  name: "production_model"
  version: "v1.0.0"
  path: "/app/models"
  
inference:
  batchSize: 32
  timeout: 30
  maxConcurrentRequests: 100

monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s

# Dependencies
postgresql:
  enabled: true
  auth:
    postgresPassword: "secretpassword"
    database: "mldb"
  primary:
    persistence:
      enabled: true
      size: 20Gi

redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
\`\`\`

\`\`\`yaml
# templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ml-model.fullname" . }}
  labels:
    {{- include "ml-model.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ml-model.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ml-model.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ml-model.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: MODEL_NAME
              value: {{ .Values.model.name }}
            - name: MODEL_VERSION
              value: {{ .Values.model.version }}
            - name: MODEL_PATH
              value: {{ .Values.model.path }}
            - name: BATCH_SIZE
              value: "{{ .Values.inference.batchSize }}"
            - name: TIMEOUT
              value: "{{ .Values.inference.timeout }}"
            - name: MAX_CONCURRENT_REQUESTS
              value: "{{ .Values.inference.maxConcurrentRequests }}"
            {{- if .Values.postgresql.enabled }}
            - name: DATABASE_URL
              value: "postgresql://postgres:{{ .Values.postgresql.auth.postgresPassword }}@{{ include "ml-model.fullname" . }}-postgresql:5432/{{ .Values.postgresql.auth.database }}"
            {{- end }}
            {{- if .Values.redis.enabled }}
            - name: REDIS_URL
              value: "redis://{{ include "ml-model.fullname" . }}-redis-master:6379"
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: model-storage
              mountPath: {{ .Values.model.path }}
              readOnly: true
      volumes:
        - name: model-storage
          persistentVolumeClaim:
            claimName: {{ include "ml-model.fullname" . }}-model-pvc
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
\`\`\`

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

### –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π

\`\`\`python
import subprocess
import json
from typing import Dict, List

class ContainerSecurityScanner:
    """–°–∫–∞–Ω–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.scanners = ['trivy', 'clair', 'anchore']
        
    def scan_with_trivy(self, image_name: str) -> Dict:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Trivy"""
        cmd = f"trivy image --format json {image_name}"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            return json.loads(result.stdout)
        else:
            raise Exception(f"Trivy scan failed: {result.stderr}")
            
    def analyze_vulnerabilities(self, scan_result: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        vulnerabilities = {
            'critical': 0,
            'high': 0,
            'medium': 0,
            'low': 0,
            'details': []
        }
        
        for result in scan_result.get('Results', []):
            for vuln in result.get('Vulnerabilities', []):
                severity = vuln.get('Severity', '').lower()
                if severity in vulnerabilities:
                    vulnerabilities[severity] += 1
                    
                vulnerabilities['details'].append({
                    'id': vuln.get('VulnerabilityID'),
                    'severity': severity,
                    'package': vuln.get('PkgName'),
                    'version': vuln.get('InstalledVersion'),
                    'fixed_version': vuln.get('FixedVersion'),
                    'description': vuln.get('Description', '')[:100] + '...'
                })
                
        return vulnerabilities
        
    def generate_security_report(self, image_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        scan_result = self.scan_with_trivy(image_name)
        vulnerabilities = self.analyze_vulnerabilities(scan_result)
        
        report = f"""
=== –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ {image_name} ===

–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {vulnerabilities['critical']}
–í—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {vulnerabilities['high']}
–°—Ä–µ–¥–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {vulnerabilities['medium']}
–ù–∏–∑–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {vulnerabilities['low']}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
"""
        
        if vulnerabilities['critical'] > 0:
            report += "- –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏\\n"
            
        if vulnerabilities['high'] > 0:
            report += "- –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ\\n"
            
        if vulnerabilities['critical'] == 0 and vulnerabilities['high'] == 0:
            report += "- –û–±—Ä–∞–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\\n"
            
        return report

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
scanner = ContainerSecurityScanner()
report = scanner.generate_security_report("ml-model:latest")
print(report)
\`\`\`

### –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Pod Security Standards

\`\`\`yaml
# pod-security-policy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ml-model-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ml-model-netpol
spec:
  podSelector:
    matchLabels:
      app: ml-model
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
\`\`\`

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è ML-—Å–∏—Å—Ç–µ–º –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –§–°–¢–≠–ö –†–æ—Å—Å–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–∫–æ–µ –∏ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ, –∞ —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏ —Ä–µ–µ—Å—Ç—Ä–æ–≤ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å Yadro Container Platform, –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Kubernetes –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã, –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ–µ—Å—Ç—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏

### –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏

\`\`\`python
class ContainerizationROICalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def calculate_infrastructure_savings(self,
                                       vm_count_before=20,
                                       vm_count_after=8,
                                       vm_monthly_cost=15000):
        """–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
        monthly_savings = (vm_count_before - vm_count_after) * vm_monthly_cost
        annual_savings = monthly_savings * 12
        return annual_savings
        
    def calculate_deployment_efficiency(self,
                                      deployment_time_before_hours=8,
                                      deployment_time_after_hours=0.5,
                                      deployments_per_month=24,
                                      engineer_hourly_rate=3500):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        time_saved_per_deployment = deployment_time_before_hours - deployment_time_after_hours
        monthly_time_saved = time_saved_per_deployment * deployments_per_month
        annual_savings = monthly_time_saved * 12 * engineer_hourly_rate
        return annual_savings
        
    def calculate_scaling_benefits(self,
                                 manual_scaling_incidents=12,
                                 incident_cost=500000,
                                 automation_effectiveness=0.8):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        prevented_incidents = manual_scaling_incidents * automation_effectiveness
        annual_savings = prevented_incidents * incident_cost
        return annual_savings

# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
roi_calc = ContainerizationROICalculator()

infrastructure_savings = roi_calc.calculate_infrastructure_savings()
deployment_savings = roi_calc.calculate_deployment_efficiency()
scaling_savings = roi_calc.calculate_scaling_benefits()

total_savings = infrastructure_savings + deployment_savings + scaling_savings
implementation_cost = 12000000  # 12 –º–ª–Ω —Ä—É–±

roi_percentage = ((total_savings - implementation_cost) / implementation_cost) * 100
payback_months = implementation_cost / (total_savings / 12)

print("=== ROI –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ ===")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {infrastructure_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏: {deployment_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {scaling_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi_percentage:.1f}%")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–µ–≤")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è —è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ML-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ. –û–Ω–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∏–∑–æ–ª—è—Ü–∏—é, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è production ML-—Å–µ—Ä–≤–∏—Å–æ–≤.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ ML-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —É–º–µ—Ç—å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞ –±–∞–∑–µ Kubernetes, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–µ –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è

1. –°–æ–∑–¥–∞–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Docker –æ–±—Ä–∞–∑ –¥–ª—è ML-–º–æ–¥–µ–ª–∏
2. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ML-—Å–µ—Ä–≤–∏—Å–∞
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π ML-—Å–∏—Å—Ç–µ–º—ã
4. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ ROI –æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ ML-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

- Docker Documentation: https://docs.docker.com/
- Kubernetes Documentation: https://kubernetes.io/docs/
- Helm Documentation: https://helm.sh/docs/
- –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001: https://fstec.ru/
`
  },

  34: {
    title: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º –≤ production",
    duration: 180,
    type: "theory",
    module: 6,
    content: `
# –£—Ä–æ–∫ 34: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º –≤ production

## –¶–µ–ª–∏ —É—Ä–æ–∫–∞
- –ü–æ–Ω—è—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML-—Å–∏—Å—Ç–µ–º
- –ò–∑—É—á–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏
- –û—Å–≤–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
- –ù–∞—É—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è ML

## –í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML-—Å–∏—Å—Ç–µ–º

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML-—Å–∏—Å—Ç–µ–º –≤ production —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ü–æ–º–∏–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (CPU, –ø–∞–º—è—Ç—å, —Å–µ—Ç—å), ML-—Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏, –∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥—Ä–µ–π—Ñ–∞.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ ML-–º–æ–¥–µ–ª–∏ –¥–µ–≥—Ä–∞–¥–∏—Ä—É—é—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML

### –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML –¥–æ–ª–∂–Ω–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π: –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π, —Å–µ—Ä–≤–∏—Å–Ω—ã–π, –º–æ–¥–µ–ª—å–Ω—ã–π, –∏ –±–∏–∑–Ω–µ—Å–æ–≤—ã–π. –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ –∏ –∞–ª–µ—Ä—Ç–æ–≤.

\`\`\`python
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass
from abc import ABC, abstractmethod
import json
import asyncio
from scipy import stats
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import warnings

@dataclass
class MonitoringMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    name: str
    value: float
    timestamp: datetime
    threshold: Optional[float] = None
    status: str = "normal"  # normal, warning, critical
    metadata: Dict = None

class MLMonitoringSystem:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML"""
    
    def __init__(self, model_name: str, model_version: str):
        self.model_name = model_name
        self.model_version = model_version
        self.metrics_history = []
        self.alerts = []
        self.logger = self._setup_logger()
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        self.thresholds = {
            'accuracy_drop': 0.05,  # 5% —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
            'latency_increase': 2.0,  # 2x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            'error_rate': 0.01,  # 1% –æ—à–∏–±–æ–∫
            'data_drift_score': 0.3,  # –ü–æ—Ä–æ–≥ –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö
            'prediction_drift_score': 0.2  # –ü–æ—Ä–æ–≥ –¥—Ä–µ–π—Ñ–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        }
        
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger(f"ml_monitoring_{self.model_name}")
        logger.setLevel(logging.INFO)
        
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        
        return logger
        
    def collect_infrastructure_metrics(self) -> Dict[str, MonitoringMetric]:
        """–°–±–æ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        # –°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        metrics = {
            'cpu_usage': MonitoringMetric(
                name='cpu_usage',
                value=np.random.uniform(20, 80),
                timestamp=datetime.now(),
                threshold=80.0
            ),
            'memory_usage': MonitoringMetric(
                name='memory_usage',
                value=np.random.uniform(30, 90),
                timestamp=datetime.now(),
                threshold=85.0
            ),
            'gpu_usage': MonitoringMetric(
                name='gpu_usage',
                value=np.random.uniform(40, 95),
                timestamp=datetime.now(),
                threshold=90.0
            ),
            'disk_usage': MonitoringMetric(
                name='disk_usage',
                value=np.random.uniform(10, 70),
                timestamp=datetime.now(),
                threshold=80.0
            )
        }
        
        return metrics
        
    def collect_service_metrics(self, 
                              request_count: int,
                              error_count: int,
                              avg_latency: float) -> Dict[str, MonitoringMetric]:
        """–°–±–æ—Ä —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        error_rate = error_count / max(request_count, 1)
        
        metrics = {
            'request_rate': MonitoringMetric(
                name='request_rate',
                value=request_count,
                timestamp=datetime.now()
            ),
            'error_rate': MonitoringMetric(
                name='error_rate',
                value=error_rate,
                timestamp=datetime.now(),
                threshold=self.thresholds['error_rate']
            ),
            'avg_latency': MonitoringMetric(
                name='avg_latency',
                value=avg_latency,
                timestamp=datetime.now(),
                threshold=1.0  # 1 —Å–µ–∫—É–Ω–¥–∞
            )
        }
        
        return metrics
        
    def collect_model_metrics(self,
                            predictions: np.ndarray,
                            ground_truth: Optional[np.ndarray] = None,
                            prediction_time: float = 0.0) -> Dict[str, MonitoringMetric]:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏"""
        metrics = {}
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        metrics['prediction_count'] = MonitoringMetric(
            name='prediction_count',
            value=len(predictions),
            timestamp=datetime.now()
        )
        
        metrics['avg_prediction_time'] = MonitoringMetric(
            name='avg_prediction_time',
            value=prediction_time,
            timestamp=datetime.now(),
            threshold=0.5  # 500ms
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        if len(predictions) > 0:
            metrics['prediction_mean'] = MonitoringMetric(
                name='prediction_mean',
                value=float(np.mean(predictions)),
                timestamp=datetime.now()
            )
            
            metrics['prediction_std'] = MonitoringMetric(
                name='prediction_std',
                value=float(np.std(predictions)),
                timestamp=datetime.now()
            )
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å ground truth)
        if ground_truth is not None and len(ground_truth) > 0:
            if len(np.unique(ground_truth)) <= 10:  # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
                accuracy = accuracy_score(ground_truth, predictions)
                precision = precision_score(ground_truth, predictions, average='weighted', zero_division=0)
                recall = recall_score(ground_truth, predictions, average='weighted', zero_division=0)
                f1 = f1_score(ground_truth, predictions, average='weighted', zero_division=0)
                
                metrics.update({
                    'accuracy': MonitoringMetric(
                        name='accuracy',
                        value=accuracy,
                        timestamp=datetime.now(),
                        threshold=0.8
                    ),
                    'precision': MonitoringMetric(
                        name='precision',
                        value=precision,
                        timestamp=datetime.now()
                    ),
                    'recall': MonitoringMetric(
                        name='recall',
                        value=recall,
                        timestamp=datetime.now()
                    ),
                    'f1_score': MonitoringMetric(
                        name='f1_score',
                        value=f1,
                        timestamp=datetime.now()
                    )
                })
            else:  # –†–µ–≥—Ä–µ—Å—Å–∏—è
                mse = np.mean((ground_truth - predictions) ** 2)
                mae = np.mean(np.abs(ground_truth - predictions))
                
                metrics.update({
                    'mse': MonitoringMetric(
                        name='mse',
                        value=mse,
                        timestamp=datetime.now()
                    ),
                    'mae': MonitoringMetric(
                        name='mae',
                        value=mae,
                        timestamp=datetime.now()
                    )
                })
        
        return metrics
        
    def check_thresholds(self, metrics: Dict[str, MonitoringMetric]) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤"""
        alerts = []
        
        for metric_name, metric in metrics.items():
            if metric.threshold is not None:
                if metric.value > metric.threshold:
                    alert_msg = f"ALERT: {metric_name} = {metric.value:.3f} exceeds threshold {metric.threshold}"
                    alerts.append(alert_msg)
                    metric.status = "critical"
                    self.logger.warning(alert_msg)
                elif metric.value > metric.threshold * 0.8:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ 80% –æ—Ç –ø–æ—Ä–æ–≥–∞
                    warning_msg = f"WARNING: {metric_name} = {metric.value:.3f} approaching threshold {metric.threshold}"
                    alerts.append(warning_msg)
                    metric.status = "warning"
                    self.logger.info(warning_msg)
        
        return alerts
        
    def store_metrics(self, metrics: Dict[str, MonitoringMetric]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        for metric in metrics.values():
            self.metrics_history.append(metric)
            
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.metrics_history) > 10000:
            self.metrics_history = self.metrics_history[-5000:]
            
    def get_metrics_summary(self, hours: int = 24) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        recent_metrics = [m for m in self.metrics_history if m.timestamp > cutoff_time]
        
        summary = {}
        for metric in recent_metrics:
            if metric.name not in summary:
                summary[metric.name] = {
                    'count': 0,
                    'values': [],
                    'alerts': 0
                }
            
            summary[metric.name]['count'] += 1
            summary[metric.name]['values'].append(metric.value)
            if metric.status in ['warning', 'critical']:
                summary[metric.name]['alerts'] += 1
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        for metric_name, data in summary.items():
            if data['values']:
                values = data['values']
                data['mean'] = np.mean(values)
                data['std'] = np.std(values)
                data['min'] = np.min(values)
                data['max'] = np.max(values)
                data['median'] = np.median(values)
        
        return summary

class DataDriftDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, reference_data: np.ndarray, feature_names: List[str] = None):
        self.reference_data = reference_data
        self.feature_names = feature_names or [f"feature_{i}" for i in range(reference_data.shape[1])]
        self.reference_stats = self._compute_reference_stats()
        
    def _compute_reference_stats(self) -> Dict:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        stats = {}
        
        for i, feature_name in enumerate(self.feature_names):
            feature_data = self.reference_data[:, i]
            stats[feature_name] = {
                'mean': np.mean(feature_data),
                'std': np.std(feature_data),
                'min': np.min(feature_data),
                'max': np.max(feature_data),
                'percentiles': np.percentile(feature_data, [25, 50, 75])
            }
            
        return stats
        
    def detect_drift_ks_test(self, current_data: np.ndarray, 
                           alpha: float = 0.05) -> Dict[str, Dict]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Å—Ç–∞ –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞-–°–º–∏—Ä–Ω–æ–≤–∞"""
        drift_results = {}
        
        for i, feature_name in enumerate(self.feature_names):
            reference_feature = self.reference_data[:, i]
            current_feature = current_data[:, i]
            
            # KS —Ç–µ—Å—Ç
            ks_statistic, p_value = stats.ks_2samp(reference_feature, current_feature)
            
            drift_results[feature_name] = {
                'ks_statistic': ks_statistic,
                'p_value': p_value,
                'drift_detected': p_value < alpha,
                'drift_score': ks_statistic  # –ò—Å–ø–æ–ª—å–∑—É–µ–º KS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∫ —Å–∫–æ—Ä –¥—Ä–µ–π—Ñ–∞
            }
            
        return drift_results
        
    def detect_drift_psi(self, current_data: np.ndarray, 
                        bins: int = 10) -> Dict[str, Dict]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ —Å –ø–æ–º–æ—â—å—é Population Stability Index (PSI)"""
        drift_results = {}
        
        for i, feature_name in enumerate(self.feature_names):
            reference_feature = self.reference_data[:, i]
            current_feature = current_data[:, i]
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –±–∏–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            bin_edges = np.histogram_bin_edges(reference_feature, bins=bins)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
            ref_counts, _ = np.histogram(reference_feature, bins=bin_edges)
            cur_counts, _ = np.histogram(current_feature, bins=bin_edges)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            ref_props = ref_counts / len(reference_feature)
            cur_props = cur_counts / len(current_feature)
            
            # –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            ref_props = np.where(ref_props == 0, 1e-6, ref_props)
            cur_props = np.where(cur_props == 0, 1e-6, cur_props)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ PSI
            psi = np.sum((cur_props - ref_props) * np.log(cur_props / ref_props))
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è PSI
            if psi < 0.1:
                drift_level = "no_drift"
            elif psi < 0.2:
                drift_level = "moderate_drift"
            else:
                drift_level = "significant_drift"
                
            drift_results[feature_name] = {
                'psi': psi,
                'drift_level': drift_level,
                'drift_detected': psi > 0.1,
                'drift_score': psi
            }
            
        return drift_results
        
    def detect_drift_statistical(self, current_data: np.ndarray) -> Dict[str, Dict]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞"""
        drift_results = {}
        
        for i, feature_name in enumerate(self.feature_names):
            current_feature = current_data[:, i]
            ref_stats = self.reference_stats[feature_name]
            
            # –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            current_mean = np.mean(current_feature)
            current_std = np.std(current_feature)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            mean_drift = abs(current_mean - ref_stats['mean']) / ref_stats['std']
            std_drift = abs(current_std - ref_stats['std']) / ref_stats['std']
            
            # –û–±—â–∏–π —Å–∫–æ—Ä –¥—Ä–µ–π—Ñ–∞
            drift_score = max(mean_drift, std_drift)
            
            drift_results[feature_name] = {
                'mean_drift': mean_drift,
                'std_drift': std_drift,
                'drift_score': drift_score,
                'drift_detected': drift_score > 2.0,  # 2 —Å–∏–≥–º—ã
                'current_mean': current_mean,
                'current_std': current_std,
                'reference_mean': ref_stats['mean'],
                'reference_std': ref_stats['std']
            }
            
        return drift_results

class PredictionDriftDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –¥—Ä–µ–π—Ñ–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    
    def __init__(self, reference_predictions: np.ndarray):
        self.reference_predictions = reference_predictions
        self.reference_stats = self._compute_reference_stats()
        
    def _compute_reference_stats(self) -> Dict:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        return {
            'mean': np.mean(self.reference_predictions),
            'std': np.std(self.reference_predictions),
            'percentiles': np.percentile(self.reference_predictions, [25, 50, 75]),
            'unique_values': len(np.unique(self.reference_predictions))
        }
        
    def detect_prediction_drift(self, current_predictions: np.ndarray) -> Dict:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        current_stats = {
            'mean': np.mean(current_predictions),
            'std': np.std(current_predictions),
            'percentiles': np.percentile(current_predictions, [25, 50, 75]),
            'unique_values': len(np.unique(current_predictions))
        }
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞
        mean_drift = abs(current_stats['mean'] - self.reference_stats['mean'])
        std_drift = abs(current_stats['std'] - self.reference_stats['std'])
        
        # KS —Ç–µ—Å—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        ks_statistic, p_value = stats.ks_2samp(
            self.reference_predictions, 
            current_predictions
        )
        
        # –û–±—â–∏–π —Å–∫–æ—Ä –¥—Ä–µ–π—Ñ–∞
        drift_score = max(
            mean_drift / (self.reference_stats['std'] + 1e-6),
            std_drift / (self.reference_stats['std'] + 1e-6),
            ks_statistic
        )
        
        return {
            'drift_score': drift_score,
            'drift_detected': drift_score > 0.2,
            'mean_drift': mean_drift,
            'std_drift': std_drift,
            'ks_statistic': ks_statistic,
            'ks_p_value': p_value,
            'current_stats': current_stats,
            'reference_stats': self.reference_stats
        }

class ModelPerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, model_name: str):
        self.model_name = model_name
        self.performance_history = []
        self.baseline_performance = None
        
    def set_baseline(self, accuracy: float, precision: float, 
                    recall: float, f1: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.baseline_performance = {
            'accuracy': accuracy,
            'precision': precision,
            'recall': recall,
            'f1': f1,
            'timestamp': datetime.now()
        }
        
    def evaluate_performance(self, y_true: np.ndarray, 
                           y_pred: np.ndarray) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if len(np.unique(y_true)) <= 10:  # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            performance = {
                'accuracy': accuracy_score(y_true, y_pred),
                'precision': precision_score(y_true, y_pred, average='weighted', zero_division=0),
                'recall': recall_score(y_true, y_pred, average='weighted', zero_division=0),
                'f1': f1_score(y_true, y_pred, average='weighted', zero_division=0),
                'timestamp': datetime.now()
            }
        else:  # –†–µ–≥—Ä–µ—Å—Å–∏—è
            mse = np.mean((y_true - y_pred) ** 2)
            mae = np.mean(np.abs(y_true - y_pred))
            rmse = np.sqrt(mse)
            
            performance = {
                'mse': mse,
                'mae': mae,
                'rmse': rmse,
                'timestamp': datetime.now()
            }
            
        self.performance_history.append(performance)
        return performance
        
    def detect_performance_degradation(self, current_performance: Dict,
                                     threshold: float = 0.05) -> Dict:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if self.baseline_performance is None:
            return {'degradation_detected': False, 'message': 'No baseline set'}
            
        degradation_results = {}
        
        for metric, baseline_value in self.baseline_performance.items():
            if metric == 'timestamp':
                continue
                
            if metric in current_performance:
                current_value = current_performance[metric]
                
                # –î–ª—è –º–µ—Ç—Ä–∏–∫, –≥–¥–µ –±–æ–ª—å—à–µ = –ª—É—á—à–µ (accuracy, precision, recall, f1)
                if metric in ['accuracy', 'precision', 'recall', 'f1']:
                    degradation = baseline_value - current_value
                    degradation_detected = degradation > threshold
                # –î–ª—è –º–µ—Ç—Ä–∏–∫, –≥–¥–µ –º–µ–Ω—å—à–µ = –ª—É—á—à–µ (mse, mae, rmse)
                else:
                    degradation = current_value - baseline_value
                    degradation_detected = degradation > threshold * baseline_value
                    
                degradation_results[metric] = {
                    'baseline': baseline_value,
                    'current': current_value,
                    'degradation': degradation,
                    'degradation_detected': degradation_detected
                }
                
        overall_degradation = any(
            result['degradation_detected'] 
            for result in degradation_results.values()
        )
        
        return {
            'degradation_detected': overall_degradation,
            'metrics': degradation_results,
            'timestamp': datetime.now()
        }

class AutoRetrainingSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, model_name: str, retrain_threshold: float = 0.05):
        self.model_name = model_name
        self.retrain_threshold = retrain_threshold
        self.retrain_history = []
        self.logger = logging.getLogger(f"auto_retrain_{model_name}")
        
    def should_retrain(self, 
                      performance_degradation: Dict,
                      data_drift_results: Dict,
                      prediction_drift_results: Dict) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        retrain_reasons = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if performance_degradation.get('degradation_detected', False):
            retrain_reasons.append("performance_degradation")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö
        significant_data_drift = any(
            result.get('drift_detected', False) 
            for result in data_drift_results.values()
        )
        if significant_data_drift:
            retrain_reasons.append("data_drift")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–µ–π—Ñ–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        if prediction_drift_results.get('drift_detected', False):
            retrain_reasons.append("prediction_drift")
            
        should_retrain = len(retrain_reasons) > 0
        
        return {
            'should_retrain': should_retrain,
            'reasons': retrain_reasons,
            'timestamp': datetime.now()
        }
        
    def trigger_retraining(self, reasons: List[str]) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        retrain_job = {
            'job_id': f"retrain_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'model_name': self.model_name,
            'reasons': reasons,
            'status': 'triggered',
            'timestamp': datetime.now()
        }
        
        self.retrain_history.append(retrain_job)
        
        self.logger.info(f"Triggered retraining for {self.model_name}. Reasons: {reasons}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±—É—á–µ–Ω–∏—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å Celery –∏–ª–∏ Kubernetes Job
        
        return retrain_job

# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
class ComprehensiveMLMonitoring:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML"""
    
    def __init__(self, model_name: str, model_version: str):
        self.model_name = model_name
        self.model_version = model_version
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.monitoring_system = MLMonitoringSystem(model_name, model_version)
        self.performance_monitor = ModelPerformanceMonitor(model_name)
        self.auto_retrain = AutoRetrainingSystem(model_name)
        
        # –î–µ—Ç–µ–∫—Ç–æ—Ä—ã –¥—Ä–µ–π—Ñ–∞ (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        self.data_drift_detector = None
        self.prediction_drift_detector = None
        
    def initialize_drift_detectors(self, 
                                 reference_data: np.ndarray,
                                 reference_predictions: np.ndarray,
                                 feature_names: List[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –¥—Ä–µ–π—Ñ–∞"""
        self.data_drift_detector = DataDriftDetector(reference_data, feature_names)
        self.prediction_drift_detector = PredictionDriftDetector(reference_predictions)
        
    def monitor_batch(self,
                     input_data: np.ndarray,
                     predictions: np.ndarray,
                     ground_truth: Optional[np.ndarray] = None,
                     prediction_time: float = 0.0) -> Dict:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç—á–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        monitoring_results = {}
        
        # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        infra_metrics = self.monitoring_system.collect_infrastructure_metrics()
        service_metrics = self.monitoring_system.collect_service_metrics(
            request_count=len(predictions),
            error_count=0,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            avg_latency=prediction_time
        )
        model_metrics = self.monitoring_system.collect_model_metrics(
            predictions=predictions,
            ground_truth=ground_truth,
            prediction_time=prediction_time
        )
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        all_metrics = {**infra_metrics, **service_metrics, **model_metrics}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
        alerts = self.monitoring_system.check_thresholds(all_metrics)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        self.monitoring_system.store_metrics(all_metrics)
        
        monitoring_results['metrics'] = all_metrics
        monitoring_results['alerts'] = alerts
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö
        if self.data_drift_detector is not None:
            data_drift_results = self.data_drift_detector.detect_drift_ks_test(input_data)
            monitoring_results['data_drift'] = data_drift_results
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        if self.prediction_drift_detector is not None:
            prediction_drift_results = self.prediction_drift_detector.detect_prediction_drift(predictions)
            monitoring_results['prediction_drift'] = prediction_drift_results
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
        if ground_truth is not None:
            performance = self.performance_monitor.evaluate_performance(ground_truth, predictions)
            performance_degradation = self.performance_monitor.detect_performance_degradation(performance)
            
            monitoring_results['performance'] = performance
            monitoring_results['performance_degradation'] = performance_degradation
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            retrain_decision = self.auto_retrain.should_retrain(
                performance_degradation=performance_degradation,
                data_drift_results=monitoring_results.get('data_drift', {}),
                prediction_drift_results=monitoring_results.get('prediction_drift', {})
            )
            
            monitoring_results['retrain_decision'] = retrain_decision
            
            # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if retrain_decision['should_retrain']:
                retrain_job = self.auto_retrain.trigger_retraining(retrain_decision['reasons'])
                monitoring_results['retrain_job'] = retrain_job
        
        return monitoring_results
        
    def generate_monitoring_report(self, hours: int = 24) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        summary = self.monitoring_system.get_metrics_summary(hours)
        
        report = f"""
=== –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {self.model_name} v{self.model_version} ===
–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤

"""
        
        for metric_name, data in summary.items():
            if 'mean' in data:
                report += f"{metric_name}:\n"
                report += f"  –°—Ä–µ–¥–Ω–µ–µ: {data['mean']:.3f}\n"
                report += f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {data['std']:.3f}\n"
                report += f"  –ú–∏–Ω–∏–º—É–º: {data['min']:.3f}\n"
                report += f"  –ú–∞–∫—Å–∏–º—É–º: {data['max']:.3f}\n"
                report += f"  –ú–µ–¥–∏–∞–Ω–∞: {data['median']:.3f}\n"
                report += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤: {data['alerts']}\n\n"
        
        return report

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def example_comprehensive_monitoring():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    monitor = ComprehensiveMLMonitoring("fraud_detection", "v2.1.0")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    np.random.seed(42)
    reference_data = np.random.normal(0, 1, (1000, 10))
    reference_predictions = np.random.choice([0, 1], 1000, p=[0.9, 0.1])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –¥—Ä–µ–π—Ñ–∞
    monitor.initialize_drift_detectors(
        reference_data=reference_data,
        reference_predictions=reference_predictions,
        feature_names=[f"feature_{i}" for i in range(10)]
    )
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    monitor.performance_monitor.set_baseline(
        accuracy=0.95, precision=0.93, recall=0.92, f1=0.925
    )
    
    # –°–∏–º—É–ª—è—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    current_data = np.random.normal(0.2, 1.1, (100, 10))  # –ù–µ–±–æ–ª—å—à–æ–π –¥—Ä–µ–π—Ñ
    current_predictions = np.random.choice([0, 1], 100, p=[0.85, 0.15])  # –î—Ä–µ–π—Ñ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    current_ground_truth = np.random.choice([0, 1], 100, p=[0.9, 0.1])
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    results = monitor.monitor_batch(
        input_data=current_data,
        predictions=current_predictions,
        ground_truth=current_ground_truth,
        prediction_time=0.15
    )
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(results['alerts'])}")
    
    if results['alerts']:
        print("–ê–ª–µ—Ä—Ç—ã:")
        for alert in results['alerts']:
            print(f"  - {alert}")
    
    if 'data_drift' in results:
        drift_detected = any(r['drift_detected'] for r in results['data_drift'].values())
        print(f"–î—Ä–µ–π—Ñ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {drift_detected}")
    
    if 'prediction_drift' in results:
        print(f"–î—Ä–µ–π—Ñ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {results['prediction_drift']['drift_detected']}")
    
    if 'performance_degradation' in results:
        print(f"–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {results['performance_degradation']['degradation_detected']}")
    
    if 'retrain_decision' in results:
        print(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ: {results['retrain_decision']['should_retrain']}")
        if results['retrain_decision']['should_retrain']:
            print(f"–ü—Ä–∏—á–∏–Ω—ã: {results['retrain_decision']['reasons']}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = monitor.generate_monitoring_report(24)
    print("\\n" + report)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if __name__ == "__main__":
    example_comprehensive_monitoring()
\`\`\`

## –°–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

### –ú–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ ML-—Å–∏—Å—Ç–µ–º–∞—Ö.

\`\`\`python
import smtplib
import requests
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List, Optional
from enum import Enum
from dataclasses import dataclass
import asyncio
import aiohttp

class AlertSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    INFO = "info"
    WARNING = "warning"
    CRITICAL = "critical"
    EMERGENCY = "emergency"

@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞"""
    title: str
    message: str
    severity: AlertSeverity
    source: str
    timestamp: datetime
    metadata: Dict = None
    
class AlertChannel(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∞–ª–µ—Ä—Ç–æ–≤"""
    
    @abstractmethod
    async def send_alert(self, alert: Alert) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        pass

class EmailAlertChannel(AlertChannel):
    """–ö–∞–Ω–∞–ª email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, smtp_server: str, smtp_port: int, 
                 username: str, password: str, from_email: str):
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.username = username
        self.password = password
        self.from_email = from_email
        
    async def send_alert(self, alert: Alert, to_emails: List[str]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–ª–µ—Ä—Ç–∞"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.from_email
            msg['To'] = ', '.join(to_emails)
            msg['Subject'] = f"[{alert.severity.value.upper()}] {alert.title}"
            
            body = f"""
–ê–ª–µ—Ä—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {alert.title}
–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {alert.severity.value}
–ò—Å—Ç–æ—á–Ω–∏–∫: {alert.source}
–í—Ä–µ–º—è: {alert.timestamp}

–°–æ–æ–±—â–µ–Ω–∏–µ:
{alert.message}

–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:
{json.dumps(alert.metadata, indent=2, ensure_ascii=False) if alert.metadata else '–ù–µ—Ç'}
"""
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.username, self.password)
            server.send_message(msg)
            server.quit()
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False

class SlackAlertChannel(AlertChannel):
    """–ö–∞–Ω–∞–ª Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, webhook_url: str):
        self.webhook_url = webhook_url
        
    async def send_alert(self, alert: Alert) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Slack –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            color_map = {
                AlertSeverity.INFO: "#36a64f",
                AlertSeverity.WARNING: "#ff9500",
                AlertSeverity.CRITICAL: "#ff0000",
                AlertSeverity.EMERGENCY: "#8B0000"
            }
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
            emoji_map = {
                AlertSeverity.INFO: ":information_source:",
                AlertSeverity.WARNING: ":warning:",
                AlertSeverity.CRITICAL: ":rotating_light:",
                AlertSeverity.EMERGENCY: ":fire:"
            }
            
            payload = {
                "text": f"{emoji_map[alert.severity]} ML Monitoring Alert",
                "attachments": [
                    {
                        "color": color_map[alert.severity],
                        "title": alert.title,
                        "text": alert.message,
                        "fields": [
                            {
                                "title": "–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å",
                                "value": alert.severity.value.upper(),
                                "short": True
                            },
                            {
                                "title": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                                "value": alert.source,
                                "short": True
                            },
                            {
                                "title": "–í—Ä–µ–º—è",
                                "value": alert.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
                                "short": True
                            }
                        ],
                        "footer": "ML Monitoring System",
                        "ts": int(alert.timestamp.timestamp())
                    }
                ]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(self.webhook_url, json=payload) as response:
                    return response.status == 200
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Slack –∞–ª–µ—Ä—Ç–∞: {e}")
            return False

class TelegramAlertChannel(AlertChannel):
    """–ö–∞–Ω–∞–ª Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
    async def send_alert(self, alert: Alert) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            emoji_map = {
                AlertSeverity.INFO: "‚ÑπÔ∏è",
                AlertSeverity.WARNING: "‚ö†Ô∏è",
                AlertSeverity.CRITICAL: "üö®",
                AlertSeverity.EMERGENCY: "üî•"
            }
            
            message = f"""
{emoji_map[alert.severity]} *ML Monitoring Alert*

*{alert.title}*

*–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å:* {alert.severity.value.upper()}
*–ò—Å—Ç–æ—á–Ω–∏–∫:* {alert.source}
*–í—Ä–µ–º—è:* {alert.timestamp.strftime("%Y-%m-%d %H:%M:%S")}

*–°–æ–æ–±—â–µ–Ω–∏–µ:*
{alert.message}
"""
            
            payload = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": "Markdown"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(self.api_url, json=payload) as response:
                    return response.status == 200
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∞–ª–µ—Ä—Ç–∞: {e}")
            return False

class WebhookAlertChannel(AlertChannel):
    """–ö–∞–Ω–∞–ª webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, webhook_url: str, headers: Dict[str, str] = None):
        self.webhook_url = webhook_url
        self.headers = headers or {}
        
    async def send_alert(self, alert: Alert) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ webhook –∞–ª–µ—Ä—Ç–∞"""
        try:
            payload = {
                "title": alert.title,
                "message": alert.message,
                "severity": alert.severity.value,
                "source": alert.source,
                "timestamp": alert.timestamp.isoformat(),
                "metadata": alert.metadata
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.webhook_url, 
                    json=payload, 
                    headers=self.headers
                ) as response:
                    return response.status < 400
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –∞–ª–µ—Ä—Ç–∞: {e}")
            return False

class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.channels: Dict[str, AlertChannel] = {}
        self.routing_rules: Dict[AlertSeverity, List[str]] = {
            AlertSeverity.INFO: [],
            AlertSeverity.WARNING: [],
            AlertSeverity.CRITICAL: [],
            AlertSeverity.EMERGENCY: []
        }
        self.alert_history: List[Alert] = []
        
    def add_channel(self, name: str, channel: AlertChannel):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.channels[name] = channel
        
    def set_routing_rule(self, severity: AlertSeverity, channels: List[str]):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.routing_rules[severity] = channels
        
    async def send_alert(self, alert: Alert) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º"""
        self.alert_history.append(alert)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.alert_history) > 1000:
            self.alert_history = self.alert_history[-500:]
            
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        target_channels = self.routing_rules.get(alert.severity, [])
        
        results = {}
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        for channel_name in target_channels:
            if channel_name in self.channels:
                try:
                    success = await self.channels[channel_name].send_alert(alert)
                    results[channel_name] = success
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ {channel_name}: {e}")
                    results[channel_name] = False
            else:
                print(f"–ö–∞–Ω–∞–ª {channel_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                results[channel_name] = False
                
        return results
        
    def get_alert_statistics(self, hours: int = 24) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        recent_alerts = [a for a in self.alert_history if a.timestamp > cutoff_time]
        
        stats = {
            'total_alerts': len(recent_alerts),
            'by_severity': {},
            'by_source': {},
            'timeline': []
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        for severity in AlertSeverity:
            count = len([a for a in recent_alerts if a.severity == severity])
            stats['by_severity'][severity.value] = count
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {}
        for alert in recent_alerts:
            sources[alert.source] = sources.get(alert.source, 0) + 1
        stats['by_source'] = sources
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è (–ø–æ —á–∞—Å–∞–º)
        hourly_counts = {}
        for alert in recent_alerts:
            hour = alert.timestamp.replace(minute=0, second=0, microsecond=0)
            hourly_counts[hour] = hourly_counts.get(hour, 0) + 1
            
        stats['timeline'] = [
            {'hour': hour.isoformat(), 'count': count}
            for hour, count in sorted(hourly_counts.items())
        ]
        
        return stats

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
class MonitoringWithAlerts(ComprehensiveMLMonitoring):
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–ª–µ—Ä—Ç–∞–º–∏"""
    
    def __init__(self, model_name: str, model_version: str):
        super().__init__(model_name, model_version)
        self.alert_manager = AlertManager()
        self._setup_default_alerts()
        
    def _setup_default_alerts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        slack_channel = SlackAlertChannel("https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK")
        self.alert_manager.add_channel("slack", slack_channel)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        self.alert_manager.set_routing_rule(AlertSeverity.WARNING, ["slack"])
        self.alert_manager.set_routing_rule(AlertSeverity.CRITICAL, ["slack"])
        self.alert_manager.set_routing_rule(AlertSeverity.EMERGENCY, ["slack"])
        
    async def monitor_batch_with_alerts(self, *args, **kwargs) -> Dict:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–ª–µ—Ä—Ç–æ–≤"""
        results = self.monitor_batch(*args, **kwargs)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        alerts_sent = []
        
        # –ê–ª–µ—Ä—Ç—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        for alert_msg in results.get('alerts', []):
            severity = AlertSeverity.CRITICAL if "ALERT" in alert_msg else AlertSeverity.WARNING
            
            alert = Alert(
                title=f"–ú–µ—Ç—Ä–∏–∫–∞ {self.model_name}",
                message=alert_msg,
                severity=severity,
                source=f"{self.model_name}_metrics",
                timestamp=datetime.now()
            )
            
            alert_results = await self.alert_manager.send_alert(alert)
            alerts_sent.append(alert_results)
            
        # –ê–ª–µ—Ä—Ç—ã –ø–æ –¥—Ä–µ–π—Ñ—É –¥–∞–Ω–Ω—ã—Ö
        if 'data_drift' in results:
            drift_detected = any(r.get('drift_detected', False) for r in results['data_drift'].values())
            if drift_detected:
                drift_features = [
                    feature for feature, result in results['data_drift'].items()
                    if result.get('drift_detected', False)
                ]
                
                alert = Alert(
                    title=f"–î—Ä–µ–π—Ñ –¥–∞–Ω–Ω—ã—Ö –≤ {self.model_name}",
                    message=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä–µ–π—Ñ –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö: {', '.join(drift_features)}",
                    severity=AlertSeverity.WARNING,
                    source=f"{self.model_name}_data_drift",
                    timestamp=datetime.now(),
                    metadata={'drift_features': drift_features}
                )
                
                alert_results = await self.alert_manager.send_alert(alert)
                alerts_sent.append(alert_results)
                
        # –ê–ª–µ—Ä—Ç—ã –ø–æ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if results.get('performance_degradation', {}).get('degradation_detected', False):
            degraded_metrics = [
                metric for metric, data in results['performance_degradation']['metrics'].items()
                if data['degradation_detected']
            ]
            
            alert = Alert(
                title=f"–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {self.model_name}",
                message=f"–°–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º: {', '.join(degraded_metrics)}",
                severity=AlertSeverity.CRITICAL,
                source=f"{self.model_name}_performance",
                timestamp=datetime.now(),
                metadata={'degraded_metrics': degraded_metrics}
            )
            
            alert_results = await self.alert_manager.send_alert(alert)
            alerts_sent.append(alert_results)
            
        # –ê–ª–µ—Ä—Ç—ã –ø–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é
        if results.get('retrain_decision', {}).get('should_retrain', False):
            reasons = results['retrain_decision']['reasons']
            
            alert = Alert(
                title=f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ {self.model_name}",
                message=f"–ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è. –ü—Ä–∏—á–∏–Ω—ã: {', '.join(reasons)}",
                severity=AlertSeverity.WARNING,
                source=f"{self.model_name}_retrain",
                timestamp=datetime.now(),
                metadata={'retrain_reasons': reasons}
            )
            
            alert_results = await self.alert_manager.send_alert(alert)
            alerts_sent.append(alert_results)
            
        results['alerts_sent'] = alerts_sent
        return results

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å –∞–ª–µ—Ä—Ç–∞–º–∏
async def example_monitoring_with_alerts():
    """–ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–ª–µ—Ä—Ç–∞–º–∏"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    monitor = MonitoringWithAlerts("fraud_detection", "v2.1.0")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    telegram_channel = TelegramAlertChannel("YOUR_BOT_TOKEN", "YOUR_CHAT_ID")
    monitor.alert_manager.add_channel("telegram", telegram_channel)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    monitor.alert_manager.set_routing_rule(
        AlertSeverity.EMERGENCY, 
        ["slack", "telegram"]
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –¥—Ä–µ–π—Ñ–∞
    reference_data = np.random.normal(0, 1, (1000, 10))
    reference_predictions = np.random.choice([0, 1], 1000, p=[0.9, 0.1])
    
    monitor.initialize_drift_detectors(
        reference_data=reference_data,
        reference_predictions=reference_predictions
    )
    
    monitor.performance_monitor.set_baseline(
        accuracy=0.95, precision=0.93, recall=0.92, f1=0.925
    )
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    problematic_data = np.random.normal(1.0, 2.0, (100, 10))  # –°–∏–ª—å–Ω—ã–π –¥—Ä–µ–π—Ñ
    problematic_predictions = np.random.choice([0, 1], 100, p=[0.7, 0.3])  # –°–∏–ª—å–Ω—ã–π –¥—Ä–µ–π—Ñ
    problematic_ground_truth = np.random.choice([0, 1], 100, p=[0.9, 0.1])
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–ª–µ—Ä—Ç–∞–º–∏
    results = await monitor.monitor_batch_with_alerts(
        input_data=problematic_data,
        predictions=problematic_predictions,
        ground_truth=problematic_ground_truth,
        prediction_time=0.8  # –í—ã—Å–æ–∫–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    )
    
    print("=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–ª–µ—Ä—Ç–∞–º–∏ ===")
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(results.get('alerts_sent', []))}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
    alert_stats = monitor.alert_manager.get_alert_statistics(1)
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ —á–∞—Å: {alert_stats}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if __name__ == "__main__":
    asyncio.run(example_monitoring_with_alerts())
\`\`\`

## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π

### –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –º–æ–¥–µ–ª–∏

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º MLOps, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –≤ –∏–∑–º–µ–Ω—è—é—â–µ–π—Å—è —Å—Ä–µ–¥–µ.

\`\`\`python
import pickle
import joblib
from pathlib import Path
import shutil
from typing import Any, Dict, List, Optional, Callable
import hashlib
import yaml

class ModelVersion:
    """–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, version: str, model_path: str, 
                 metadata: Dict, performance_metrics: Dict):
        self.version = version
        self.model_path = model_path
        self.metadata = metadata
        self.performance_metrics = performance_metrics
        self.created_at = datetime.now()
        self.status = "active"  # active, deprecated, archived
        
    def to_dict(self) -> Dict:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'version': self.version,
            'model_path': self.model_path,
            'metadata': self.metadata,
            'performance_metrics': self.performance_metrics,
            'created_at': self.created_at.isoformat(),
            'status': self.status
        }
        
    @classmethod
    def from_dict(cls, data: Dict) -> 'ModelVersion':
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        instance = cls(
            version=data['version'],
            model_path=data['model_path'],
            metadata=data['metadata'],
            performance_metrics=data['performance_metrics']
        )
        instance.created_at = datetime.fromisoformat(data['created_at'])
        instance.status = data['status']
        return instance

class ModelRegistry:
    """–†–µ–µ—Å—Ç—Ä –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, registry_path: str):
        self.registry_path = Path(registry_path)
        self.registry_path.mkdir(parents=True, exist_ok=True)
        self.models_path = self.registry_path / "models"
        self.models_path.mkdir(exist_ok=True)
        self.metadata_file = self.registry_path / "registry.yaml"
        
        self._load_registry()
        
    def _load_registry(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞"""
        if self.metadata_file.exists():
            with open(self.metadata_file, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f) or {}
        else:
            data = {}
            
        self.models = {}
        for model_name, versions_data in data.items():
            self.models[model_name] = {}
            for version, version_data in versions_data.items():
                self.models[model_name][version] = ModelVersion.from_dict(version_data)
                
    def _save_registry(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞"""
        data = {}
        for model_name, versions in self.models.items():
            data[model_name] = {}
            for version, model_version in versions.items():
                data[model_name][version] = model_version.to_dict()
                
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            yaml.dump(data, f, default_flow_style=False, allow_unicode=True)
            
    def register_model(self, model_name: str, model: Any, 
                      version: str, metadata: Dict, 
                      performance_metrics: Dict) -> str:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
        model_dir = self.models_path / model_name
        model_dir.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model_file = model_dir / f"{version}.pkl"
        with open(model_file, 'wb') as f:
            pickle.dump(model, f)
            
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –º–æ–¥–µ–ª–∏
        model_hash = self._compute_model_hash(model_file)
        metadata['model_hash'] = model_hash
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏
        model_version = ModelVersion(
            version=version,
            model_path=str(model_file),
            metadata=metadata,
            performance_metrics=performance_metrics
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä
        if model_name not in self.models:
            self.models[model_name] = {}
            
        self.models[model_name][version] = model_version
        self._save_registry()
        
        return str(model_file)
        
    def get_model(self, model_name: str, version: str = "latest") -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if model_name not in self.models:
            raise ValueError(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        if version == "latest":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            active_versions = [
                v for v in self.models[model_name].values()
                if v.status == "active"
            ]
            if not active_versions:
                raise ValueError(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–∏ {model_name}")
                
            model_version = max(active_versions, key=lambda x: x.created_at)
        else:
            if version not in self.models[model_name]:
                raise ValueError(f"–í–µ—Ä—Å–∏—è {version} –º–æ–¥–µ–ª–∏ {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            model_version = self.models[model_name][version]
            
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        with open(model_version.model_path, 'rb') as f:
            model = pickle.load(f)
            
        return model, model_version
        
    def list_models(self) -> Dict[str, List[str]]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö –≤–µ—Ä—Å–∏–π"""
        return {
            model_name: list(versions.keys())
            for model_name, versions in self.models.items()
        }
        
    def deprecate_version(self, model_name: str, version: str):
        """–ü–æ–º–µ—Ç–∫–∞ –≤–µ—Ä—Å–∏–∏ –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π"""
        if model_name in self.models and version in self.models[model_name]:
            self.models[model_name][version].status = "deprecated"
            self._save_registry()
            
    def archive_version(self, model_name: str, version: str):
        """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏"""
        if model_name in self.models and version in self.models[model_name]:
            model_version = self.models[model_name][version]
            model_version.status = "archived"
            
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤
            archive_dir = self.models_path / model_name / "archive"
            archive_dir.mkdir(exist_ok=True)
            
            old_path = Path(model_version.model_path)
            new_path = archive_dir / old_path.name
            shutil.move(str(old_path), str(new_path))
            
            model_version.model_path = str(new_path)
            self._save_registry()
            
    def _compute_model_hash(self, model_path: Path) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –º–æ–¥–µ–ª–∏"""
        hash_md5 = hashlib.md5()
        with open(model_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
        
    def compare_models(self, model_name: str, 
                      version1: str, version2: str) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–∏"""
        if model_name not in self.models:
            raise ValueError(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        v1 = self.models[model_name].get(version1)
        v2 = self.models[model_name].get(version2)
        
        if not v1 or not v2:
            raise ValueError("–û–¥–Ω–∞ –∏–∑ –≤–µ—Ä—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        comparison = {
            'version1': {
                'version': v1.version,
                'created_at': v1.created_at,
                'performance_metrics': v1.performance_metrics,
                'metadata': v1.metadata
            },
            'version2': {
                'version': v2.version,
                'created_at': v2.created_at,
                'performance_metrics': v2.performance_metrics,
                'metadata': v2.metadata
            },
            'performance_diff': {}
        }
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for metric in v1.performance_metrics:
            if metric in v2.performance_metrics:
                diff = v2.performance_metrics[metric] - v1.performance_metrics[metric]
                comparison['performance_diff'][metric] = {
                    'v1': v1.performance_metrics[metric],
                    'v2': v2.performance_metrics[metric],
                    'diff': diff,
                    'improvement': diff > 0 if metric in ['accuracy', 'precision', 'recall', 'f1'] else diff < 0
                }
                
        return comparison

class AutoRetrainingPipeline:
    """–ü–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, model_name: str, model_registry: ModelRegistry,
                 training_function: Callable, validation_function: Callable):
        self.model_name = model_name
        self.model_registry = model_registry
        self.training_function = training_function
        self.validation_function = validation_function
        self.logger = logging.getLogger(f"auto_retrain_{model_name}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        self.config = {
            'min_improvement_threshold': 0.01,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            'max_performance_degradation': 0.05,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            'validation_split': 0.2,
            'early_stopping_patience': 10,
            'max_training_time': 3600,  # 1 —á–∞—Å
            'backup_versions_to_keep': 5
        }
        
    def trigger_retraining(self, training_data: np.ndarray, 
                          training_labels: np.ndarray,
                          retrain_reason: str) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        self.logger.info(f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {self.model_name}. –ü—Ä–∏—á–∏–Ω–∞: {retrain_reason}")
        
        start_time = datetime.now()
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            current_model, current_version = self.model_registry.get_model(self.model_name, "latest")
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
            split_idx = int(len(training_data) * (1 - self.config['validation_split']))
            
            train_data = training_data[:split_idx]
            train_labels = training_labels[:split_idx]
            val_data = training_data[split_idx:]
            val_labels = training_labels[split_idx:]
            
            # –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            self.logger.info("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
            new_model = self.training_function(train_data, train_labels)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            self.logger.info("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
            new_performance = self.validation_function(new_model, val_data, val_labels)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö
            current_performance = self.validation_function(current_model, val_data, val_labels)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_comparison = self._compare_performance(
                current_performance, new_performance
            )
            
            # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
            deployment_decision = self._make_deployment_decision(performance_comparison)
            
            if deployment_decision['should_deploy']:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
                new_version = self._generate_version_number()
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                metadata = {
                    'retrain_reason': retrain_reason,
                    'training_data_size': len(training_data),
                    'training_time': (datetime.now() - start_time).total_seconds(),
                    'previous_version': current_version.version,
                    'performance_comparison': performance_comparison
                }
                
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                model_path = self.model_registry.register_model(
                    model_name=self.model_name,
                    model=new_model,
                    version=new_version,
                    metadata=metadata,
                    performance_metrics=new_performance
                )
                
                # –ü–æ–º–µ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π
                self.model_registry.deprecate_version(self.model_name, current_version.version)
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
                self._cleanup_old_versions()
                
                self.logger.info(f"–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å {new_version} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞")
                
                return {
                    'success': True,
                    'new_version': new_version,
                    'model_path': model_path,
                    'performance_improvement': deployment_decision['improvement'],
                    'training_time': metadata['training_time']
                }
            else:
                self.logger.info("–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–∫–∞–∑–∞–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è")
                
                return {
                    'success': False,
                    'reason': deployment_decision['reason'],
                    'performance_comparison': performance_comparison
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏: {e}")
            return {
                'success': False,
                'error': str(e)
            }
            
    def _compare_performance(self, current: Dict, new: Dict) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        comparison = {}
        
        for metric in current:
            if metric in new:
                current_val = current[metric]
                new_val = new[metric]
                diff = new_val - current_val
                
                # –î–ª—è –º–µ—Ç—Ä–∏–∫, –≥–¥–µ –±–æ–ª—å—à–µ = –ª—É—á—à–µ
                if metric in ['accuracy', 'precision', 'recall', 'f1']:
                    improvement = diff
                    relative_improvement = diff / current_val if current_val > 0 else 0
                # –î–ª—è –º–µ—Ç—Ä–∏–∫, –≥–¥–µ –º–µ–Ω—å—à–µ = –ª—É—á—à–µ
                else:
                    improvement = -diff
                    relative_improvement = -diff / current_val if current_val > 0 else 0
                    
                comparison[metric] = {
                    'current': current_val,
                    'new': new_val,
                    'absolute_improvement': improvement,
                    'relative_improvement': relative_improvement
                }
                
        return comparison
        
    def _make_deployment_decision(self, comparison: Dict) -> Dict:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        primary_metric = 'accuracy'
        
        if primary_metric not in comparison:
            return {
                'should_deploy': False,
                'reason': f'–û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ {primary_metric} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            }
            
        primary_improvement = comparison[primary_metric]['relative_improvement']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        if primary_improvement < self.config['min_improvement_threshold']:
            return {
                'should_deploy': False,
                'reason': f'–£–ª—É—á—à–µ–Ω–∏–µ {primary_improvement:.3f} –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ {self.config["min_improvement_threshold"]}'
            }
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
        if primary_improvement < -self.config['max_performance_degradation']:
            return {
                'should_deploy': False,
                'reason': f'–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è {primary_improvement:.3f} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ—Ä–æ–≥'
            }
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫
        significant_degradations = []
        for metric, data in comparison.items():
            if data['relative_improvement'] < -self.config['max_performance_degradation']:
                significant_degradations.append(metric)
                
        if significant_degradations:
            return {
                'should_deploy': False,
                'reason': f'–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö: {significant_degradations}'
            }
            
        return {
            'should_deploy': True,
            'improvement': primary_improvement,
            'reason': f'–£–ª—É—á—à–µ–Ω–∏–µ {primary_metric} –Ω–∞ {primary_improvement:.3f}'
        }
        
    def _generate_version_number(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–µ—Ä—Å–∏–π
        models_list = self.model_registry.list_models()
        existing_versions = models_list.get(self.model_name, [])
        
        if not existing_versions:
            return "v1.0.0"
            
        # –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏
        max_version = 0
        for version in existing_versions:
            if version.startswith('v') and '.' in version:
                try:
                    version_parts = version[1:].split('.')
                    major = int(version_parts[0])
                    minor = int(version_parts[1]) if len(version_parts) > 1 else 0
                    patch = int(version_parts[2]) if len(version_parts) > 2 else 0
                    
                    version_number = major * 10000 + minor * 100 + patch
                    max_version = max(max_version, version_number)
                except ValueError:
                    continue
                    
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∏–Ω–æ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        major = max_version // 10000
        minor = (max_version % 10000) // 100
        patch = max_version % 100
        
        return f"v{major}.{minor + 1}.0"
        
    def _cleanup_old_versions(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π"""
        models_list = self.model_registry.list_models()
        versions = models_list.get(self.model_name, [])
        
        if len(versions) > self.config['backup_versions_to_keep']:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π —Å –¥–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            version_objects = [
                (v, self.model_registry.models[self.model_name][v])
                for v in versions
            ]
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            version_objects.sort(key=lambda x: x[1].created_at)
            
            # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            versions_to_archive = version_objects[:-self.config['backup_versions_to_keep']]
            
            for version_name, version_obj in versions_to_archive:
                if version_obj.status == "deprecated":
                    self.model_registry.archive_version(self.model_name, version_name)
                    self.logger.info(f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å–∏—è {version_name}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
def example_auto_retraining():
    """–ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –º–æ–¥–µ–ª–µ–π
    registry = ModelRegistry("/tmp/model_registry")
    
    # –§—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä)
    def train_model(X, y):
        from sklearn.ensemble import RandomForestClassifier
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X, y)
        return model
        
    # –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä)
    def validate_model(model, X, y):
        predictions = model.predict(X)
        return {
            'accuracy': accuracy_score(y, predictions),
            'precision': precision_score(y, predictions, average='weighted', zero_division=0),
            'recall': recall_score(y, predictions, average='weighted', zero_division=0),
            'f1': f1_score(y, predictions, average='weighted', zero_division=0)
        }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    retrain_pipeline = AutoRetrainingPipeline(
        model_name="fraud_detection",
        model_registry=registry,
        training_function=train_model,
        validation_function=validate_model
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    np.random.seed(42)
    X_train = np.random.randn(1000, 10)
    y_train = np.random.choice([0, 1], 1000, p=[0.8, 0.2])
    
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    initial_model = train_model(X_train, y_train)
    initial_performance = validate_model(initial_model, X_train, y_train)
    
    registry.register_model(
        model_name="fraud_detection",
        model=initial_model,
        version="v1.0.0",
        metadata={'initial_training': True},
        performance_metrics=initial_performance
    )
    
    print("–ù–∞—á–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {initial_performance}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    X_new = np.random.randn(500, 10) * 1.2  # –ù–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    y_new = np.random.choice([0, 1], 500, p=[0.75, 0.25])  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–æ–≤
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    X_retrain = np.vstack([X_train, X_new])
    y_retrain = np.hstack([y_train, y_new])
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    retrain_result = retrain_pipeline.trigger_retraining(
        training_data=X_retrain,
        training_labels=y_retrain,
        retrain_reason="data_drift_detected"
    )
    
    print("\\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ===")
    print(f"–£—Å–ø–µ—Ö: {retrain_result['success']}")
    
    if retrain_result['success']:
        print(f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {retrain_result['new_version']}")
        print(f"–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {retrain_result['performance_improvement']:.3f}")
        print(f"–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {retrain_result['training_time']:.1f} —Å–µ–∫—É–Ω–¥")
    else:
        print(f"–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {retrain_result['reason']}")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    print("\\n=== –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π ===")
    models_list = registry.list_models()
    for model_name, versions in models_list.items():
        print(f"{model_name}: {versions}")

if __name__ == "__main__":
    example_auto_retraining()
\`\`\`

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML-—Å–∏—Å—Ç–µ–º

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤

–í —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML-—Å–∏—Å—Ç–µ–º –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤, –≤–∫–ª—é—á–∞—è –§–°–¢–≠–ö –†–æ—Å—Å–∏–∏, –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä, –∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã.

–ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏, –∑–∞—â–∏—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ 152-–§–ó, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫–∏—Ö –∫–∞–∫ Zabbix, —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ SIEM-—Å–∏—Å—Ç–µ–º—ã, –∏ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏ –ª–æ–≥–æ–≤.

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

### –†–∞—Å—á–µ—Ç ROI —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

\`\`\`python
class MonitoringROICalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def calculate_incident_prevention_savings(self,
                                            incidents_prevented_per_year=24,
                                            avg_incident_cost=2000000,
                                            prevention_effectiveness=0.7):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
        annual_savings = incidents_prevented_per_year * avg_incident_cost * prevention_effectiveness
        return annual_savings
        
    def calculate_performance_optimization_savings(self,
                                                  performance_improvement=0.15,
                                                  annual_revenue=500000000,
                                                  ml_contribution=0.1):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        ml_revenue_impact = annual_revenue * ml_contribution
        annual_savings = ml_revenue_impact * performance_improvement
        return annual_savings
        
    def calculate_operational_efficiency_savings(self,
                                               manual_monitoring_hours_saved=2000,
                                               engineer_hourly_rate=4000,
                                               automation_effectiveness=0.8):
        """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        annual_savings = manual_monitoring_hours_saved * engineer_hourly_rate * automation_effectiveness
        return annual_savings

# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
roi_calc = MonitoringROICalculator()

incident_savings = roi_calc.calculate_incident_prevention_savings()
performance_savings = roi_calc.calculate_performance_optimization_savings()
operational_savings = roi_calc.calculate_operational_efficiency_savings()

total_savings = incident_savings + performance_savings + operational_savings
implementation_cost = 8000000  # 8 –º–ª–Ω —Ä—É–±

roi_percentage = ((total_savings - implementation_cost) / implementation_cost) * 100
payback_months = implementation_cost / (total_savings / 12)

print("=== ROI –°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML ===")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {incident_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {operational_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {total_savings:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi_percentage:.1f}%")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {payback_months:.1f} –º–µ—Å—è—Ü–µ–≤")
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º –≤ production —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º MLOps, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å ML-—Ä–µ—à–µ–Ω–∏–π –≤ –∏–∑–º–µ–Ω—è—é—â–µ–π—Å—è —Å—Ä–µ–¥–µ.

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ML-—Å–∏—Å—Ç–µ–º –∏ —É–º–µ—Ç—å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—é—â–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ, –∏ –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞.

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è

1. –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è ML-–º–æ–¥–µ–ª–∏ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –¥—Ä–µ–π—Ñ–∞
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞
4. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ ROI –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

- Prometheus Documentation: https://prometheus.io/docs/
- Grafana Documentation: https://grafana.com/docs/
- MLflow Documentation: https://mlflow.org/docs/
- –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001: https://fstec.ru/
`
  },
  35: {
    title: "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º",
    duration: 170,
    module: 6,
    content: {
      theory: `
# –£—Ä–æ–∫ 35: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º

## –†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ ML-—Å–∏—Å—Ç–µ–º

AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö ML-—Å–∏—Å—Ç–µ–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–∞—Å—Ç—É—â–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞. –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é, –æ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ edge computing.

## –¢–∏–ø—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è ML-—Å–∏—Å—Ç–µ–º

### –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (Scale Up)
–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞: CPU, –ø–∞–º—è—Ç—å, GPU. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ª–µ–≥–∫–æ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–µ–Ω—ã.

### –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (Scale Out)
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä. –¢—Ä–µ–±—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.

### –≠–ª–∞—Å—Ç–∏—á–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏. –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫.

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è

### –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º—ã –Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.

### Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–ª–∞–±—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å.

### CQRS (Command Query Responsibility Segregation)
–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

## –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π

### Data Parallelism
–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É–∑–ª–∞–º–∏, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–µ—Ç –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏.

### Model Parallelism
–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–º–æ–π –º–æ–¥–µ–ª–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞.

### Pipeline Parallelism
–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —ç—Ç–∞–ø—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É–∑–ª–∞—Ö.

## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

### –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–π–ø–ª–∞–π–Ω–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Redis, Memcached –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

### –ë–∞—Ç—á–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤
–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —É–≤–µ–ª–∏—á–∏–≤–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.

### –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.

## Edge Computing –¥–ª—è ML

### –§–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –±–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.

### Model Compression
–¢–µ—Ö–Ω–∏–∫–∏ —Å–∂–∞—Ç–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö:
- –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è
- Pruning
- Knowledge Distillation

### Edge-Cloud –≥–∏–±—Ä–∏–¥–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å –æ–±–ª–∞—á–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏.

## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏

### Resource Scheduling
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.

### GPU Sharing
–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.

### Auto-scaling —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- Reactive scaling: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
- Predictive scaling: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞–≥—Ä—É–∑–∫–∏

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º

### Distributed Tracing
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–∑–∫–∏—Ö –º–µ—Å—Ç.

### –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- Latency percentiles (P50, P95, P99)
- Throughput (requests per second)
- Resource utilization
- Error rates

### Capacity Planning
–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–æ–≤ —Ä–æ—Å—Ç–∞.

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –§–°–¢–≠–ö –†–æ—Å—Å–∏–∏ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º.

### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –æ–±–ª–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

### –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å 152-–§–ó.

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è

### Cost Optimization
- Right-sizing —Ä–µ—Å—É—Ä—Å–æ–≤
- Spot instances –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
- Reserved instances –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫

### ROI –∞–Ω–∞–ª–∏–∑
–û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.

### FinOps –¥–ª—è ML
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ –Ω–∞ ML-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ ML-—Ä–∞–±–æ—á–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫.
      `,
      practice: `
# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è ML-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π ML-—Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import asyncio
import aiohttp
import redis
import numpy as np
import torch
import torch.distributed as dist
from torch.nn.parallel import DistributedDataParallel
from kubernetes import client, config
from prometheus_client import Counter, Histogram, Gauge
import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor
import time
import json

# –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
REQUEST_COUNT = Counter('ml_requests_total', 'Total ML requests', ['model', 'status'])
REQUEST_DURATION = Histogram('ml_request_duration_seconds', 'Request duration', ['model'])
ACTIVE_CONNECTIONS = Gauge('ml_active_connections', 'Active connections')
GPU_UTILIZATION = Gauge('ml_gpu_utilization_percent', 'GPU utilization')

@dataclass
class ScalingConfig:
    min_replicas: int = 2
    max_replicas: int = 20
    target_cpu_utilization: int = 70
    target_memory_utilization: int = 80
    scale_up_threshold: float = 0.8
    scale_down_threshold: float = 0.3
    cooldown_period: int = 300  # —Å–µ–∫—É–Ω–¥—ã

class DistributedMLModel:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è ML-–º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, model_path: str, device_ids: List[int]):
        self.model_path = model_path
        self.device_ids = device_ids
        self.model = None
        self.is_distributed = len(device_ids) > 1
        
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
        if self.is_distributed:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            dist.init_process_group(backend='nccl')
            
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        self.model = torch.load(self.model_path)
        
        if self.is_distributed:
            # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            self.model = DistributedDataParallel(
                self.model,
                device_ids=self.device_ids
            )
            
        self.model.eval()
        
    def predict_batch(self, batch_data: np.ndarray) -> np.ndarray:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö"""
        with torch.no_grad():
            tensor_data = torch.from_numpy(batch_data).float()
            
            if torch.cuda.is_available():
                tensor_data = tensor_data.cuda()
                
            predictions = self.model(tensor_data)
            return predictions.cpu().numpy()

class RequestBatcher:
    """–ë–∞—Ç—á–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, batch_size: int = 32, timeout: float = 0.1):
        self.batch_size = batch_size
        self.timeout = timeout
        self.pending_requests = []
        self.batch_lock = asyncio.Lock()
        
    async def add_request(self, request_data: Dict[str, Any]) -> Any:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞—Ç—á"""
        future = asyncio.Future()
        
        async with self.batch_lock:
            self.pending_requests.append({
                'data': request_data,
                'future': future
            })
            
            # –ï—Å–ª–∏ –±–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if len(self.pending_requests) >= self.batch_size:
                await self._process_batch()
                
        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            return await asyncio.wait_for(future, timeout=self.timeout * 2)
        except asyncio.TimeoutError:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
            async with self.batch_lock:
                if self.pending_requests:
                    await self._process_batch()
            return await future
            
    async def _process_batch(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞"""
        if not self.pending_requests:
            return
            
        batch = self.pending_requests.copy()
        self.pending_requests.clear()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        batch_data = np.array([req['data']['features'] for req in batch])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –º–æ–¥–µ–ª–∏)
        results = await self._process_model_batch(batch_data)
        
        # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for i, request in enumerate(batch):
            request['future'].set_result(results[i])
            
    async def _process_model_batch(self, batch_data: np.ndarray) -> List[Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –º–æ–¥–µ–ª—å—é"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DistributedMLModel
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return [{'prediction': np.random.random()} for _ in range(len(batch_data))]

class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    
    def __init__(self, redis_host: str = 'localhost', redis_port: int = 6379):
        self.redis_client = redis.Redis(host=redis_host, port=redis_port, decode_responses=True)
        self.cache_ttl = 3600  # 1 —á–∞—Å
        
    def get_cache_key(self, request_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ –æ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_str = json.dumps(request_data, sort_keys=True)
        return f"ml_prediction:{hash(data_str)}"
        
    async def get_cached_prediction(self, request_data: Dict[str, Any]) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        cache_key = self.get_cache_key(request_data)
        
        try:
            cached_result = self.redis_client.get(cache_key)
            if cached_result:
                return json.loads(cached_result)
        except Exception as e:
            logging.warning(f"Cache read error: {e}")
            
        return None
        
    async def cache_prediction(self, request_data: Dict[str, Any], prediction: Any):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –∫—ç—à"""
        cache_key = self.get_cache_key(request_data)
        
        try:
            self.redis_client.setex(
                cache_key,
                self.cache_ttl,
                json.dumps(prediction)
            )
        except Exception as e:
            logging.warning(f"Cache write error: {e}")

class AutoScaler:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self, config: ScalingConfig):
        self.config = config
        self.k8s_apps_v1 = client.AppsV1Api()
        self.last_scale_time = 0
        
    async def check_and_scale(self, deployment_name: str, namespace: str = 'default'):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –ø–µ—Ä–∏–æ–¥–∞
        if current_time - self.last_scale_time < self.config.cooldown_period:
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
        metrics = await self._get_current_metrics(deployment_name, namespace)
        
        # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
        scale_decision = self._make_scaling_decision(metrics)
        
        if scale_decision != 0:
            await self._scale_deployment(deployment_name, namespace, scale_decision)
            self.last_scale_time = current_time
            
    async def _get_current_metrics(self, deployment_name: str, namespace: str) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus
        return {
            'cpu_utilization': np.random.uniform(0.3, 0.9),
            'memory_utilization': np.random.uniform(0.4, 0.8),
            'request_rate': np.random.uniform(100, 1000),
            'response_time': np.random.uniform(0.1, 2.0)
        }
        
    def _make_scaling_decision(self, metrics: Dict[str, float]) -> int:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        cpu_util = metrics['cpu_utilization']
        memory_util = metrics['memory_utilization']
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö
        if (cpu_util > self.config.scale_up_threshold or 
            memory_util > self.config.scale_up_threshold):
            return 1  # –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1 —Ä–µ–ø–ª–∏–∫—É
            
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–∏–∑
        if (cpu_util < self.config.scale_down_threshold and 
            memory_util < self.config.scale_down_threshold):
            return -1  # –£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 1 —Ä–µ–ø–ª–∏–∫—É
            
        return 0  # –ù–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å
        
    async def _scale_deployment(self, deployment_name: str, namespace: str, scale_delta: int):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ deployment"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ deployment
            deployment = self.k8s_apps_v1.read_namespaced_deployment(
                name=deployment_name,
                namespace=namespace
            )
            
            current_replicas = deployment.spec.replicas
            new_replicas = max(
                self.config.min_replicas,
                min(self.config.max_replicas, current_replicas + scale_delta)
            )
            
            if new_replicas != current_replicas:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–ø–ª–∏–∫
                deployment.spec.replicas = new_replicas
                
                self.k8s_apps_v1.patch_namespaced_deployment(
                    name=deployment_name,
                    namespace=namespace,
                    body=deployment
                )
                
                logging.info(f"Scaled {deployment_name} from {current_replicas} to {new_replicas} replicas")
                
        except Exception as e:
            logging.error(f"Scaling error: {e}")

class LoadBalancer:
    """–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è ML-—Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self, endpoints: List[str]):
        self.endpoints = endpoints
        self.current_index = 0
        self.endpoint_stats = {ep: {'requests': 0, 'errors': 0, 'avg_response_time': 0} 
                              for ep in endpoints}
        
    def get_next_endpoint(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ endpoint —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è round-robin –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
        endpoint = self.endpoints[self.current_index]
        self.current_index = (self.current_index + 1) % len(self.endpoints)
        return endpoint
        
    def get_best_endpoint(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ endpoint –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        best_endpoint = min(
            self.endpoints,
            key=lambda ep: (
                self.endpoint_stats[ep]['errors'] / max(1, self.endpoint_stats[ep]['requests']) +
                self.endpoint_stats[ep]['avg_response_time']
            )
        )
        return best_endpoint
        
    def update_endpoint_stats(self, endpoint: str, response_time: float, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ endpoint"""
        stats = self.endpoint_stats[endpoint]
        stats['requests'] += 1
        
        if not success:
            stats['errors'] += 1
            
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        alpha = 0.1
        stats['avg_response_time'] = (
            alpha * response_time + 
            (1 - alpha) * stats['avg_response_time']
        )

class ScalableMLService:
    """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π ML-—Å–µ—Ä–≤–∏—Å"""
    
    def __init__(self, config: ScalingConfig):
        self.config = config
        self.model = None
        self.batcher = RequestBatcher()
        self.cache_manager = CacheManager()
        self.auto_scaler = AutoScaler(config)
        self.load_balancer = LoadBalancer(['http://ml-service-1:8080', 'http://ml-service-2:8080'])
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        self.model = DistributedMLModel('model.pth', [0, 1])
        self.model.load_model()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        asyncio.create_task(self._monitoring_loop())
        asyncio.create_task(self._scaling_loop())
        
    async def predict(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cached_result = await self.cache_manager.get_cached_prediction(request_data)
            if cached_result:
                REQUEST_COUNT.labels(model='main', status='cache_hit').inc()
                return cached_result
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –±–∞—Ç—á–µ—Ä
            result = await self.batcher.add_request(request_data)
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await self.cache_manager.cache_prediction(request_data, result)
            
            REQUEST_COUNT.labels(model='main', status='success').inc()
            return result
            
        except Exception as e:
            REQUEST_COUNT.labels(model='main', status='error').inc()
            logging.error(f"Prediction error: {e}")
            raise
            
        finally:
            duration = time.time() - start_time
            REQUEST_DURATION.labels(model='main').observe(duration)
            
    async def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫"""
        while True:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ GPU
                if torch.cuda.is_available():
                    gpu_util = torch.cuda.utilization()
                    GPU_UTILIZATION.set(gpu_util)
                    
                await asyncio.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logging.error(f"Monitoring error: {e}")
                await asyncio.sleep(60)
                
    async def _scaling_loop(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        while True:
            try:
                await self.auto_scaler.check_and_scale('ml-service')
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logging.error(f"Scaling error: {e}")
                await asyncio.sleep(300)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    scaling_config = ScalingConfig(
        min_replicas=2,
        max_replicas=10,
        target_cpu_utilization=70,
        scale_up_threshold=0.8,
        scale_down_threshold=0.3
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    ml_service = ScalableMLService(scaling_config)
    await ml_service.initialize()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in range(100):
        request_data = {
            'features': np.random.random(10).tolist(),
            'model_version': '1.0'
        }
        
        result = await ml_service.predict(request_data)
        print(f"Request {i}: {result}")
        
        await asyncio.sleep(0.1)

if __name__ == "__main__":
    asyncio.run(main())
\`\`\`

## Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

\`\`\`yaml
# ml-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-service
  labels:
    app: ml-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ml-service
  template:
    metadata:
      labels:
        app: ml-service
    spec:
      containers:
      - name: ml-service
        image: ml-service:latest
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            nvidia.com/gpu: 1
          limits:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
        env:
        - name: REDIS_HOST
          value: "redis-service"
        - name: MODEL_PATH
          value: "/models/model.pth"
        volumeMounts:
        - name: model-storage
          mountPath: /models
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-pvc

---
# ml-service-hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-service
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: ml_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# ml-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ml-service
  labels:
    app: ml-service
spec:
  selector:
    app: ml-service
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# ml-service-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ml-service-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  rules:
  - host: ml-api.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ml-service
            port:
              number: 80
\`\`\`

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã

\`\`\`python
import asyncio
import aiohttp
from prometheus_client import start_http_server, Counter, Histogram, Gauge
import logging
import time
from typing import Dict, List
import json

class ScalingMetricsCollector:
    """–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.request_rate = Gauge('ml_request_rate', 'Requests per second')
        self.response_time_p95 = Gauge('ml_response_time_p95', 'P95 response time')
        self.error_rate = Gauge('ml_error_rate', 'Error rate percentage')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.cpu_utilization = Gauge('ml_cpu_utilization', 'CPU utilization percentage')
        self.memory_utilization = Gauge('ml_memory_utilization', 'Memory utilization percentage')
        self.gpu_utilization = Gauge('ml_gpu_utilization', 'GPU utilization percentage')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.replica_count = Gauge('ml_replica_count', 'Number of replicas')
        self.pending_requests = Gauge('ml_pending_requests', 'Number of pending requests')
        self.cache_hit_rate = Gauge('ml_cache_hit_rate', 'Cache hit rate percentage')
        
        # –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        self.metrics_history = []
        
    async def collect_metrics(self):
        """–°–±–æ—Ä –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        metrics = {
            'timestamp': time.time(),
            'request_rate': await self._get_request_rate(),
            'response_time_p95': await self._get_response_time_p95(),
            'error_rate': await self._get_error_rate(),
            'cpu_utilization': await self._get_cpu_utilization(),
            'memory_utilization': await self._get_memory_utilization(),
            'gpu_utilization': await self._get_gpu_utilization(),
            'replica_count': await self._get_replica_count(),
            'pending_requests': await self._get_pending_requests(),
            'cache_hit_rate': await self._get_cache_hit_rate()
        }
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Prometheus –º–µ—Ç—Ä–∏–∫
        self.request_rate.set(metrics['request_rate'])
        self.response_time_p95.set(metrics['response_time_p95'])
        self.error_rate.set(metrics['error_rate'])
        self.cpu_utilization.set(metrics['cpu_utilization'])
        self.memory_utilization.set(metrics['memory_utilization'])
        self.gpu_utilization.set(metrics['gpu_utilization'])
        self.replica_count.set(metrics['replica_count'])
        self.pending_requests.set(metrics['pending_requests'])
        self.cache_hit_rate.set(metrics['cache_hit_rate'])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.metrics_history.append(metrics)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.metrics_history) > 1000:
            self.metrics_history = self.metrics_history[-1000:]
            
        return metrics
        
    async def _get_request_rate(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –∑–∞–ø—Ä–æ—Å –∫ Prometheus
        return 150.0 + (time.time() % 100) * 2
        
    async def _get_response_time_p95(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ P95 –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
        return 0.5 + (time.time() % 50) * 0.01
        
    async def _get_error_rate(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—à–∏–±–æ–∫"""
        return max(0, 2.0 + (time.time() % 30) * 0.1 - 1.5)
        
    async def _get_cpu_utilization(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ CPU"""
        return 60.0 + (time.time() % 40) * 0.5
        
    async def _get_memory_utilization(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏"""
        return 70.0 + (time.time() % 30) * 0.3
        
    async def _get_gpu_utilization(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ GPU"""
        return 80.0 + (time.time() % 20) * 0.2
        
    async def _get_replica_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–ø–ª–∏–∫"""
        return 5  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - –∑–∞–ø—Ä–æ—Å –∫ Kubernetes API
        
    async def _get_pending_requests(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return max(0, int(10 + (time.time() % 60) - 30))
        
    async def _get_cache_hit_rate(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à"""
        return 85.0 + (time.time() % 15) * 0.1

class PredictiveScaler:
    """–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML"""
    
    def __init__(self, metrics_collector: ScalingMetricsCollector):
        self.metrics_collector = metrics_collector
        self.prediction_model = None
        
    def train_prediction_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏"""
        if len(self.metrics_collector.metrics_history) < 100:
            return
            
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        features = []
        targets = []
        
        for i in range(len(self.metrics_collector.metrics_history) - 10):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–æ—á–µ–∫ –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫–∏
            feature_window = self.metrics_collector.metrics_history[i:i+10]
            target = self.metrics_collector.metrics_history[i+10]['request_rate']
            
            features.append([
                point['request_rate'] for point in feature_window
            ])
            targets.append(target)
            
        # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        import numpy as np
        from sklearn.linear_model import LinearRegression
        
        X = np.array(features)
        y = np.array(targets)
        
        self.prediction_model = LinearRegression()
        self.prediction_model.fit(X, y)
        
    def predict_future_load(self, horizon_minutes: int = 5) -> List[float]:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
        if self.prediction_model is None or len(self.metrics_collector.metrics_history) < 10:
            return []
            
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–æ—á–µ–∫ –∫–∞–∫ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        recent_metrics = self.metrics_collector.metrics_history[-10:]
        features = np.array([[point['request_rate'] for point in recent_metrics]])
        
        predictions = []
        for _ in range(horizon_minutes):
            pred = self.prediction_model.predict(features)[0]
            predictions.append(pred)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
            features = np.roll(features, -1)
            features[0, -1] = pred
            
        return predictions
        
    def recommend_scaling_action(self) -> Dict[str, Any]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é"""
        predictions = self.predict_future_load()
        
        if not predictions:
            return {'action': 'no_change', 'reason': 'insufficient_data'}
            
        current_replicas = self.metrics_collector.metrics_history[-1]['replica_count']
        max_predicted_load = max(predictions)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        if max_predicted_load > 200:  # –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            recommended_replicas = min(20, int(current_replicas * 1.5))
            return {
                'action': 'scale_up',
                'target_replicas': recommended_replicas,
                'reason': f'Predicted load spike: {max_predicted_load:.1f} req/s'
            }
        elif max_predicted_load < 50:  # –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            recommended_replicas = max(2, int(current_replicas * 0.7))
            return {
                'action': 'scale_down',
                'target_replicas': recommended_replicas,
                'reason': f'Predicted low load: {max_predicted_load:.1f} req/s'
            }
        else:
            return {'action': 'no_change', 'reason': 'load_within_normal_range'}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def monitoring_example():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
    metrics_collector = ScalingMetricsCollector()
    predictive_scaler = PredictiveScaler(metrics_collector)
    
    # –ó–∞–ø—É—Å–∫ Prometheus —Å–µ—Ä–≤–µ—Ä–∞
    start_http_server(8000)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    for i in range(200):
        # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        metrics = await metrics_collector.collect_metrics()
        print(f"Iteration {i}: Request rate: {metrics['request_rate']:.1f} req/s, "
              f"CPU: {metrics['cpu_utilization']:.1f}%, "
              f"Replicas: {metrics['replica_count']}")
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 50 –∏—Ç–µ—Ä–∞—Ü–∏–π
        if i % 50 == 0 and i > 0:
            predictive_scaler.train_prediction_model()
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é
        if i % 10 == 0 and i > 100:
            recommendation = predictive_scaler.recommend_scaling_action()
            if recommendation['action'] != 'no_change':
                print(f"Scaling recommendation: {recommendation}")
                
        await asyncio.sleep(1)

if __name__ == "__main__":
    asyncio.run(monitoring_example())
\`\`\`

## –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

\`\`\`python
class ScalingROICalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ROI –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è ML-—Å–∏—Å—Ç–µ–º"""
    
    def __init__(self):
        self.base_infrastructure_cost = 50000  # —Ä—É–±/–º–µ—Å—è—Ü –∑–∞ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.cost_per_replica = 8000  # —Ä—É–±/–º–µ—Å—è—Ü –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–ø–ª–∏–∫—É
        self.downtime_cost_per_hour = 100000  # —Ä—É–±/—á–∞—Å –ø—Ä–æ—Å—Ç–æ—è
        self.development_cost = 2000000  # —Ä—É–± –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def calculate_scaling_benefits(self, 
                                 current_replicas: int,
                                 optimized_replicas: int,
                                 uptime_improvement: float,
                                 performance_improvement: float) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –≤—ã–≥–æ–¥ –æ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        infrastructure_savings = (current_replicas - optimized_replicas) * self.cost_per_replica * 12
        
        # –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è uptime
        downtime_reduction_hours = 8760 * uptime_improvement  # —á–∞—Å–æ–≤ –≤ –≥–æ–¥—É
        uptime_savings = downtime_reduction_hours * self.downtime_cost_per_hour
        
        # –í—ã–≥–æ–¥—ã –æ—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_benefits = 5000000 * performance_improvement  # —Ä—É–±/–≥–æ–¥
        
        total_annual_benefits = infrastructure_savings + uptime_savings + performance_benefits
        
        return {
            'infrastructure_savings': infrastructure_savings,
            'uptime_savings': uptime_savings,
            'performance_benefits': performance_benefits,
            'total_annual_benefits': total_annual_benefits
        }
        
    def calculate_roi(self, annual_benefits: float, implementation_cost: float) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç ROI"""
        annual_roi = (annual_benefits - implementation_cost) / implementation_cost * 100
        payback_period = implementation_cost / annual_benefits
        
        return {
            'annual_roi_percent': annual_roi,
            'payback_period_years': payback_period,
            'net_present_value_3_years': annual_benefits * 3 - implementation_cost
        }

# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞
calculator = ScalingROICalculator()

benefits = calculator.calculate_scaling_benefits(
    current_replicas=10,
    optimized_replicas=6,
    uptime_improvement=0.02,  # 2% —É–ª—É—á—à–µ–Ω–∏–µ uptime
    performance_improvement=0.15  # 15% —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
)

roi_metrics = calculator.calculate_roi(
    annual_benefits=benefits['total_annual_benefits'],
    implementation_cost=calculator.development_cost
)

print("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤—ã–≥–æ–¥—ã –æ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {benefits['infrastructure_savings']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç uptime: {benefits['uptime_savings']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–í—ã–≥–æ–¥—ã –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {benefits['performance_benefits']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"–û–±—â–∏–µ –≤—ã–≥–æ–¥—ã: {benefits['total_annual_benefits']:,.0f} —Ä—É–±/–≥–æ–¥")
print(f"ROI: {roi_metrics['annual_roi_percent']:.1f}%")
print(f"–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['payback_period_years']:.1f} –ª–µ—Ç")
\`\`\`
      `,
      homework: `
# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π ML-—Å–∏—Å—Ç–µ–º—ã

## –ó–∞–¥–∞–Ω–∏–µ 1: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã
–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ML-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 10,000+ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É:

1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
3. –°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
4. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è

## –ó–∞–¥–∞–Ω–∏–µ 2: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–∞—Ç—á–∏–Ω–≥–∞
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –±–∞—Ç—á–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏:
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
- –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

## –ó–∞–¥–∞–Ω–∏–µ 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥
–°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π ML-—Å–∏—Å—Ç–µ–º—ã:
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π
- –†–µ–∞–ª–∏–∑—É–π—Ç–µ dashboard –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
- –°–æ–∑–¥–∞–π—Ç–µ runbook –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã

## –ó–∞–¥–∞–Ω–∏–µ 4: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:
- –°—Ä–∞–≤–Ω–∏—Ç–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
- –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ TCO –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞–≥—Ä—É–∑–∫–∏
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è
- –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è

## –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (30%)
- –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (25%)
- –ü–æ–ª–Ω–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (20%)
- –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (25%)

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:
- Kubernetes documentation on HPA
- Prometheus monitoring best practices
- ML system design patterns
- Cost optimization strategies for ML workloads
      `
    }
  },
  36: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞ - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º—ã –≤ production",
    duration: 240,
    module: 6,
    content: `
# –£—Ä–æ–∫ 36: –ü—Ä–∞–∫—Ç–∏–∫–∞ - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ML-—Å–∏—Å—Ç–µ–º—ã –≤ production

## –í–≤–µ–¥–µ–Ω–∏–µ

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ –ú–æ–¥—É–ª—è 6! –í —ç—Ç–æ–º –º–∞—Å—à—Ç–∞–±–Ω–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–∫–µ –º—ã –æ–±—ä–µ–¥–∏–Ω–∏–º –≤—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ MLOps –∏ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—É—é ML-—Å–∏—Å—Ç–µ–º—É —Å –Ω—É–ª—è –¥–æ production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.

–ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–µ–º **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è** - –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ MLOps: –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

### –û–±—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:

1. **–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö**: IoT –¥–∞—Ç—á–∏–∫–∏, SCADA —Å–∏—Å—Ç–µ–º—ã, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
2. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö**: ETL –ø–∞–π–ø–ª–∞–π–Ω—ã, feature engineering, –≤–∞–ª–∏–¥–∞—Ü–∏—è
3. **ML –ø–∞–π–ø–ª–∞–π–Ω**: –æ–±—É—á–µ–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
4. **Inference —Å–µ—Ä–≤–∏—Å**: REST API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
5. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –º–µ—Ç—Ä–∏–∫–∏, –∞–ª–µ—Ä—Ç—ã, drift detection
6. **–û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è**: Kubernetes, –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, CI/CD

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫

- **–Ø–∑—ã–∫–∏**: Python 3.9+, SQL
- **ML —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏**: scikit-learn, XGBoost, PyTorch
- **MLOps**: MLflow, Apache Airflow, DVC
- **–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è**: Docker, Kubernetes
- **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: Prometheus, Grafana, ELK Stack
- **CI/CD**: GitLab CI, Jenkins
- **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**: PostgreSQL, InfluxDB, Redis
- **–û–±–ª–∞–∫–æ**: Kubernetes, Helm

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

### –†–∞—Å—á–µ—Ç ROI –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

**–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
- **ROI: 1,733%** –Ω–∞ 5 –ª–µ—Ç
- **–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: 0.4 –≥–æ–¥–∞**
- **–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: 162+ –º–ª–Ω —Ä—É–±**
- **–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤: 85% —Ç–æ—á–Ω–æ—Å—Ç—å**
- **–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤: 60%**

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤—ã–≥–æ–¥—ã:

1. **–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤**: 89.1 –º–ª–Ω —Ä—É–±/–≥–æ–¥
2. **–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è**: 48.6 –º–ª–Ω —Ä—É–±/–≥–æ–¥
3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¢–û**: 25 –º–ª–Ω —Ä—É–±/–≥–æ–¥
4. **–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è**: 162.7 –º–ª–Ω —Ä—É–±/–≥–æ–¥

### –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–∏—Å—Ç–µ–º—É:

1. **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞**: 15 –º–ª–Ω —Ä—É–± (–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ)
2. **–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞**: 2.4 –º–ª–Ω —Ä—É–±/–≥–æ–¥
3. **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**: 1.8 –º–ª–Ω —Ä—É–±/–≥–æ–¥
4. **–û–±—É—á–µ–Ω–∏–µ**: 0.6 –º–ª–Ω —Ä—É–±/–≥–æ–¥

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

### 1. –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è ML –º–æ–¥–µ–ª—å —Å –∞–Ω—Å–∞–º–±–ª–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:
- **Random Forest** –¥–ª—è –±–∞–∑–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
- **Gradient Boosting** –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
- **XGBoost** –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

**–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤: 85%+
- –û–±—Ä–∞–±–æ—Ç–∫–∞ 22 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
- –ò–Ω–∂–µ–Ω–µ—Ä–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è

### 2. REST API —Å–µ—Ä–≤–∏—Å

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π API —Å–µ—Ä–≤–∏—Å —Å:
- **Flask** –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Å CORS –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
- **Prometheus** –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- **–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö** —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
- **Batch prediction** –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
- **Health checks** –¥–ª—è Kubernetes

**–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:**
- `POST /predict` - –µ–¥–∏–Ω–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
- `POST /batch_predict` - –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- `GET /health` - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- `GET /metrics` - –º–µ—Ç—Ä–∏–∫–∏ Prometheus
- `POST /model/reload` - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏

### 3. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è

–°–æ–∑–¥–∞–Ω production-ready Docker –æ–±—Ä–∞–∑:
- **Multi-stage build** –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
- **Security best practices** —Å –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
- **Health checks** –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- **Gunicorn** WSGI —Å–µ—Ä–≤–µ—Ä –¥–ª—è production

### 4. Kubernetes —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

–ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Kubernetes:
- **Deployment** —Å 3 —Ä–µ–ø–ª–∏–∫–∞–º–∏ –¥–ª—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
- **Service** –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
- **HPA** –¥–ª—è –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (3-10 –ø–æ–¥–æ–≤)
- **Ingress** —Å SSL —Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–µ–π –∏ rate limiting
- **ConfigMap/Secret** –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

### 5. CI/CD –ø–∞–π–ø–ª–∞–π–Ω

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å GitLab CI:
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** —Å pytest –∏ coverage
- **–°–±–æ—Ä–∫–∞** Docker –æ–±—Ä–∞–∑–æ–≤ —Å —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- **Staging deployment** –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
- **Production deployment** —Å —Ä—É—á–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º

### 6. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã

–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
- **Prometheus** –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
- **Grafana** dashboard —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
- **Alertmanager** –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
- **Custom metrics** –¥–ª—è ML-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π

**–ö–ª—é—á–µ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:**
- –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ API (>10%)
- –í—ã—Å–æ–∫–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (>2 —Å–µ–∫)
- –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
- –ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HIGH risk –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

## –†–æ—Å—Å–∏–π—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:
- **–ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001** - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- **152-–§–ó** - –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- **–§–°–¢–≠–ö –†–æ—Å—Å–∏–∏** - —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –°–£–ë–î (PostgresPro, ClickHouse)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –æ–±–ª–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤

## –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

### –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:
- **Kubernetes HPA** –Ω–∞ –æ—Å–Ω–æ–≤–µ CPU/Memory
- **Custom metrics** –¥–ª—è ML-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
- **Load balancing** —Å session affinity

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
- **Model optimization** —Å –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–µ–π
- **Caching** –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ Redis
- **Batch processing** –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- **Async processing** –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

### –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
- **TLS encryption** –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
- **JWT authentication** –¥–ª—è API –¥–æ—Å—Ç—É–ø–∞
- **RBAC** –≤ Kubernetes
- **Network policies** –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
- **Secrets management** —Å Kubernetes Secrets

### –ê—É–¥–∏—Ç –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
- **Structured logging** —Å ELK Stack
- **Audit trails** –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- **Security scanning** Docker –æ–±—Ä–∞–∑–æ–≤
- **Compliance monitoring**

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã —Å–æ–∑–¥–∞–ª–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é production-ready ML —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ MLOps: –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

1. **–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è ML –º–æ–¥–µ–ª—å** —Å –∞–Ω—Å–∞–º–±–ª–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é 85%+
2. **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π REST API** —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
3. **–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è** —Å Docker –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è —Å Kubernetes
4. **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CI/CD** –ø–∞–π–ø–ª–∞–π–Ω —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
5. **–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** —Å Prometheus –∏ Grafana
6. **–ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ** –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏

–°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø—ã—Ç:
- –°–æ–∑–¥–∞–Ω–∏—è production ML —Å–∏—Å—Ç–µ–º —Å –Ω—É–ª—è
- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ ML —Å–µ—Ä–≤–∏—Å–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ CI/CD –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –†–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ª—é–±–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –∏ —Å–ª—É–∂–∏—Ç –æ—Å–Ω–æ–≤–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö ML –ø–ª–∞—Ç—Ñ–æ—Ä–º.

**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ú–æ–¥—É–ª—è 6: MLOps –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ!** üéâ

–í—ã –æ—Å–≤–æ–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö ML —Å–∏—Å—Ç–µ–º –≤ production —Å—Ä–µ–¥–µ.
    `,
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
export const getLessonContent = (lessonId) => {
  return lessonContent[lessonId] || null;
};


  37: {
    title: "–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è AI-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    duration: "480 –º–∏–Ω",
    type: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    content: `
# –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è AI-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

## –í–≤–µ–¥–µ–Ω–∏–µ

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∫—É—Ä—Å–∞ "AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä"! –≠—Ç–æ—Ç –º–∞—Å—à—Ç–∞–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 6 –º–æ–¥—É–ª—è—Ö, –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π AI-—Å–∏—Å—Ç–µ–º—ã.

### –†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ

–ö–∞–∫ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞:
- **–°–∏—Å—Ç–µ–º–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É** - –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
- **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ** - –ø—Ä–∏–Ω—è—Ç–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤** - –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
- **–ö–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
- **–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ** - —Ä–∞—Å—á–µ—Ç ROI –∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞

## –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

### –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞

–°–æ–∑–¥–∞—Ç—å **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è** (–ò–°–£–ö–ü), –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:

1. **Computer Vision** –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
2. **–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É** –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤** —Å –ø–æ–º–æ—â—å—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
4. **Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
5. **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å** –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
6. **MLOps –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É** –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ

**–ó–∞–∫–∞–∑—á–∏–∫:** –ö—Ä—É–ø–Ω–æ–µ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ  
**–û—Ç—Ä–∞—Å–ª—å:** –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤  
**–ú–∞—Å—à—Ç–∞–±:** 5 –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π, 200+ –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è  
**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:** 99.9% (8.76 —á–∞—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ—è –≤ –≥–æ–¥)  
**–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:** –¥–æ 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É  

### –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

1. **–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏**
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 98%+
   - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—Ü–∞—Ä–∞–ø–∏–Ω—ã, –≤–º—è—Ç–∏–Ω—ã, —Ç—Ä–µ—â–∏–Ω—ã)
   - Real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ–Ω–≤–µ–π–µ—Ä–∞
   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏

2. **–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ**
   - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞ 7-14 –¥–Ω–µ–π
   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
   - –ê–Ω–∞–ª–∏–∑ –≤–∏–±—Ä–∞—Ü–∏–π, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –¥–∞–≤–ª–µ–Ω–∏—è
   - –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤**
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   - –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –±—Ä–∞–∫–∞ –∏ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
   - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
   - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

4. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**
   - Real-time –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ KPI
   - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∞–Ω–æ–º–∞–ª–∏–π
   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ERP –∏ MES —Å–∏—Å—Ç–µ–º–∞–º–∏

### –ù–µ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ 1000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:** –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 50 —É–∑–ª–æ–≤
- **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –∞—É–¥–∏—Ç
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:** –ì–û–°–¢ –† –ò–°–û 9001, –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 27001

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

### –û–±—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:

\`\`\`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                    –ò–°–£–ö–ü - –û–±—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞                ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  Frontend (React)                                           ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø–∞–Ω–µ–ª–∏                                    ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—à–±–æ—Ä–¥—ã                                 ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å                             ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  API Gateway (Kong/Nginx)                                   ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤                                 ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è                           ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ Rate limiting –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ                            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã                                               ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ Quality Control Service (Computer Vision)              ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ Predictive Maintenance Service                         ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ Process Optimization Service                           ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ Data Processing Service                                ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ Notification Service                                   ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ Reporting Service                                      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  –î–∞–Ω–Ω—ã–µ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞                                         ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ PostgreSQL (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)                  ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ InfluxDB (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã)                              ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ Redis (–∫—ç—à –∏ –æ—á–µ—Ä–µ–¥–∏)                                  ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ MinIO (–æ–±—ä–µ–∫—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)                            ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ Elasticsearch (–ª–æ–≥–∏ –∏ –ø–æ–∏—Å–∫)                           ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞                                             ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ Kubernetes (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è)                               ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ Prometheus + Grafana (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)                      ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ ELK Stack (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)                                ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ GitLab CI/CD (—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ)                           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫

**Backend:**
- Python 3.11 —Å FastAPI
- PyTorch –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
- scikit-learn –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ ML
- OpenCV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- Pandas/NumPy –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö

**Frontend:**
- React 18 —Å TypeScript
- Material-UI –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- Chart.js –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
- WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

**–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**
- Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏
- Kubernetes –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
- Helm –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º
- Prometheus/Grafana –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

**–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**
- PostgreSQL –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- InfluxDB –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
- Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
- MinIO –¥–ª—è –æ–±—ä–µ–∫—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

## –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

### 1. Quality Control Service (Computer Vision)

–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è:

\`\`\`python
import torch
import torch.nn as nn
import torchvision.transforms as transforms
from torchvision.models import efficientnet_b4
import cv2
import numpy as np
from fastapi import FastAPI, UploadFile, File
from pydantic import BaseModel
import asyncio
from typing import List, Dict, Optional
import logging
from datetime import datetime
import json

class DefectDetectionModel(nn.Module):
    """
    –ú–æ–¥–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ EfficientNet-B4
    """
    def __init__(self, num_classes: int = 5, pretrained: bool = True):
        super(DefectDetectionModel, self).__init__()
        
        # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å EfficientNet-B4
        self.backbone = efficientnet_b4(pretrained=pretrained)
        
        # –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        num_features = self.backbone.classifier.in_features
        self.backbone.classifier = nn.Sequential(
            nn.Dropout(0.4),
            nn.Linear(num_features, 512),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(512, 256),
            nn.ReLU(),
            nn.Linear(256, num_classes)
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–æ–ª–æ–≤–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤
        self.localization_head = nn.Sequential(
            nn.AdaptiveAvgPool2d((7, 7)),
            nn.Flatten(),
            nn.Linear(1792 * 7 * 7, 1024),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(1024, 4)  # x, y, width, height
        )
    
    def forward(self, x):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = self.backbone.features(x)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        classification = self.backbone.classifier(
            self.backbone.avgpool(features).flatten(1)
        )
        
        # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        localization = self.localization_head(features)
        
        return {
            'classification': classification,
            'localization': localization,
            'features': features
        }

class QualityControlProcessor:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
    """
    def __init__(self, model_path: str, device: str = 'cuda'):
        self.device = torch.device(device if torch.cuda.is_available() else 'cpu')
        self.model = self._load_model(model_path)
        self.transform = self._get_transforms()
        self.class_names = ['OK', 'Scratch', 'Dent', 'Crack', 'Stain']
        self.confidence_threshold = 0.85
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processed_count = 0
        self.defect_count = 0
        self.processing_times = []
        
        logging.info(f"QualityControlProcessor initialized on {self.device}")
    
    def _load_model(self, model_path: str) -> DefectDetectionModel:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        model = DefectDetectionModel(num_classes=5)
        checkpoint = torch.load(model_path, map_location=self.device)
        model.load_state_dict(checkpoint['model_state_dict'])
        model.to(self.device)
        model.eval()
        return model
    
    def _get_transforms(self):
        """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return transforms.Compose([
            transforms.ToPILImage(),
            transforms.Resize((380, 380)),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize(
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]
            )
        ])
    
    async def process_image(self, image: np.ndarray, 
                          metadata: Dict = None) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        start_time = datetime.now()
        
        try:
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            if len(image.shape) == 3 and image.shape[2] == 3:
                image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            else:
                image_rgb = image
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            input_tensor = self.transform(image_rgb).unsqueeze(0).to(self.device)
            
            # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
            with torch.no_grad():
                outputs = self.model(input_tensor)
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
                classification_logits = outputs['classification']
                probabilities = torch.softmax(classification_logits, dim=1)
                confidence, predicted_class = torch.max(probabilities, 1)
                
                # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
                localization = outputs['localization'].cpu().numpy()[0]
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    'timestamp': datetime.now().isoformat(),
                    'predicted_class': self.class_names[predicted_class.item()],
                    'confidence': confidence.item(),
                    'probabilities': {
                        name: prob for name, prob in 
                        zip(self.class_names, probabilities[0].cpu().numpy())
                    },
                    'bounding_box': {
                        'x': float(localization[0]),
                        'y': float(localization[1]),
                        'width': float(localization[2]),
                        'height': float(localization[3])
                    },
                    'is_defective': predicted_class.item() != 0,
                    'processing_time_ms': (datetime.now() - start_time).total_seconds() * 1000,
                    'metadata': metadata or {}
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.processed_count += 1
                if result['is_defective']:
                    self.defect_count += 1
                self.processing_times.append(result['processing_time_ms'])
                
                return result
                
        except Exception as e:
            logging.error(f"Error processing image: {str(e)}")
            return {
                'error': str(e),
                'timestamp': datetime.now().isoformat(),
                'processing_time_ms': (datetime.now() - start_time).total_seconds() * 1000
            }
    
    async def process_batch(self, images: List[np.ndarray], 
                          batch_metadata: List[Dict] = None) -> List[Dict]:
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        if batch_metadata is None:
            batch_metadata = [{}] * len(images)
        
        tasks = [
            self.process_image(img, meta) 
            for img, meta in zip(images, batch_metadata)
        ]
        
        results = await asyncio.gather(*tasks)
        return results
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.processing_times:
            return {'message': 'No processing statistics available'}
        
        return {
            'total_processed': self.processed_count,
            'defects_detected': self.defect_count,
            'defect_rate': self.defect_count / self.processed_count if self.processed_count > 0 else 0,
            'avg_processing_time_ms': np.mean(self.processing_times),
            'min_processing_time_ms': np.min(self.processing_times),
            'max_processing_time_ms': np.max(self.processing_times),
            'throughput_per_second': 1000 / np.mean(self.processing_times) if self.processing_times else 0
        }

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Quality Control Service", version="1.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
processor = None

@app.on_event("startup")
async def startup_event():
    global processor
    processor = QualityControlProcessor(
        model_path="/models/defect_detection_model.pth",
        device="cuda"
    )

class ImageProcessingRequest(BaseModel):
    image_id: str
    production_line: str
    timestamp: Optional[str] = None
    additional_metadata: Optional[Dict] = None

class ImageProcessingResponse(BaseModel):
    image_id: str
    predicted_class: str
    confidence: float
    is_defective: bool
    bounding_box: Dict[str, float]
    processing_time_ms: float
    timestamp: str

@app.post("/process_image", response_model=ImageProcessingResponse)
async def process_single_image(
    file: UploadFile = File(...),
    request_data: str = None
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = json.loads(request_data) if request_data else {}
        
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        contents = await file.read()
        nparr = np.frombuffer(contents, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        result = await processor.process_image(image, metadata)
        
        if 'error' in result:
            raise HTTPException(status_code=500, detail=result['error'])
        
        return ImageProcessingResponse(**result)
        
    except Exception as e:
        logging.error(f"Error in process_single_image: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/process_batch")
async def process_image_batch(files: List[UploadFile] = File(...)):
    """
    –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    try:
        images = []
        for file in files:
            contents = await file.read()
            nparr = np.frombuffer(contents, np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            images.append(image)
        
        results = await processor.process_batch(images)
        return {"results": results}
        
    except Exception as e:
        logging.error(f"Error in process_image_batch: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/statistics")
async def get_processing_statistics():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    return processor.get_statistics()

@app.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "device": str(processor.device),
        "model_loaded": processor.model is not None
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
\`\`\`

### 2. Predictive Maintenance Service

–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:

\`\`\`python
import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest, RandomForestRegressor
from sklearn.preprocessing import StandardScaler, RobustScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
import xgboost as xgb
from scipy import stats
from scipy.signal import find_peaks, welch
import joblib
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging
import asyncio
import json
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import warnings
warnings.filterwarnings('ignore')

class EquipmentHealthModel:
    """
    –ú–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    def __init__(self):
        self.anomaly_detector = IsolationForest(
            contamination=0.1,
            random_state=42,
            n_estimators=200
        )
        self.failure_predictor = xgb.XGBRegressor(
            n_estimators=300,
            max_depth=8,
            learning_rate=0.1,
            subsample=0.8,
            colsample_bytree=0.8,
            random_state=42
        )
        self.scaler = RobustScaler()
        self.feature_names = []
        self.is_trained = False
        
    def extract_features(self, sensor_data: pd.DataFrame) -> pd.DataFrame:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        """
        features = pd.DataFrame()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        for column in sensor_data.select_dtypes(include=[np.number]).columns:
            if column != 'timestamp':
                data = sensor_data[column].dropna()
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                features[f'{column}_mean'] = [data.mean()]
                features[f'{column}_std'] = [data.std()]
                features[f'{column}_min'] = [data.min()]
                features[f'{column}_max'] = [data.max()]
                features[f'{column}_median'] = [data.median()]
                features[f'{column}_q25'] = [data.quantile(0.25)]
                features[f'{column}_q75'] = [data.quantile(0.75)]
                features[f'{column}_iqr'] = [data.quantile(0.75) - data.quantile(0.25)]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                features[f'{column}_skewness'] = [stats.skew(data)]
                features[f'{column}_kurtosis'] = [stats.kurtosis(data)]
                
                # –¢—Ä–µ–Ω–¥—ã
                if len(data) > 1:
                    slope, _, r_value, _, _ = stats.linregress(range(len(data)), data)
                    features[f'{column}_trend_slope'] = [slope]
                    features[f'{column}_trend_r2'] = [r_value**2]
                
                # –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–∏)
                if 'vibration' in column.lower() and len(data) > 10:
                    freqs, psd = welch(data, fs=1000, nperseg=min(256, len(data)//4))
                    features[f'{column}_dominant_freq'] = [freqs[np.argmax(psd)]]
                    features[f'{column}_spectral_centroid'] = [np.sum(freqs * psd) / np.sum(psd)]
                    features[f'{column}_spectral_rolloff'] = [
                        freqs[np.where(np.cumsum(psd) >= 0.85 * np.sum(psd))[0][0]]
                    ]
        
        return features
    
    def train(self, training_data: List[Dict]) -> Dict:
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            features_list = []
            targets = []
            
            for record in training_data:
                sensor_df = pd.DataFrame(record['sensor_data'])
                features = self.extract_features(sensor_df)
                features_list.append(features)
                targets.append(record['days_to_failure'])
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            X = pd.concat(features_list, ignore_index=True)
            y = np.array(targets)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.feature_names = X.columns.tolist()
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            X_scaled = self.scaler.fit_transform(X)
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            X_train, X_test, y_train, y_test = train_test_split(
                X_scaled, y, test_size=0.2, random_state=42
            )
            
            # –û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π
            self.anomaly_detector.fit(X_train)
            
            # –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞ –æ—Ç–∫–∞–∑–æ–≤
            self.failure_predictor.fit(X_train, y_train)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            y_pred = self.failure_predictor.predict(X_test)
            mse = mean_squared_error(y_test, y_pred)
            mae = mean_absolute_error(y_test, y_pred)
            
            self.is_trained = True
            
            return {
                'status': 'success',
                'mse': float(mse),
                'mae': float(mae),
                'rmse': float(np.sqrt(mse)),
                'feature_count': len(self.feature_names),
                'training_samples': len(X_train)
            }
            
        except Exception as e:
            logging.error(f"Error training model: {str(e)}")
            return {'status': 'error', 'message': str(e)}
    
    def predict(self, sensor_data: pd.DataFrame) -> Dict:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        """
        if not self.is_trained:
            raise ValueError("Model is not trained")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self.extract_features(sensor_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            missing_features = set(self.feature_names) - set(features.columns)
            if missing_features:
                for feature in missing_features:
                    features[feature] = 0
            
            features = features[self.feature_names]
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            X_scaled = self.scaler.transform(features)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            anomaly_score = self.anomaly_detector.decision_function(X_scaled)[0]
            is_anomaly = self.anomaly_detector.predict(X_scaled)[0] == -1
            days_to_failure = self.failure_predictor.predict(X_scaled)[0]
            
            # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if days_to_failure < 7:
                health_status = "CRITICAL"
                recommended_action = "IMMEDIATE_MAINTENANCE"
            elif days_to_failure < 14:
                health_status = "WARNING"
                recommended_action = "SCHEDULE_MAINTENANCE"
            elif is_anomaly:
                health_status = "ATTENTION"
                recommended_action = "MONITOR_CLOSELY"
            else:
                health_status = "NORMAL"
                recommended_action = "CONTINUE_OPERATION"
            
            return {
                'health_status': health_status,
                'days_to_failure': float(days_to_failure),
                'anomaly_score': float(anomaly_score),
                'is_anomaly': bool(is_anomaly),
                'recommended_action': recommended_action,
                'confidence': min(1.0, max(0.0, 1.0 - abs(anomaly_score) / 2.0)),
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logging.error(f"Error making prediction: {str(e)}")
            return {'error': str(e)}

class PredictiveMaintenanceService:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    """
    def __init__(self):
        self.equipment_models = {}
        self.maintenance_schedule = {}
        self.alert_thresholds = {
            'CRITICAL': 7,
            'WARNING': 14,
            'ATTENTION': 30
        }
        
    def register_equipment(self, equipment_id: str, equipment_type: str) -> Dict:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        """
        if equipment_id not in self.equipment_models:
            self.equipment_models[equipment_id] = {
                'model': EquipmentHealthModel(),
                'type': equipment_type,
                'last_prediction': None,
                'maintenance_history': []
            }
            return {'status': 'success', 'message': f'Equipment {equipment_id} registered'}
        else:
            return {'status': 'warning', 'message': f'Equipment {equipment_id} already registered'}
    
    async def train_equipment_model(self, equipment_id: str, 
                                  training_data: List[Dict]) -> Dict:
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        """
        if equipment_id not in self.equipment_models:
            return {'status': 'error', 'message': f'Equipment {equipment_id} not registered'}
        
        result = self.equipment_models[equipment_id]['model'].train(training_data)
        return result
    
    async def predict_equipment_health(self, equipment_id: str, 
                                     sensor_data: List[Dict]) -> Dict:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        """
        if equipment_id not in self.equipment_models:
            return {'status': 'error', 'message': f'Equipment {equipment_id} not registered'}
        
        model = self.equipment_models[equipment_id]['model']
        if not model.is_trained:
            return {'status': 'error', 'message': f'Model for {equipment_id} is not trained'}
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        sensor_df = pd.DataFrame(sensor_data)
        
        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict(sensor_df)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        self.equipment_models[equipment_id]['last_prediction'] = prediction
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–ª–µ—Ä—Ç–æ–≤
        if prediction.get('health_status') in ['CRITICAL', 'WARNING']:
            await self._generate_alert(equipment_id, prediction)
        
        return {
            'equipment_id': equipment_id,
            'prediction': prediction,
            'timestamp': datetime.now().isoformat()
        }
    
    async def _generate_alert(self, equipment_id: str, prediction: Dict):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        """
        alert = {
            'equipment_id': equipment_id,
            'alert_type': prediction['health_status'],
            'days_to_failure': prediction['days_to_failure'],
            'recommended_action': prediction['recommended_action'],
            'timestamp': datetime.now().isoformat(),
            'urgency': 'HIGH' if prediction['health_status'] == 'CRITICAL' else 'MEDIUM'
        }
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logging.warning(f"MAINTENANCE ALERT: {alert}")
        
        return alert
    
    def get_maintenance_schedule(self, days_ahead: int = 30) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        """
        schedule = []
        current_date = datetime.now()
        
        for equipment_id, equipment_data in self.equipment_models.items():
            last_prediction = equipment_data.get('last_prediction')
            if last_prediction and 'days_to_failure' in last_prediction:
                failure_date = current_date + timedelta(days=last_prediction['days_to_failure'])
                
                if failure_date <= current_date + timedelta(days=days_ahead):
                    schedule.append({
                        'equipment_id': equipment_id,
                        'equipment_type': equipment_data['type'],
                        'scheduled_date': failure_date.isoformat(),
                        'days_until_maintenance': last_prediction['days_to_failure'],
                        'priority': last_prediction['health_status'],
                        'recommended_action': last_prediction['recommended_action']
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–∞—Ç–µ
        priority_order = {'CRITICAL': 0, 'WARNING': 1, 'ATTENTION': 2, 'NORMAL': 3}
        schedule.sort(key=lambda x: (priority_order.get(x['priority'], 4), x['days_until_maintenance']))
        
        return schedule
    
    def get_equipment_status(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        """
        status = {
            'total_equipment': len(self.equipment_models),
            'by_status': {'CRITICAL': 0, 'WARNING': 0, 'ATTENTION': 0, 'NORMAL': 0, 'UNKNOWN': 0},
            'equipment_details': []
        }
        
        for equipment_id, equipment_data in self.equipment_models.items():
            last_prediction = equipment_data.get('last_prediction')
            if last_prediction:
                health_status = last_prediction.get('health_status', 'UNKNOWN')
                status['by_status'][health_status] += 1
                
                status['equipment_details'].append({
                    'equipment_id': equipment_id,
                    'type': equipment_data['type'],
                    'health_status': health_status,
                    'days_to_failure': last_prediction.get('days_to_failure'),
                    'last_updated': last_prediction.get('timestamp')
                })
            else:
                status['by_status']['UNKNOWN'] += 1
                status['equipment_details'].append({
                    'equipment_id': equipment_id,
                    'type': equipment_data['type'],
                    'health_status': 'UNKNOWN',
                    'days_to_failure': None,
                    'last_updated': None
                })
        
        return status

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Predictive Maintenance Service", version="1.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
maintenance_service = PredictiveMaintenanceService()

class EquipmentRegistration(BaseModel):
    equipment_id: str
    equipment_type: str

class TrainingRequest(BaseModel):
    equipment_id: str
    training_data: List[Dict]

class PredictionRequest(BaseModel):
    equipment_id: str
    sensor_data: List[Dict]

@app.post("/register_equipment")
async def register_equipment(request: EquipmentRegistration):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    result = maintenance_service.register_equipment(
        request.equipment_id, 
        request.equipment_type
    )
    return result

@app.post("/train_model")
async def train_model(request: TrainingRequest):
    """
    –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    result = await maintenance_service.train_equipment_model(
        request.equipment_id,
        request.training_data
    )
    return result

@app.post("/predict_health")
async def predict_health(request: PredictionRequest):
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    result = await maintenance_service.predict_equipment_health(
        request.equipment_id,
        request.sensor_data
    )
    return result

@app.get("/maintenance_schedule")
async def get_maintenance_schedule(days_ahead: int = 30):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    """
    schedule = maintenance_service.get_maintenance_schedule(days_ahead)
    return {"schedule": schedule}

@app.get("/equipment_status")
async def get_equipment_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    """
    status = maintenance_service.get_equipment_status()
    return status

@app.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "registered_equipment": len(maintenance_service.equipment_models)
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8002)
\`\`\`

### 3. Process Optimization Service

–°–µ—Ä–≤–∏—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:

\`\`\`python
import numpy as np
import pandas as pd
from scipy.optimize import minimize, differential_evolution
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
import optuna
from typing import Dict, List, Optional, Tuple, Any
import logging
import asyncio
import json
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import warnings
warnings.filterwarnings('ignore')

class ProcessOptimizer:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    """
    def __init__(self):
        self.models = {}
        self.scalers = {}
        self.optimization_history = []
        self.parameter_bounds = {}
        self.target_metrics = ['quality', 'efficiency', 'energy_consumption', 'throughput']
        
    def register_process(self, process_id: str, parameter_bounds: Dict[str, Tuple[float, float]],
                        target_weights: Dict[str, float] = None) -> Dict:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        if target_weights is None:
            target_weights = {
                'quality': 0.4,
                'efficiency': 0.3,
                'energy_consumption': -0.2,  # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º
                'throughput': 0.1
            }
        
        self.parameter_bounds[process_id] = parameter_bounds
        self.models[process_id] = {
            'quality_model': RandomForestRegressor(n_estimators=200, random_state=42),
            'efficiency_model': RandomForestRegressor(n_estimators=200, random_state=42),
            'energy_model': GradientBoostingRegressor(n_estimators=200, random_state=42),
            'throughput_model': RandomForestRegressor(n_estimators=200, random_state=42),
            'target_weights': target_weights,
            'is_trained': False,
            'training_score': None
        }
        self.scalers[process_id] = {
            'input_scaler': StandardScaler(),
            'output_scalers': {
                'quality': MinMaxScaler(),
                'efficiency': MinMaxScaler(),
                'energy_consumption': MinMaxScaler(),
                'throughput': MinMaxScaler()
            }
        }
        
        return {
            'status': 'success',
            'message': f'Process {process_id} registered',
            'parameters': list(parameter_bounds.keys()),
            'target_weights': target_weights
        }
    
    def train_process_models(self, process_id: str, training_data: List[Dict]) -> Dict:
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        if process_id not in self.models:
            return {'status': 'error', 'message': f'Process {process_id} not registered'}
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = pd.DataFrame(training_data)
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ü–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            parameter_columns = list(self.parameter_bounds[process_id].keys())
            X = df[parameter_columns].values
            
            targets = {}
            for metric in self.target_metrics:
                if metric in df.columns:
                    targets[metric] = df[metric].values
                else:
                    logging.warning(f"Target metric {metric} not found in training data")
                    continue
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            X_scaled = self.scalers[process_id]['input_scaler'].fit_transform(X)
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
            training_scores = {}
            for metric, y in targets.items():
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                y_scaled = self.scalers[process_id]['output_scalers'][metric].fit_transform(
                    y.reshape(-1, 1)
                ).ravel()
                
                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                X_train, X_test, y_train, y_test = train_test_split(
                    X_scaled, y_scaled, test_size=0.2, random_state=42
                )
                
                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                model = self.models[process_id][f'{metric}_model']
                model.fit(X_train, y_train)
                
                # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                y_pred = model.predict(X_test)
                r2 = r2_score(y_test, y_pred)
                mse = mean_squared_error(y_test, y_pred)
                
                training_scores[metric] = {
                    'r2_score': float(r2),
                    'mse': float(mse),
                    'rmse': float(np.sqrt(mse))
                }
            
            self.models[process_id]['is_trained'] = True
            self.models[process_id]['training_score'] = training_scores
            
            return {
                'status': 'success',
                'training_scores': training_scores,
                'trained_metrics': list(training_scores.keys()),
                'training_samples': len(X)
            }
            
        except Exception as e:
            logging.error(f"Error training models for process {process_id}: {str(e)}")
            return {'status': 'error', 'message': str(e)}
    
    def predict_metrics(self, process_id: str, parameters: Dict[str, float]) -> Dict:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        if process_id not in self.models:
            return {'error': f'Process {process_id} not registered'}
        
        if not self.models[process_id]['is_trained']:
            return {'error': f'Models for process {process_id} are not trained'}
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            parameter_columns = list(self.parameter_bounds[process_id].keys())
            X = np.array([[parameters.get(param, 0) for param in parameter_columns]])
            X_scaled = self.scalers[process_id]['input_scaler'].transform(X)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            predictions = {}
            for metric in self.target_metrics:
                model_key = f'{metric}_model'
                if model_key in self.models[process_id]:
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
                    y_pred_scaled = self.models[process_id][model_key].predict(X_scaled)
                    
                    # –û–±—Ä–∞—Ç–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                    y_pred = self.scalers[process_id]['output_scalers'][metric].inverse_transform(
                        y_pred_scaled.reshape(-1, 1)
                    )[0, 0]
                    
                    predictions[metric] = float(y_pred)
            
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞
            weights = self.models[process_id]['target_weights']
            total_score = sum(
                predictions.get(metric, 0) * weight 
                for metric, weight in weights.items()
            )
            
            return {
                'predictions': predictions,
                'total_score': float(total_score),
                'parameters': parameters,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logging.error(f"Error predicting metrics: {str(e)}")
            return {'error': str(e)}
    
    def optimize_parameters(self, process_id: str, 
                          optimization_method: str = 'differential_evolution',
                          max_iterations: int = 100) -> Dict:
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        if process_id not in self.models:
            return {'error': f'Process {process_id} not registered'}
        
        if not self.models[process_id]['is_trained']:
            return {'error': f'Models for process {process_id} are not trained'}
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            bounds = list(self.parameter_bounds[process_id].values())
            parameter_names = list(self.parameter_bounds[process_id].keys())
            
            # –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            def objective_function(x):
                parameters = dict(zip(parameter_names, x))
                result = self.predict_metrics(process_id, parameters)
                if 'error' in result:
                    return 1e6  # –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
                return -result['total_score']  # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫–æ—Ä
            
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if optimization_method == 'differential_evolution':
                result = differential_evolution(
                    objective_function,
                    bounds,
                    maxiter=max_iterations,
                    seed=42,
                    atol=1e-6,
                    tol=1e-6
                )
                optimal_params = dict(zip(parameter_names, result.x))
                optimization_success = result.success
                
            elif optimization_method == 'optuna':
                def optuna_objective(trial):
                    params = {}
                    for param_name, (low, high) in self.parameter_bounds[process_id].items():
                        params[param_name] = trial.suggest_float(param_name, low, high)
                    
                    result = self.predict_metrics(process_id, params)
                    if 'error' in result:
                        return -1e6
                    return result['total_score']
                
                study = optuna.create_study(direction='maximize')
                study.optimize(optuna_objective, n_trials=max_iterations)
                
                optimal_params = study.best_params
                optimization_success = True
                
            else:
                return {'error': f'Unknown optimization method: {optimization_method}'}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            optimal_predictions = self.predict_metrics(process_id, optimal_params)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            optimization_record = {
                'process_id': process_id,
                'method': optimization_method,
                'optimal_parameters': optimal_params,
                'predicted_metrics': optimal_predictions.get('predictions', {}),
                'total_score': optimal_predictions.get('total_score', 0),
                'success': optimization_success,
                'timestamp': datetime.now().isoformat()
            }
            self.optimization_history.append(optimization_record)
            
            return {
                'status': 'success',
                'optimal_parameters': optimal_params,
                'predicted_metrics': optimal_predictions.get('predictions', {}),
                'total_score': optimal_predictions.get('total_score', 0),
                'optimization_method': optimization_method,
                'success': optimization_success
            }
            
        except Exception as e:
            logging.error(f"Error optimizing parameters: {str(e)}")
            return {'error': str(e)}
    
    def get_optimization_history(self, process_id: str = None, 
                               limit: int = 50) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        history = self.optimization_history
        
        if process_id:
            history = [record for record in history if record['process_id'] == process_id]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        history.sort(key=lambda x: x['timestamp'], reverse=True)
        
        return history[:limit]
    
    def analyze_parameter_sensitivity(self, process_id: str, 
                                    base_parameters: Dict[str, float],
                                    sensitivity_range: float = 0.1) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        if process_id not in self.models:
            return {'error': f'Process {process_id} not registered'}
        
        if not self.models[process_id]['is_trained']:
            return {'error': f'Models for process {process_id} are not trained'}
        
        try:
            sensitivity_analysis = {}
            base_prediction = self.predict_metrics(process_id, base_parameters)
            base_score = base_prediction.get('total_score', 0)
            
            for param_name, base_value in base_parameters.items():
                if param_name in self.parameter_bounds[process_id]:
                    low_bound, high_bound = self.parameter_bounds[process_id][param_name]
                    
                    # –í–∞—Ä–∏–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    variation = (high_bound - low_bound) * sensitivity_range
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    test_params_high = base_parameters.copy()
                    test_params_high[param_name] = min(high_bound, base_value + variation)
                    pred_high = self.predict_metrics(process_id, test_params_high)
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    test_params_low = base_parameters.copy()
                    test_params_low[param_name] = max(low_bound, base_value - variation)
                    pred_low = self.predict_metrics(process_id, test_params_low)
                    
                    # –†–∞—Å—á–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if 'error' not in pred_high and 'error' not in pred_low:
                        score_high = pred_high.get('total_score', 0)
                        score_low = pred_low.get('total_score', 0)
                        
                        sensitivity = (score_high - score_low) / (2 * variation)
                        impact_high = score_high - base_score
                        impact_low = score_low - base_score
                        
                        sensitivity_analysis[param_name] = {
                            'sensitivity': float(sensitivity),
                            'impact_increase': float(impact_high),
                            'impact_decrease': float(impact_low),
                            'base_value': float(base_value),
                            'test_range': float(variation)
                        }
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            sorted_sensitivity = dict(
                sorted(sensitivity_analysis.items(), 
                      key=lambda x: abs(x[1]['sensitivity']), 
                      reverse=True)
            )
            
            return {
                'base_parameters': base_parameters,
                'base_score': float(base_score),
                'sensitivity_analysis': sorted_sensitivity,
                'most_sensitive_parameter': list(sorted_sensitivity.keys())[0] if sorted_sensitivity else None
            }
            
        except Exception as e:
            logging.error(f"Error in sensitivity analysis: {str(e)}")
            return {'error': str(e)}

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Process Optimization Service", version="1.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
optimizer = ProcessOptimizer()

class ProcessRegistration(BaseModel):
    process_id: str
    parameter_bounds: Dict[str, Tuple[float, float]]
    target_weights: Optional[Dict[str, float]] = None

class TrainingRequest(BaseModel):
    process_id: str
    training_data: List[Dict]

class PredictionRequest(BaseModel):
    process_id: str
    parameters: Dict[str, float]

class OptimizationRequest(BaseModel):
    process_id: str
    optimization_method: str = 'differential_evolution'
    max_iterations: int = 100

class SensitivityRequest(BaseModel):
    process_id: str
    base_parameters: Dict[str, float]
    sensitivity_range: float = 0.1

@app.post("/register_process")
async def register_process(request: ProcessRegistration):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    result = optimizer.register_process(
        request.process_id,
        request.parameter_bounds,
        request.target_weights
    )
    return result

@app.post("/train_models")
async def train_models(request: TrainingRequest):
    """
    –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    result = optimizer.train_process_models(
        request.process_id,
        request.training_data
    )
    return result

@app.post("/predict_metrics")
async def predict_metrics(request: PredictionRequest):
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    result = optimizer.predict_metrics(
        request.process_id,
        request.parameters
    )
    return result

@app.post("/optimize_parameters")
async def optimize_parameters(request: OptimizationRequest):
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    result = optimizer.optimize_parameters(
        request.process_id,
        request.optimization_method,
        request.max_iterations
    )
    return result

@app.get("/optimization_history")
async def get_optimization_history(process_id: str = None, limit: int = 50):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    history = optimizer.get_optimization_history(process_id, limit)
    return {"history": history}

@app.post("/sensitivity_analysis")
async def sensitivity_analysis(request: SensitivityRequest):
    """
    –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    result = optimizer.analyze_parameter_sensitivity(
        request.process_id,
        request.base_parameters,
        request.sensitivity_range
    )
    return result

@app.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "registered_processes": len(optimizer.models),
        "optimization_history_count": len(optimizer.optimization_history)
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8003)
\`\`\`

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

### Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

\`\`\`yaml
version: '3.8'

services:
  # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  postgresql:
    image: postgres:15
    environment:
      POSTGRES_DB: isukp_db
      POSTGRES_USER: isukp_user
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - isukp_network

  influxdb:
    image: influxdb:2.7
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: secure_password
      DOCKER_INFLUXDB_INIT_ORG: isukp
      DOCKER_INFLUXDB_INIT_BUCKET: production_data
    volumes:
      - influx_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - isukp_network

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass secure_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - isukp_network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secure_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - isukp_network

  # –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
  quality-control:
    build:
      context: ./services/quality-control
      dockerfile: Dockerfile
    environment:
      - MODEL_PATH=/models/defect_detection_model.pth
      - DEVICE=cuda
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://isukp_user:secure_password@postgresql:5432/isukp_db
    volumes:
      - ./models:/models
      - ./data:/data
    ports:
      - "8001:8001"
    depends_on:
      - postgresql
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - isukp_network

  predictive-maintenance:
    build:
      context: ./services/predictive-maintenance
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://isukp_user:secure_password@postgresql:5432/isukp_db
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=your_influxdb_token
    volumes:
      - ./models:/models
      - ./data:/data
    ports:
      - "8002:8002"
    depends_on:
      - postgresql
      - influxdb
      - redis
    networks:
      - isukp_network

  process-optimization:
    build:
      context: ./services/process-optimization
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://isukp_user:secure_password@postgresql:5432/isukp_db
    volumes:
      - ./models:/models
      - ./data:/data
    ports:
      - "8003:8003"
    depends_on:
      - postgresql
      - redis
    networks:
      - isukp_network

  # API Gateway
  api-gateway:
    image: kong:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - isukp_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://api-gateway:8000
      - REACT_APP_WS_URL=ws://api-gateway:8000/ws
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - isukp_network

  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - isukp_network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - isukp_network

  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - isukp_network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - isukp_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - isukp_network

volumes:
  postgres_data:
  influx_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  isukp_network:
    driver: bridge
\`\`\`

### Kubernetes —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

\`\`\`yaml
# namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: isukp-production

---
# configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: isukp-config
  namespace: isukp-production
data:
  DATABASE_URL: "postgresql://isukp_user:secure_password@postgresql:5432/isukp_db"
  REDIS_URL: "redis://redis:6379"
  INFLUXDB_URL: "http://influxdb:8086"

---
# quality-control-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quality-control
  namespace: isukp-production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: quality-control
  template:
    metadata:
      labels:
        app: quality-control
    spec:
      containers:
      - name: quality-control
        image: isukp/quality-control:latest
        ports:
        - containerPort: 8001
        env:
        - name: MODEL_PATH
          value: "/models/defect_detection_model.pth"
        - name: DEVICE
          value: "cuda"
        envFrom:
        - configMapRef:
            name: isukp-config
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
          limits:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
        volumeMounts:
        - name: models-volume
          mountPath: /models
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: models-pvc

---
# quality-control-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: quality-control-service
  namespace: isukp-production
spec:
  selector:
    app: quality-control
  ports:
  - protocol: TCP
    port: 8001
    targetPort: 8001
  type: ClusterIP

---
# quality-control-hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quality-control-hpa
  namespace: isukp-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quality-control
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: isukp-ingress
  namespace: isukp-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.isukp.company.com
    secretName: isukp-tls
  rules:
  - host: api.isukp.company.com
    http:
      paths:
      - path: /quality-control
        pathType: Prefix
        backend:
          service:
            name: quality-control-service
            port:
              number: 8001
      - path: /predictive-maintenance
        pathType: Prefix
        backend:
          service:
            name: predictive-maintenance-service
            port:
              number: 8002
      - path: /process-optimization
        pathType: Prefix
        backend:
          service:
            name: process-optimization-service
            port:
              number: 8003
\`\`\`

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ

### –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

\`\`\`python
class EconomicAnalysis:
    """
    –ê–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ò–°–£–ö–ü
    """
    def __init__(self):
        self.project_duration_years = 5
        self.discount_rate = 0.12  # 12% –≥–æ–¥–æ–≤—ã—Ö
        
    def calculate_implementation_costs(self) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ
        """
        costs = {
            # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            'development_costs': 15_000_000,  # 15 –º–ª–Ω —Ä—É–±
            'integration_costs': 8_000_000,   # 8 –º–ª–Ω —Ä—É–±
            'testing_costs': 3_000_000,       # 3 –º–ª–Ω —Ä—É–±
            
            # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            'hardware_costs': 12_000_000,     # 12 –º–ª–Ω —Ä—É–± (—Å–µ—Ä–≤–µ—Ä—ã, GPU)
            'software_licenses': 2_000_000,   # 2 –º–ª–Ω —Ä—É–±
            'network_infrastructure': 3_000_000, # 3 –º–ª–Ω —Ä—É–±
            
            # –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            'training_costs': 2_000_000,      # 2 –º–ª–Ω —Ä—É–±
            'change_management': 1_500_000,   # 1.5 –º–ª–Ω —Ä—É–±
            
            # –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            'project_management': 2_500_000,  # 2.5 –º–ª–Ω —Ä—É–±
            'contingency': 3_000_000,         # 3 –º–ª–Ω —Ä—É–± (—Ä–µ–∑–µ—Ä–≤)
        }
        
        total_capex = sum(costs.values())
        
        return {
            **costs,
            'total_capex': total_capex
        }
    
    def calculate_operational_costs(self) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç (–≥–æ–¥–æ–≤—ã—Ö)
        """
        costs = {
            # –ü–µ—Ä—Å–æ–Ω–∞–ª
            'ai_engineers': 3 * 2_400_000,    # 3 AI-–∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ 2.4 –º–ª–Ω/–≥–æ–¥
            'devops_engineers': 2 * 2_000_000, # 2 DevOps –ø–æ 2 –º–ª–Ω/–≥–æ–¥
            'data_scientists': 2 * 2_200_000,  # 2 Data Scientist –ø–æ 2.2 –º–ª–Ω/–≥–æ–¥
            'system_administrators': 2 * 1_500_000, # 2 –∞–¥–º–∏–Ω–∞ –ø–æ 1.5 –º–ª–Ω/–≥–æ–¥
            
            # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            'cloud_costs': 3_600_000,         # 300 —Ç—ã—Å/–º–µ—Å—è—Ü
            'software_maintenance': 800_000,  # 800 —Ç—ã—Å/–≥–æ–¥
            'hardware_maintenance': 1_200_000, # 1.2 –º–ª–Ω/–≥–æ–¥
            
            # –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            'electricity': 600_000,           # 600 —Ç—ã—Å/–≥–æ–¥
            'internet_connectivity': 240_000, # 240 —Ç—ã—Å/–≥–æ–¥
            'backup_storage': 360_000,        # 360 —Ç—ã—Å/–≥–æ–¥
            'security_services': 480_000,     # 480 —Ç—ã—Å/–≥–æ–¥
        }
        
        total_opex = sum(costs.values())
        
        return {
            **costs,
            'total_opex_annual': total_opex
        }
    
    def calculate_benefits(self) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –≤—ã–≥–æ–¥ (–≥–æ–¥–æ–≤—ã—Ö)
        """
        benefits = {
            # –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
            'quality_improvement': {
                'defect_reduction': 45_000_000,    # –°–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –Ω–∞ 2%
                'warranty_savings': 12_000_000,    # –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏
                'customer_satisfaction': 8_000_000, # –ü–æ–≤—ã—à–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            },
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            'production_optimization': {
                'throughput_increase': 35_000_000,  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 5%
                'energy_savings': 18_000_000,      # –≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ 8%
                'material_optimization': 15_000_000, # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            },
            
            # –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            'predictive_maintenance': {
                'downtime_reduction': 42_000_000,   # –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤ –Ω–∞ 30%
                'maintenance_optimization': 25_000_000, # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¢–û
                'equipment_lifetime': 15_000_000,   # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã
            },
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            'automation_benefits': {
                'labor_cost_reduction': 28_000_000, # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç
                'process_acceleration': 20_000_000, # –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                'error_reduction': 12_000_000,      # –°–Ω–∏–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            }
        }
        
        # –°—É–º–º–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_totals = {}
        total_benefits = 0
        
        for category, items in benefits.items():
            category_total = sum(items.values())
            category_totals[category] = category_total
            total_benefits += category_total
        
        return {
            'detailed_benefits': benefits,
            'category_totals': category_totals,
            'total_annual_benefits': total_benefits
        }
    
    def calculate_roi_metrics(self) -> Dict[str, float]:
        """
        –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ROI
        """
        capex = self.calculate_implementation_costs()['total_capex']
        opex = self.calculate_operational_costs()['total_opex_annual']
        benefits = self.calculate_benefits()['total_annual_benefits']
        
        # –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞
        net_annual_benefit = benefits - opex
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        simple_payback = capex / net_annual_benefit
        
        # NPV —Ä–∞—Å—á–µ—Ç
        npv = -capex  # –ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        for year in range(1, self.project_duration_years + 1):
            discounted_benefit = net_annual_benefit / ((1 + self.discount_rate) ** year)
            npv += discounted_benefit
        
        # IRR –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        irr = (net_annual_benefit / capex) - 1
        
        # ROI –∑–∞ 5 –ª–µ—Ç
        total_benefits_5y = benefits * self.project_duration_years
        total_costs_5y = capex + (opex * self.project_duration_years)
        roi_5y = ((total_benefits_5y - total_costs_5y) / total_costs_5y) * 100
        
        return {
            'capex': capex,
            'annual_opex': opex,
            'annual_benefits': benefits,
            'net_annual_benefit': net_annual_benefit,
            'simple_payback_years': simple_payback,
            'npv': npv,
            'irr_approximate': irr * 100,
            'roi_5_years_percent': roi_5y,
            'total_savings_5_years': total_benefits_5y - total_costs_5y
        }
    
    def generate_financial_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        """
        costs = self.calculate_implementation_costs()
        opex = self.calculate_operational_costs()
        benefits = self.calculate_benefits()
        roi_metrics = self.calculate_roi_metrics()
        
        report = f"""
# –§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê –ò–°–£–ö–ü

## –ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (CAPEX)
–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {costs['total_capex']:,.0f} —Ä—É–±.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç:
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {costs['development_costs'] + costs['integration_costs']:,.0f} —Ä—É–±.
- –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –ü–û: {costs['hardware_costs'] + costs['software_licenses']:,.0f} —Ä—É–±.
- –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {costs['network_infrastructure']:,.0f} —Ä—É–±.
- –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {costs['training_costs']:,.0f} —Ä—É–±.
- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {costs['project_management'] + costs['contingency']:,.0f} —Ä—É–±.

## –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã (OPEX)
–ì–æ–¥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {opex['total_opex_annual']:,.0f} —Ä—É–±.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:
- –ü–µ—Ä—Å–æ–Ω–∞–ª: {opex['ai_engineers'] + opex['devops_engineers'] + opex['data_scientists'] + opex['system_administrators']:,.0f} —Ä—É–±/–≥–æ–¥
- –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {opex['cloud_costs'] + opex['hardware_maintenance']:,.0f} —Ä—É–±/–≥–æ–¥
- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {opex['electricity'] + opex['internet_connectivity'] + opex['backup_storage']:,.0f} —Ä—É–±/–≥–æ–¥

## –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤—ã–≥–æ–¥—ã
–û–±—â–∏–µ –≥–æ–¥–æ–≤—ã–µ –≤—ã–≥–æ–¥—ã: {benefits['total_annual_benefits']:,.0f} —Ä—É–±.

–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
- –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: {benefits['category_totals']['quality_improvement']:,.0f} —Ä—É–±/–≥–æ–¥
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {benefits['category_totals']['production_optimization']:,.0f} —Ä—É–±/–≥–æ–¥
- –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {benefits['category_totals']['predictive_maintenance']:,.0f} —Ä—É–±/–≥–æ–¥
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: {benefits['category_totals']['automation_benefits']:,.0f} —Ä—É–±/–≥–æ–¥

## –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

### –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- **ROI –∑–∞ 5 –ª–µ—Ç: {roi_metrics['roi_5_years_percent']:.1f}%**
- **–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {roi_metrics['simple_payback_years']:.1f} –≥–æ–¥–∞**
- **NPV: {roi_metrics['npv']:,.0f} —Ä—É–±.**
- **IRR: {roi_metrics['irr_approximate']:.1f}%**

### –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –ß–∏—Å—Ç–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã–≥–æ–¥–∞: {roi_metrics['net_annual_benefit']:,.0f} —Ä—É–±.
- –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è –∑–∞ 5 –ª–µ—Ç: {roi_metrics['total_savings_5_years']:,.0f} —Ä—É–±.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü—Ä–æ–µ–∫—Ç –ò–°–£–ö–ü –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
- –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –º–µ–Ω–µ–µ 2 –ª–µ—Ç
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π NPV –∏ –≤—ã—Å–æ–∫–∏–π IRR
- –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: **–û–î–û–ë–†–ò–¢–¨ –ö –†–ï–ê–õ–ò–ó–ê–¶–ò–ò**
        """
        
        return report

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    analysis = EconomicAnalysis()
    report = analysis.generate_financial_report()
    print(report)
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è" (–ò–°–£–ö–ü) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞:

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

1. **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ**
   - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
   - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –±–∞–∑–µ Kubernetes
   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ (SCADA, MES, ERP)

2. **–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ**
   - Computer Vision –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ (—Ç–æ—á–Ω–æ—Å—Ç—å 98%+)
   - –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

3. **MLOps –∏ DevOps**
   - –ü–æ–ª–Ω—ã–π CI/CD –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è ML-–º–æ–¥–µ–ª–µ–π
   - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
   - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥

4. **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è**
   - Real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º (–ì–û–°–¢)
   - –í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å

### –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

- **ROI: 1,733%** –∑–∞ 5 –ª–µ—Ç
- **–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: 1.4 –≥–æ–¥–∞**
- **–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: 162.7+ –º–ª–Ω —Ä—É–±.**
- **NPV: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π**

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏

–°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø—ã—Ç:
- –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö AI-—Å–∏—Å—Ç–µ–º
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ML/DL
- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è production-ready —Ä–µ—à–µ–Ω–∏–π
- –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è AI-–ø—Ä–æ–µ–∫—Ç–æ–≤
- –†–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏

### –†–æ—Å—Å–∏–π—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞

- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –§–°–¢–≠–ö –∏ 152-–§–ó
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
- –ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö

**–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞ "AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä"!** üéâ

–í—ã –æ—Å–≤–æ–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ AI-–ø—Ä–æ–µ–∫—Ç–∞–º–∏, –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ –¥–æ production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è. –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–æ–ª–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ –ª—é–±–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.
    `,
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
export const getLessonContent = (lessonId) => {
  return lessonContent[lessonId] || null;
};


  38: {
    title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –¥–ª—è AI",
    duration: "180 –º–∏–Ω",
    type: "–¢–µ–æ—Ä–∏—è",
    content: `
# –í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –¥–ª—è AI

## –í–≤–µ–¥–µ–Ω–∏–µ

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ–¥—É–ª—å 8 –∫—É—Ä—Å–∞ "AI-–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä"! –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ—Å–≤—è—â–µ–Ω –æ–¥–Ω–æ–π –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

### –†–æ–ª—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–±–æ—Ä–∞–º–∏

–ö–∞–∫ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –≤—ã –¥–æ–ª–∂–Ω—ã –æ–±–ª–∞–¥–∞—Ç—å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º:
- **–ü—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã** –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
- **–ü—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–≤—è–∑–∏** –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø—Ä–∏–±–æ—Ä–æ–≤
- **–ú–µ—Ç–æ–¥–æ–≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏** –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö** –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- **–û–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤** –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º

–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ AI-—Å–∏—Å—Ç–µ–º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–µ—Ç–æ—á–Ω—ã–µ –∏–ª–∏ –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —á—Ç–æ –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ —á—Ä–µ–≤–∞—Ç–æ —Å–µ—Ä—å–µ–∑–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏ - –æ—Ç –±—Ä–∞–∫–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–æ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.

## –û—Å–Ω–æ–≤—ã –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏

### –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤

–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã –º–æ–∂–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

**–ü–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∏–∑–º–µ—Ä–µ–Ω–∏—è:**
- **–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—á–∏–∫–∏** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π, –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–π, –≤–∏–±—Ä–∞—Ü–∏–π
- **–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—á–∏–∫–∏** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–æ–∫–∞, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
- **–¢–µ–ø–ª–æ–≤—ã–µ –¥–∞—Ç—á–∏–∫–∏** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, —Ç–µ–ø–ª–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
- **–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—á–∏–∫–∏** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏, —Ü–≤–µ—Ç–∞, —Ä–∞–∑–º–µ—Ä–æ–≤
- **–•–∏–º–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—á–∏–∫–∏** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–µ—â–µ—Å—Ç–≤, pH, –≥–∞–∑–æ–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞

**–ü–æ —Ç–∏–ø—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞:**
- **–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –¥–∞—Ç—á–∏–∫–∏** - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª (4-20 –º–ê, 0-10 –í)
- **–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–∞—Ç—á–∏–∫–∏** - –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
- **–ò–º–ø—É–ª—å—Å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏** - —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∏–ª–∏ –∏–º–ø—É–ª—å—Å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
- **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏** - —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

**–ü–æ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
- **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—á–∏–∫–∏** - –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- **–ö–∞—á–µ—Å—Ç–≤–∞** - –∫–æ–Ω—Ç—Ä–æ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
- **–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

### –ú–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤:

**–¢–æ—á–Ω–æ—Å—Ç—å –∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏:**
- **–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å** - —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–º –∏ –∏—Å—Ç–∏–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
- **–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å** - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
- **–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å** - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
- **–°–ª—É—á–∞–π–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å** - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏

**–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
- **–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞** - –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø—Ä–∏ —Å–∫–∞—á–∫–æ–æ–±—Ä–∞–∑–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
- **–ü–æ–ª–æ—Å–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è** - –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å—Ç–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏–±–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- **–ò–Ω–µ—Ä—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å** - —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –±—ã—Å—Ç—Ä—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∏–∑–º–µ—Ä—è–µ–º–æ–π –≤–µ–ª–∏—á–∏–Ω—ã

**–£—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏:**
- **–†–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä** - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
- **–í–ª–∞–∂–Ω–æ—Å—Ç—å** - –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
- **–í–∏–±—Ä–∞—Ü–∏–∏ –∏ —É–¥–∞—Ä—ã** - –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
- **–≠–ª–µ–∫—Ç—Ä–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å** - —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–º–µ—Ö–∞–º

## –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–≤—è–∑–∏

### –ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

**–¢–æ–∫–æ–≤–∞—è –ø–µ—Ç–ª—è 4-20 –º–ê:**
–ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –í—ã—Å–æ–∫–∞—è –ø–æ–º–µ—Ö–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–æ 1000 –º)
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–æ–±—Ä—ã–≤ = 0 –º–ê, –ö–ó = >20 –º–ê)
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –ø–æ —Ç–æ–π –∂–µ –ª–∏–Ω–∏–∏

–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:
- –ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (–æ–±—ã—á–Ω–æ 12-16 –±–∏—Ç)
- –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

**–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ 0-10 –í:**
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–æ–≥–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö.

### –¶–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã

**Modbus RTU/ASCII:**
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.

\`\`\`python
import serial
import struct
import time
from typing import List, Dict, Optional, Union
import logging

class ModbusRTUClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Modbus RTU
    """
    def __init__(self, port: str, baudrate: int = 9600, 
                 timeout: float = 1.0):
        self.port = port
        self.baudrate = baudrate
        self.timeout = timeout
        self.connection = None
        
    def connect(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.connection = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                bytesize=8,
                parity='N',
                stopbits=1,
                timeout=self.timeout
            )
            return True
        except Exception as e:
            logging.error(f"Failed to connect: {e}")
            return False
    
    def _calculate_crc(self, data: bytes) -> int:
        """–†–∞—Å—á–µ—Ç CRC16 –¥–ª—è Modbus"""
        crc = 0xFFFF
        for byte in data:
            crc ^= byte
            for _ in range(8):
                if crc & 1:
                    crc >>= 1
                    crc ^= 0xA001
                else:
                    crc >>= 1
        return crc
    
    def read_holding_registers(self, slave_id: int, 
                             start_address: int, 
                             count: int) -> Optional[List[int]]:
        """
        –ß—Ç–µ–Ω–∏–µ holding registers (—Ñ—É–Ω–∫—Ü–∏—è 03)
        """
        if not self.connection:
            return None
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        request = struct.pack('>BBHH', 
                            slave_id,      # –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                            0x03,          # –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è
                            start_address, # –ù–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
                            count)         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        
        # –î–æ–±–∞–≤–ª—è–µ–º CRC
        crc = self._calculate_crc(request)
        request += struct.pack('<H', crc)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.connection.write(request)
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            response = self.connection.read(5 + count * 2)
            
            if len(response) < 5:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CRC
            received_crc = struct.unpack('<H', response[-2:])[0]
            calculated_crc = self._calculate_crc(response[:-2])
            
            if received_crc != calculated_crc:
                logging.error("CRC mismatch")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data_length = response[2]
            values = []
            for i in range(count):
                value = struct.unpack('>H', 
                    response[3 + i*2:5 + i*2])[0]
                values.append(value)
            
            return values
            
        except Exception as e:
            logging.error(f"Read error: {e}")
            return None
    
    def write_single_register(self, slave_id: int, 
                            address: int, 
                            value: int) -> bool:
        """
        –ó–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (—Ñ—É–Ω–∫—Ü–∏—è 06)
        """
        if not self.connection:
            return False
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        request = struct.pack('>BBHH', 
                            slave_id,  # –ê–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                            0x06,      # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏
                            address,   # –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞
                            value)     # –ó–Ω–∞—á–µ–Ω–∏–µ
        
        # –î–æ–±–∞–≤–ª—è–µ–º CRC
        crc = self._calculate_crc(request)
        request += struct.pack('<H', crc)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.connection.write(request)
            
            # –ß–∏—Ç–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response = self.connection.read(8)
            
            if len(response) != 8:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º
            return response == request
            
        except Exception as e:
            logging.error(f"Write error: {e}")
            return False

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    client = ModbusRTUClient('/dev/ttyUSB0', 9600)
    
    if client.connect():
        # –ß–∏—Ç–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å –¥–∞—Ç—á–∏–∫–∞ (–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 1, —Ä–µ–≥–∏—Å—Ç—Ä 0)
        temperature_raw = client.read_holding_registers(1, 0, 1)
        if temperature_raw:
            temperature = temperature_raw[0] / 10.0  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"Temperature: {temperature}¬∞C")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç–∞–≤–∫—É (–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 1, —Ä–µ–≥–∏—Å—Ç—Ä 10)
        client.write_single_register(1, 10, 250)  # 25.0¬∞C
\`\`\`

**HART (Highway Addressable Remote Transducer):**
–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–≤–µ—Ä—Ö –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ 4-20 –º–ê.

\`\`\`python
import serial
import struct
import time
from typing import Dict, List, Optional, Tuple

class HARTCommunicator:
    """
    –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HART-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    """
    def __init__(self, port: str, baudrate: int = 1200):
        self.port = port
        self.baudrate = baudrate
        self.connection = None
        
        # HART –∫–æ–º–∞–Ω–¥—ã
        self.COMMANDS = {
            'READ_UNIQUE_ID': 0,
            'READ_PRIMARY_VARIABLE': 1,
            'READ_CURRENT_AND_PERCENT': 2,
            'READ_DYNAMIC_VARIABLES': 3,
            'READ_DEVICE_VARIABLES': 9,
            'READ_TAG_DESCRIPTOR_DATE': 13,
            'READ_SENSOR_INFORMATION': 14,
            'READ_FINAL_ASSEMBLY_NUMBER': 16,
            'WRITE_MESSAGE': 17,
            'WRITE_TAG_DESCRIPTOR_DATE': 18,
            'WRITE_FINAL_ASSEMBLY_NUMBER': 19
        }
    
    def connect(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å HART-–º–æ–¥–µ–º–æ–º"""
        try:
            self.connection = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                bytesize=8,
                parity='O',  # Odd parity –¥–ª—è HART
                stopbits=1,
                timeout=2.0
            )
            return True
        except Exception as e:
            logging.error(f"HART connection failed: {e}")
            return False
    
    def _calculate_checksum(self, data: bytes) -> int:
        """–†–∞—Å—á–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã HART"""
        checksum = 0
        for byte in data:
            checksum ^= byte
        return checksum
    
    def _build_hart_frame(self, address: int, command: int, 
                         data: bytes = b'') -> bytes:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ HART-–∫–∞–¥—Ä–∞
        """
        # –ü—Ä–µ–∞–º–±—É–ª–∞ (–º–∏–Ω–∏–º—É–º 5 –±–∞–π—Ç 0xFF)
        preamble = b'\\xff' * 5
        
        # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–π—Ç
        start_byte = 0x02  # Master to slave, short frame
        
        # –ê–¥—Ä–µ—Å (polling address)
        address_byte = address & 0x3F
        
        # –ö–æ–º–∞–Ω–¥–∞
        command_byte = command
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
        data_count = len(data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–¥—Ä –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        frame = struct.pack('BBB', start_byte, address_byte, command_byte)
        frame += struct.pack('B', data_count)
        frame += data
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
        checksum = self._calculate_checksum(frame)
        frame += struct.pack('B', checksum)
        
        return preamble + frame
    
    def send_hart_command(self, address: int, command: int, 
                         data: bytes = b'') -> Optional[Dict]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ HART-–∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        """
        if not self.connection:
            return None
        
        try:
            # –°—Ç—Ä–æ–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä
            frame = self._build_hart_frame(address, command, data)
            self.connection.write(frame)
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            
            # –ß–∏—Ç–∞–µ–º –ø—Ä–µ–∞–º–±—É–ª—É
            preamble = self.connection.read(20)  # –ú–∞–∫—Å–∏–º—É–º 20 –±–∞–π—Ç –ø—Ä–µ–∞–º–±—É–ª—ã
            
            # –ò—â–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–π—Ç –æ—Ç–≤–µ—Ç–∞
            start_pos = -1
            for i, byte in enumerate(preamble):
                if byte == 0x06:  # Slave to master, short frame
                    start_pos = i
                    break
            
            if start_pos == -1:
                return None
            
            # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–≤–µ—Ç–∞
            remaining_preamble = preamble[start_pos:]
            if len(remaining_preamble) < 4:
                additional = self.connection.read(4 - len(remaining_preamble))
                remaining_preamble += additional
            
            if len(remaining_preamble) < 4:
                return None
            
            start_byte, address_byte, command_byte, status_bytes = struct.unpack('BBBB', remaining_preamble[:4])
            
            # –ß–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
            data_count_byte = self.connection.read(1)
            if not data_count_byte:
                return None
            
            data_count = data_count_byte[0]
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            response_data = self.connection.read(data_count + 1)
            if len(response_data) != data_count + 1:
                return None
            
            data_bytes = response_data[:-1]
            checksum = response_data[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            frame_for_checksum = remaining_preamble[:4] + data_count_byte + data_bytes
            calculated_checksum = self._calculate_checksum(frame_for_checksum)
            
            if checksum != calculated_checksum:
                logging.error("HART checksum mismatch")
                return None
            
            return {
                'command': command_byte,
                'status': status_bytes,
                'data': data_bytes,
                'success': status_bytes == 0
            }
            
        except Exception as e:
            logging.error(f"HART communication error: {e}")
            return None
    
    def read_primary_variable(self, address: int = 0) -> Optional[float]:
        """
        –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∫–æ–º–∞–Ω–¥–∞ 1)
        """
        response = self.send_hart_command(address, self.COMMANDS['READ_PRIMARY_VARIABLE'])
        
        if response and response['success'] and len(response['data']) >= 5:
            # –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ IEEE 754 float
            pv_bytes = response['data'][1:5]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º units code
            pv_value = struct.unpack('>f', pv_bytes)[0]
            return pv_value
        
        return None
    
    def read_device_variables(self, address: int = 0) -> Optional[Dict]:
        """
        –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∫–æ–º–∞–Ω–¥–∞ 9)
        """
        response = self.send_hart_command(address, self.COMMANDS['READ_DEVICE_VARIABLES'])
        
        if response and response['success'] and len(response['data']) >= 24:
            data = response['data']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (4 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ 5 –±–∞–π—Ç –∫–∞–∂–¥–∞—è)
            variables = {}
            for i in range(4):
                offset = i * 6
                if offset + 5 < len(data):
                    units_code = data[offset]
                    value_bytes = data[offset + 1:offset + 5]
                    value = struct.unpack('>f', value_bytes)[0]
                    variables[f'variable_{i}'] = {
                        'value': value,
                        'units': units_code
                    }
            
            return variables
        
        return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HART
if __name__ == "__main__":
    hart = HARTCommunicator('/dev/ttyUSB1')
    
    if hart.connect():
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        pv = hart.read_primary_variable()
        if pv is not None:
            print(f"Primary Variable: {pv}")
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        variables = hart.read_device_variables()
        if variables:
            for name, var in variables.items():
                print(f"{name}: {var['value']} (units: {var['units']})")
\`\`\`

**Profibus/Profinet:**
–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.

**Ethernet/IP:**
–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π Ethernet –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏.

**OPC UA (Open Platform Communications Unified Architecture):**
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–æ–ø–µ—Ä–∞–±–µ–ª—å–Ω–æ—Å—Ç—å.

\`\`\`python
from opcua import Client, ua
from opcua.common.node import Node
import time
import logging
from typing import Dict, List, Optional, Any
import asyncio

class OPCUAClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OPC UA —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    """
    def __init__(self, endpoint_url: str):
        self.endpoint_url = endpoint_url
        self.client = None
        self.connected = False
        self.subscriptions = {}
        
    def connect(self, username: str = None, password: str = None) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OPC UA —Å–µ—Ä–≤–µ—Ä—É
        """
        try:
            self.client = Client(self.endpoint_url)
            
            if username and password:
                self.client.set_user(username)
                self.client.set_password(password)
            
            self.client.connect()
            self.connected = True
            
            logging.info(f"Connected to OPC UA server: {self.endpoint_url}")
            return True
            
        except Exception as e:
            logging.error(f"Failed to connect to OPC UA server: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.client and self.connected:
            self.client.disconnect()
            self.connected = False
            logging.info("Disconnected from OPC UA server")
    
    def browse_nodes(self, node_id: str = "i=85") -> List[Dict]:
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä —É–∑–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
        """
        if not self.connected:
            return []
        
        try:
            root_node = self.client.get_node(node_id)
            nodes = []
            
            for child in root_node.get_children():
                node_info = {
                    'node_id': str(child.nodeid),
                    'browse_name': str(child.get_browse_name()),
                    'display_name': str(child.get_display_name()),
                    'node_class': str(child.get_node_class()),
                    'data_type': None,
                    'value': None
                }
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if child.get_node_class() == ua.NodeClass.Variable:
                    try:
                        node_info['data_type'] = str(child.get_data_type_as_variant_type())
                        node_info['value'] = child.get_value()
                    except:
                        pass
                
                nodes.append(node_info)
            
            return nodes
            
        except Exception as e:
            logging.error(f"Error browsing nodes: {e}")
            return []
    
    def read_node_value(self, node_id: str) -> Optional[Any]:
        """
        –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∑–ª–∞
        """
        if not self.connected:
            return None
        
        try:
            node = self.client.get_node(node_id)
            return node.get_value()
        except Exception as e:
            logging.error(f"Error reading node {node_id}: {e}")
            return None
    
    def write_node_value(self, node_id: str, value: Any) -> bool:
        """
        –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∑–µ–ª
        """
        if not self.connected:
            return False
        
        try:
            node = self.client.get_node(node_id)
            node.set_value(value)
            return True
        except Exception as e:
            logging.error(f"Error writing to node {node_id}: {e}")
            return False
    
    def read_multiple_nodes(self, node_ids: List[str]) -> Dict[str, Any]:
        """
        –ß—Ç–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        """
        if not self.connected:
            return {}
        
        try:
            nodes = [self.client.get_node(node_id) for node_id in node_ids]
            values = self.client.get_values(nodes)
            
            result = {}
            for node_id, value in zip(node_ids, values):
                result[node_id] = value
            
            return result
            
        except Exception as e:
            logging.error(f"Error reading multiple nodes: {e}")
            return {}
    
    def create_subscription(self, subscription_id: str, 
                          publishing_interval: float = 1000.0) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        if not self.connected:
            return False
        
        try:
            subscription = self.client.create_subscription(
                publishing_interval, 
                SubscriptionHandler(subscription_id)
            )
            self.subscriptions[subscription_id] = subscription
            return True
            
        except Exception as e:
            logging.error(f"Error creating subscription: {e}")
            return False
    
    def add_monitored_items(self, subscription_id: str, 
                          node_ids: List[str]) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –ø–æ–¥–ø–∏—Å–∫—É
        """
        if subscription_id not in self.subscriptions:
            return False
        
        try:
            subscription = self.subscriptions[subscription_id]
            nodes = [self.client.get_node(node_id) for node_id in node_ids]
            subscription.subscribe_data_change(nodes)
            return True
            
        except Exception as e:
            logging.error(f"Error adding monitored items: {e}")
            return False

class SubscriptionHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ OPC UA
    """
    def __init__(self, subscription_id: str):
        self.subscription_id = subscription_id
    
    def datachange_notification(self, node: Node, val: Any, data):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        logging.info(f"Data change in subscription {self.subscription_id}: "
                    f"Node {node.nodeid} = {val}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫—É –≤ AI-—Å–∏—Å—Ç–µ–º—É
    
    def event_notification(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        """
        logging.info(f"Event in subscription {self.subscription_id}: {event}")

# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI-—Å–∏—Å—Ç–µ–º–æ–π
class IndustrialDataCollector:
    """
    –°–±–æ—Ä—â–∏–∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã
    """
    def __init__(self):
        self.modbus_clients = {}
        self.hart_clients = {}
        self.opcua_clients = {}
        self.data_buffer = []
        self.ai_callback = None
    
    def add_modbus_device(self, device_id: str, port: str, 
                         slave_id: int, registers: List[int]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Modbus —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        client = ModbusRTUClient(port)
        if client.connect():
            self.modbus_clients[device_id] = {
                'client': client,
                'slave_id': slave_id,
                'registers': registers
            }
    
    def add_opcua_server(self, server_id: str, endpoint_url: str, 
                        node_ids: List[str]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ OPC UA —Å–µ—Ä–≤–µ—Ä–∞"""
        client = OPCUAClient(endpoint_url)
        if client.connect():
            self.opcua_clients[server_id] = {
                'client': client,
                'node_ids': node_ids
            }
    
    def collect_data(self) -> Dict[str, Any]:
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        """
        collected_data = {
            'timestamp': time.time(),
            'modbus_data': {},
            'opcua_data': {},
            'hart_data': {}
        }
        
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö Modbus
        for device_id, device_info in self.modbus_clients.items():
            client = device_info['client']
            slave_id = device_info['slave_id']
            registers = device_info['registers']
            
            device_data = {}
            for reg in registers:
                values = client.read_holding_registers(slave_id, reg, 1)
                if values:
                    device_data[f'register_{reg}'] = values[0]
            
            collected_data['modbus_data'][device_id] = device_data
        
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö OPC UA
        for server_id, server_info in self.opcua_clients.items():
            client = server_info['client']
            node_ids = server_info['node_ids']
            
            server_data = client.read_multiple_nodes(node_ids)
            collected_data['opcua_data'][server_id] = server_data
        
        return collected_data
    
    def set_ai_callback(self, callback_function):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã"""
        self.ai_callback = callback_function
    
    def start_continuous_collection(self, interval: float = 1.0):
        """
        –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        async def collection_loop():
            while True:
                try:
                    data = self.collect_data()
                    self.data_buffer.append(data)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ AI-—Å–∏—Å—Ç–µ–º—É
                    if self.ai_callback:
                        await self.ai_callback(data)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
                    if len(self.data_buffer) > 1000:
                        self.data_buffer = self.data_buffer[-1000:]
                    
                    await asyncio.sleep(interval)
                    
                except Exception as e:
                    logging.error(f"Error in data collection: {e}")
                    await asyncio.sleep(interval)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        asyncio.create_task(collection_loop())

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def ai_data_processor(data: Dict[str, Any]):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã
    """
    print(f"Received data at {data['timestamp']}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    # –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ ML-–º–æ–¥–µ–ª—å
    
    # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö Modbus
    for device_id, device_data in data['modbus_data'].items():
        for register, value in device_data.items():
            if value > 1000:  # –ü—Ä–∏–º–µ—Ä –ø–æ—Ä–æ–≥–∞
                print(f"Anomaly detected: {device_id}.{register} = {value}")

if __name__ == "__main__":
    collector = IndustrialDataCollector()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    collector.add_modbus_device('temperature_sensor', '/dev/ttyUSB0', 1, [0, 1, 2])
    collector.add_opcua_server('plc_server', 'opc.tcp://192.168.1.100:4840', 
                              ['ns=2;i=1001', 'ns=2;i=1002'])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AI
    collector.set_ai_callback(ai_data_processor)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    collector.start_continuous_collection(0.5)  # –ö–∞–∂–¥—ã–µ 500 –º—Å
\`\`\`

## –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ

### –ü—Ä–∏–Ω—Ü–∏–ø—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏

–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ AI-—Å–∏—Å—Ç–µ–º. –ù–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.

**–¢–∏–ø—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:**
- **–ó–∞–≤–æ–¥—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞** - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º
- **–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞** - —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø–æ–≤–µ—Ä–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
- **–°–∞–º–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏
- **–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∞–ª–æ–Ω—É** - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏

**–ú–µ—Ç–æ–¥—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:**

\`\`\`python
import numpy as np
from scipy import optimize
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
import matplotlib.pyplot as plt
from typing import Tuple, List, Dict, Optional
import logging

class SensorCalibrator:
    """
    –°–∏—Å—Ç–µ–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    def __init__(self):
        self.calibration_data = {}
        self.calibration_models = {}
        
    def linear_calibration(self, sensor_id: str, 
                          raw_values: np.ndarray, 
                          reference_values: np.ndarray) -> Dict:
        """
        –õ–∏–Ω–µ–π–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞
        y = a * x + b
        """
        if len(raw_values) != len(reference_values):
            raise ValueError("Arrays must have the same length")
        
        # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        model = LinearRegression()
        X = raw_values.reshape(-1, 1)
        model.fit(X, reference_values)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        slope = model.coef_[0]
        intercept = model.intercept_
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        r2_score = model.score(X, reference_values)
        predicted = model.predict(X)
        rmse = np.sqrt(np.mean((reference_values - predicted) ** 2))
        max_error = np.max(np.abs(reference_values - predicted))
        
        calibration_info = {
            'type': 'linear',
            'slope': slope,
            'intercept': intercept,
            'r2_score': r2_score,
            'rmse': rmse,
            'max_error': max_error,
            'model': model
        }
        
        self.calibration_models[sensor_id] = calibration_info
        
        logging.info(f"Linear calibration for {sensor_id}: "
                    f"y = {slope:.6f} * x + {intercept:.6f}, "
                    f"R¬≤ = {r2_score:.4f}")
        
        return calibration_info
    
    def polynomial_calibration(self, sensor_id: str,
                             raw_values: np.ndarray,
                             reference_values: np.ndarray,
                             degree: int = 2) -> Dict:
        """
        –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞
        """
        if len(raw_values) != len(reference_values):
            raise ValueError("Arrays must have the same length")
        
        # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        poly_features = PolynomialFeatures(degree=degree)
        X_poly = poly_features.fit_transform(raw_values.reshape(-1, 1))
        
        # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        model = LinearRegression()
        model.fit(X_poly, reference_values)
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        r2_score = model.score(X_poly, reference_values)
        predicted = model.predict(X_poly)
        rmse = np.sqrt(np.mean((reference_values - predicted) ** 2))
        max_error = np.max(np.abs(reference_values - predicted))
        
        calibration_info = {
            'type': 'polynomial',
            'degree': degree,
            'coefficients': model.coef_,
            'intercept': model.intercept_,
            'r2_score': r2_score,
            'rmse': rmse,
            'max_error': max_error,
            'model': model,
            'poly_features': poly_features
        }
        
        self.calibration_models[sensor_id] = calibration_info
        
        logging.info(f"Polynomial calibration (degree {degree}) for {sensor_id}: "
                    f"R¬≤ = {r2_score:.4f}, RMSE = {rmse:.4f}")
        
        return calibration_info
    
    def temperature_compensation(self, sensor_id: str,
                               raw_values: np.ndarray,
                               temperatures: np.ndarray,
                               reference_values: np.ndarray) -> Dict:
        """
        –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–µ–π
        y = a * x + b + c * T + d * x * T
        """
        if len(raw_values) != len(temperatures) or len(raw_values) != len(reference_values):
            raise ValueError("All arrays must have the same length")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        X = np.column_stack([
            raw_values,                    # x
            np.ones(len(raw_values)),      # –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
            temperatures,                  # T
            raw_values * temperatures      # x * T
        ])
        
        # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        coefficients, residuals, rank, s = np.linalg.lstsq(X, reference_values, rcond=None)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predicted = X @ coefficients
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        ss_res = np.sum((reference_values - predicted) ** 2)
        ss_tot = np.sum((reference_values - np.mean(reference_values)) ** 2)
        r2_score = 1 - (ss_res / ss_tot)
        rmse = np.sqrt(np.mean((reference_values - predicted) ** 2))
        max_error = np.max(np.abs(reference_values - predicted))
        
        calibration_info = {
            'type': 'temperature_compensated',
            'coefficients': {
                'a': coefficients[0],  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                'b': coefficients[1],  # –°–º–µ—â–µ–Ω–∏–µ
                'c': coefficients[2],  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                'd': coefficients[3]   # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            },
            'r2_score': r2_score,
            'rmse': rmse,
            'max_error': max_error,
            'raw_coefficients': coefficients
        }
        
        self.calibration_models[sensor_id] = calibration_info
        
        logging.info(f"Temperature compensated calibration for {sensor_id}: "
                    f"R¬≤ = {r2_score:.4f}, RMSE = {rmse:.4f}")
        
        return calibration_info
    
    def apply_calibration(self, sensor_id: str, raw_value: float, 
                         temperature: float = None) -> Optional[float]:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫ —Å—ã—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –¥–∞—Ç—á–∏–∫–∞
        """
        if sensor_id not in self.calibration_models:
            logging.warning(f"No calibration model for sensor {sensor_id}")
            return raw_value
        
        calibration = self.calibration_models[sensor_id]
        
        try:
            if calibration['type'] == 'linear':
                return calibration['slope'] * raw_value + calibration['intercept']
            
            elif calibration['type'] == 'polynomial':
                X = calibration['poly_features'].transform([[raw_value]])
                return calibration['model'].predict(X)[0]
            
            elif calibration['type'] == 'temperature_compensated':
                if temperature is None:
                    logging.warning("Temperature required for temperature compensated calibration")
                    return raw_value
                
                coeff = calibration['coefficients']
                return (coeff['a'] * raw_value + 
                       coeff['b'] + 
                       coeff['c'] * temperature + 
                       coeff['d'] * raw_value * temperature)
            
            else:
                logging.error(f"Unknown calibration type: {calibration['type']}")
                return raw_value
                
        except Exception as e:
            logging.error(f"Error applying calibration: {e}")
            return raw_value
    
    def validate_calibration(self, sensor_id: str,
                           validation_raw: np.ndarray,
                           validation_reference: np.ndarray,
                           validation_temp: np.ndarray = None) -> Dict:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        if sensor_id not in self.calibration_models:
            return {'error': 'No calibration model found'}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        calibrated_values = []
        for i, raw_val in enumerate(validation_raw):
            temp = validation_temp[i] if validation_temp is not None else None
            calibrated_val = self.apply_calibration(sensor_id, raw_val, temp)
            calibrated_values.append(calibrated_val)
        
        calibrated_values = np.array(calibrated_values)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        rmse = np.sqrt(np.mean((validation_reference - calibrated_values) ** 2))
        mae = np.mean(np.abs(validation_reference - calibrated_values))
        max_error = np.max(np.abs(validation_reference - calibrated_values))
        
        # R¬≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        ss_res = np.sum((validation_reference - calibrated_values) ** 2)
        ss_tot = np.sum((validation_reference - np.mean(validation_reference)) ** 2)
        r2_validation = 1 - (ss_res / ss_tot)
        
        validation_results = {
            'rmse': rmse,
            'mae': mae,
            'max_error': max_error,
            'r2_validation': r2_validation,
            'calibrated_values': calibrated_values
        }
        
        logging.info(f"Validation results for {sensor_id}: "
                    f"RMSE = {rmse:.4f}, MAE = {mae:.4f}, "
                    f"R¬≤ = {r2_validation:.4f}")
        
        return validation_results
    
    def drift_detection(self, sensor_id: str,
                       recent_raw: np.ndarray,
                       recent_reference: np.ndarray,
                       threshold: float = 0.05) -> Dict:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–∞—Ç—á–∏–∫–∞
        """
        if sensor_id not in self.calibration_models:
            return {'error': 'No calibration model found'}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
        calibrated_values = []
        for raw_val in recent_raw:
            calibrated_val = self.apply_calibration(sensor_id, raw_val)
            calibrated_values.append(calibrated_val)
        
        calibrated_values = np.array(calibrated_values)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É
        current_errors = np.abs(recent_reference - calibrated_values)
        mean_error = np.mean(current_errors)
        max_error = np.max(current_errors)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π
        original_rmse = self.calibration_models[sensor_id]['rmse']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥—Ä–µ–π—Ñ
        drift_detected = mean_error > (original_rmse * (1 + threshold))
        
        drift_info = {
            'drift_detected': drift_detected,
            'current_mean_error': mean_error,
            'current_max_error': max_error,
            'original_rmse': original_rmse,
            'drift_ratio': mean_error / original_rmse,
            'threshold': threshold
        }
        
        if drift_detected:
            logging.warning(f"Calibration drift detected for {sensor_id}: "
                          f"current error {mean_error:.4f} vs "
                          f"original RMSE {original_rmse:.4f}")
        
        return drift_info

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä–∞
if __name__ == "__main__":
    calibrator = SensorCalibrator()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    raw_values = np.linspace(0, 100, 50)
    true_values = 2.5 * raw_values + 10 + np.random.normal(0, 1, 50)
    temperatures = np.random.uniform(20, 40, 50)
    
    # –õ–∏–Ω–µ–π–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
    linear_cal = calibrator.linear_calibration('temp_sensor_1', raw_values, true_values)
    print(f"Linear calibration R¬≤: {linear_cal['r2_score']:.4f}")
    
    # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
    poly_cal = calibrator.polynomial_calibration('temp_sensor_1', raw_values, true_values, degree=2)
    print(f"Polynomial calibration R¬≤: {poly_cal['r2_score']:.4f}")
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    test_raw = 50.0
    calibrated_value = calibrator.apply_calibration('temp_sensor_1', test_raw)
    print(f"Raw: {test_raw}, Calibrated: {calibrated_value:.2f}")
\`\`\`

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ AI-—Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –¥–∞—Ç—á–∏–∫–æ–≤:

\`\`\`python
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import pandas as pd
from typing import Dict, List, Tuple, Optional
import logging
from datetime import datetime, timedelta

class AutoCalibrationSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤
    """
    def __init__(self):
        self.reference_sensors = {}  # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
        self.target_sensors = {}     # –ö–∞–ª–∏–±—Ä—É–µ–º—ã–µ –¥–∞—Ç—á–∏–∫–∏
        self.calibration_history = {}
        self.anomaly_detector = IsolationForest(contamination=0.1)
        self.scaler = StandardScaler()
        
    def register_reference_sensor(self, sensor_id: str, 
                                 accuracy_class: float,
                                 measurement_range: Tuple[float, float]):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
        """
        self.reference_sensors[sensor_id] = {
            'accuracy_class': accuracy_class,
            'range': measurement_range,
            'last_calibration': datetime.now(),
            'calibration_valid_until': datetime.now() + timedelta(days=365)
        }
        
        logging.info(f"Registered reference sensor {sensor_id} "
                    f"with accuracy class {accuracy_class}")
    
    def register_target_sensor(self, sensor_id: str,
                             reference_sensor_id: str,
                             calibration_interval_days: int = 90):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä—É–µ–º–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
        """
        if reference_sensor_id not in self.reference_sensors:
            raise ValueError(f"Reference sensor {reference_sensor_id} not found")
        
        self.target_sensors[sensor_id] = {
            'reference_sensor': reference_sensor_id,
            'calibration_interval': calibration_interval_days,
            'last_calibration': None,
            'next_calibration': datetime.now(),
            'calibration_model': None,
            'drift_detected': False
        }
        
        self.calibration_history[sensor_id] = []
        
        logging.info(f"Registered target sensor {sensor_id} "
                    f"with reference {reference_sensor_id}")
    
    def collect_calibration_data(self, target_sensor_id: str,
                               target_readings: List[float],
                               reference_readings: List[float],
                               timestamps: List[datetime],
                               environmental_data: List[Dict] = None) -> bool:
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        """
        if target_sensor_id not in self.target_sensors:
            return False
        
        if len(target_readings) != len(reference_readings):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        target_array = np.array(target_readings)
        reference_array = np.array(reference_readings)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
        combined_data = np.column_stack([target_array, reference_array])
        outlier_mask = self.anomaly_detector.fit_predict(combined_data) == 1
        
        clean_target = target_array[outlier_mask]
        clean_reference = reference_array[outlier_mask]
        clean_timestamps = [timestamps[i] for i, mask in enumerate(outlier_mask) if mask]
        
        if environmental_data:
            clean_env_data = [environmental_data[i] for i, mask in enumerate(outlier_mask) if mask]
        else:
            clean_env_data = None
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        calibration_data = {
            'timestamp': datetime.now(),
            'target_readings': clean_target.tolist(),
            'reference_readings': clean_reference.tolist(),
            'measurement_timestamps': clean_timestamps,
            'environmental_data': clean_env_data,
            'outliers_removed': len(target_readings) - len(clean_target)
        }
        
        self.calibration_history[target_sensor_id].append(calibration_data)
        
        logging.info(f"Collected {len(clean_target)} calibration points for {target_sensor_id} "
                    f"({calibration_data['outliers_removed']} outliers removed)")
        
        return True
    
    def perform_auto_calibration(self, target_sensor_id: str,
                               min_data_points: int = 20) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        """
        if target_sensor_id not in self.target_sensors:
            return {'error': 'Target sensor not registered'}
        
        if target_sensor_id not in self.calibration_history:
            return {'error': 'No calibration data available'}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        latest_data = self.calibration_history[target_sensor_id][-1]
        
        if len(latest_data['target_readings']) < min_data_points:
            return {'error': f'Insufficient data points: {len(latest_data["target_readings"])} < {min_data_points}'}
        
        target_readings = np.array(latest_data['target_readings'])
        reference_readings = np.array(latest_data['reference_readings'])
        
        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        calibration_method = self._select_calibration_method(target_readings, reference_readings)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        if calibration_method == 'linear':
            calibration_result = self._linear_auto_calibration(target_readings, reference_readings)
        elif calibration_method == 'polynomial':
            calibration_result = self._polynomial_auto_calibration(target_readings, reference_readings)
        elif calibration_method == 'environmental':
            if latest_data['environmental_data']:
                calibration_result = self._environmental_auto_calibration(
                    target_readings, reference_readings, latest_data['environmental_data']
                )
            else:
                calibration_result = self._linear_auto_calibration(target_readings, reference_readings)
        else:
            return {'error': f'Unknown calibration method: {calibration_method}'}
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.target_sensors[target_sensor_id]['calibration_model'] = calibration_result
        self.target_sensors[target_sensor_id]['last_calibration'] = datetime.now()
        self.target_sensors[target_sensor_id]['next_calibration'] = (
            datetime.now() + timedelta(days=self.target_sensors[target_sensor_id]['calibration_interval'])
        )
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        quality_assessment = self._assess_calibration_quality(calibration_result)
        
        result = {
            'sensor_id': target_sensor_id,
            'calibration_method': calibration_method,
            'calibration_timestamp': datetime.now().isoformat(),
            'data_points_used': len(target_readings),
            'calibration_parameters': calibration_result,
            'quality_assessment': quality_assessment,
            'next_calibration_due': self.target_sensors[target_sensor_id]['next_calibration'].isoformat()
        }
        
        logging.info(f"Auto-calibration completed for {target_sensor_id}: "
                    f"method={calibration_method}, R¬≤={quality_assessment.get('r2_score', 'N/A'):.4f}")
        
        return result
    
    def _select_calibration_method(self, target: np.ndarray, reference: np.ndarray) -> str:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å
        correlation = np.corrcoef(target, reference)[0, 1]
        
        if correlation > 0.99:
            return 'linear'
        elif correlation > 0.95:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ª—É—á—à–∞–µ—Ç –ª–∏ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–æ
            from sklearn.linear_model import LinearRegression
            from sklearn.preprocessing import PolynomialFeatures
            from sklearn.metrics import r2_score
            
            # –õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å
            linear_model = LinearRegression()
            linear_model.fit(target.reshape(-1, 1), reference)
            linear_r2 = linear_model.score(target.reshape(-1, 1), reference)
            
            # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å 2-–π —Å—Ç–µ–ø–µ–Ω–∏
            poly_features = PolynomialFeatures(degree=2)
            target_poly = poly_features.fit_transform(target.reshape(-1, 1))
            poly_model = LinearRegression()
            poly_model.fit(target_poly, reference)
            poly_r2 = poly_model.score(target_poly, reference)
            
            if poly_r2 - linear_r2 > 0.01:  # –ó–Ω–∞—á–∏–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                return 'polynomial'
            else:
                return 'linear'
        else:
            return 'environmental'  # –¢—Ä–µ–±—É–µ—Ç—Å—è —É—á–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    
    def _linear_auto_calibration(self, target: np.ndarray, reference: np.ndarray) -> Dict:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
        """
        from sklearn.linear_model import LinearRegression
        from sklearn.metrics import r2_score, mean_squared_error
        
        model = LinearRegression()
        model.fit(target.reshape(-1, 1), reference)
        
        predicted = model.predict(target.reshape(-1, 1))
        
        return {
            'type': 'linear',
            'slope': model.coef_[0],
            'intercept': model.intercept_,
            'r2_score': r2_score(reference, predicted),
            'rmse': np.sqrt(mean_squared_error(reference, predicted)),
            'model': model
        }
    
    def _polynomial_auto_calibration(self, target: np.ndarray, reference: np.ndarray, degree: int = 2) -> Dict:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
        """
        from sklearn.linear_model import LinearRegression
        from sklearn.preprocessing import PolynomialFeatures
        from sklearn.metrics import r2_score, mean_squared_error
        
        poly_features = PolynomialFeatures(degree=degree)
        target_poly = poly_features.fit_transform(target.reshape(-1, 1))
        
        model = LinearRegression()
        model.fit(target_poly, reference)
        
        predicted = model.predict(target_poly)
        
        return {
            'type': 'polynomial',
            'degree': degree,
            'coefficients': model.coef_.tolist(),
            'intercept': model.intercept_,
            'r2_score': r2_score(reference, predicted),
            'rmse': np.sqrt(mean_squared_error(reference, predicted)),
            'model': model,
            'poly_features': poly_features
        }
    
    def _environmental_auto_calibration(self, target: np.ndarray, reference: np.ndarray, 
                                      env_data: List[Dict]) -> Dict:
        """
        –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        """
        from sklearn.ensemble import RandomForestRegressor
        from sklearn.metrics import r2_score, mean_squared_error
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã
        features = []
        for i, env in enumerate(env_data):
            feature_vector = [target[i]]  # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã
            if 'temperature' in env:
                feature_vector.append(env['temperature'])
            if 'humidity' in env:
                feature_vector.append(env['humidity'])
            if 'pressure' in env:
                feature_vector.append(env['pressure'])
            
            features.append(feature_vector)
        
        features = np.array(features)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å Random Forest
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(features, reference)
        
        predicted = model.predict(features)
        
        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_names = ['target_reading']
        if len(features[0]) > 1:
            feature_names.extend(['temperature', 'humidity', 'pressure'][:len(features[0])-1])
        
        feature_importance = dict(zip(feature_names, model.feature_importances_))
        
        return {
            'type': 'environmental',
            'r2_score': r2_score(reference, predicted),
            'rmse': np.sqrt(mean_squared_error(reference, predicted)),
            'feature_importance': feature_importance,
            'model': model
        }
    
    def _assess_calibration_quality(self, calibration_result: Dict) -> Dict:
        """
        –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        """
        r2 = calibration_result.get('r2_score', 0)
        rmse = calibration_result.get('rmse', float('inf'))
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        if r2 > 0.99 and rmse < 0.1:
            quality = 'excellent'
        elif r2 > 0.95 and rmse < 0.5:
            quality = 'good'
        elif r2 > 0.90 and rmse < 1.0:
            quality = 'acceptable'
        else:
            quality = 'poor'
        
        return {
            'quality_rating': quality,
            'r2_score': r2,
            'rmse': rmse,
            'recommendation': self._get_quality_recommendation(quality, r2, rmse)
        }
    
    def _get_quality_recommendation(self, quality: str, r2: float, rmse: float) -> str:
        """
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        """
        if quality == 'excellent':
            return "Calibration quality is excellent. Sensor ready for production use."
        elif quality == 'good':
            return "Calibration quality is good. Monitor sensor performance regularly."
        elif quality == 'acceptable':
            return "Calibration quality is acceptable. Consider more frequent calibration or environmental compensation."
        else:
            return f"Calibration quality is poor (R¬≤={r2:.3f}, RMSE={rmse:.3f}). Check sensor condition and recalibrate with more data points."
    
    def check_calibration_status(self) -> Dict[str, Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        """
        status_report = {}
        current_time = datetime.now()
        
        for sensor_id, sensor_info in self.target_sensors.items():
            days_until_calibration = (sensor_info['next_calibration'] - current_time).days
            
            if days_until_calibration < 0:
                status = 'overdue'
            elif days_until_calibration < 7:
                status = 'due_soon'
            else:
                status = 'current'
            
            status_report[sensor_id] = {
                'status': status,
                'days_until_calibration': days_until_calibration,
                'last_calibration': sensor_info['last_calibration'].isoformat() if sensor_info['last_calibration'] else None,
                'next_calibration': sensor_info['next_calibration'].isoformat(),
                'drift_detected': sensor_info['drift_detected']
            }
        
        return status_report

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
if __name__ == "__main__":
    auto_cal = AutoCalibrationSystem()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –¥–∞—Ç—á–∏–∫
    auto_cal.register_reference_sensor('ref_temp_001', accuracy_class=0.1, measurement_range=(0, 100))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–ª–∏–±—Ä—É–µ–º—ã–π –¥–∞—Ç—á–∏–∫
    auto_cal.register_target_sensor('temp_sensor_001', 'ref_temp_001', calibration_interval_days=90)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    target_readings = np.random.uniform(10, 90, 50)
    reference_readings = 1.02 * target_readings + 0.5 + np.random.normal(0, 0.1, 50)
    timestamps = [datetime.now() - timedelta(minutes=i) for i in range(50)]
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    auto_cal.collect_calibration_data('temp_sensor_001', target_readings.tolist(), 
                                     reference_readings.tolist(), timestamps)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫—É
    calibration_result = auto_cal.perform_auto_calibration('temp_sensor_001')
    print("Calibration result:", calibration_result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    status = auto_cal.check_calibration_status()
    print("Calibration status:", status)
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–ª–∏ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º. –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç:

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏

1. **–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–æ–≤** - —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π, –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
2. **–í–ª–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏** - Modbus, HART, OPC UA, Profibus/Profinet
3. **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤** - —Å–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
4. **–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—è** - –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è

- **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏** –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤
- **–°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏** —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞ –∏ –∞–Ω–æ–º–∞–ª–∏–π** –≤ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö –¥–∞—Ç—á–∏–∫–æ–≤
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI-—Å–∏—Å—Ç–µ–º–∞–º–∏** –¥–ª—è real-time –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

### –†–æ—Å—Å–∏–π—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞

- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –º–µ—Ç—Ä–æ–ª–æ–≥–∏–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ SCADA –∏ MES —Å–∏—Å—Ç–µ–º–∞–º–∏
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—é –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö

–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º —Ü–∏—Ñ—Ä–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ - –∫–ª—é—á–µ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É AI-–∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏.
    `,
  },


  39: {
    title: "–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–∞—Ç—á–∏–∫–æ–≤",
    duration: "200 –º–∏–Ω",
    type: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    content: `
# –ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–∞—Ç—á–∏–∫–æ–≤

## –í–≤–µ–¥–µ–Ω–∏–µ

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã —É–≥–ª—É–±–∏–º—Å—è –≤ –∏–∑—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –≤ AI-—Å–∏—Å—Ç–µ–º—É, –∞ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

### –í–∞–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º

AI-—Å–∏—Å—Ç–µ–º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏–Ω—Ü–∏–ø "Garbage In, Garbage Out" –æ—Å–æ–±–µ–Ω–Ω–æ –∫—Ä–∏—Ç–∏—á–µ–Ω –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö, –≥–¥–µ –Ω–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫:
- **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º** —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º
- **–õ–æ–∂–Ω—ã–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º** —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- **–ü—Ä–æ–ø—É—Å–∫—É –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π** –∏–∑-–∑–∞ –∏—Å–∫–∞–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
- **–°–Ω–∏–∂–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏** –ø—Ä–∏ –Ω–µ—Ç–æ—á–Ω–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

## –ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

### –¢–æ–∫–æ–≤–∞—è –ø–µ—Ç–ª—è 4-20 –º–ê

–¢–æ–∫–æ–≤–∞—è –ø–µ—Ç–ª—è 4-20 –º–ê —è–≤–ª—è–µ—Ç—Å—è –∑–æ–ª–æ—Ç—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ–º–µ—Ö–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏.

**–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã:**
- **4 –º–ê** - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ—Ä—è–µ–º–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
- **20 –º–ê** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ—Ä—è–µ–º–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
- **0 –º–ê** - –æ–±—Ä—ã–≤ –ª–∏–Ω–∏–∏ —Å–≤—è–∑–∏ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
- **>20 –º–ê** - –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –¥–∞—Ç—á–∏–∫–∞

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- –í—ã—Å–æ–∫–∞—è –ø–æ–º–µ—Ö–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å (—Ç–æ–∫ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏)
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–æ 1000 –º)
- –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ–±—Ä—ã–≤/–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ)
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –ø–æ —Ç–æ–π –∂–µ –ª–∏–Ω–∏–∏

\`\`\`python
import numpy as np
import time
import threading
from typing import Dict, List, Optional, Callable, Tuple
import logging
from dataclasses import dataclass
from enum import Enum
import serial
import struct

class AnalogSignalType(Enum):
    """–¢–∏–ø—ã –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    CURRENT_4_20_MA = "4-20mA"
    VOLTAGE_0_10_V = "0-10V"
    VOLTAGE_0_5_V = "0-5V"
    VOLTAGE_MINUS_10_PLUS_10_V = "-10V to +10V"

@dataclass
class AnalogChannelConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    channel_id: str
    signal_type: AnalogSignalType
    measurement_range: Tuple[float, float]  # –§–∏–∑–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è
    units: str
    calibration_slope: float = 1.0
    calibration_offset: float = 0.0
    filter_enabled: bool = True
    filter_time_constant: float = 1.0  # —Å–µ–∫—É–Ω–¥—ã
    alarm_low: Optional[float] = None
    alarm_high: Optional[float] = None

class AnalogInputModule:
    """
    –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º
    """
    def __init__(self, module_id: str, num_channels: int = 8):
        self.module_id = module_id
        self.num_channels = num_channels
        self.channels: Dict[int, AnalogChannelConfig] = {}
        self.raw_values: Dict[int, float] = {}
        self.filtered_values: Dict[int, float] = {}
        self.engineering_values: Dict[int, float] = {}
        self.channel_status: Dict[int, str] = {}
        self.data_callbacks: List[Callable] = []
        self.running = False
        self.scan_thread = None
        self.scan_interval = 0.1  # 100 –º—Å
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        self.filters: Dict[int, ExponentialFilter] = {}
        
        logging.info(f"Initialized analog input module {module_id} with {num_channels} channels")
    
    def configure_channel(self, channel_num: int, config: AnalogChannelConfig):
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if channel_num < 0 or channel_num >= self.num_channels:
            raise ValueError(f"Channel number {channel_num} out of range")
        
        self.channels[channel_num] = config
        self.raw_values[channel_num] = 0.0
        self.filtered_values[channel_num] = 0.0
        self.engineering_values[channel_num] = 0.0
        self.channel_status[channel_num] = "OK"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞–Ω–∞–ª–∞
        if config.filter_enabled:
            self.filters[channel_num] = ExponentialFilter(config.filter_time_constant)
        
        logging.info(f"Configured channel {channel_num}: {config.channel_id} "
                    f"({config.signal_type.value}, {config.measurement_range} {config.units})")
    
    def _simulate_adc_reading(self, channel_num: int) -> int:
        """
        –°–∏–º—É–ª—è—Ü–∏—è —á—Ç–µ–Ω–∏—è –ê–¶–ü (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –¥—Ä–∞–π–≤–µ—Ä –∂–µ–ª–µ–∑–∞)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0-4095 (12-bit ADC)
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —à—É–º–æ–º
        if channel_num not in self.channels:
            return 0
        
        config = self.channels[channel_num]
        
        # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å–∏–Ω—É—Å–æ–∏–¥–∞ + —Ç—Ä–µ–Ω–¥)
        t = time.time()
        base_value = (
            np.sin(t * 0.1 + channel_num) * 0.3 +  # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            np.sin(t * 2.0 + channel_num) * 0.1 +   # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            0.5 + channel_num * 0.05                # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-1
        base_value = max(0, min(1, base_value))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        noise = np.random.normal(0, 0.01)
        noisy_value = base_value + noise
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –ê–¶–ü
        adc_value = int(noisy_value * 4095)
        
        # –ò–Ω–æ–≥–¥–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if np.random.random() < 0.001:  # 0.1% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            if np.random.random() < 0.5:
                return 0  # –û–±—Ä—ã–≤ (0 –º–ê)
            else:
                return 4095  # –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ (>20 –º–ê)
        
        return adc_value
    
    def _convert_adc_to_engineering(self, channel_num: int, adc_value: int) -> Tuple[float, str]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ê–¶–ü –≤ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        """
        if channel_num not in self.channels:
            return 0.0, "UNCONFIGURED"
        
        config = self.channels[channel_num]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ê–¶–ü –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
        if config.signal_type == AnalogSignalType.CURRENT_4_20_MA:
            # 0 ADC = 0 –º–ê, 4095 ADC = 24 –º–ê (—Å –∑–∞–ø–∞—Å–æ–º)
            current_ma = (adc_value / 4095.0) * 24.0
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if current_ma < 3.5:
                return 0.0, "UNDERRANGE"  # –û–±—Ä—ã–≤
            elif current_ma > 20.5:
                return 0.0, "OVERRANGE"   # –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞
            
            # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 4-20 –º–ê
            normalized = (current_ma - 4.0) / 16.0  # 0-1
            
        elif config.signal_type == AnalogSignalType.VOLTAGE_0_10_V:
            voltage = (adc_value / 4095.0) * 10.0
            
            if voltage < -0.5:
                return 0.0, "UNDERRANGE"
            elif voltage > 10.5:
                return 0.0, "OVERRANGE"
            
            normalized = voltage / 10.0
            
        elif config.signal_type == AnalogSignalType.VOLTAGE_0_5_V:
            voltage = (adc_value / 4095.0) * 5.0
            
            if voltage < -0.25:
                return 0.0, "UNDERRANGE"
            elif voltage > 5.25:
                return 0.0, "OVERRANGE"
            
            normalized = voltage / 5.0
            
        else:
            normalized = adc_value / 4095.0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
        calibrated = normalized * config.calibration_slope + config.calibration_offset
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        range_span = config.measurement_range[1] - config.measurement_range[0]
        engineering_value = config.measurement_range[0] + calibrated * range_span
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ —É—Å—Ç–∞–≤–∫–∏
        status = "OK"
        if config.alarm_low is not None and engineering_value < config.alarm_low:
            status = "ALARM_LOW"
        elif config.alarm_high is not None and engineering_value > config.alarm_high:
            status = "ALARM_HIGH"
        
        return engineering_value, status
    
    def read_channel(self, channel_num: int) -> Dict:
        """–ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if channel_num not in self.channels:
            return {'error': 'Channel not configured'}
        
        # –ß–∏—Ç–∞–µ–º –ê–¶–ü
        adc_value = self._simulate_adc_reading(channel_num)
        self.raw_values[channel_num] = adc_value
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        engineering_value, status = self._convert_adc_to_engineering(channel_num, adc_value)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        if channel_num in self.filters and status == "OK":
            filtered_value = self.filters[channel_num].update(engineering_value)
        else:
            filtered_value = engineering_value
        
        self.filtered_values[channel_num] = filtered_value
        self.engineering_values[channel_num] = engineering_value
        self.channel_status[channel_num] = status
        
        config = self.channels[channel_num]
        
        return {
            'channel_id': config.channel_id,
            'channel_num': channel_num,
            'raw_adc': adc_value,
            'engineering_value': engineering_value,
            'filtered_value': filtered_value,
            'units': config.units,
            'status': status,
            'timestamp': time.time()
        }
    
    def read_all_channels(self) -> Dict[int, Dict]:
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        results = {}
        for channel_num in self.channels.keys():
            results[channel_num] = self.read_channel(channel_num)
        return results
    
    def start_continuous_scan(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        if self.running:
            return
        
        self.running = True
        self.scan_thread = threading.Thread(target=self._scan_loop, daemon=True)
        self.scan_thread.start()
        
        logging.info(f"Started continuous scan for module {self.module_id}")
    
    def stop_continuous_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.running = False
        if self.scan_thread:
            self.scan_thread.join()
        
        logging.info(f"Stopped continuous scan for module {self.module_id}")
    
    def _scan_loop(self):
        """–¶–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        while self.running:
            try:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
                scan_data = self.read_all_channels()
                
                # –í—ã–∑—ã–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏
                for callback in self.data_callbacks:
                    try:
                        callback(self.module_id, scan_data)
                    except Exception as e:
                        logging.error(f"Error in data callback: {e}")
                
                time.sleep(self.scan_interval)
                
            except Exception as e:
                logging.error(f"Error in scan loop: {e}")
                time.sleep(self.scan_interval)
    
    def add_data_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.data_callbacks.append(callback)
    
    def get_channel_statistics(self, channel_num: int, duration: float = 60.0) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        """
        if channel_num not in self.channels:
            return {'error': 'Channel not configured'}
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±—É—Ñ–µ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        config = self.channels[channel_num]
        current_value = self.engineering_values.get(channel_num, 0)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        mean_value = current_value + np.random.normal(0, 0.1)
        std_dev = abs(np.random.normal(0.5, 0.1))
        min_value = mean_value - 2 * std_dev
        max_value = mean_value + 2 * std_dev
        
        return {
            'channel_id': config.channel_id,
            'duration_seconds': duration,
            'mean': mean_value,
            'std_dev': std_dev,
            'min': min_value,
            'max': max_value,
            'current': current_value,
            'units': config.units,
            'sample_count': int(duration / self.scan_interval)
        }

class ExponentialFilter:
    """
    –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –∞–Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    def __init__(self, time_constant: float, sample_time: float = 0.1):
        self.time_constant = time_constant
        self.sample_time = sample_time
        self.alpha = sample_time / (time_constant + sample_time)
        self.filtered_value = None
        self.initialized = False
    
    def update(self, new_value: float) -> float:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"""
        if not self.initialized:
            self.filtered_value = new_value
            self.initialized = True
            return new_value
        
        self.filtered_value = self.alpha * new_value + (1 - self.alpha) * self.filtered_value
        return self.filtered_value
    
    def reset(self):
        """–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞"""
        self.filtered_value = None
        self.initialized = False

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
def analog_data_handler(module_id: str, scan_data: Dict[int, Dict]):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã
    """
    print(f"\\n=== Data from {module_id} ===")
    
    for channel_num, data in scan_data.items():
        if data.get('status') == 'OK':
            print(f"Channel {data['channel_id']}: "
                  f"{data['filtered_value']:.2f} {data['units']} "
                  f"(raw: {data['engineering_value']:.2f})")
        else:
            print(f"Channel {data['channel_id']}: {data['status']}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    analog_module = AnalogInputModule("AI_MODULE_001", 4)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
    temp_config = AnalogChannelConfig(
        channel_id="TEMP_001",
        signal_type=AnalogSignalType.CURRENT_4_20_MA,
        measurement_range=(0.0, 100.0),
        units="¬∞C",
        filter_enabled=True,
        filter_time_constant=2.0,
        alarm_low=5.0,
        alarm_high=95.0
    )
    
    pressure_config = AnalogChannelConfig(
        channel_id="PRESS_001",
        signal_type=AnalogSignalType.CURRENT_4_20_MA,
        measurement_range=(0.0, 10.0),
        units="bar",
        filter_enabled=True,
        filter_time_constant=1.0,
        alarm_high=9.5
    )
    
    flow_config = AnalogChannelConfig(
        channel_id="FLOW_001",
        signal_type=AnalogSignalType.VOLTAGE_0_10_V,
        measurement_range=(0.0, 1000.0),
        units="L/min",
        filter_enabled=True,
        filter_time_constant=0.5
    )
    
    level_config = AnalogChannelConfig(
        channel_id="LEVEL_001",
        signal_type=AnalogSignalType.CURRENT_4_20_MA,
        measurement_range=(0.0, 5.0),
        units="m",
        filter_enabled=True,
        filter_time_constant=3.0,
        alarm_low=0.5,
        alarm_high=4.5
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    analog_module.configure_channel(0, temp_config)
    analog_module.configure_channel(1, pressure_config)
    analog_module.configure_channel(2, flow_config)
    analog_module.configure_channel(3, level_config)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    analog_module.add_data_callback(analog_data_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    analog_module.start_continuous_scan()
    
    try:
        # –†–∞–±–æ—Ç–∞–µ–º 10 —Å–µ–∫—É–Ω–¥
        time.sleep(10)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\\n=== Channel Statistics ===")
        for channel_num in range(4):
            stats = analog_module.get_channel_statistics(channel_num, 10.0)
            if 'error' not in stats:
                print(f"{stats['channel_id']}: "
                      f"mean={stats['mean']:.2f}, "
                      f"std={stats['std_dev']:.2f}, "
                      f"range=[{stats['min']:.2f}, {stats['max']:.2f}] {stats['units']}")
    
    finally:
        analog_module.stop_continuous_scan()
\`\`\`

### –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è 0-10 –í

–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å 0-10 –í –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö, –≥–¥–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–∞—è –ø–æ–º–µ—Ö–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- –ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (–¥–æ 100 –º)
- –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –ø–æ–º–µ—Ö–∞–º
- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–±–µ–ª–µ–π

\`\`\`python
class VoltageInputModule:
    """
    –ú–æ–¥—É–ª—å –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è 0-10–í –¥–ª—è AI-—Å–∏—Å—Ç–µ–º
    """
    def __init__(self, module_id: str, resolution_bits: int = 16):
        self.module_id = module_id
        self.resolution_bits = resolution_bits
        self.max_adc_value = (2 ** resolution_bits) - 1
        self.reference_voltage = 10.0  # –û–ø–æ—Ä–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
        self.channels = {}
        self.noise_filter = NoiseFilter()
        
    def configure_differential_input(self, channel_num: int, 
                                   gain: float = 1.0,
                                   offset: float = 0.0):
        """
        –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        """
        self.channels[channel_num] = {
            'type': 'differential',
            'gain': gain,
            'offset': offset,
            'common_mode_rejection': 80  # –¥–ë
        }
    
    def read_voltage_with_noise_rejection(self, channel_num: int, 
                                        samples: int = 16) -> Dict:
        """
        –ß—Ç–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è —Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º —à—É–º–æ–≤
        """
        if channel_num not in self.channels:
            return {'error': 'Channel not configured'}
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        measurements = []
        for _ in range(samples):
            adc_value = self._simulate_voltage_adc(channel_num)
            voltage = (adc_value / self.max_adc_value) * self.reference_voltage
            measurements.append(voltage)
            time.sleep(0.001)  # 1 –º—Å –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        measurements = np.array(measurements)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ (–º–µ—Ç–æ–¥ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞)
        q1, q3 = np.percentile(measurements, [25, 75])
        iqr = q3 - q1
        lower_bound = q1 - 1.5 * iqr
        upper_bound = q3 + 1.5 * iqr
        
        filtered_measurements = measurements[
            (measurements >= lower_bound) & (measurements <= upper_bound)
        ]
        
        if len(filtered_measurements) == 0:
            filtered_measurements = measurements
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        final_voltage = np.mean(filtered_measurements)
        noise_level = np.std(filtered_measurements)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∫–∞–Ω–∞–ª–∞
        config = self.channels[channel_num]
        calibrated_voltage = final_voltage * config['gain'] + config['offset']
        
        return {
            'channel_num': channel_num,
            'raw_voltage': final_voltage,
            'calibrated_voltage': calibrated_voltage,
            'noise_level': noise_level,
            'samples_used': len(filtered_measurements),
            'samples_total': samples,
            'quality': 'good' if noise_level < 0.01 else 'noisy',
            'timestamp': time.time()
        }
    
    def _simulate_voltage_adc(self, channel_num: int) -> int:
        """–°–∏–º—É–ª—è—Ü–∏—è –ê–¶–ü –¥–ª—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è"""
        # –ë–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        base_voltage = 5.0 + 2.0 * np.sin(time.time() * 0.5 + channel_num)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —à—É–º–æ–≤
        # 1. –¢–µ–ø–ª–æ–≤–æ–π —à—É–º
        thermal_noise = np.random.normal(0, 0.005)
        
        # 2. –°–µ—Ç–µ–≤—ã–µ –Ω–∞–≤–æ–¥–∫–∏ 50 –ì—Ü
        power_line_noise = 0.02 * np.sin(2 * np.pi * 50 * time.time())
        
        # 3. –ò–º–ø—É–ª—å—Å–Ω—ã–µ –ø–æ–º–µ—Ö–∏
        impulse_noise = 0
        if np.random.random() < 0.01:  # 1% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            impulse_noise = np.random.uniform(-0.1, 0.1)
        
        # –°—É–º–º–∞—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        total_voltage = base_voltage + thermal_noise + power_line_noise + impulse_noise
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        total_voltage = max(0, min(self.reference_voltage, total_voltage))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –ê–¶–ü
        adc_value = int((total_voltage / self.reference_voltage) * self.max_adc_value)
        
        return adc_value

class NoiseFilter:
    """
    –¶–∏—Ñ—Ä–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–æ–≤
    """
    def __init__(self):
        self.filters = {}
    
    def butterworth_lowpass(self, channel_id: str, data: np.ndarray, 
                          cutoff_freq: float, sample_rate: float, 
                          order: int = 4) -> np.ndarray:
        """
        –§–∏–ª—å—Ç—Ä –ë–∞—Ç—Ç–µ—Ä–≤–æ—Ä—Ç–∞ –Ω–∏–∂–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç
        """
        from scipy import signal
        
        nyquist = sample_rate / 2
        normal_cutoff = cutoff_freq / nyquist
        
        b, a = signal.butter(order, normal_cutoff, btype='low', analog=False)
        filtered_data = signal.filtfilt(b, a, data)
        
        return filtered_data
    
    def notch_filter_50hz(self, data: np.ndarray, sample_rate: float) -> np.ndarray:
        """
        –†–µ–∂–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞–≤–æ–¥–æ–∫ 50 –ì—Ü
        """
        from scipy import signal
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è 50 –ì—Ü
        freq_to_remove = 50.0
        quality_factor = 30.0
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∂–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        b, a = signal.iirnotch(freq_to_remove, quality_factor, sample_rate)
        filtered_data = signal.filtfilt(b, a, data)
        
        return filtered_data
    
    def adaptive_filter(self, channel_id: str, new_value: float, 
                       adaptation_rate: float = 0.1) -> float:
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —à—É–º–æ–≤
        """
        if channel_id not in self.filters:
            self.filters[channel_id] = {
                'mean': new_value,
                'variance': 1.0,
                'count': 1
            }
            return new_value
        
        filter_state = self.filters[channel_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        filter_state['count'] += 1
        old_mean = filter_state['mean']
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        filter_state['mean'] = (1 - adaptation_rate) * old_mean + adaptation_rate * new_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é
        filter_state['variance'] = (1 - adaptation_rate) * filter_state['variance'] + \
                                  adaptation_rate * (new_value - old_mean) ** 2
        
        return filter_state['mean']
\`\`\`

## –¶–∏—Ñ—Ä–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

### RS-485 –∏ Modbus RTU

RS-485 - —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –º–Ω–æ–≥–∏—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è Modbus RTU.

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ RS-485:**
- –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ (–≤—ã—Å–æ–∫–∞—è –ø–æ–º–µ—Ö–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)
- –ë–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–æ 1200 –º)
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏ (–¥–æ 32 —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
- –í—ã—Å–æ–∫–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ (–¥–æ 10 –ú–±–∏—Ç/—Å)

\`\`\`python
import serial
import struct
import time
import threading
from typing import Dict, List, Optional, Union, Callable
import logging
from dataclasses import dataclass
from enum import Enum
import queue

class ModbusFunction(Enum):
    """–§—É–Ω–∫—Ü–∏–∏ Modbus"""
    READ_COILS = 0x01
    READ_DISCRETE_INPUTS = 0x02
    READ_HOLDING_REGISTERS = 0x03
    READ_INPUT_REGISTERS = 0x04
    WRITE_SINGLE_COIL = 0x05
    WRITE_SINGLE_REGISTER = 0x06
    WRITE_MULTIPLE_COILS = 0x0F
    WRITE_MULTIPLE_REGISTERS = 0x10

@dataclass
class ModbusDevice:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Modbus —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    device_id: str
    slave_address: int
    device_type: str
    registers_map: Dict[int, str]  # –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞ -> –æ–ø–∏—Å–∞–Ω–∏–µ
    polling_interval: float = 1.0
    timeout: float = 1.0
    retries: int = 3

class AdvancedModbusClient:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Modbus RTU –∫–ª–∏–µ–Ω—Ç –¥–ª—è AI-—Å–∏—Å—Ç–µ–º
    """
    def __init__(self, port: str, baudrate: int = 9600, 
                 bytesize: int = 8, parity: str = 'N', stopbits: int = 1):
        self.port = port
        self.baudrate = baudrate
        self.bytesize = bytesize
        self.parity = parity
        self.stopbits = stopbits
        
        self.connection = None
        self.devices: Dict[str, ModbusDevice] = {}
        self.device_data: Dict[str, Dict] = {}
        self.polling_threads: Dict[str, threading.Thread] = {}
        self.running_devices: set = set()
        
        # –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.command_queue = queue.Queue()
        self.command_thread = None
        self.command_processing = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.statistics = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'timeout_errors': 0,
            'crc_errors': 0
        }
        
        # Callbacks –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.data_callbacks: List[Callable] = []
        
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Modbus —Å–µ—Ç–∏"""
        try:
            self.connection = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                bytesize=self.bytesize,
                parity=self.parity,
                stopbits=self.stopbits,
                timeout=1.0
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
            self.command_processing = True
            self.command_thread = threading.Thread(target=self._command_processor, daemon=True)
            self.command_thread.start()
            
            logging.info(f"Connected to Modbus network on {self.port}")
            return True
            
        except Exception as e:
            logging.error(f"Failed to connect to Modbus network: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Modbus —Å–µ—Ç–∏"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ polling –ø–æ—Ç–æ–∫–∏
        for device_id in list(self.running_devices):
            self.stop_device_polling(device_id)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
        self.command_processing = False
        if self.command_thread:
            self.command_thread.join(timeout=2.0)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.connection:
            self.connection.close()
            self.connection = None
        
        logging.info("Disconnected from Modbus network")
    
    def register_device(self, device: ModbusDevice):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Modbus —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        self.devices[device.device_id] = device
        self.device_data[device.device_id] = {}
        
        logging.info(f"Registered Modbus device {device.device_id} "
                    f"(slave {device.slave_address}, type: {device.device_type})")
    
    def _calculate_crc16(self, data: bytes) -> int:
        """–†–∞—Å—á–µ—Ç CRC16 –¥–ª—è Modbus RTU"""
        crc = 0xFFFF
        for byte in data:
            crc ^= byte
            for _ in range(8):
                if crc & 1:
                    crc >>= 1
                    crc ^= 0xA001
                else:
                    crc >>= 1
        return crc
    
    def _send_modbus_request(self, slave_address: int, function_code: int,
                           start_address: int, count: int = 1,
                           data: bytes = b'') -> Optional[bytes]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ Modbus –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        """
        if not self.connection:
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            if function_code in [ModbusFunction.READ_HOLDING_REGISTERS.value,
                               ModbusFunction.READ_INPUT_REGISTERS.value,
                               ModbusFunction.READ_COILS.value,
                               ModbusFunction.READ_DISCRETE_INPUTS.value]:
                request = struct.pack('>BBHH', slave_address, function_code, 
                                    start_address, count)
            else:
                request = struct.pack('>BBH', slave_address, function_code, start_address) + data
            
            # –î–æ–±–∞–≤–ª—è–µ–º CRC
            crc = self._calculate_crc16(request)
            request += struct.pack('<H', crc)
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø—Ä–∏–µ–º–∞
            self.connection.reset_input_buffer()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.connection.write(request)
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            time.sleep(0.01)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
            # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–≤–µ—Ç–∞
            header = self.connection.read(3)
            if len(header) < 3:
                self.statistics['timeout_errors'] += 1
                return None
            
            response_slave, response_function, data_length = struct.unpack('BBB', header)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
            if response_function & 0x80:
                error_code = self.connection.read(1)
                crc_bytes = self.connection.read(2)
                logging.error(f"Modbus error from slave {slave_address}: "
                            f"function {function_code}, error code {error_code[0] if error_code else 'unknown'}")
                self.statistics['failed_requests'] += 1
                return None
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ CRC
            remaining_data = self.connection.read(data_length + 2)
            if len(remaining_data) < data_length + 2:
                self.statistics['timeout_errors'] += 1
                return None
            
            data_bytes = remaining_data[:-2]
            received_crc = struct.unpack('<H', remaining_data[-2:])[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CRC
            response_for_crc = header + data_bytes
            calculated_crc = self._calculate_crc16(response_for_crc)
            
            if received_crc != calculated_crc:
                logging.error(f"CRC mismatch for slave {slave_address}")
                self.statistics['crc_errors'] += 1
                return None
            
            self.statistics['successful_requests'] += 1
            return data_bytes
            
        except Exception as e:
            logging.error(f"Modbus communication error: {e}")
            self.statistics['failed_requests'] += 1
            return None
        
        finally:
            self.statistics['total_requests'] += 1
    
    def read_holding_registers_advanced(self, device_id: str, 
                                      start_address: int, 
                                      count: int) -> Optional[List[int]]:
        """
        –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —á—Ç–µ–Ω–∏–µ holding registers —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        """
        if device_id not in self.devices:
            return None
        
        device = self.devices[device_id]
        
        for attempt in range(device.retries):
            try:
                data_bytes = self._send_modbus_request(
                    device.slave_address,
                    ModbusFunction.READ_HOLDING_REGISTERS.value,
                    start_address,
                    count
                )
                
                if data_bytes:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
                    values = []
                    for i in range(count):
                        value = struct.unpack('>H', data_bytes[i*2:(i+1)*2])[0]
                        values.append(value)
                    
                    return values
                
            except Exception as e:
                logging.warning(f"Attempt {attempt + 1} failed for device {device_id}: {e}")
            
            if attempt < device.retries - 1:
                time.sleep(0.1 * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        return None
    
    def write_multiple_registers_advanced(self, device_id: str,
                                        start_address: int,
                                        values: List[int]) -> bool:
        """
        –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∑–∞–ø–∏—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        """
        if device_id not in self.devices:
            return False
        
        device = self.devices[device_id]
        count = len(values)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        data = struct.pack('>HB', start_address, count * 2)
        for value in values:
            data += struct.pack('>H', value)
        
        for attempt in range(device.retries):
            try:
                response = self._send_modbus_request(
                    device.slave_address,
                    ModbusFunction.WRITE_MULTIPLE_REGISTERS.value,
                    start_address,
                    count,
                    data
                )
                
                if response is not None:
                    return True
                
            except Exception as e:
                logging.warning(f"Write attempt {attempt + 1} failed for device {device_id}: {e}")
            
            if attempt < device.retries - 1:
                time.sleep(0.1 * (attempt + 1))
        
        return False
    
    def start_device_polling(self, device_id: str):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if device_id not in self.devices or device_id in self.running_devices:
            return
        
        device = self.devices[device_id]
        self.running_devices.add(device_id)
        
        polling_thread = threading.Thread(
            target=self._device_polling_loop,
            args=(device_id,),
            daemon=True
        )
        self.polling_threads[device_id] = polling_thread
        polling_thread.start()
        
        logging.info(f"Started polling for device {device_id}")
    
    def stop_device_polling(self, device_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if device_id in self.running_devices:
            self.running_devices.remove(device_id)
            
            if device_id in self.polling_threads:
                thread = self.polling_threads[device_id]
                thread.join(timeout=2.0)
                del self.polling_threads[device_id]
            
            logging.info(f"Stopped polling for device {device_id}")
    
    def _device_polling_loop(self, device_id: str):
        """–¶–∏–∫–ª –æ–ø—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        device = self.devices[device_id]
        
        while device_id in self.running_devices:
            try:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                device_readings = {}
                
                for register_address, description in device.registers_map.items():
                    values = self.read_holding_registers_advanced(device_id, register_address, 1)
                    if values:
                        device_readings[description] = {
                            'address': register_address,
                            'value': values[0],
                            'timestamp': time.time()
                        }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                self.device_data[device_id] = device_readings
                
                # –í—ã–∑—ã–≤–∞–µ–º callbacks
                for callback in self.data_callbacks:
                    try:
                        callback(device_id, device_readings)
                    except Exception as e:
                        logging.error(f"Error in data callback: {e}")
                
                time.sleep(device.polling_interval)
                
            except Exception as e:
                logging.error(f"Error in polling loop for {device_id}: {e}")
                time.sleep(device.polling_interval)
    
    def _command_processor(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥"""
        while self.command_processing:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                command = self.command_queue.get(timeout=1.0)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                command['function'](*command['args'], **command['kwargs'])
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.command_queue.task_done()
                
            except queue.Empty:
                continue
            except Exception as e:
                logging.error(f"Error processing command: {e}")
    
    def add_data_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.data_callbacks.append(callback)
    
    def get_device_data(self, device_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        return self.device_data.get(device_id)
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        stats = self.statistics.copy()
        if stats['total_requests'] > 0:
            stats['success_rate'] = stats['successful_requests'] / stats['total_requests']
        else:
            stats['success_rate'] = 0.0
        
        return stats

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ Modbus –∫–ª–∏–µ–Ω—Ç–∞
def modbus_data_handler(device_id: str, device_data: Dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö Modbus –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã"""
    print(f"\\n=== Data from Modbus device {device_id} ===")
    
    for parameter, info in device_data.items():
        print(f"{parameter}: {info['value']} (register {info['address']})")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º Modbus –∫–ª–∏–µ–Ω—Ç
    modbus_client = AdvancedModbusClient('/dev/ttyUSB0', 9600)
    
    if modbus_client.connect():
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        temperature_controller = ModbusDevice(
            device_id="TEMP_CTRL_001",
            slave_address=1,
            device_type="Temperature Controller",
            registers_map={
                0: "current_temperature",
                1: "setpoint_temperature",
                2: "output_power",
                10: "alarm_status"
            },
            polling_interval=1.0
        )
        
        flow_meter = ModbusDevice(
            device_id="FLOW_METER_001",
            slave_address=2,
            device_type="Flow Meter",
            registers_map={
                0: "instantaneous_flow",
                1: "total_flow_high",
                2: "total_flow_low",
                3: "flow_rate"
            },
            polling_interval=0.5
        )
        
        modbus_client.register_device(temperature_controller)
        modbus_client.register_device(flow_meter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        modbus_client.add_data_callback(modbus_data_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        modbus_client.start_device_polling("TEMP_CTRL_001")
        modbus_client.start_device_polling("FLOW_METER_001")
        
        try:
            # –†–∞–±–æ—Ç–∞–µ–º 30 —Å–µ–∫—É–Ω–¥
            time.sleep(30)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = modbus_client.get_statistics()
            print(f"\\n=== Modbus Statistics ===")
            print(f"Total requests: {stats['total_requests']}")
            print(f"Success rate: {stats['success_rate']:.2%}")
            print(f"Timeout errors: {stats['timeout_errors']}")
            print(f"CRC errors: {stats['crc_errors']}")
            
        finally:
            modbus_client.disconnect()
\`\`\`

### Ethernet-based –ø—Ä–æ—Ç–æ–∫–æ–ª—ã

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤—Å–µ —á–∞—â–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Ethernet-based –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–ª—è –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.

\`\`\`python
import socket
import struct
import json
import time
import threading
from typing import Dict, List, Optional, Any, Callable
import logging
from dataclasses import dataclass, asdict
from enum import Enum
import asyncio
import websockets

class EthernetProtocol(Enum):
    """–¢–∏–ø—ã Ethernet –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    MODBUS_TCP = "modbus_tcp"
    ETHERNET_IP = "ethernet_ip"
    PROFINET = "profinet"
    OPC_UA = "opc_ua"
    CUSTOM_TCP = "custom_tcp"
    WEBSOCKET = "websocket"

@dataclass
class EthernetDevice:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Ethernet —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    device_id: str
    ip_address: str
    port: int
    protocol: EthernetProtocol
    connection_timeout: float = 5.0
    read_timeout: float = 2.0
    keep_alive: bool = True
    data_format: str = "json"  # json, binary, xml

class EthernetCommunicationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä Ethernet –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –¥–ª—è AI-—Å–∏—Å—Ç–µ–º
    """
    def __init__(self):
        self.devices: Dict[str, EthernetDevice] = {}
        self.connections: Dict[str, Any] = {}
        self.device_data: Dict[str, Dict] = {}
        self.communication_threads: Dict[str, threading.Thread] = {}
        self.running_devices: set = set()
        self.data_callbacks: List[Callable] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.statistics = {
            'total_connections': 0,
            'active_connections': 0,
            'failed_connections': 0,
            'data_packets_received': 0,
            'data_packets_sent': 0,
            'connection_errors': 0
        }
    
    def register_device(self, device: EthernetDevice):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Ethernet —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        self.devices[device.device_id] = device
        self.device_data[device.device_id] = {}
        
        logging.info(f"Registered Ethernet device {device.device_id} "
                    f"({device.protocol.value} at {device.ip_address}:{device.port})")
    
    def connect_device(self, device_id: str) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        if device_id not in self.devices:
            return False
        
        device = self.devices[device_id]
        
        try:
            if device.protocol == EthernetProtocol.MODBUS_TCP:
                connection = self._connect_modbus_tcp(device)
            elif device.protocol == EthernetProtocol.CUSTOM_TCP:
                connection = self._connect_custom_tcp(device)
            elif device.protocol == EthernetProtocol.WEBSOCKET:
                connection = self._connect_websocket(device)
            else:
                logging.error(f"Protocol {device.protocol.value} not implemented")
                return False
            
            if connection:
                self.connections[device_id] = connection
                self.statistics['total_connections'] += 1
                self.statistics['active_connections'] += 1
                
                logging.info(f"Connected to device {device_id}")
                return True
            
        except Exception as e:
            logging.error(f"Failed to connect to device {device_id}: {e}")
            self.statistics['failed_connections'] += 1
        
        return False
    
    def _connect_modbus_tcp(self, device: EthernetDevice) -> Optional[socket.socket]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ Modbus TCP"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(device.connection_timeout)
            sock.connect((device.ip_address, device.port))
            sock.settimeout(device.read_timeout)
            
            return sock
            
        except Exception as e:
            logging.error(f"Modbus TCP connection failed: {e}")
            return None
    
    def _connect_custom_tcp(self, device: EthernetDevice) -> Optional[socket.socket]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É TCP –ø—Ä–æ—Ç–æ–∫–æ–ª—É"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(device.connection_timeout)
            sock.connect((device.ip_address, device.port))
            sock.settimeout(device.read_timeout)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            hello_message = {
                "type": "hello",
                "client_id": "ai_system",
                "protocol_version": "1.0",
                "timestamp": time.time()
            }
            
            message_json = json.dumps(hello_message)
            message_length = len(message_json)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (4 –±–∞–π—Ç–∞) + —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sock.send(struct.pack('>I', message_length))
            sock.send(message_json.encode('utf-8'))
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response_length = struct.unpack('>I', sock.recv(4))[0]
            response_data = sock.recv(response_length).decode('utf-8')
            response = json.loads(response_data)
            
            if response.get('status') == 'ok':
                return sock
            else:
                logging.error(f"Device rejected connection: {response}")
                sock.close()
                return None
            
        except Exception as e:
            logging.error(f"Custom TCP connection failed: {e}")
            return None
    
    def _connect_websocket(self, device: EthernetDevice) -> Optional[str]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ WebSocket (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URI –¥–ª—è asyncio)"""
        return f"ws://{device.ip_address}:{device.port}"
    
    def disconnect_device(self, device_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if device_id in self.connections:
            connection = self.connections[device_id]
            
            try:
                if isinstance(connection, socket.socket):
                    connection.close()
                
                del self.connections[device_id]
                self.statistics['active_connections'] -= 1
                
                logging.info(f"Disconnected from device {device_id}")
                
            except Exception as e:
                logging.error(f"Error disconnecting from device {device_id}: {e}")
    
    def start_device_communication(self, device_id: str):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        if device_id not in self.devices or device_id in self.running_devices:
            return
        
        if not self.connect_device(device_id):
            return
        
        self.running_devices.add(device_id)
        
        device = self.devices[device_id]
        
        if device.protocol == EthernetProtocol.WEBSOCKET:
            # –î–ª—è WebSocket –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio
            thread = threading.Thread(
                target=self._run_websocket_communication,
                args=(device_id,),
                daemon=True
            )
        else:
            # –î–ª—è TCP –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
            thread = threading.Thread(
                target=self._device_communication_loop,
                args=(device_id,),
                daemon=True
            )
        
        self.communication_threads[device_id] = thread
        thread.start()
        
        logging.info(f"Started communication with device {device_id}")
    
    def stop_device_communication(self, device_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        if device_id in self.running_devices:
            self.running_devices.remove(device_id)
            
            if device_id in self.communication_threads:
                thread = self.communication_threads[device_id]
                thread.join(timeout=3.0)
                del self.communication_threads[device_id]
            
            self.disconnect_device(device_id)
            
            logging.info(f"Stopped communication with device {device_id}")
    
    def _device_communication_loop(self, device_id: str):
        """–¶–∏–∫–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å TCP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        device = self.devices[device_id]
        connection = self.connections.get(device_id)
        
        if not connection:
            return
        
        while device_id in self.running_devices:
            try:
                if device.protocol == EthernetProtocol.MODBUS_TCP:
                    data = self._read_modbus_tcp_data(device_id, connection)
                elif device.protocol == EthernetProtocol.CUSTOM_TCP:
                    data = self._read_custom_tcp_data(device_id, connection)
                else:
                    data = None
                
                if data:
                    self.device_data[device_id] = data
                    self.statistics['data_packets_received'] += 1
                    
                    # –í—ã–∑—ã–≤–∞–µ–º callbacks
                    for callback in self.data_callbacks:
                        try:
                            callback(device_id, data)
                        except Exception as e:
                            logging.error(f"Error in data callback: {e}")
                
                time.sleep(1.0)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
                
            except Exception as e:
                logging.error(f"Communication error with device {device_id}: {e}")
                self.statistics['connection_errors'] += 1
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                self.disconnect_device(device_id)
                time.sleep(5.0)
                
                if device_id in self.running_devices:
                    if self.connect_device(device_id):
                        connection = self.connections.get(device_id)
                    else:
                        break
    
    def _read_modbus_tcp_data(self, device_id: str, connection: socket.socket) -> Optional[Dict]:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ Modbus TCP"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º Modbus TCP –∑–∞–ø—Ä–æ—Å
            transaction_id = 1
            protocol_id = 0
            length = 6
            unit_id = 1
            function_code = 3  # Read Holding Registers
            start_address = 0
            quantity = 10
            
            # MBAP Header + PDU
            request = struct.pack('>HHHBBHH', 
                                transaction_id, protocol_id, length, unit_id,
                                function_code, start_address, quantity)
            
            connection.send(request)
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            response_header = connection.recv(8)
            if len(response_header) < 8:
                return None
            
            trans_id, proto_id, length, unit_id = struct.unpack('>HHHB', response_header[:7])
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data_length = length - 2
            response_data = connection.recv(data_length)
            
            if len(response_data) < data_length:
                return None
            
            function_code, byte_count = struct.unpack('BB', response_data[:2])
            register_data = response_data[2:]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
            registers = []
            for i in range(0, len(register_data), 2):
                value = struct.unpack('>H', register_data[i:i+2])[0]
                registers.append(value)
            
            return {
                'timestamp': time.time(),
                'registers': registers,
                'register_count': len(registers)
            }
            
        except Exception as e:
            logging.error(f"Modbus TCP read error: {e}")
            return None
    
    def _read_custom_tcp_data(self, device_id: str, connection: socket.socket) -> Optional[Dict]:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É TCP –ø—Ä–æ—Ç–æ–∫–æ–ª—É"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
            request = {
                "type": "data_request",
                "timestamp": time.time()
            }
            
            request_json = json.dumps(request)
            request_length = len(request_json)
            
            connection.send(struct.pack('>I', request_length))
            connection.send(request_json.encode('utf-8'))
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            response_length = struct.unpack('>I', connection.recv(4))[0]
            response_data = connection.recv(response_length).decode('utf-8')
            response = json.loads(response_data)
            
            if response.get('type') == 'data_response':
                return response.get('data', {})
            
            return None
            
        except Exception as e:
            logging.error(f"Custom TCP read error: {e}")
            return None
    
    def _run_websocket_communication(self, device_id: str):
        """–ó–∞–ø—É—Å–∫ WebSocket –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
        device = self.devices[device_id]
        uri = self.connections.get(device_id)
        
        if not uri:
            return
        
        async def websocket_loop():
            try:
                async with websockets.connect(uri) as websocket:
                    logging.info(f"WebSocket connected to {device_id}")
                    
                    while device_id in self.running_devices:
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
                            request = {
                                "type": "data_request",
                                "timestamp": time.time()
                            }
                            
                            await websocket.send(json.dumps(request))
                            
                            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                            response_text = await asyncio.wait_for(
                                websocket.recv(), timeout=device.read_timeout
                            )
                            
                            response = json.loads(response_text)
                            
                            if response.get('type') == 'data_response':
                                data = response.get('data', {})
                                data['timestamp'] = time.time()
                                
                                self.device_data[device_id] = data
                                self.statistics['data_packets_received'] += 1
                                
                                # –í—ã–∑—ã–≤–∞–µ–º callbacks
                                for callback in self.data_callbacks:
                                    try:
                                        callback(device_id, data)
                                    except Exception as e:
                                        logging.error(f"Error in data callback: {e}")
                            
                            await asyncio.sleep(1.0)
                            
                        except asyncio.TimeoutError:
                            logging.warning(f"WebSocket timeout for device {device_id}")
                        except Exception as e:
                            logging.error(f"WebSocket communication error: {e}")
                            break
                            
            except Exception as e:
                logging.error(f"WebSocket connection error for device {device_id}: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º asyncio event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(websocket_loop())
        loop.close()
    
    def send_command(self, device_id: str, command: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        if device_id not in self.connections:
            return False
        
        device = self.devices[device_id]
        connection = self.connections[device_id]
        
        try:
            if device.protocol == EthernetProtocol.CUSTOM_TCP:
                command_json = json.dumps(command)
                command_length = len(command_json)
                
                connection.send(struct.pack('>I', command_length))
                connection.send(command_json.encode('utf-8'))
                
                self.statistics['data_packets_sent'] += 1
                return True
                
        except Exception as e:
            logging.error(f"Error sending command to device {device_id}: {e}")
        
        return False
    
    def add_data_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.data_callbacks.append(callback)
    
    def get_device_data(self, device_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        return self.device_data.get(device_id)
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"""
        return self.statistics.copy()
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        for device_id in list(self.running_devices):
            self.stop_device_communication(device_id)
        
        logging.info("Ethernet communication manager shutdown complete")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Ethernet –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
def ethernet_data_handler(device_id: str, device_data: Dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö Ethernet –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã"""
    print(f"\\n=== Data from Ethernet device {device_id} ===")
    print(f"Timestamp: {device_data.get('timestamp', 'N/A')}")
    
    if 'registers' in device_data:
        print(f"Modbus registers: {device_data['registers']}")
    else:
        for key, value in device_data.items():
            if key != 'timestamp':
                print(f"{key}: {value}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Ethernet –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
    eth_manager = EthernetCommunicationManager()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    modbus_device = EthernetDevice(
        device_id="MODBUS_PLC_001",
        ip_address="192.168.1.100",
        port=502,
        protocol=EthernetProtocol.MODBUS_TCP,
        connection_timeout=5.0,
        read_timeout=2.0
    )
    
    custom_device = EthernetDevice(
        device_id="CUSTOM_SENSOR_001",
        ip_address="192.168.1.101",
        port=8080,
        protocol=EthernetProtocol.CUSTOM_TCP,
        connection_timeout=3.0,
        read_timeout=1.0
    )
    
    eth_manager.register_device(modbus_device)
    eth_manager.register_device(custom_device)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    eth_manager.add_data_callback(ethernet_data_handler)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        eth_manager.start_device_communication("MODBUS_PLC_001")
        eth_manager.start_device_communication("CUSTOM_SENSOR_001")
        
        # –†–∞–±–æ—Ç–∞–µ–º 60 —Å–µ–∫—É–Ω–¥
        time.sleep(60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        command = {
            "type": "set_parameter",
            "parameter": "setpoint",
            "value": 25.5,
            "timestamp": time.time()
        }
        
        eth_manager.send_command("CUSTOM_SENSOR_001", command)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = eth_manager.get_statistics()
        print(f"\\n=== Ethernet Statistics ===")
        print(f"Total connections: {stats['total_connections']}")
        print(f"Active connections: {stats['active_connections']}")
        print(f"Data packets received: {stats['data_packets_received']}")
        print(f"Data packets sent: {stats['data_packets_sent']}")
        
    finally:
        eth_manager.shutdown()
\`\`\`

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI-—Å–∏—Å—Ç–µ–º–∞–º–∏

### –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI

–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã AI-—Å–∏—Å—Ç–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.

\`\`\`python
import asyncio
import json
import time
import numpy as np
from typing import Dict, List, Optional, Any, Callable, Union
from dataclasses import dataclass, asdict
from enum import Enum
import logging
from abc import ABC, abstractmethod
import threading
import queue

class DataQuality(Enum):
    """–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
    GOOD = "good"
    UNCERTAIN = "uncertain"
    BAD = "bad"

@dataclass
class SensorReading:
    """–ü–æ–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞"""
    sensor_id: str
    timestamp: float
    value: Union[float, int, str, bool]
    units: str
    quality: DataQuality
    raw_value: Optional[Union[float, int]] = None
    metadata: Optional[Dict[str, Any]] = None

class SensorInterface(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞—Ç—á–∏–∫–∞"""
    
    @abstractmethod
    async def read_value(self) -> SensorReading:
        """–ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞"""
        pass
    
    @abstractmethod
    async def configure(self, config: Dict[str, Any]) -> bool:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞"""
        pass
    
    @abstractmethod
    async def calibrate(self, reference_value: float) -> bool:
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞"""
        pass
    
    @abstractmethod
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—Ç—á–∏–∫–∞"""
        pass

class AnalogSensorInterface(SensorInterface):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"""
    
    def __init__(self, sensor_id: str, analog_module: AnalogInputModule, channel: int):
        self.sensor_id = sensor_id
        self.analog_module = analog_module
        self.channel = channel
        self.last_reading = None
        self.calibration_offset = 0.0
        self.calibration_scale = 1.0
        
    async def read_value(self) -> SensorReading:
        """–ß—Ç–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"""
        try:
            channel_data = self.analog_module.read_channel(self.channel)
            
            if 'error' in channel_data:
                return SensorReading(
                    sensor_id=self.sensor_id,
                    timestamp=time.time(),
                    value=0.0,
                    units="",
                    quality=DataQuality.BAD,
                    metadata={'error': channel_data['error']}
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            raw_value = channel_data['filtered_value']
            calibrated_value = raw_value * self.calibration_scale + self.calibration_offset
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            status = channel_data['status']
            if status == 'OK':
                quality = DataQuality.GOOD
            elif status in ['ALARM_LOW', 'ALARM_HIGH']:
                quality = DataQuality.UNCERTAIN
            else:
                quality = DataQuality.BAD
            
            reading = SensorReading(
                sensor_id=self.sensor_id,
                timestamp=channel_data['timestamp'],
                value=calibrated_value,
                units=channel_data['units'],
                quality=quality,
                raw_value=raw_value,
                metadata={
                    'channel': self.channel,
                    'status': status,
                    'raw_adc': channel_data['raw_adc']
                }
            )
            
            self.last_reading = reading
            return reading
            
        except Exception as e:
            logging.error(f"Error reading analog sensor {self.sensor_id}: {e}")
            return SensorReading(
                sensor_id=self.sensor_id,
                timestamp=time.time(),
                value=0.0,
                units="",
                quality=DataQuality.BAD,
                metadata={'error': str(e)}
            )
    
    async def configure(self, config: Dict[str, Any]) -> bool:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"""
        try:
            if 'calibration_offset' in config:
                self.calibration_offset = config['calibration_offset']
            
            if 'calibration_scale' in config:
                self.calibration_scale = config['calibration_scale']
            
            return True
            
        except Exception as e:
            logging.error(f"Error configuring analog sensor {self.sensor_id}: {e}")
            return False
    
    async def calibrate(self, reference_value: float) -> bool:
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            reading = await self.read_value()
            
            if reading.quality == DataQuality.BAD:
                return False
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            if reading.raw_value and reading.raw_value != 0:
                self.calibration_scale = reference_value / reading.raw_value
                self.calibration_offset = 0.0
                
                logging.info(f"Calibrated sensor {self.sensor_id}: "
                           f"scale={self.calibration_scale:.6f}")
                return True
            
            return False
            
        except Exception as e:
            logging.error(f"Error calibrating analog sensor {self.sensor_id}: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"""
        return {
            'sensor_id': self.sensor_id,
            'type': 'analog',
            'channel': self.channel,
            'calibration_scale': self.calibration_scale,
            'calibration_offset': self.calibration_offset,
            'last_reading': asdict(self.last_reading) if self.last_reading else None
        }

class ModbusSensorInterface(SensorInterface):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Modbus –¥–∞—Ç—á–∏–∫–∞"""
    
    def __init__(self, sensor_id: str, modbus_client: AdvancedModbusClient, 
                 device_id: str, register_address: int):
        self.sensor_id = sensor_id
        self.modbus_client = modbus_client
        self.device_id = device_id
        self.register_address = register_address
        self.last_reading = None
        self.scale_factor = 1.0
        self.offset = 0.0
        self.units = ""
        
    async def read_value(self) -> SensorReading:
        """–ß—Ç–µ–Ω–∏–µ Modbus –¥–∞—Ç—á–∏–∫–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
            values = self.modbus_client.read_holding_registers_advanced(
                self.device_id, self.register_address, 1
            )
            
            if not values:
                return SensorReading(
                    sensor_id=self.sensor_id,
                    timestamp=time.time(),
                    value=0.0,
                    units=self.units,
                    quality=DataQuality.BAD,
                    metadata={'error': 'Failed to read Modbus register'}
                )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            raw_value = values[0]
            scaled_value = raw_value * self.scale_factor + self.offset
            
            reading = SensorReading(
                sensor_id=self.sensor_id,
                timestamp=time.time(),
                value=scaled_value,
                units=self.units,
                quality=DataQuality.GOOD,
                raw_value=raw_value,
                metadata={
                    'device_id': self.device_id,
                    'register_address': self.register_address
                }
            )
            
            self.last_reading = reading
            return reading
            
        except Exception as e:
            logging.error(f"Error reading Modbus sensor {self.sensor_id}: {e}")
            return SensorReading(
                sensor_id=self.sensor_id,
                timestamp=time.time(),
                value=0.0,
                units=self.units,
                quality=DataQuality.BAD,
                metadata={'error': str(e)}
            )
    
    async def configure(self, config: Dict[str, Any]) -> bool:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Modbus –¥–∞—Ç—á–∏–∫–∞"""
        try:
            if 'scale_factor' in config:
                self.scale_factor = config['scale_factor']
            
            if 'offset' in config:
                self.offset = config['offset']
            
            if 'units' in config:
                self.units = config['units']
            
            return True
            
        except Exception as e:
            logging.error(f"Error configuring Modbus sensor {self.sensor_id}: {e}")
            return False
    
    async def calibrate(self, reference_value: float) -> bool:
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ Modbus –¥–∞—Ç—á–∏–∫–∞"""
        try:
            reading = await self.read_value()
            
            if reading.quality == DataQuality.BAD or not reading.raw_value:
                return False
            
            # –õ–∏–Ω–µ–π–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
            if reading.raw_value != 0:
                self.scale_factor = reference_value / reading.raw_value
                self.offset = 0.0
                
                logging.info(f"Calibrated Modbus sensor {self.sensor_id}: "
                           f"scale={self.scale_factor:.6f}")
                return True
            
            return False
            
        except Exception as e:
            logging.error(f"Error calibrating Modbus sensor {self.sensor_id}: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å Modbus –¥–∞—Ç—á–∏–∫–∞"""
        return {
            'sensor_id': self.sensor_id,
            'type': 'modbus',
            'device_id': self.device_id,
            'register_address': self.register_address,
            'scale_factor': self.scale_factor,
            'offset': self.offset,
            'units': self.units,
            'last_reading': asdict(self.last_reading) if self.last_reading else None
        }

class AIDataAggregator:
    """
    –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-—Å–∏—Å—Ç–µ–º
    """
    def __init__(self):
        self.sensors: Dict[str, SensorInterface] = {}
        self.data_buffer: queue.Queue = queue.Queue(maxsize=10000)
        self.ai_callbacks: List[Callable] = []
        self.running = False
        self.aggregation_thread = None
        self.data_quality_threshold = 0.8  # 80% –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.statistics = {
            'total_readings': 0,
            'good_readings': 0,
            'uncertain_readings': 0,
            'bad_readings': 0,
            'ai_updates_sent': 0
        }
    
    def register_sensor(self, sensor: SensorInterface):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞"""
        self.sensors[sensor.sensor_id] = sensor
        logging.info(f"Registered sensor {sensor.sensor_id}")
    
    def add_ai_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã"""
        self.ai_callbacks.append(callback)
    
    async def read_all_sensors(self) -> Dict[str, SensorReading]:
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤"""
        readings = {}
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        tasks = []
        for sensor_id, sensor in self.sensors.items():
            task = asyncio.create_task(sensor.read_value())
            tasks.append((sensor_id, task))
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for sensor_id, task in tasks:
            try:
                reading = await task
                readings[sensor_id] = reading
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.statistics['total_readings'] += 1
                if reading.quality == DataQuality.GOOD:
                    self.statistics['good_readings'] += 1
                elif reading.quality == DataQuality.UNCERTAIN:
                    self.statistics['uncertain_readings'] += 1
                else:
                    self.statistics['bad_readings'] += 1
                    
            except Exception as e:
                logging.error(f"Error reading sensor {sensor_id}: {e}")
        
        return readings
    
    def start_continuous_aggregation(self, interval: float = 1.0):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if self.running:
            return
        
        self.running = True
        self.aggregation_thread = threading.Thread(
            target=self._aggregation_loop,
            args=(interval,),
            daemon=True
        )
        self.aggregation_thread.start()
        
        logging.info("Started continuous data aggregation")
    
    def stop_continuous_aggregation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.running = False
        if self.aggregation_thread:
            self.aggregation_thread.join(timeout=3.0)
        
        logging.info("Stopped continuous data aggregation")
    
    def _aggregation_loop(self, interval: float):
        """–¶–∏–∫–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        while self.running:
            try:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞—Ç—á–∏–∫–∏
                readings = loop.run_until_complete(self.read_all_sensors())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                total_sensors = len(readings)
                good_sensors = sum(1 for r in readings.values() if r.quality == DataQuality.GOOD)
                
                data_quality_ratio = good_sensors / total_sensors if total_sensors > 0 else 0
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI
                ai_data_packet = {
                    'timestamp': time.time(),
                    'readings': {sensor_id: asdict(reading) for sensor_id, reading in readings.items()},
                    'data_quality_ratio': data_quality_ratio,
                    'total_sensors': total_sensors,
                    'good_sensors': good_sensors
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ AI-—Å–∏—Å—Ç–µ–º—É, –µ—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ
                if data_quality_ratio >= self.data_quality_threshold:
                    for callback in self.ai_callbacks:
                        try:
                            callback(ai_data_packet)
                            self.statistics['ai_updates_sent'] += 1
                        except Exception as e:
                            logging.error(f"Error in AI callback: {e}")
                else:
                    logging.warning(f"Data quality too low: {data_quality_ratio:.2%} "
                                  f"(threshold: {self.data_quality_threshold:.2%})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
                try:
                    self.data_buffer.put_nowait(ai_data_packet)
                except queue.Full:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                    try:
                        self.data_buffer.get_nowait()
                        self.data_buffer.put_nowait(ai_data_packet)
                    except queue.Empty:
                        pass
                
                time.sleep(interval)
                
            except Exception as e:
                logging.error(f"Error in aggregation loop: {e}")
                time.sleep(interval)
        
        loop.close()
    
    def get_recent_data(self, count: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = []
        temp_queue = queue.Queue()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
        while not self.data_buffer.empty() and len(data) < count:
            try:
                item = self.data_buffer.get_nowait()
                data.append(item)
                temp_queue.put(item)
            except queue.Empty:
                break
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±—É—Ñ–µ—Ä
        while not temp_queue.empty():
            try:
                item = temp_queue.get_nowait()
                self.data_buffer.put_nowait(item)
            except (queue.Empty, queue.Full):
                break
        
        return list(reversed(data))  # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        stats = self.statistics.copy()
        
        if stats['total_readings'] > 0:
            stats['good_ratio'] = stats['good_readings'] / stats['total_readings']
            stats['uncertain_ratio'] = stats['uncertain_readings'] / stats['total_readings']
            stats['bad_ratio'] = stats['bad_readings'] / stats['total_readings']
        else:
            stats['good_ratio'] = 0.0
            stats['uncertain_ratio'] = 0.0
            stats['bad_ratio'] = 0.0
        
        return stats

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
async def ai_data_processor(data_packet: Dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-—Å–∏—Å—Ç–µ–º—ã"""
    print(f"\\n=== AI Data Packet ===")
    print(f"Timestamp: {data_packet['timestamp']}")
    print(f"Data quality: {data_packet['data_quality_ratio']:.2%}")
    print(f"Sensors: {data_packet['good_sensors']}/{data_packet['total_sensors']}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤
    for sensor_id, reading in data_packet['readings'].items():
        if reading['quality'] == 'good':
            print(f"{sensor_id}: {reading['value']:.2f} {reading['units']}")
        else:
            print(f"{sensor_id}: {reading['quality']} quality")

if __name__ == "__main__":
    async def main():
        # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        aggregator = AIDataAggregator()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –≤–≤–æ–¥–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
        analog_module = AnalogInputModule("AI_001", 4)
        modbus_client = AdvancedModbusClient('/dev/ttyUSB0')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        temp_config = AnalogChannelConfig(
            channel_id="TEMP_001",
            signal_type=AnalogSignalType.CURRENT_4_20_MA,
            measurement_range=(0.0, 100.0),
            units="¬∞C"
        )
        analog_module.configure_channel(0, temp_config)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–∞—Ç—á–∏–∫–æ–≤
        temp_sensor = AnalogSensorInterface("TEMP_SENSOR_001", analog_module, 0)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∞—Ç—á–∏–∫–∏
        aggregator.register_sensor(temp_sensor)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AI
        aggregator.add_ai_callback(ai_data_processor)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        aggregator.start_continuous_aggregation(0.5)
        
        try:
            # –†–∞–±–æ—Ç–∞–µ–º 10 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(10)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = aggregator.get_statistics()
            print(f"\\n=== Aggregator Statistics ===")
            print(f"Total readings: {stats['total_readings']}")
            print(f"Good ratio: {stats['good_ratio']:.2%}")
            print(f"AI updates sent: {stats['ai_updates_sent']}")
            
        finally:
            aggregator.stop_continuous_aggregation()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
    asyncio.run(main())
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–∞—Ç—á–∏–∫–æ–≤ - —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Å–Ω–æ–≤—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞:

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏

1. **–ê–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã** - —Ç–æ–∫–æ–≤–∞—è –ø–µ—Ç–ª—è 4-20 –º–ê, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ 0-10 –í, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–æ–≤
2. **–¶–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã** - Modbus RTU/TCP, RS-485, Ethernet-based –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
3. **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤** - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
4. **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è

- **–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
- **–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞** –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- **–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö** –¥–ª—è AI-—Å–∏—Å—Ç–µ–º

### –†–æ—Å—Å–∏–π—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞

- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º —Ü–∏—Ñ—Ä–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ - –∫–ª—é—á–µ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É AI-–∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏.
    `,
  },


  40: {
    title: "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ AI-—Å–∏—Å—Ç–µ–º",
    duration: "220 –º–∏–Ω",
    type: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    content: `
# –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ AI-—Å–∏—Å—Ç–µ–º

## –í–≤–µ–¥–µ–Ω–∏–µ

–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ AI-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ù–µ—Ç–æ—á–Ω—ã–µ –∏–ª–∏ –Ω–µ–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —á—Ç–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è - –æ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–æ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.

### –†–æ–ª—å –º–µ—Ç—Ä–æ–ª–æ–≥–∏–∏ –≤ AI-—Å–∏—Å—Ç–µ–º–∞—Ö

–ú–µ—Ç—Ä–æ–ª–æ–≥–∏—è - –Ω–∞—É–∫–∞ –æ–± –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö - –∏–≥—Ä–∞–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é —Ä–æ–ª—å –≤ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ:

**–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:**
- –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ú–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ –∫ AI-—Ä–µ—à–µ–Ω–∏—è–º

**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:**
- –ì–û–°–¢ 8.009-84 "–ù–æ—Ä–º–∏—Ä—É–µ–º—ã–µ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π"
- –ì–û–°–¢ –† 8.563-96 "–ú–µ—Ç–æ–¥–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π"
- –ì–û–°–¢ –† –ò–°–û 5725 "–¢–æ—á–Ω–æ—Å—Ç—å (–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω–æ—Å—Ç—å) –º–µ—Ç–æ–¥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π"

**–ü—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:**
- –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω "–û–± –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –µ–¥–∏–Ω—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π" ‚Ññ102-–§–ó
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –†–æ—Å—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∫ —Å—Ä–µ–¥—Å—Ç–≤–∞–º –∏–∑–º–µ—Ä–µ–Ω–∏–π
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π

## –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏

### –ú–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

–î–ª—è AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤:

**–¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π:**
- **–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å** - –±–ª–∏–∑–æ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É
- **–ü—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω–æ—Å—Ç—å** - —Ä–∞–∑–±—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
- **–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å** - –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏–π —Ä–∞–∑–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π

**–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π:**
- **–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å** - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
- **–°–ª—É—á–∞–π–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å** - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
- **–ì—Ä—É–±—ã–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏** - –ø—Ä–æ–º–∞—Ö–∏ –∏ –≤—ã–±—Ä–æ—Å—ã

\`\`\`python
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from scipy.optimize import curve_fit
from sklearn.linear_model import LinearRegression, RANSACRegressor
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import r2_score, mean_squared_error
import pandas as pd
from typing import Dict, List, Tuple, Optional, Union, Callable
from dataclasses import dataclass, asdict
from enum import Enum
import logging
import json
import time
from datetime import datetime, timedelta
import sqlite3
import threading

class CalibrationType(Enum):
    """–¢–∏–ø—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    LINEAR = "linear"
    POLYNOMIAL = "polynomial"
    EXPONENTIAL = "exponential"
    LOGARITHMIC = "logarithmic"
    CUSTOM = "custom"
    MULTIPOINT = "multipoint"
    TEMPERATURE_COMPENSATED = "temperature_compensated"

class CalibrationStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    VALID = "valid"
    EXPIRED = "expired"
    DRIFT_DETECTED = "drift_detected"
    FAILED = "failed"
    PENDING = "pending"

@dataclass
class CalibrationPoint:
    """–¢–æ—á–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    reference_value: float
    measured_value: float
    temperature: Optional[float] = None
    humidity: Optional[float] = None
    pressure: Optional[float] = None
    timestamp: Optional[datetime] = None
    operator: Optional[str] = None
    notes: Optional[str] = None

@dataclass
class CalibrationCertificate:
    """–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    instrument_id: str
    calibration_date: datetime
    valid_until: datetime
    calibration_type: CalibrationType
    reference_standard: str
    calibration_points: List[CalibrationPoint]
    uncertainty: float
    temperature_coefficient: Optional[float] = None
    operator: str = ""
    laboratory: str = ""
    certificate_number: str = ""
    traceability_chain: List[str] = None

class MetrologicalDatabase:
    """
    –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    def __init__(self, db_path: str = "metrology.db"):
        self.db_path = db_path
        self.connection = None
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.connection = sqlite3.connect(self.db_path, check_same_thread=False)
        self.connection.execute("PRAGMA foreign_keys = ON")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        self.connection.executescript("""
            CREATE TABLE IF NOT EXISTS instruments (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                type TEXT NOT NULL,
                manufacturer TEXT,
                model TEXT,
                serial_number TEXT,
                measurement_range_min REAL,
                measurement_range_max REAL,
                units TEXT,
                accuracy_class REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            
            CREATE TABLE IF NOT EXISTS calibrations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                instrument_id TEXT NOT NULL,
                calibration_date TIMESTAMP NOT NULL,
                valid_until TIMESTAMP NOT NULL,
                calibration_type TEXT NOT NULL,
                reference_standard TEXT,
                uncertainty REAL,
                temperature_coefficient REAL,
                operator TEXT,
                laboratory TEXT,
                certificate_number TEXT,
                status TEXT DEFAULT 'valid',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (instrument_id) REFERENCES instruments (id)
            );
            
            CREATE TABLE IF NOT EXISTS calibration_points (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                calibration_id INTEGER NOT NULL,
                reference_value REAL NOT NULL,
                measured_value REAL NOT NULL,
                temperature REAL,
                humidity REAL,
                pressure REAL,
                timestamp TIMESTAMP,
                notes TEXT,
                FOREIGN KEY (calibration_id) REFERENCES calibrations (id)
            );
            
            CREATE TABLE IF NOT EXISTS drift_monitoring (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                instrument_id TEXT NOT NULL,
                measurement_value REAL NOT NULL,
                reference_value REAL,
                deviation REAL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                quality_flag TEXT,
                FOREIGN KEY (instrument_id) REFERENCES instruments (id)
            );
            
            CREATE INDEX IF NOT EXISTS idx_calibrations_instrument 
                ON calibrations (instrument_id);
            CREATE INDEX IF NOT EXISTS idx_calibrations_date 
                ON calibrations (calibration_date);
            CREATE INDEX IF NOT EXISTS idx_drift_instrument 
                ON drift_monitoring (instrument_id);
            CREATE INDEX IF NOT EXISTS idx_drift_timestamp 
                ON drift_monitoring (timestamp);
        """)
        
        self.connection.commit()
    
    def register_instrument(self, instrument_id: str, name: str, 
                          instrument_type: str, **kwargs) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–±–æ—Ä–∞"""
        try:
            self.connection.execute("""
                INSERT OR REPLACE INTO instruments 
                (id, name, type, manufacturer, model, serial_number, 
                 measurement_range_min, measurement_range_max, units, accuracy_class)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                instrument_id, name, instrument_type,
                kwargs.get('manufacturer', ''),
                kwargs.get('model', ''),
                kwargs.get('serial_number', ''),
                kwargs.get('range_min', 0.0),
                kwargs.get('range_max', 100.0),
                kwargs.get('units', ''),
                kwargs.get('accuracy_class', 1.0)
            ))
            
            self.connection.commit()
            logging.info(f"Registered instrument {instrument_id}")
            return True
            
        except Exception as e:
            logging.error(f"Error registering instrument {instrument_id}: {e}")
            return False
    
    def save_calibration(self, certificate: CalibrationCertificate) -> Optional[int]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            cursor = self.connection.execute("""
                INSERT INTO calibrations 
                (instrument_id, calibration_date, valid_until, calibration_type,
                 reference_standard, uncertainty, temperature_coefficient,
                 operator, laboratory, certificate_number)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                certificate.instrument_id,
                certificate.calibration_date,
                certificate.valid_until,
                certificate.calibration_type.value,
                certificate.reference_standard,
                certificate.uncertainty,
                certificate.temperature_coefficient,
                certificate.operator,
                certificate.laboratory,
                certificate.certificate_number
            ))
            
            calibration_id = cursor.lastrowid
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            for point in certificate.calibration_points:
                self.connection.execute("""
                    INSERT INTO calibration_points
                    (calibration_id, reference_value, measured_value,
                     temperature, humidity, pressure, timestamp, notes)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    calibration_id,
                    point.reference_value,
                    point.measured_value,
                    point.temperature,
                    point.humidity,
                    point.pressure,
                    point.timestamp,
                    point.notes
                ))
            
            self.connection.commit()
            logging.info(f"Saved calibration {calibration_id} for instrument {certificate.instrument_id}")
            return calibration_id
            
        except Exception as e:
            logging.error(f"Error saving calibration: {e}")
            return None
    
    def get_current_calibration(self, instrument_id: str) -> Optional[CalibrationCertificate]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–µ–π—Å—Ç–≤—É—é—â—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            cursor = self.connection.execute("""
                SELECT * FROM calibrations 
                WHERE instrument_id = ? AND status = 'valid' 
                AND datetime('now') <= valid_until
                ORDER BY calibration_date DESC LIMIT 1
            """, (instrument_id,))
            
            calibration_row = cursor.fetchone()
            if not calibration_row:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            points_cursor = self.connection.execute("""
                SELECT reference_value, measured_value, temperature, 
                       humidity, pressure, timestamp, notes
                FROM calibration_points 
                WHERE calibration_id = ?
                ORDER BY reference_value
            """, (calibration_row[0],))
            
            points_rows = points_cursor.fetchall()
            calibration_points = []
            
            for point_row in points_rows:
                point = CalibrationPoint(
                    reference_value=point_row[0],
                    measured_value=point_row[1],
                    temperature=point_row[2],
                    humidity=point_row[3],
                    pressure=point_row[4],
                    timestamp=datetime.fromisoformat(point_row[5]) if point_row[5] else None,
                    notes=point_row[6]
                )
                calibration_points.append(point)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            certificate = CalibrationCertificate(
                instrument_id=calibration_row[1],
                calibration_date=datetime.fromisoformat(calibration_row[2]),
                valid_until=datetime.fromisoformat(calibration_row[3]),
                calibration_type=CalibrationType(calibration_row[4]),
                reference_standard=calibration_row[5],
                calibration_points=calibration_points,
                uncertainty=calibration_row[6],
                temperature_coefficient=calibration_row[7],
                operator=calibration_row[8] or "",
                laboratory=calibration_row[9] or "",
                certificate_number=calibration_row[10] or ""
            )
            
            return certificate
            
        except Exception as e:
            logging.error(f"Error getting current calibration for {instrument_id}: {e}")
            return None
    
    def record_drift_measurement(self, instrument_id: str, measured_value: float,
                               reference_value: Optional[float] = None) -> bool:
        """–ó–∞–ø–∏—Å—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä–µ–π—Ñ–∞"""
        try:
            deviation = None
            quality_flag = "unknown"
            
            if reference_value is not None:
                deviation = measured_value - reference_value
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                calibration = self.get_current_calibration(instrument_id)
                if calibration:
                    relative_deviation = abs(deviation) / reference_value if reference_value != 0 else 0
                    
                    if relative_deviation <= calibration.uncertainty:
                        quality_flag = "good"
                    elif relative_deviation <= 2 * calibration.uncertainty:
                        quality_flag = "acceptable"
                    else:
                        quality_flag = "poor"
            
            self.connection.execute("""
                INSERT INTO drift_monitoring
                (instrument_id, measurement_value, reference_value, deviation, quality_flag)
                VALUES (?, ?, ?, ?, ?)
            """, (instrument_id, measured_value, reference_value, deviation, quality_flag))
            
            self.connection.commit()
            return True
            
        except Exception as e:
            logging.error(f"Error recording drift measurement: {e}")
            return False
    
    def analyze_drift(self, instrument_id: str, days: int = 30) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –¥—Ä–µ–π—Ñ–∞ –ø—Ä–∏–±–æ—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            cursor = self.connection.execute("""
                SELECT measurement_value, reference_value, deviation, timestamp, quality_flag
                FROM drift_monitoring 
                WHERE instrument_id = ? 
                AND datetime(timestamp) >= datetime('now', '-{} days')
                ORDER BY timestamp
            """.format(days), (instrument_id,))
            
            rows = cursor.fetchall()
            
            if not rows:
                return {'error': 'No drift data available'}
            
            measurements = [row[0] for row in rows]
            deviations = [row[2] for row in rows if row[2] is not None]
            timestamps = [datetime.fromisoformat(row[3]) for row in rows]
            quality_flags = [row[4] for row in rows]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            analysis = {
                'instrument_id': instrument_id,
                'period_days': days,
                'total_measurements': len(measurements),
                'mean_value': np.mean(measurements),
                'std_dev': np.std(measurements),
                'min_value': np.min(measurements),
                'max_value': np.max(measurements),
                'range': np.max(measurements) - np.min(measurements)
            }
            
            if deviations:
                analysis.update({
                    'mean_deviation': np.mean(deviations),
                    'std_deviation': np.std(deviations),
                    'max_abs_deviation': np.max(np.abs(deviations)),
                    'drift_trend': self._calculate_drift_trend(timestamps, measurements)
                })
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_counts = {}
            for flag in quality_flags:
                quality_counts[flag] = quality_counts.get(flag, 0) + 1
            
            analysis['quality_distribution'] = quality_counts
            
            return analysis
            
        except Exception as e:
            logging.error(f"Error analyzing drift for {instrument_id}: {e}")
            return {'error': str(e)}
    
    def _calculate_drift_trend(self, timestamps: List[datetime], 
                             values: List[float]) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –¥—Ä–µ–π—Ñ–∞"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            time_numeric = [(t - timestamps[0]).total_seconds() / 3600 for t in timestamps]  # —á–∞—Å—ã
            
            # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
            slope, intercept, r_value, p_value, std_err = stats.linregress(time_numeric, values)
            
            return {
                'slope_per_hour': slope,
                'slope_per_day': slope * 24,
                'correlation': r_value,
                'p_value': p_value,
                'std_error': std_err,
                'trend_direction': 'increasing' if slope > 0 else 'decreasing' if slope < 0 else 'stable'
            }
            
        except Exception as e:
            logging.error(f"Error calculating drift trend: {e}")
            return {'error': str(e)}
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()

class AdvancedCalibrationSystem:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–ª—è AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    def __init__(self, metrology_db: MetrologicalDatabase):
        self.metrology_db = metrology_db
        self.calibration_models: Dict[str, Dict] = {}
        self.reference_standards: Dict[str, Dict] = {}
        self.environmental_sensors: Dict[str, Callable] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ–∫
        self.statistics = {
            'total_calibrations': 0,
            'successful_calibrations': 0,
            'failed_calibrations': 0,
            'drift_detections': 0
        }
    
    def register_reference_standard(self, standard_id: str, 
                                  uncertainty: float, 
                                  traceability_chain: List[str],
                                  valid_until: datetime,
                                  **kwargs):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        self.reference_standards[standard_id] = {
            'uncertainty': uncertainty,
            'traceability_chain': traceability_chain,
            'valid_until': valid_until,
            'type': kwargs.get('type', 'unknown'),
            'range_min': kwargs.get('range_min', 0.0),
            'range_max': kwargs.get('range_max', 100.0),
            'temperature_coefficient': kwargs.get('temperature_coefficient', 0.0)
        }
        
        logging.info(f"Registered reference standard {standard_id} "
                    f"with uncertainty {uncertainty}")
    
    def perform_multipoint_calibration(self, instrument_id: str,
                                     reference_standard_id: str,
                                     calibration_points: List[Tuple[float, float]],
                                     environmental_conditions: Optional[Dict] = None,
                                     operator: str = "",
                                     notes: str = "") -> Optional[CalibrationCertificate]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        """
        try:
            if reference_standard_id not in self.reference_standards:
                logging.error(f"Reference standard {reference_standard_id} not found")
                return None
            
            reference_standard = self.reference_standards[reference_standard_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ç–∞–ª–æ–Ω–∞
            if datetime.now() > reference_standard['valid_until']:
                logging.error(f"Reference standard {reference_standard_id} expired")
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            cal_points = []
            for ref_val, meas_val in calibration_points:
                point = CalibrationPoint(
                    reference_value=ref_val,
                    measured_value=meas_val,
                    temperature=environmental_conditions.get('temperature') if environmental_conditions else None,
                    humidity=environmental_conditions.get('humidity') if environmental_conditions else None,
                    pressure=environmental_conditions.get('pressure') if environmental_conditions else None,
                    timestamp=datetime.now(),
                    operator=operator,
                    notes=notes
                )
                cal_points.append(point)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            calibration_type = self._determine_calibration_type(calibration_points)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
            measurement_uncertainty = self._calculate_measurement_uncertainty(
                calibration_points, reference_standard['uncertainty']
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            certificate = CalibrationCertificate(
                instrument_id=instrument_id,
                calibration_date=datetime.now(),
                valid_until=datetime.now() + timedelta(days=365),  # 1 –≥–æ–¥
                calibration_type=calibration_type,
                reference_standard=reference_standard_id,
                calibration_points=cal_points,
                uncertainty=measurement_uncertainty,
                temperature_coefficient=reference_standard.get('temperature_coefficient'),
                operator=operator,
                laboratory="AI Calibration Lab",
                certificate_number=f"CAL-{instrument_id}-{int(time.time())}"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            calibration_id = self.metrology_db.save_calibration(certificate)
            
            if calibration_id:
                # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                self._create_calibration_model(instrument_id, calibration_points, calibration_type)
                
                self.statistics['total_calibrations'] += 1
                self.statistics['successful_calibrations'] += 1
                
                logging.info(f"Completed calibration for instrument {instrument_id}, "
                           f"certificate {certificate.certificate_number}")
                
                return certificate
            else:
                self.statistics['failed_calibrations'] += 1
                return None
                
        except Exception as e:
            logging.error(f"Error performing calibration for {instrument_id}: {e}")
            self.statistics['failed_calibrations'] += 1
            return None
    
    def _determine_calibration_type(self, points: List[Tuple[float, float]]) -> CalibrationType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        if len(points) < 2:
            return CalibrationType.LINEAR
        
        ref_values = np.array([p[0] for p in points])
        meas_values = np.array([p[1] for p in points])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å
        correlation = np.corrcoef(ref_values, meas_values)[0, 1]
        
        if correlation > 0.999:
            return CalibrationType.LINEAR
        elif len(points) >= 3:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            poly_features = PolynomialFeatures(degree=2)
            ref_poly = poly_features.fit_transform(ref_values.reshape(-1, 1))
            
            model = LinearRegression()
            model.fit(ref_poly, meas_values)
            
            r2_poly = model.score(ref_poly, meas_values)
            
            # –õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            linear_model = LinearRegression()
            linear_model.fit(ref_values.reshape(-1, 1), meas_values)
            r2_linear = linear_model.score(ref_values.reshape(-1, 1), meas_values)
            
            if r2_poly - r2_linear > 0.01:  # –ó–Ω–∞—á–∏–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                return CalibrationType.POLYNOMIAL
        
        return CalibrationType.MULTIPOINT
    
    def _calculate_measurement_uncertainty(self, points: List[Tuple[float, float]], 
                                         reference_uncertainty: float) -> float:
        """–†–∞—Å—á–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        try:
            ref_values = np.array([p[0] for p in points])
            meas_values = np.array([p[1] for p in points])
            
            # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
            model = LinearRegression()
            model.fit(ref_values.reshape(-1, 1), meas_values)
            
            predicted = model.predict(ref_values.reshape(-1, 1))
            residuals = meas_values - predicted
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            residual_std = np.std(residuals, ddof=1)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
            # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å —ç—Ç–∞–ª–æ–Ω–∞ –∏ —Å–ª—É—á–∞–π–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
            combined_uncertainty = np.sqrt(reference_uncertainty**2 + residual_std**2)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å (k=2 –¥–ª—è 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)
            expanded_uncertainty = 2 * combined_uncertainty
            
            return expanded_uncertainty
            
        except Exception as e:
            logging.error(f"Error calculating measurement uncertainty: {e}")
            return reference_uncertainty * 2  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    
    def _create_calibration_model(self, instrument_id: str, 
                                points: List[Tuple[float, float]],
                                calibration_type: CalibrationType):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            ref_values = np.array([p[0] for p in points])
            meas_values = np.array([p[1] for p in points])
            
            if calibration_type == CalibrationType.LINEAR:
                # –õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å
                model = LinearRegression()
                model.fit(ref_values.reshape(-1, 1), meas_values)
                
                self.calibration_models[instrument_id] = {
                    'type': 'linear',
                    'slope': model.coef_[0],
                    'intercept': model.intercept_,
                    'r2_score': model.score(ref_values.reshape(-1, 1), meas_values),
                    'model': model
                }
                
            elif calibration_type == CalibrationType.POLYNOMIAL:
                # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
                poly_features = PolynomialFeatures(degree=2)
                ref_poly = poly_features.fit_transform(ref_values.reshape(-1, 1))
                
                model = LinearRegression()
                model.fit(ref_poly, meas_values)
                
                self.calibration_models[instrument_id] = {
                    'type': 'polynomial',
                    'coefficients': model.coef_,
                    'intercept': model.intercept_,
                    'r2_score': model.score(ref_poly, meas_values),
                    'model': model,
                    'poly_features': poly_features
                }
                
            else:
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                from scipy.interpolate import interp1d
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                sorted_indices = np.argsort(ref_values)
                sorted_ref = ref_values[sorted_indices]
                sorted_meas = meas_values[sorted_indices]
                
                interpolator = interp1d(sorted_ref, sorted_meas, 
                                      kind='linear', 
                                      bounds_error=False, 
                                      fill_value='extrapolate')
                
                self.calibration_models[instrument_id] = {
                    'type': 'interpolation',
                    'interpolator': interpolator,
                    'ref_points': sorted_ref,
                    'meas_points': sorted_meas
                }
            
            logging.info(f"Created calibration model for instrument {instrument_id}")
            
        except Exception as e:
            logging.error(f"Error creating calibration model for {instrument_id}: {e}")
    
    def apply_calibration(self, instrument_id: str, raw_value: float,
                         temperature: Optional[float] = None) -> Optional[float]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫ —Å—ã—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
        try:
            if instrument_id not in self.calibration_models:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                certificate = self.metrology_db.get_current_calibration(instrument_id)
                if certificate:
                    points = [(p.reference_value, p.measured_value) for p in certificate.calibration_points]
                    self._create_calibration_model(instrument_id, points, certificate.calibration_type)
                else:
                    logging.warning(f"No calibration model for instrument {instrument_id}")
                    return raw_value
            
            model_info = self.calibration_models[instrument_id]
            
            if model_info['type'] == 'linear':
                # –û–±—Ä–∞—Ç–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞: raw_value = slope * true_value + intercept
                # true_value = (raw_value - intercept) / slope
                slope = model_info['slope']
                intercept = model_info['intercept']
                
                if slope != 0:
                    calibrated_value = (raw_value - intercept) / slope
                else:
                    calibrated_value = raw_value
                    
            elif model_info['type'] == 'polynomial':
                # –î–ª—è –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                from scipy.optimize import fsolve
                
                def equation(true_value):
                    poly_features = model_info['poly_features']
                    model = model_info['model']
                    predicted = model.predict(poly_features.transform([[true_value]]))[0]
                    return predicted - raw_value
                
                # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                initial_guess = raw_value
                calibrated_value = fsolve(equation, initial_guess)[0]
                
            elif model_info['type'] == 'interpolation':
                # –û–±—Ä–∞—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
                interpolator = model_info['interpolator']
                ref_points = model_info['ref_points']
                meas_points = model_info['meas_points']
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä
                reverse_interpolator = interp1d(meas_points, ref_points,
                                              kind='linear',
                                              bounds_error=False,
                                              fill_value='extrapolate')
                
                calibrated_value = float(reverse_interpolator(raw_value))
                
            else:
                calibrated_value = raw_value
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—É—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if temperature is not None:
                certificate = self.metrology_db.get_current_calibration(instrument_id)
                if certificate and certificate.temperature_coefficient:
                    temp_correction = certificate.temperature_coefficient * (temperature - 20.0)  # 20¬∞C - —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                    calibrated_value += temp_correction
            
            return calibrated_value
            
        except Exception as e:
            logging.error(f"Error applying calibration for {instrument_id}: {e}")
            return raw_value
    
    def check_calibration_validity(self, instrument_id: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            certificate = self.metrology_db.get_current_calibration(instrument_id)
            
            if not certificate:
                return {
                    'status': CalibrationStatus.FAILED,
                    'message': 'No calibration certificate found',
                    'days_until_expiry': None
                }
            
            now = datetime.now()
            days_until_expiry = (certificate.valid_until - now).days
            
            if now > certificate.valid_until:
                status = CalibrationStatus.EXPIRED
                message = f'Calibration expired {abs(days_until_expiry)} days ago'
            elif days_until_expiry <= 30:
                status = CalibrationStatus.VALID
                message = f'Calibration expires in {days_until_expiry} days - renewal recommended'
            else:
                status = CalibrationStatus.VALID
                message = f'Calibration valid for {days_until_expiry} days'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä–µ–π—Ñ
            drift_analysis = self.metrology_db.analyze_drift(instrument_id, 30)
            
            if 'max_abs_deviation' in drift_analysis:
                if drift_analysis['max_abs_deviation'] > certificate.uncertainty:
                    status = CalibrationStatus.DRIFT_DETECTED
                    message += f' - Drift detected: {drift_analysis["max_abs_deviation"]:.4f}'
            
            return {
                'status': status,
                'message': message,
                'days_until_expiry': days_until_expiry,
                'certificate_number': certificate.certificate_number,
                'uncertainty': certificate.uncertainty,
                'drift_analysis': drift_analysis
            }
            
        except Exception as e:
            logging.error(f"Error checking calibration validity for {instrument_id}: {e}")
            return {
                'status': CalibrationStatus.FAILED,
                'message': f'Error checking calibration: {str(e)}',
                'days_until_expiry': None
            }
    
    def schedule_calibration(self, instrument_id: str, 
                           calibration_interval_days: int = 365) -> datetime:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            certificate = self.metrology_db.get_current_calibration(instrument_id)
            
            if certificate:
                next_calibration = certificate.valid_until
            else:
                next_calibration = datetime.now() + timedelta(days=calibration_interval_days)
            
            logging.info(f"Next calibration for {instrument_id} scheduled for {next_calibration}")
            return next_calibration
            
        except Exception as e:
            logging.error(f"Error scheduling calibration for {instrument_id}: {e}")
            return datetime.now() + timedelta(days=calibration_interval_days)
    
    def generate_calibration_report(self, instrument_id: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ"""
        try:
            certificate = self.metrology_db.get_current_calibration(instrument_id)
            
            if not certificate:
                return {'error': 'No calibration certificate found'}
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            ref_values = [p.reference_value for p in certificate.calibration_points]
            meas_values = [p.measured_value for p in certificate.calibration_points]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            correlation = np.corrcoef(ref_values, meas_values)[0, 1]
            
            # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            model = LinearRegression()
            model.fit(np.array(ref_values).reshape(-1, 1), meas_values)
            
            predicted = model.predict(np.array(ref_values).reshape(-1, 1))
            residuals = np.array(meas_values) - predicted
            
            report = {
                'instrument_id': instrument_id,
                'certificate_number': certificate.certificate_number,
                'calibration_date': certificate.calibration_date.isoformat(),
                'valid_until': certificate.valid_until.isoformat(),
                'calibration_type': certificate.calibration_type.value,
                'reference_standard': certificate.reference_standard,
                'operator': certificate.operator,
                'laboratory': certificate.laboratory,
                'uncertainty': certificate.uncertainty,
                'temperature_coefficient': certificate.temperature_coefficient,
                'calibration_points': [asdict(p) for p in certificate.calibration_points],
                'quality_metrics': {
                    'correlation_coefficient': correlation,
                    'r2_score': r2_score(meas_values, predicted),
                    'rmse': np.sqrt(mean_squared_error(meas_values, predicted)),
                    'max_residual': np.max(np.abs(residuals)),
                    'mean_residual': np.mean(residuals),
                    'std_residual': np.std(residuals)
                },
                'traceability_chain': certificate.traceability_chain or []
            }
            
            return report
            
        except Exception as e:
            logging.error(f"Error generating calibration report for {instrument_id}: {e}")
            return {'error': str(e)}
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        stats = self.statistics.copy()
        
        if stats['total_calibrations'] > 0:
            stats['success_rate'] = stats['successful_calibrations'] / stats['total_calibrations']
        else:
            stats['success_rate'] = 0.0
        
        return stats

# –ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
class AutomaticCalibrationSystem:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å AI-–∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
    """
    def __init__(self, calibration_system: AdvancedCalibrationSystem):
        self.calibration_system = calibration_system
        self.auto_calibration_enabled = {}
        self.calibration_scheduler = None
        self.running = False
        
    def enable_auto_calibration(self, instrument_id: str, 
                              reference_instrument_id: str,
                              calibration_interval_hours: int = 24,
                              drift_threshold: float = 0.1):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        self.auto_calibration_enabled[instrument_id] = {
            'reference_instrument': reference_instrument_id,
            'interval_hours': calibration_interval_hours,
            'drift_threshold': drift_threshold,
            'last_calibration': datetime.now(),
            'next_calibration': datetime.now() + timedelta(hours=calibration_interval_hours)
        }
        
        logging.info(f"Enabled auto-calibration for {instrument_id}")
    
    def start_auto_calibration_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        if self.running:
            return
        
        self.running = True
        self.calibration_scheduler = threading.Thread(
            target=self._calibration_scheduler_loop,
            daemon=True
        )
        self.calibration_scheduler.start()
        
        logging.info("Started automatic calibration scheduler")
    
    def stop_auto_calibration_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        if self.calibration_scheduler:
            self.calibration_scheduler.join(timeout=5.0)
        
        logging.info("Stopped automatic calibration scheduler")
    
    def _calibration_scheduler_loop(self):
        """–¶–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        while self.running:
            try:
                current_time = datetime.now()
                
                for instrument_id, config in self.auto_calibration_enabled.items():
                    if current_time >= config['next_calibration']:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
                        success = self._perform_auto_calibration(instrument_id, config)
                        
                        if success:
                            config['last_calibration'] = current_time
                            config['next_calibration'] = current_time + timedelta(
                                hours=config['interval_hours']
                            )
                            logging.info(f"Auto-calibration completed for {instrument_id}")
                        else:
                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                            config['next_calibration'] = current_time + timedelta(hours=1)
                            logging.warning(f"Auto-calibration failed for {instrument_id}, "
                                          f"retrying in 1 hour")
                
                time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logging.error(f"Error in calibration scheduler: {e}")
                time.sleep(300)
    
    def _perform_auto_calibration(self, instrument_id: str, config: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            reference_instrument = config['reference_instrument']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–±–æ—Ä–∞
            calibration_points = []
            
            for ref_value in [0, 25, 50, 75, 100]:  # –ü—Ä–∏–º–µ—Ä —Ç–æ—á–µ–∫
                # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
                measured_value = ref_value + np.random.normal(0, 0.1)  # –ù–µ–±–æ–ª—å—à–æ–π —à—É–º
                calibration_points.append((ref_value, measured_value))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            certificate = self.calibration_system.perform_multipoint_calibration(
                instrument_id=instrument_id,
                reference_standard_id=reference_instrument,
                calibration_points=calibration_points,
                operator="Auto-Calibration System",
                notes="Automatic calibration performed by AI system"
            )
            
            return certificate is not None
            
        except Exception as e:
            logging.error(f"Error in auto-calibration for {instrument_id}: {e}")
            return False

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–æ–ª–æ–≥–∏–∏
    metrology_db = MetrologicalDatabase("calibration_example.db")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    calibration_system = AdvancedCalibrationSystem(metrology_db)
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä
        metrology_db.register_instrument(
            instrument_id="TEMP_001",
            name="Temperature Sensor #1",
            instrument_type="RTD Pt100",
            manufacturer="Rosemount",
            model="3144P",
            serial_number="12345",
            range_min=0.0,
            range_max=100.0,
            units="¬∞C",
            accuracy_class=0.1
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ
        calibration_system.register_reference_standard(
            standard_id="REF_TEMP_001",
            uncertainty=0.05,  # ¬±0.05¬∞C
            traceability_chain=["VNIIM", "PTB", "NIST"],
            valid_until=datetime.now() + timedelta(days=365),
            type="Reference RTD",
            range_min=0.0,
            range_max=100.0,
            temperature_coefficient=0.001
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
        calibration_points = [
            (0.0, 0.02),    # 0¬∞C -> 0.02¬∞C
            (25.0, 25.01),  # 25¬∞C -> 25.01¬∞C
            (50.0, 49.98),  # 50¬∞C -> 49.98¬∞C
            (75.0, 75.03),  # 75¬∞C -> 75.03¬∞C
            (100.0, 99.97)  # 100¬∞C -> 99.97¬∞C
        ]
        
        certificate = calibration_system.perform_multipoint_calibration(
            instrument_id="TEMP_001",
            reference_standard_id="REF_TEMP_001",
            calibration_points=calibration_points,
            environmental_conditions={
                'temperature': 23.5,
                'humidity': 45.0,
                'pressure': 1013.25
            },
            operator="Calibration Engineer",
            notes="Initial calibration after installation"
        )
        
        if certificate:
            print(f"Calibration completed: {certificate.certificate_number}")
            print(f"Uncertainty: ¬±{certificate.uncertainty:.3f}¬∞C")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            raw_measurement = 50.05  # –°—ã—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
            calibrated_value = calibration_system.apply_calibration("TEMP_001", raw_measurement)
            print(f"Raw: {raw_measurement}¬∞C, Calibrated: {calibrated_value:.3f}¬∞C")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            status = calibration_system.check_calibration_validity("TEMP_001")
            print(f"Calibration status: {status['status'].value}")
            print(f"Message: {status['message']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = calibration_system.generate_calibration_report("TEMP_001")
            print(f"\\nCalibration Report:")
            print(f"R¬≤ score: {report['quality_metrics']['r2_score']:.6f}")
            print(f"RMSE: {report['quality_metrics']['rmse']:.6f}")
            print(f"Max residual: {report['quality_metrics']['max_residual']:.6f}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä–µ–π—Ñ–∞
            for i in range(10):
                measured = 50.0 + np.random.normal(0, 0.02)
                reference = 50.0
                metrology_db.record_drift_measurement("TEMP_001", measured, reference)
                time.sleep(0.1)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–µ–π—Ñ
            drift_analysis = metrology_db.analyze_drift("TEMP_001", 1)
            print(f"\\nDrift Analysis:")
            print(f"Mean deviation: {drift_analysis.get('mean_deviation', 'N/A')}")
            print(f"Std deviation: {drift_analysis.get('std_deviation', 'N/A')}")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            auto_cal = AutomaticCalibrationSystem(calibration_system)
            auto_cal.enable_auto_calibration("TEMP_001", "REF_TEMP_001", 
                                           calibration_interval_hours=24)
            
            print("\\nAutomatic calibration system configured")
            
        else:
            print("Calibration failed")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = calibration_system.get_statistics()
        print(f"\\nCalibration Statistics:")
        print(f"Total calibrations: {stats['total_calibrations']}")
        print(f"Success rate: {stats['success_rate']:.2%}")
        
    finally:
        metrology_db.close()
\`\`\`

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –º–µ—Ç—Ä–æ–ª–æ–≥–∏–∏

### –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã

–í –†–æ—Å—Å–∏–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä:

**–ì–û–°–¢ 8.009-84** - –ù–æ—Ä–º–∏—Ä—É–µ–º—ã–µ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π:
- –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π
- –†–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π

**–ì–û–°–¢ –† 8.563-96** - –ú–µ—Ç–æ–¥–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π:
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç–æ–¥–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
- –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–æ–¥–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
- –û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π

**–ì–û–°–¢ –† –ò–°–û 5725** - –¢–æ—á–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π:
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
- –ú–µ–∂–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Å–ª–∏—á–µ–Ω–∏—è
- –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π

### –°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π

\`\`\`python
class RussianMetrologyCompliance:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    """
    def __init__(self):
        self.gost_standards = {
            'GOST_8_009_84': {
                'name': '–ù–æ—Ä–º–∏—Ä—É–µ–º—ã–µ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π',
                'requirements': [
                    '–î–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏–π',
                    '–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π',
                    '–í–∞—Ä–∏–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π',
                    '–î—Ä–µ–π—Ñ –Ω—É–ª—è',
                    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'
                ]
            },
            'GOST_R_8_563_96': {
                'name': '–ú–µ—Ç–æ–¥–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π',
                'requirements': [
                    '–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π',
                    '–û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏',
                    '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞',
                    '–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–æ–¥–∏–∫–∏'
                ]
            }
        }
        
        self.verification_intervals = {
            'temperature_sensors': 365,  # –¥–Ω–µ–π
            'pressure_sensors': 365,
            'flow_meters': 365,
            'level_sensors': 365,
            'analytical_instruments': 180
        }
    
    def check_verification_requirements(self, instrument_type: str, 
                                      last_verification: datetime) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø–æ–≤–µ—Ä–∫–µ"""
        interval_days = self.verification_intervals.get(instrument_type, 365)
        next_verification = last_verification + timedelta(days=interval_days)
        days_remaining = (next_verification - datetime.now()).days
        
        return {
            'instrument_type': instrument_type,
            'verification_interval_days': interval_days,
            'last_verification': last_verification.isoformat(),
            'next_verification': next_verification.isoformat(),
            'days_remaining': days_remaining,
            'status': 'valid' if days_remaining > 0 else 'expired',
            'urgency': 'critical' if days_remaining < 0 else 'high' if days_remaining < 30 else 'normal'
        }
    
    def generate_verification_certificate(self, instrument_id: str,
                                        verification_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ –ø–æ–≤–µ—Ä–∫–µ"""
        certificate = {
            'certificate_type': 'verification',
            'instrument_id': instrument_id,
            'verification_date': datetime.now().isoformat(),
            'valid_until': (datetime.now() + timedelta(days=365)).isoformat(),
            'verification_method': verification_data.get('method', '–ì–û–°–¢ 8.009-84'),
            'reference_standards': verification_data.get('standards', []),
            'measurement_results': verification_data.get('results', []),
            'conclusion': verification_data.get('conclusion', '–ì–æ–¥–µ–Ω'),
            'verifier': verification_data.get('verifier', ''),
            'organization': verification_data.get('organization', ''),
            'certificate_number': f"RU.C.{instrument_id}.{int(time.time())}"
        }
        
        return certificate
    
    def validate_measurement_uncertainty(self, uncertainty: float, 
                                       instrument_class: float) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        # –°–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1/3 –æ—Ç –∫–ª–∞—Å—Å–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        max_allowed_uncertainty = instrument_class / 3.0
        return uncertainty <= max_allowed_uncertainty

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
class StateMetrologyIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –û–ï–ò
    """
    def __init__(self):
        self.fgis_arshin_api = "https://fgis.gost.ru/fundmetrology/api/"
        self.verification_organizations = {}
        
    def register_with_arshin(self, instrument_data: Dict) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –°–ò –≤ –§–ì–ò–° –ê–†–®–ò–ù"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤ –∫ –§–ì–ò–° –ê–†–®–ò–ù
        logging.info(f"Registering instrument {instrument_data['id']} with FGIS ARSHIN")
        return True
    
    def submit_verification_results(self, verification_data: Dict) -> bool:
        """–ü–æ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–≤–µ—Ä–∫–∏ –≤ –§–ì–ò–° –ê–†–®–ò–ù"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤
        logging.info(f"Submitting verification results to FGIS ARSHIN")
        return True
    
    def check_instrument_registry(self, instrument_id: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –°–ò –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        return {
            'registered': True,
            'type_approval': 'RU.C.34.123.A',
            'manufacturer': 'Approved',
            'verification_required': True
        }
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–ª–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∏ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ AI-—Å–∏—Å—Ç–µ–º - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π.

### –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞

1. **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã** - –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
2. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—Ä–µ–π—Ñ–∞, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–æ–ª–æ–≥–∏–∏
3. **–†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã** - –ì–û–°–¢ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —Å–∏—Å—Ç–µ–º–∞ –û–ï–ò, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –§–ì–ò–° –ê–†–®–ò–ù
4. **AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è

- **MetrologicalDatabase** - –ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
- **AdvancedCalibrationSystem** - –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
- **AutomaticCalibrationSystem** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
- **RussianMetrologyCompliance** - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å

–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:
- **–¢–æ—á–Ω–æ—Å—Ç—å AI-—Ä–µ—à–µ–Ω–∏–π** - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º** - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ì–û–°–¢
- **–ü—Ä–∞–≤–æ–≤—É—é –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç—å** - —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ –æ–± –û–ï–ò
- **–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —Å–Ω–∏–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –∏ –∞–≤–∞—Ä–∏–π

–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º - –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ AI-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.
    `,
  },


  41: {
    title: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
    duration: "200 –º–∏–Ω",
    type: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    content: `
# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º

## –í–≤–µ–¥–µ–Ω–∏–µ

–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —è–≤–ª—è—é—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ AI-—Å–∏—Å—Ç–µ–º –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ù–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–µ –∏–ª–∏ –¥–µ–≥—Ä–∞–¥–∏—Ä—É—é—â–∏–µ –¥–∞—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —á—Ç–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.

### –†–æ–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ AI-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ AI-—Å–∏—Å—Ç–µ–º—ã –ø–æ–ª–∞–≥–∞—é—Ç—Å—è –Ω–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:

**–†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π:**
- –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
- –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
- –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

**–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:**
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è AI-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:**
- –ì–û–°–¢ –† –ò–°–û 13374 "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—à–∏–Ω"
- –ì–û–°–¢ 27.002-2015 "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —Ç–µ—Ö–Ω–∏–∫–µ"
- –ì–û–°–¢ –† 51901.11-2005 "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Ä–∏—Å–∫–∞. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"

## –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

### –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

–ú–µ—Ç–æ–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –º–æ–∂–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

**–ü–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è:**
- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- **–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
- **–†–∞–±–æ—á–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã

**–ü–æ —Å—Ç–µ–ø–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:**
- **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - –±–µ–∑ —É—á–∞—Å—Ç–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
- **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - —Å —É—á–∞—Å—Ç–∏–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
- **–†—É—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

**–ü–æ –≥–ª—É–±–∏–Ω–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
- **–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏** - —Ñ–∞–∫—Ç –Ω–∞–ª–∏—á–∏—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
- **–ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏** - –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
- **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã** - –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–ø—Ä–∏—á–∏–Ω—ã –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏

\`\`\`python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats, signal
from scipy.fft import fft, fftfreq
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import DBSCAN
import warnings
warnings.filterwarnings('ignore')

from typing import Dict, List, Tuple, Optional, Union, Callable, Any
from dataclasses import dataclass, field
from enum import Enum
import logging
import json
import time
from datetime import datetime, timedelta
import sqlite3
import threading
import queue
import asyncio
from concurrent.futures import ThreadPoolExecutor
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

class DiagnosticStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    HEALTHY = "healthy"
    WARNING = "warning"
    CRITICAL = "critical"
    FAILED = "failed"
    UNKNOWN = "unknown"
    MAINTENANCE_REQUIRED = "maintenance_required"

class DiagnosticMethod(Enum):
    """–ú–µ—Ç–æ–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    STATISTICAL_ANALYSIS = "statistical_analysis"
    TREND_ANALYSIS = "trend_analysis"
    FREQUENCY_ANALYSIS = "frequency_analysis"
    ANOMALY_DETECTION = "anomaly_detection"
    PATTERN_RECOGNITION = "pattern_recognition"
    PHYSICS_BASED = "physics_based"
    MACHINE_LEARNING = "machine_learning"

class AlertSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
    INFO = "info"
    WARNING = "warning"
    CRITICAL = "critical"
    EMERGENCY = "emergency"

@dataclass
class DiagnosticResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    instrument_id: str
    timestamp: datetime
    status: DiagnosticStatus
    confidence: float
    method: DiagnosticMethod
    parameters: Dict[str, float]
    anomalies: List[str] = field(default_factory=list)
    recommendations: List[str] = field(default_factory=list)
    next_check: Optional[datetime] = None
    details: Dict[str, Any] = field(default_factory=dict)

@dataclass
class Alert:
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    id: str
    instrument_id: str
    timestamp: datetime
    severity: AlertSeverity
    message: str
    details: Dict[str, Any]
    acknowledged: bool = False
    resolved: bool = False
    resolver: Optional[str] = None
    resolution_time: Optional[datetime] = None

class DiagnosticDatabase:
    """
    –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    def __init__(self, db_path: str = "diagnostics.db"):
        self.db_path = db_path
        self.connection = None
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.connection = sqlite3.connect(self.db_path, check_same_thread=False)
        self.connection.execute("PRAGMA foreign_keys = ON")
        
        self.connection.executescript("""
            CREATE TABLE IF NOT EXISTS diagnostic_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                instrument_id TEXT NOT NULL,
                timestamp TIMESTAMP NOT NULL,
                status TEXT NOT NULL,
                confidence REAL NOT NULL,
                method TEXT NOT NULL,
                parameters TEXT,
                anomalies TEXT,
                recommendations TEXT,
                next_check TIMESTAMP,
                details TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            
            CREATE TABLE IF NOT EXISTS alerts (
                id TEXT PRIMARY KEY,
                instrument_id TEXT NOT NULL,
                timestamp TIMESTAMP NOT NULL,
                severity TEXT NOT NULL,
                message TEXT NOT NULL,
                details TEXT,
                acknowledged BOOLEAN DEFAULT FALSE,
                resolved BOOLEAN DEFAULT FALSE,
                resolver TEXT,
                resolution_time TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            
            CREATE TABLE IF NOT EXISTS instrument_health (
                instrument_id TEXT PRIMARY KEY,
                last_diagnostic TIMESTAMP,
                current_status TEXT,
                health_score REAL,
                uptime_hours REAL,
                failure_count INTEGER DEFAULT 0,
                maintenance_due TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            
            CREATE TABLE IF NOT EXISTS diagnostic_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                instrument_id TEXT NOT NULL,
                parameter_name TEXT NOT NULL,
                value REAL NOT NULL,
                timestamp TIMESTAMP NOT NULL,
                quality_flag TEXT
            );
            
            CREATE INDEX IF NOT EXISTS idx_diagnostic_results_instrument 
                ON diagnostic_results (instrument_id);
            CREATE INDEX IF NOT EXISTS idx_diagnostic_results_timestamp 
                ON diagnostic_results (timestamp);
            CREATE INDEX IF NOT EXISTS idx_alerts_instrument 
                ON alerts (instrument_id);
            CREATE INDEX IF NOT EXISTS idx_alerts_severity 
                ON alerts (severity);
            CREATE INDEX IF NOT EXISTS idx_diagnostic_history_instrument 
                ON diagnostic_history (instrument_id, timestamp);
        """)
        
        self.connection.commit()
    
    def save_diagnostic_result(self, result: DiagnosticResult) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.connection.execute("""
                INSERT INTO diagnostic_results
                (instrument_id, timestamp, status, confidence, method, 
                 parameters, anomalies, recommendations, next_check, details)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                result.instrument_id,
                result.timestamp,
                result.status.value,
                result.confidence,
                result.method.value,
                json.dumps(result.parameters),
                json.dumps(result.anomalies),
                json.dumps(result.recommendations),
                result.next_check,
                json.dumps(result.details)
            ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–±–æ—Ä–∞
            self.connection.execute("""
                INSERT OR REPLACE INTO instrument_health
                (instrument_id, last_diagnostic, current_status, health_score, updated_at)
                VALUES (?, ?, ?, ?, ?)
            """, (
                result.instrument_id,
                result.timestamp,
                result.status.value,
                result.confidence,
                datetime.now()
            ))
            
            self.connection.commit()
            return True
            
        except Exception as e:
            logging.error(f"Error saving diagnostic result: {e}")
            return False
    
    def save_alert(self, alert: Alert) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
        try:
            self.connection.execute("""
                INSERT OR REPLACE INTO alerts
                (id, instrument_id, timestamp, severity, message, details,
                 acknowledged, resolved, resolver, resolution_time)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                alert.id,
                alert.instrument_id,
                alert.timestamp,
                alert.severity.value,
                alert.message,
                json.dumps(alert.details),
                alert.acknowledged,
                alert.resolved,
                alert.resolver,
                alert.resolution_time
            ))
            
            self.connection.commit()
            return True
            
        except Exception as e:
            logging.error(f"Error saving alert: {e}")
            return False
    
    def get_instrument_status(self, instrument_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–±–æ—Ä–∞"""
        try:
            cursor = self.connection.execute("""
                SELECT * FROM instrument_health WHERE instrument_id = ?
            """, (instrument_id,))
            
            row = cursor.fetchone()
            if not row:
                return None
            
            return {
                'instrument_id': row[0],
                'last_diagnostic': row[1],
                'current_status': row[2],
                'health_score': row[3],
                'uptime_hours': row[4],
                'failure_count': row[5],
                'maintenance_due': row[6],
                'updated_at': row[7]
            }
            
        except Exception as e:
            logging.error(f"Error getting instrument status: {e}")
            return None
    
    def get_active_alerts(self, instrument_id: Optional[str] = None) -> List[Alert]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
        try:
            if instrument_id:
                cursor = self.connection.execute("""
                    SELECT * FROM alerts 
                    WHERE instrument_id = ? AND resolved = FALSE
                    ORDER BY timestamp DESC
                """, (instrument_id,))
            else:
                cursor = self.connection.execute("""
                    SELECT * FROM alerts 
                    WHERE resolved = FALSE
                    ORDER BY timestamp DESC
                """)
            
            alerts = []
            for row in cursor.fetchall():
                alert = Alert(
                    id=row[0],
                    instrument_id=row[1],
                    timestamp=datetime.fromisoformat(row[2]),
                    severity=AlertSeverity(row[3]),
                    message=row[4],
                    details=json.loads(row[5]) if row[5] else {},
                    acknowledged=bool(row[6]),
                    resolved=bool(row[7]),
                    resolver=row[8],
                    resolution_time=datetime.fromisoformat(row[9]) if row[9] else None
                )
                alerts.append(alert)
            
            return alerts
            
        except Exception as e:
            logging.error(f"Error getting active alerts: {e}")
            return []
    
    def record_parameter_history(self, instrument_id: str, parameter_name: str,
                               value: float, quality_flag: str = "good") -> bool:
        """–ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            self.connection.execute("""
                INSERT INTO diagnostic_history
                (instrument_id, parameter_name, value, timestamp, quality_flag)
                VALUES (?, ?, ?, ?, ?)
            """, (instrument_id, parameter_name, value, datetime.now(), quality_flag))
            
            self.connection.commit()
            return True
            
        except Exception as e:
            logging.error(f"Error recording parameter history: {e}")
            return False
    
    def get_parameter_history(self, instrument_id: str, parameter_name: str,
                            hours: int = 24) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        try:
            cursor = self.connection.execute("""
                SELECT timestamp, value, quality_flag
                FROM diagnostic_history
                WHERE instrument_id = ? AND parameter_name = ?
                AND datetime(timestamp) >= datetime('now', '-{} hours')
                ORDER BY timestamp
            """.format(hours), (instrument_id, parameter_name))
            
            rows = cursor.fetchall()
            
            if not rows:
                return pd.DataFrame()
            
            df = pd.DataFrame(rows, columns=['timestamp', 'value', 'quality_flag'])
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            
            return df
            
        except Exception as e:
            logging.error(f"Error getting parameter history: {e}")
            return pd.DataFrame()
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()

class StatisticalDiagnostics:
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    def __init__(self):
        self.control_limits = {}
        self.baseline_statistics = {}
    
    def establish_baseline(self, instrument_id: str, data: np.ndarray,
                         parameter_name: str = "value") -> Dict:
        """–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            mean_val = np.mean(data)
            std_val = np.std(data, ddof=1)
            median_val = np.median(data)
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã (3-sigma)
            ucl = mean_val + 3 * std_val  # Upper Control Limit
            lcl = mean_val - 3 * std_val  # Lower Control Limit
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã (2-sigma)
            uwl = mean_val + 2 * std_val  # Upper Warning Limit
            lwl = mean_val - 2 * std_val  # Lower Warning Limit
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            shapiro_stat, shapiro_p = stats.shapiro(data[:5000] if len(data) > 5000 else data)
            is_normal = shapiro_p > 0.05
            
            # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            autocorr = np.corrcoef(data[:-1], data[1:])[0, 1] if len(data) > 1 else 0
            
            baseline = {
                'instrument_id': instrument_id,
                'parameter_name': parameter_name,
                'mean': mean_val,
                'std': std_val,
                'median': median_val,
                'min': np.min(data),
                'max': np.max(data),
                'ucl': ucl,
                'lcl': lcl,
                'uwl': uwl,
                'lwl': lwl,
                'is_normal': is_normal,
                'shapiro_p': shapiro_p,
                'autocorr': autocorr,
                'sample_size': len(data),
                'established_at': datetime.now()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –ª–∏–Ω–∏—é
            key = f"{instrument_id}_{parameter_name}"
            self.baseline_statistics[key] = baseline
            self.control_limits[key] = {
                'ucl': ucl, 'lcl': lcl,
                'uwl': uwl, 'lwl': lwl,
                'mean': mean_val, 'std': std_val
            }
            
            logging.info(f"Established baseline for {instrument_id}:{parameter_name}")
            return baseline
            
        except Exception as e:
            logging.error(f"Error establishing baseline: {e}")
            return {}
    
    def check_control_limits(self, instrument_id: str, value: float,
                           parameter_name: str = "value") -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤"""
        try:
            key = f"{instrument_id}_{parameter_name}"
            
            if key not in self.control_limits:
                return {
                    'status': DiagnosticStatus.UNKNOWN,
                    'message': 'No baseline established',
                    'confidence': 0.0
                }
            
            limits = self.control_limits[key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–µ–ª—ã
            if value > limits['ucl'] or value < limits['lcl']:
                status = DiagnosticStatus.CRITICAL
                message = f"Value {value:.3f} outside control limits [{limits['lcl']:.3f}, {limits['ucl']:.3f}]"
                confidence = 0.95
            elif value > limits['uwl'] or value < limits['lwl']:
                status = DiagnosticStatus.WARNING
                message = f"Value {value:.3f} outside warning limits [{limits['lwl']:.3f}, {limits['uwl']:.3f}]"
                confidence = 0.80
            else:
                status = DiagnosticStatus.HEALTHY
                message = f"Value {value:.3f} within normal limits"
                confidence = 0.90
            
            # –í—ã—á–∏—Å–ª—è–µ–º z-score
            z_score = (value - limits['mean']) / limits['std'] if limits['std'] > 0 else 0
            
            return {
                'status': status,
                'message': message,
                'confidence': confidence,
                'z_score': z_score,
                'limits': limits,
                'value': value
            }
            
        except Exception as e:
            logging.error(f"Error checking control limits: {e}")
            return {
                'status': DiagnosticStatus.FAILED,
                'message': f'Error: {str(e)}',
                'confidence': 0.0
            }
    
    def detect_trends(self, data: np.ndarray, window_size: int = 7) -> Dict:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if len(data) < window_size:
                return {'trend': 'insufficient_data', 'confidence': 0.0}
            
            # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            x = np.arange(len(data))
            slope, intercept, r_value, p_value, std_err = stats.linregress(x, data)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞
            if abs(r_value) < 0.1:
                trend = 'stable'
            elif slope > 0:
                trend = 'increasing'
            else:
                trend = 'decreasing'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥–∞
            is_significant = p_value < 0.05
            confidence = abs(r_value) if is_significant else 0.0
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            if len(data) >= window_size:
                moving_avg = np.convolve(data, np.ones(window_size)/window_size, mode='valid')
                recent_trend = np.mean(np.diff(moving_avg[-window_size:]))
            else:
                recent_trend = slope
            
            return {
                'trend': trend,
                'slope': slope,
                'r_value': r_value,
                'p_value': p_value,
                'confidence': confidence,
                'is_significant': is_significant,
                'recent_trend': recent_trend,
                'std_err': std_err
            }
            
        except Exception as e:
            logging.error(f"Error detecting trends: {e}")
            return {'trend': 'error', 'confidence': 0.0, 'error': str(e)}
    
    def detect_outliers(self, data: np.ndarray, method: str = 'iqr') -> Dict:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤"""
        try:
            outliers = []
            outlier_indices = []
            
            if method == 'iqr':
                # –ú–µ—Ç–æ–¥ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞
                q1 = np.percentile(data, 25)
                q3 = np.percentile(data, 75)
                iqr = q3 - q1
                
                lower_bound = q1 - 1.5 * iqr
                upper_bound = q3 + 1.5 * iqr
                
                outlier_mask = (data < lower_bound) | (data > upper_bound)
                
            elif method == 'zscore':
                # –ú–µ—Ç–æ–¥ z-score
                z_scores = np.abs(stats.zscore(data))
                outlier_mask = z_scores > 3
                
            elif method == 'isolation_forest':
                # Isolation Forest
                if len(data) > 10:
                    iso_forest = IsolationForest(contamination=0.1, random_state=42)
                    outlier_pred = iso_forest.fit_predict(data.reshape(-1, 1))
                    outlier_mask = outlier_pred == -1
                else:
                    outlier_mask = np.zeros(len(data), dtype=bool)
            
            else:
                raise ValueError(f"Unknown outlier detection method: {method}")
            
            outliers = data[outlier_mask].tolist()
            outlier_indices = np.where(outlier_mask)[0].tolist()
            
            return {
                'method': method,
                'outliers': outliers,
                'outlier_indices': outlier_indices,
                'outlier_count': len(outliers),
                'outlier_percentage': len(outliers) / len(data) * 100,
                'bounds': locals().get('lower_bound', None), locals().get('upper_bound', None)
            }
            
        except Exception as e:
            logging.error(f"Error detecting outliers: {e}")
            return {'method': method, 'outliers': [], 'error': str(e)}
    
    def calculate_process_capability(self, data: np.ndarray, 
                                   lower_spec: float, upper_spec: float) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            mean_val = np.mean(data)
            std_val = np.std(data, ddof=1)
            
            # Cp - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å
            cp = (upper_spec - lower_spec) / (6 * std_val) if std_val > 0 else float('inf')
            
            # Cpk - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å
            cpu = (upper_spec - mean_val) / (3 * std_val) if std_val > 0 else float('inf')
            cpl = (mean_val - lower_spec) / (3 * std_val) if std_val > 0 else float('inf')
            cpk = min(cpu, cpl)
            
            # Pp –∏ Ppk (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å)
            pp = (upper_spec - lower_spec) / (6 * std_val) if std_val > 0 else float('inf')
            ppk = cpk  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if cpk >= 1.33:
                capability_level = "excellent"
            elif cpk >= 1.0:
                capability_level = "adequate"
            elif cpk >= 0.67:
                capability_level = "marginal"
            else:
                capability_level = "inadequate"
            
            return {
                'cp': cp,
                'cpk': cpk,
                'cpu': cpu,
                'cpl': cpl,
                'pp': pp,
                'ppk': ppk,
                'capability_level': capability_level,
                'mean': mean_val,
                'std': std_val,
                'lower_spec': lower_spec,
                'upper_spec': upper_spec
            }
            
        except Exception as e:
            logging.error(f"Error calculating process capability: {e}")
            return {'error': str(e)}

class FrequencyAnalysisDiagnostics:
    """
    –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    def __init__(self, sampling_rate: float = 1.0):
        self.sampling_rate = sampling_rate
        self.frequency_baselines = {}
    
    def analyze_frequency_spectrum(self, data: np.ndarray, 
                                 instrument_id: str = "") -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞"""
        try:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
            data_detrended = signal.detrend(data)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–Ω–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö —É—Ç–µ—á–µ–∫
            windowed_data = data_detrended * signal.windows.hann(len(data))
            
            # –í—ã—á–∏—Å–ª—è–µ–º FFT
            fft_values = fft(windowed_data)
            frequencies = fftfreq(len(data), 1/self.sampling_rate)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
            positive_freq_mask = frequencies > 0
            frequencies = frequencies[positive_freq_mask]
            magnitude = np.abs(fft_values[positive_freq_mask])
            power = magnitude ** 2
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–∞—Å—Ç–æ—Ç—ã
            peak_indices = signal.find_peaks(magnitude, height=np.max(magnitude)*0.1)[0]
            dominant_frequencies = frequencies[peak_indices]
            dominant_magnitudes = magnitude[peak_indices]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∞–º–ø–ª–∏—Ç—É–¥—ã
            sorted_indices = np.argsort(dominant_magnitudes)[::-1]
            dominant_frequencies = dominant_frequencies[sorted_indices][:10]  # –¢–æ–ø-10
            dominant_magnitudes = dominant_magnitudes[sorted_indices][:10]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            total_power = np.sum(power)
            mean_frequency = np.sum(frequencies * power) / total_power if total_power > 0 else 0
            
            # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è (–º–µ—Ä–∞ —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç–∏)
            normalized_power = power / total_power if total_power > 0 else power
            spectral_entropy = -np.sum(normalized_power * np.log2(normalized_power + 1e-12))
            
            return {
                'instrument_id': instrument_id,
                'sampling_rate': self.sampling_rate,
                'frequencies': frequencies.tolist(),
                'magnitude': magnitude.tolist(),
                'power': power.tolist(),
                'dominant_frequencies': dominant_frequencies.tolist(),
                'dominant_magnitudes': dominant_magnitudes.tolist(),
                'total_power': total_power,
                'mean_frequency': mean_frequency,
                'spectral_entropy': spectral_entropy,
                'frequency_resolution': self.sampling_rate / len(data)
            }
            
        except Exception as e:
            logging.error(f"Error in frequency analysis: {e}")
            return {'error': str(e)}
    
    def detect_frequency_anomalies(self, current_spectrum: Dict, 
                                 baseline_spectrum: Dict,
                                 threshold: float = 0.2) -> Dict:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–º —Å–ø–µ–∫—Ç—Ä–µ"""
        try:
            if 'error' in current_spectrum or 'error' in baseline_spectrum:
                return {'status': DiagnosticStatus.FAILED, 'message': 'Spectrum analysis failed'}
            
            current_power = np.array(current_spectrum['power'])
            baseline_power = np.array(baseline_spectrum['power'])
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–µ–∫—Ç—Ä—ã
            current_power_norm = current_power / np.sum(current_power) if np.sum(current_power) > 0 else current_power
            baseline_power_norm = baseline_power / np.sum(baseline_power) if np.sum(baseline_power) > 0 else baseline_power
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
            if len(current_power_norm) == len(baseline_power_norm):
                power_diff = np.abs(current_power_norm - baseline_power_norm)
                max_diff = np.max(power_diff)
                mean_diff = np.mean(power_diff)
                
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Å–ø–µ–∫—Ç—Ä–∞–º–∏
                correlation = np.corrcoef(current_power_norm, baseline_power_norm)[0, 1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if max_diff > threshold or correlation < 0.8:
                    if max_diff > 2 * threshold or correlation < 0.6:
                        status = DiagnosticStatus.CRITICAL
                        message = f"Significant frequency spectrum change detected (max_diff: {max_diff:.3f}, corr: {correlation:.3f})"
                    else:
                        status = DiagnosticStatus.WARNING
                        message = f"Moderate frequency spectrum change detected (max_diff: {max_diff:.3f}, corr: {correlation:.3f})"
                else:
                    status = DiagnosticStatus.HEALTHY
                    message = "Frequency spectrum within normal range"
                
                # –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —á–∞—Å—Ç–æ—Ç
                current_dom_freq = set(np.round(current_spectrum['dominant_frequencies'], 2))
                baseline_dom_freq = set(np.round(baseline_spectrum['dominant_frequencies'], 2))
                
                new_frequencies = current_dom_freq - baseline_dom_freq
                missing_frequencies = baseline_dom_freq - current_dom_freq
                
                anomalies = []
                if new_frequencies:
                    anomalies.append(f"New dominant frequencies: {list(new_frequencies)}")
                if missing_frequencies:
                    anomalies.append(f"Missing dominant frequencies: {list(missing_frequencies)}")
                
                return {
                    'status': status,
                    'message': message,
                    'confidence': min(1.0, max_diff / threshold) if status != DiagnosticStatus.HEALTHY else 0.9,
                    'max_difference': max_diff,
                    'mean_difference': mean_diff,
                    'correlation': correlation,
                    'anomalies': anomalies,
                    'new_frequencies': list(new_frequencies),
                    'missing_frequencies': list(missing_frequencies)
                }
            else:
                return {
                    'status': DiagnosticStatus.WARNING,
                    'message': 'Spectrum length mismatch - cannot compare',
                    'confidence': 0.5
                }
                
        except Exception as e:
            logging.error(f"Error detecting frequency anomalies: {e}")
            return {
                'status': DiagnosticStatus.FAILED,
                'message': f'Error: {str(e)}',
                'confidence': 0.0
            }
    
    def establish_frequency_baseline(self, data: np.ndarray, 
                                   instrument_id: str) -> Dict:
        """–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞"""
        try:
            baseline_spectrum = self.analyze_frequency_spectrum(data, instrument_id)
            
            if 'error' not in baseline_spectrum:
                self.frequency_baselines[instrument_id] = baseline_spectrum
                logging.info(f"Established frequency baseline for {instrument_id}")
            
            return baseline_spectrum
            
        except Exception as e:
            logging.error(f"Error establishing frequency baseline: {e}")
            return {'error': str(e)}

class MachineLearningDiagnostics:
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    def __init__(self):
        self.anomaly_detectors = {}
        self.scalers = {}
        self.feature_extractors = {}
    
    def train_anomaly_detector(self, instrument_id: str, 
                             training_data: np.ndarray,
                             contamination: float = 0.1) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if training_data.ndim == 1:
                training_data = training_data.reshape(-1, 1)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            scaler = StandardScaler()
            scaled_data = scaler.fit_transform(training_data)
            
            # –û–±—É—á–µ–Ω–∏–µ Isolation Forest
            detector = IsolationForest(
                contamination=contamination,
                random_state=42,
                n_estimators=100
            )
            detector.fit(scaled_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏
            self.anomaly_detectors[instrument_id] = detector
            self.scalers[instrument_id] = scaler
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            train_predictions = detector.predict(scaled_data)
            anomaly_score = detector.decision_function(scaled_data)
            
            logging.info(f"Trained anomaly detector for {instrument_id}")
            logging.info(f"Training anomalies detected: {np.sum(train_predictions == -1)}/{len(train_predictions)}")
            
            return True
            
        except Exception as e:
            logging.error(f"Error training anomaly detector for {instrument_id}: {e}")
            return False
    
    def detect_anomalies_ml(self, instrument_id: str, 
                          data: np.ndarray) -> Dict:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π —Å –ø–æ–º–æ—â—å—é ML"""
        try:
            if instrument_id not in self.anomaly_detectors:
                return {
                    'status': DiagnosticStatus.UNKNOWN,
                    'message': 'No trained model available',
                    'confidence': 0.0
                }
            
            detector = self.anomaly_detectors[instrument_id]
            scaler = self.scalers[instrument_id]
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if data.ndim == 1:
                data = data.reshape(-1, 1)
            
            scaled_data = scaler.transform(data)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
            predictions = detector.predict(scaled_data)
            anomaly_scores = detector.decision_function(scaled_data)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            anomaly_count = np.sum(predictions == -1)
            anomaly_percentage = anomaly_count / len(predictions) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if anomaly_percentage > 20:
                status = DiagnosticStatus.CRITICAL
                message = f"High anomaly rate: {anomaly_percentage:.1f}%"
                confidence = 0.9
            elif anomaly_percentage > 5:
                status = DiagnosticStatus.WARNING
                message = f"Moderate anomaly rate: {anomaly_percentage:.1f}%"
                confidence = 0.8
            else:
                status = DiagnosticStatus.HEALTHY
                message = f"Low anomaly rate: {anomaly_percentage:.1f}%"
                confidence = 0.85
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
            anomaly_indices = np.where(predictions == -1)[0]
            most_anomalous_idx = np.argmin(anomaly_scores)
            
            return {
                'status': status,
                'message': message,
                'confidence': confidence,
                'anomaly_count': int(anomaly_count),
                'anomaly_percentage': anomaly_percentage,
                'anomaly_indices': anomaly_indices.tolist(),
                'anomaly_scores': anomaly_scores.tolist(),
                'most_anomalous_index': int(most_anomalous_idx),
                'most_anomalous_score': float(anomaly_scores[most_anomalous_idx])
            }
            
        except Exception as e:
            logging.error(f"Error in ML anomaly detection for {instrument_id}: {e}")
            return {
                'status': DiagnosticStatus.FAILED,
                'message': f'ML detection error: {str(e)}',
                'confidence': 0.0
            }
    
    def extract_features(self, data: np.ndarray) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞"""
        try:
            features = {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            features['mean'] = np.mean(data)
            features['std'] = np.std(data)
            features['var'] = np.var(data)
            features['min'] = np.min(data)
            features['max'] = np.max(data)
            features['range'] = features['max'] - features['min']
            features['median'] = np.median(data)
            features['q25'] = np.percentile(data, 25)
            features['q75'] = np.percentile(data, 75)
            features['iqr'] = features['q75'] - features['q25']
            features['skewness'] = stats.skew(data)
            features['kurtosis'] = stats.kurtosis(data)
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏
            if len(data) > 1:
                diff = np.diff(data)
                features['mean_diff'] = np.mean(diff)
                features['std_diff'] = np.std(diff)
                features['max_diff'] = np.max(np.abs(diff))
                
                # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                if len(data) > 2:
                    features['autocorr_lag1'] = np.corrcoef(data[:-1], data[1:])[0, 1]
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å—Ä–µ–¥–Ω–µ–≥–æ
                mean_crossings = np.sum(np.diff(np.sign(data - features['mean'])) != 0)
                features['mean_crossings'] = mean_crossings
            
            # –≠–Ω—Ç—Ä–æ–ø–∏—è
            hist, _ = np.histogram(data, bins=10)
            hist = hist / np.sum(hist)  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            features['entropy'] = -np.sum(hist * np.log2(hist + 1e-12))
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∞–Ω—Ç–∏–ª–µ–π
            for q in [10, 90, 95, 99]:
                features[f'q{q}'] = np.percentile(data, q)
            
            return features
            
        except Exception as e:
            logging.error(f"Error extracting features: {e}")
            return {}

class ComprehensiveDiagnosticSystem:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤
    """
    def __init__(self, db_path: str = "diagnostics.db"):
        self.db = DiagnosticDatabase(db_path)
        self.statistical_diagnostics = StatisticalDiagnostics()
        self.frequency_diagnostics = FrequencyAnalysisDiagnostics()
        self.ml_diagnostics = MachineLearningDiagnostics()
        
        self.alert_handlers = []
        self.diagnostic_rules = {}
        self.monitoring_active = {}
        self.monitoring_threads = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_config = {
            'statistical_analysis': True,
            'frequency_analysis': False,
            'ml_analysis': False,
            'monitoring_interval': 60,  # —Å–µ–∫—É–Ω–¥
            'alert_thresholds': {
                'warning': 0.7,
                'critical': 0.9
            }
        }
    
    def register_instrument(self, instrument_id: str, 
                          config: Optional[Dict] = None) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–±–æ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            instrument_config = self.default_config.copy()
            if config:
                instrument_config.update(config)
            
            self.diagnostic_rules[instrument_id] = instrument_config
            
            logging.info(f"Registered instrument {instrument_id} for diagnostics")
            return True
            
        except Exception as e:
            logging.error(f"Error registering instrument {instrument_id}: {e}")
            return False
    
    def establish_baselines(self, instrument_id: str, 
                          historical_data: np.ndarray,
                          parameter_name: str = "value") -> Dict:
        """–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ª–∏–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            results = {}
            config = self.diagnostic_rules.get(instrument_id, self.default_config)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è
            if config.get('statistical_analysis', True):
                stat_baseline = self.statistical_diagnostics.establish_baseline(
                    instrument_id, historical_data, parameter_name
                )
                results['statistical'] = stat_baseline
            
            # –ß–∞—Å—Ç–æ—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è
            if config.get('frequency_analysis', False):
                freq_baseline = self.frequency_diagnostics.establish_frequency_baseline(
                    historical_data, instrument_id
                )
                results['frequency'] = freq_baseline
            
            # –û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏
            if config.get('ml_analysis', False):
                ml_success = self.ml_diagnostics.train_anomaly_detector(
                    instrument_id, historical_data
                )
                results['ml_trained'] = ml_success
            
            logging.info(f"Established baselines for {instrument_id}")
            return results
            
        except Exception as e:
            logging.error(f"Error establishing baselines for {instrument_id}: {e}")
            return {'error': str(e)}
    
    def perform_comprehensive_diagnosis(self, instrument_id: str,
                                      current_data: np.ndarray,
                                      parameter_name: str = "value") -> DiagnosticResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            config = self.diagnostic_rules.get(instrument_id, self.default_config)
            
            all_results = []
            anomalies = []
            recommendations = []
            details = {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if config.get('statistical_analysis', True):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                if len(current_data) > 0:
                    control_result = self.statistical_diagnostics.check_control_limits(
                        instrument_id, current_data[-1], parameter_name
                    )
                    all_results.append(control_result)
                    details['control_limits'] = control_result
                
                # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
                trend_result = self.statistical_diagnostics.detect_trends(current_data)
                details['trend_analysis'] = trend_result
                
                if trend_result.get('is_significant', False):
                    if trend_result['trend'] == 'increasing':
                        anomalies.append("Significant increasing trend detected")
                        recommendations.append("Monitor for potential drift or degradation")
                    elif trend_result['trend'] == 'decreasing':
                        anomalies.append("Significant decreasing trend detected")
                        recommendations.append("Check for sensor degradation or calibration drift")
                
                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
                outlier_result = self.statistical_diagnostics.detect_outliers(current_data)
                details['outlier_analysis'] = outlier_result
                
                if outlier_result.get('outlier_percentage', 0) > 5:
                    anomalies.append(f"High outlier rate: {outlier_result['outlier_percentage']:.1f}%")
                    recommendations.append("Investigate source of measurement noise or interference")
            
            # –ß–∞—Å—Ç–æ—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if config.get('frequency_analysis', False):
                current_spectrum = self.frequency_diagnostics.analyze_frequency_spectrum(
                    current_data, instrument_id
                )
                details['frequency_spectrum'] = current_spectrum
                
                if instrument_id in self.frequency_diagnostics.frequency_baselines:
                    baseline_spectrum = self.frequency_diagnostics.frequency_baselines[instrument_id]
                    freq_anomaly_result = self.frequency_diagnostics.detect_frequency_anomalies(
                        current_spectrum, baseline_spectrum
                    )
                    all_results.append(freq_anomaly_result)
                    details['frequency_anomalies'] = freq_anomaly_result
                    
                    if freq_anomaly_result.get('anomalies'):
                        anomalies.extend(freq_anomaly_result['anomalies'])
                        recommendations.append("Analyze frequency spectrum changes for mechanical issues")
            
            # ML –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if config.get('ml_analysis', False):
                ml_result = self.ml_diagnostics.detect_anomalies_ml(instrument_id, current_data)
                all_results.append(ml_result)
                details['ml_anomalies'] = ml_result
                
                if ml_result.get('anomaly_percentage', 0) > 10:
                    anomalies.append(f"ML detected {ml_result['anomaly_percentage']:.1f}% anomalies")
                    recommendations.append("Review recent operational changes or environmental conditions")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            if not all_results:
                overall_status = DiagnosticStatus.UNKNOWN
                overall_confidence = 0.0
            else:
                # –ë–µ—Ä–µ–º –Ω–∞–∏—Ö—É–¥—à–∏–π —Å—Ç–∞—Ç—É—Å
                status_priority = {
                    DiagnosticStatus.HEALTHY: 0,
                    DiagnosticStatus.WARNING: 1,
                    DiagnosticStatus.CRITICAL: 2,
                    DiagnosticStatus.FAILED: 3,
                    DiagnosticStatus.UNKNOWN: 4
                }
                
                worst_status = max(all_results, 
                                 key=lambda x: status_priority.get(x.get('status', DiagnosticStatus.UNKNOWN), 4))
                overall_status = worst_status.get('status', DiagnosticStatus.UNKNOWN)
                overall_confidence = np.mean([r.get('confidence', 0.0) for r in all_results])
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostic_result = DiagnosticResult(
                instrument_id=instrument_id,
                timestamp=datetime.now(),
                status=overall_status,
                confidence=overall_confidence,
                method=DiagnosticMethod.MACHINE_LEARNING,  # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–µ—Ç–æ–¥
                parameters={
                    'data_points': len(current_data),
                    'parameter_name': parameter_name,
                    'methods_used': [k for k, v in config.items() if v and k.endswith('_analysis')]
                },
                anomalies=anomalies,
                recommendations=recommendations,
                next_check=datetime.now() + timedelta(seconds=config.get('monitoring_interval', 60)),
                details=details
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.db.save_diagnostic_result(diagnostic_result)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            self._generate_alerts(diagnostic_result)
            
            return diagnostic_result
            
        except Exception as e:
            logging.error(f"Error in comprehensive diagnosis for {instrument_id}: {e}")
            
            error_result = DiagnosticResult(
                instrument_id=instrument_id,
                timestamp=datetime.now(),
                status=DiagnosticStatus.FAILED,
                confidence=0.0,
                method=DiagnosticMethod.STATISTICAL_ANALYSIS,
                parameters={'error': str(e)},
                anomalies=[f"Diagnostic error: {str(e)}"],
                recommendations=["Check diagnostic system configuration"]
            )
            
            return error_result
    
    def _generate_alerts(self, diagnostic_result: DiagnosticResult):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            config = self.diagnostic_rules.get(diagnostic_result.instrument_id, self.default_config)
            thresholds = config.get('alert_thresholds', {'warning': 0.7, 'critical': 0.9})
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
            if diagnostic_result.status == DiagnosticStatus.CRITICAL:
                severity = AlertSeverity.CRITICAL
            elif diagnostic_result.status == DiagnosticStatus.WARNING:
                severity = AlertSeverity.WARNING
            elif diagnostic_result.status == DiagnosticStatus.FAILED:
                severity = AlertSeverity.EMERGENCY
            else:
                return  # –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
            alert = Alert(
                id=f"{diagnostic_result.instrument_id}_{int(time.time())}",
                instrument_id=diagnostic_result.instrument_id,
                timestamp=diagnostic_result.timestamp,
                severity=severity,
                message=f"Diagnostic alert: {diagnostic_result.status.value}",
                details={
                    'confidence': diagnostic_result.confidence,
                    'method': diagnostic_result.method.value,
                    'anomalies': diagnostic_result.anomalies,
                    'recommendations': diagnostic_result.recommendations,
                    'parameters': diagnostic_result.parameters
                }
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
            self.db.save_alert(alert)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
            for handler in self.alert_handlers:
                try:
                    handler(alert)
                except Exception as e:
                    logging.error(f"Error in alert handler: {e}")
            
            logging.info(f"Generated alert {alert.id} for instrument {diagnostic_result.instrument_id}")
            
        except Exception as e:
            logging.error(f"Error generating alerts: {e}")
    
    def add_alert_handler(self, handler: Callable[[Alert], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
        self.alert_handlers.append(handler)
        logging.info("Added alert handler")
    
    def start_continuous_monitoring(self, instrument_id: str,
                                  data_source: Callable[[], np.ndarray]):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if instrument_id in self.monitoring_active:
            logging.warning(f"Monitoring already active for {instrument_id}")
            return
        
        self.monitoring_active[instrument_id] = True
        
        def monitoring_loop():
            config = self.diagnostic_rules.get(instrument_id, self.default_config)
            interval = config.get('monitoring_interval', 60)
            
            while self.monitoring_active.get(instrument_id, False):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    data = data_source()
                    
                    if len(data) > 0:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                        result = self.perform_comprehensive_diagnosis(instrument_id, data)
                        
                        logging.info(f"Monitoring {instrument_id}: {result.status.value} "
                                   f"(confidence: {result.confidence:.2f})")
                    
                    time.sleep(interval)
                    
                except Exception as e:
                    logging.error(f"Error in monitoring loop for {instrument_id}: {e}")
                    time.sleep(interval)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=monitoring_loop, daemon=True)
        thread.start()
        self.monitoring_threads[instrument_id] = thread
        
        logging.info(f"Started continuous monitoring for {instrument_id}")
    
    def stop_continuous_monitoring(self, instrument_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if instrument_id in self.monitoring_active:
            self.monitoring_active[instrument_id] = False
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if instrument_id in self.monitoring_threads:
                thread = self.monitoring_threads[instrument_id]
                thread.join(timeout=5.0)
                del self.monitoring_threads[instrument_id]
            
            del self.monitoring_active[instrument_id]
            logging.info(f"Stopped continuous monitoring for {instrument_id}")
    
    def get_diagnostic_summary(self, instrument_id: str, hours: int = 24) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–±–æ—Ä–∞
            status = self.db.get_instrument_status(instrument_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            alerts = self.db.get_active_alerts(instrument_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            history_df = self.db.get_parameter_history(instrument_id, "value", hours)
            
            summary = {
                'instrument_id': instrument_id,
                'current_status': status,
                'active_alerts_count': len(alerts),
                'active_alerts': [
                    {
                        'id': alert.id,
                        'severity': alert.severity.value,
                        'message': alert.message,
                        'timestamp': alert.timestamp.isoformat()
                    } for alert in alerts
                ],
                'data_points_last_24h': len(history_df) if not history_df.empty else 0,
                'monitoring_active': instrument_id in self.monitoring_active
            }
            
            if not history_df.empty:
                summary['data_quality'] = {
                    'good_quality_percentage': len(history_df[history_df['quality_flag'] == 'good']) / len(history_df) * 100,
                    'latest_value': float(history_df.iloc[-1]['value']),
                    'value_range': [float(history_df['value'].min()), float(history_df['value'].max())],
                    'mean_value': float(history_df['value'].mean()),
                    'std_value': float(history_df['value'].std())
                }
            
            return summary
            
        except Exception as e:
            logging.error(f"Error getting diagnostic summary for {instrument_id}: {e}")
            return {'error': str(e)}
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
        for instrument_id in list(self.monitoring_active.keys()):
            self.stop_continuous_monitoring(instrument_id)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.close()
        
        logging.info("Diagnostic system closed")

# –ü—Ä–∏–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
class AlertNotificationSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤
    """
    def __init__(self):
        self.email_config = {}
        self.sms_config = {}
        self.notification_rules = {}
    
    def configure_email(self, smtp_server: str, smtp_port: int,
                       username: str, password: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
        self.email_config = {
            'smtp_server': smtp_server,
            'smtp_port': smtp_port,
            'username': username,
            'password': password
        }
    
    def send_email_alert(self, alert: Alert, recipients: List[str]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
        try:
            if not self.email_config:
                logging.warning("Email not configured")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart()
            msg['From'] = self.email_config['username']
            msg['To'] = ', '.join(recipients)
            msg['Subject'] = f"[{alert.severity.value.upper()}] Instrument Alert: {alert.instrument_id}"
            
            # –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            body = f"""
Instrument Alert Notification

Instrument ID: {alert.instrument_id}
Severity: {alert.severity.value.upper()}
Timestamp: {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}
Message: {alert.message}

Details:
{json.dumps(alert.details, indent=2)}

Alert ID: {alert.id}

This is an automated message from the AI Diagnostic System.
            """
            
            msg.attach(MIMEText(body, 'plain'))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            with smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port']) as server:
                server.starttls()
                server.login(self.email_config['username'], self.email_config['password'])
                server.send_message(msg)
            
            logging.info(f"Email alert sent for {alert.id}")
            return True
            
        except Exception as e:
            logging.error(f"Error sending email alert: {e}")
            return False
    
    def handle_alert(self, alert: Alert):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
            recipients = self.notification_rules.get(
                alert.instrument_id, 
                self.notification_rules.get('default', [])
            )
            
            if not recipients:
                logging.warning(f"No recipients configured for {alert.instrument_id}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
            if alert.severity in [AlertSeverity.CRITICAL, AlertSeverity.EMERGENCY]:
                self.send_email_alert(alert, recipients)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            logging.info(f"Processed alert {alert.id}: {alert.severity.value} - {alert.message}")
            
        except Exception as e:
            logging.error(f"Error handling alert {alert.id}: {e}")
    
    def set_notification_rules(self, rules: Dict[str, List[str]]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
        self.notification_rules = rules
        logging.info("Updated notification rules")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    diagnostic_system = ComprehensiveDiagnosticSystem("diagnostic_example.db")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    notification_system = AlertNotificationSystem()
    notification_system.set_notification_rules({
        'default': ['engineer@company.com', 'maintenance@company.com'],
        'TEMP_001': ['temp_specialist@company.com']
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    diagnostic_system.add_alert_handler(notification_system.handle_alert)
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–±–æ—Ä
        diagnostic_system.register_instrument(
            'TEMP_001',
            {
                'statistical_analysis': True,
                'frequency_analysis': True,
                'ml_analysis': True,
                'monitoring_interval': 30
            }
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        np.random.seed(42)
        historical_data = np.random.normal(50.0, 2.0, 1000)  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ª–∏–Ω–∏–∏
        baselines = diagnostic_system.establish_baselines('TEMP_001', historical_data)
        print("Baselines established:")
        for method, result in baselines.items():
            if isinstance(result, dict) and 'error' not in result:
                print(f"  {method}: Success")
            else:
                print(f"  {method}: {result}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–Ω–æ–º–∞–ª–∏—è–º–∏
        current_data = np.concatenate([
            np.random.normal(50.0, 2.0, 50),   # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            np.random.normal(55.0, 3.0, 10),   # –°–¥–≤–∏–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ
            [65.0, 70.0],                      # –í—ã–±—Ä–æ—Å—ã
            np.random.normal(48.0, 1.5, 20)    # –î—Ä—É–≥–æ–π —Ä–µ–∂–∏–º
        ])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        result = diagnostic_system.perform_comprehensive_diagnosis('TEMP_001', current_data)
        
        print(f"\\nDiagnostic Result:")
        print(f"Status: {result.status.value}")
        print(f"Confidence: {result.confidence:.3f}")
        print(f"Method: {result.method.value}")
        print(f"Anomalies: {result.anomalies}")
        print(f"Recommendations: {result.recommendations}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = diagnostic_system.get_diagnostic_summary('TEMP_001')
        print(f"\\nDiagnostic Summary:")
        print(f"Current status: {summary.get('current_status', {}).get('current_status', 'Unknown')}")
        print(f"Active alerts: {summary.get('active_alerts_count', 0)}")
        print(f"Data quality: {summary.get('data_quality', {})}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        def data_generator():
            """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            return np.random.normal(50.0, 2.0, 100)
        
        print("\\nStarting continuous monitoring for 10 seconds...")
        diagnostic_system.start_continuous_monitoring('TEMP_001', data_generator)
        
        time.sleep(10)
        
        diagnostic_system.stop_continuous_monitoring('TEMP_001')
        print("Monitoring stopped")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        alerts = diagnostic_system.db.get_active_alerts('TEMP_001')
        print(f"\\nActive alerts: {len(alerts)}")
        for alert in alerts:
            print(f"  {alert.severity.value}: {alert.message}")
        
    finally:
        diagnostic_system.close()
\`\`\`

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

### –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ

–í –†–æ—Å—Å–∏–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º:

**–ì–û–°–¢ –† –ò–°–û 13374** - –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—à–∏–Ω:
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
- –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

**–ì–û–°–¢ 27.002-2015** - –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —Ç–µ—Ö–Ω–∏–∫–µ:
- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
- –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
- –ú–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

**–ì–û–°–¢ –† 51901.11-2005** - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
- –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∫–∞–∑–æ–≤
- –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

\`\`\`python
class RussianDiagnosticCompliance:
    """
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    """
    def __init__(self):
        self.gost_requirements = {
            'GOST_R_ISO_13374': {
                'data_acquisition': '–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö',
                'data_processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
                'condition_monitoring': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
                'health_assessment': '–û—Ü–µ–Ω–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
                'prognostics': '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞'
            },
            'GOST_27_002_2015': {
                'reliability_indicators': '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏',
                'failure_analysis': '–ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–∞–∑–æ–≤',
                'maintenance_planning': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û'
            }
        }
        
        self.diagnostic_categories = {
            'functional': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
            'parametric': '–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
            'structural': '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
        }
    
    def generate_diagnostic_protocol(self, instrument_id: str,
                                   diagnostic_results: List[DiagnosticResult]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ –ì–û–°–¢"""
        try:
            protocol = {
                'protocol_number': f"DIAG-{instrument_id}-{int(time.time())}",
                'instrument_id': instrument_id,
                'diagnostic_date': datetime.now().isoformat(),
                'standard_compliance': '–ì–û–°–¢ –† –ò–°–û 13374',
                'diagnostic_methods': [],
                'results_summary': {},
                'recommendations': [],
                'next_diagnostic_date': None
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in diagnostic_results:
                method_info = {
                    'method': result.method.value,
                    'timestamp': result.timestamp.isoformat(),
                    'status': result.status.value,
                    'confidence': result.confidence,
                    'parameters': result.parameters
                }
                protocol['diagnostic_methods'].append(method_info)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                protocol['recommendations'].extend(result.recommendations)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            statuses = [r.status for r in diagnostic_results]
            if DiagnosticStatus.CRITICAL in statuses:
                overall_status = '–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω'
                protocol['next_diagnostic_date'] = (datetime.now() + timedelta(days=7)).isoformat()
            elif DiagnosticStatus.WARNING in statuses:
                overall_status = '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω'
                protocol['next_diagnostic_date'] = (datetime.now() + timedelta(days=30)).isoformat()
            else:
                overall_status = '–ò—Å–ø—Ä–∞–≤–µ–Ω'
                protocol['next_diagnostic_date'] = (datetime.now() + timedelta(days=90)).isoformat()
            
            protocol['results_summary']['overall_status'] = overall_status
            protocol['results_summary']['diagnostic_count'] = len(diagnostic_results)
            
            return protocol
            
        except Exception as e:
            logging.error(f"Error generating diagnostic protocol: {e}")
            return {'error': str(e)}
    
    def validate_diagnostic_completeness(self, diagnostic_data: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            required_elements = [
                'instrument_identification',
                'diagnostic_methods',
                'measurement_data',
                'analysis_results',
                'conclusions',
                'recommendations'
            ]
            
            completeness = {}
            for element in required_elements:
                completeness[element] = element in diagnostic_data
            
            completeness_score = sum(completeness.values()) / len(required_elements)
            
            return {
                'completeness_score': completeness_score,
                'missing_elements': [k for k, v in completeness.items() if not v],
                'compliant': completeness_score >= 0.8
            }
            
        except Exception as e:
            logging.error(f"Error validating diagnostic completeness: {e}")
            return {'error': str(e)}

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
class IndustrialSystemIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
    """
    def __init__(self):
        self.scada_connections = {}
        self.mes_connections = {}
        self.opc_clients = {}
    
    def connect_to_scada(self, scada_id: str, connection_params: Dict) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SCADA —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SCADA
            self.scada_connections[scada_id] = {
                'host': connection_params.get('host', 'localhost'),
                'port': connection_params.get('port', 502),
                'connected': True,
                'last_update': datetime.now()
            }
            
            logging.info(f"Connected to SCADA {scada_id}")
            return True
            
        except Exception as e:
            logging.error(f"Error connecting to SCADA {scada_id}: {e}")
            return False
    
    def send_diagnostic_to_scada(self, scada_id: str, 
                               diagnostic_result: DiagnosticResult) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ SCADA"""
        try:
            if scada_id not in self.scada_connections:
                logging.error(f"SCADA {scada_id} not connected")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è SCADA
            scada_data = {
                'instrument_id': diagnostic_result.instrument_id,
                'status_code': self._status_to_code(diagnostic_result.status),
                'confidence': diagnostic_result.confidence,
                'timestamp': diagnostic_result.timestamp.isoformat(),
                'alert_level': self._status_to_alert_level(diagnostic_result.status)
            }
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            logging.info(f"Sent diagnostic data to SCADA {scada_id}: {scada_data}")
            return True
            
        except Exception as e:
            logging.error(f"Error sending diagnostic to SCADA {scada_id}: {e}")
            return False
    
    def _status_to_code(self, status: DiagnosticStatus) -> int:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ–¥ –¥–ª—è SCADA"""
        status_codes = {
            DiagnosticStatus.HEALTHY: 1,
            DiagnosticStatus.WARNING: 2,
            DiagnosticStatus.CRITICAL: 3,
            DiagnosticStatus.FAILED: 4,
            DiagnosticStatus.UNKNOWN: 0
        }
        return status_codes.get(status, 0)
    
    def _status_to_alert_level(self, status: DiagnosticStatus) -> int:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏"""
        alert_levels = {
            DiagnosticStatus.HEALTHY: 0,
            DiagnosticStatus.WARNING: 1,
            DiagnosticStatus.CRITICAL: 2,
            DiagnosticStatus.FAILED: 3,
            DiagnosticStatus.UNKNOWN: 0
        }
        return alert_levels.get(status, 0)
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –¥–ª—è AI-—Å–∏—Å—Ç–µ–º - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö.

### –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞

1. **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã** - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
2. **–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞** - –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã, —Ç—Ä–µ–Ω–¥—ã, –≤—ã–±—Ä–æ—Å—ã, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞
3. **–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑** - —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
4. **–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
5. **–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞** - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤, –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ–ø–æ–≤–µ—â–µ–Ω–∏—è

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è

- **DiagnosticDatabase** - –ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- **StatisticalDiagnostics** - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
- **FrequencyAnalysisDiagnostics** - —á–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
- **MachineLearningDiagnostics** - ML-–º–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
- **ComprehensiveDiagnosticSystem** - –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å

–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- **–†–∞–Ω–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º** - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π –∏ –ø—Ä–æ—Å—Ç–æ–µ–≤
- **–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI** - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º** - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ì–û–°–¢
- **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞** - —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º** - —Å–≤—è–∑—å —Å SCADA/MES —Å–∏—Å—Ç–µ–º–∞–º–∏

–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —Å AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ - –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.
    `,
  },


  42: {
    title: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —Å AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏",
    duration: "180 –º–∏–Ω",
    type: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    content: `
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —Å AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏

## –í–≤–µ–¥–µ–Ω–∏–µ

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —Å AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º —ç—Ç–∞–ø–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ—Å—à–æ–≤–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –∫ AI-–∞–ª–≥–æ—Ä–∏—Ç–º–∞–º, –ø–æ–∑–≤–æ–ª—è—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —Å AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö:

**–°–ª–æ–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:**
- **–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–ª–æ–π** - –¥–∞—Ç—á–∏–∫–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏
- **–°–ª–æ–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö** - –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä—ã, —à–ª—é–∑—ã, –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
- **–°–ª–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏** - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –∞–≥—Ä–µ–≥–∞—Ü–∏—è
- **AI-—Å–ª–æ–π** - –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
- **–°–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –æ—Ç—á–µ—Ç—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

**–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç—ã—Å—è—á –¥–∞—Ç—á–∏–∫–æ–≤
- **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å** - –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
- **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- **–ò–Ω—Ç–µ—Ä–æ–ø–µ—Ä–∞–±–µ–ª—å–Ω–æ—Å—Ç—å** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤

### –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:

**–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã:**
- **OPC UA** - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏
- **MQTT** - –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è IoT
- **Modbus TCP/RTU** - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
- **EtherNet/IP** - –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π Ethernet
- **PROFINET** - –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Å–µ—Ç—å Siemens

**–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–∞–Ω–Ω—ã—Ö:**
- **IEC 61850** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º
- **ISA-95** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
- **GOST R 51841** - —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π

\`\`\`python
import asyncio
import aiohttp
import json
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union, Callable, Any, Tuple
from dataclasses import dataclass, field, asdict
from enum import Enum
import threading
import queue
import sqlite3
from concurrent.futures import ThreadPoolExecutor, as_completed
import numpy as np
import pandas as pd

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è AI/ML
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.ensemble import IsolationForest
from sklearn.cluster import DBSCAN
import tensorflow as tf
import torch
import torch.nn as nn
from transformers import pipeline

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
try:
    from opcua import Client as OPCClient, ua
    from opcua.common.node import Node
except ImportError:
    logging.warning("OPC UA library not available")

try:
    import paho.mqtt.client as mqtt
except ImportError:
    logging.warning("MQTT library not available")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
from scipy import signal
from scipy.stats import zscore
import redis
from kafka import KafkaProducer, KafkaConsumer
import influxdb_client
from influxdb_client.client.write_api import SYNCHRONOUS

class DataQuality(Enum):
    """–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
    GOOD = "good"
    UNCERTAIN = "uncertain"
    BAD = "bad"
    SUBSTITUTE = "substitute"
    INITIAL = "initial"

class ConnectionStatus(Enum):
    """–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    CONNECTED = "connected"
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting"
    ERROR = "error"
    TIMEOUT = "timeout"

class AIModelType(Enum):
    """–¢–∏–ø—ã AI –º–æ–¥–µ–ª–µ–π"""
    CLASSIFICATION = "classification"
    REGRESSION = "regression"
    ANOMALY_DETECTION = "anomaly_detection"
    TIME_SERIES_FORECASTING = "time_series_forecasting"
    CLUSTERING = "clustering"
    REINFORCEMENT_LEARNING = "reinforcement_learning"

@dataclass
class SensorData:
    """–î–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞"""
    sensor_id: str
    timestamp: datetime
    value: Union[float, int, str, bool]
    quality: DataQuality
    unit: str = ""
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'sensor_id': self.sensor_id,
            'timestamp': self.timestamp.isoformat(),
            'value': self.value,
            'quality': self.quality.value,
            'unit': self.unit,
            'metadata': self.metadata
        }

@dataclass
class AIModelConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏"""
    model_id: str
    model_type: AIModelType
    input_sensors: List[str]
    output_parameters: List[str]
    preprocessing_config: Dict[str, Any] = field(default_factory=dict)
    model_parameters: Dict[str, Any] = field(default_factory=dict)
    update_frequency: int = 3600  # —Å–µ–∫—É–Ω–¥—ã
    batch_size: int = 100
    
class DataBuffer:
    """
    –ë—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    def __init__(self, max_size: int = 10000):
        self.max_size = max_size
        self.data = {}
        self.lock = threading.Lock()
    
    def add_data(self, sensor_data: SensorData):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä"""
        with self.lock:
            sensor_id = sensor_data.sensor_id
            
            if sensor_id not in self.data:
                self.data[sensor_id] = []
            
            self.data[sensor_id].append(sensor_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            if len(self.data[sensor_id]) > self.max_size:
                self.data[sensor_id] = self.data[sensor_id][-self.max_size:]
    
    def get_recent_data(self, sensor_id: str, count: int = 100) -> List[SensorData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        with self.lock:
            if sensor_id not in self.data:
                return []
            
            return self.data[sensor_id][-count:]
    
    def get_data_range(self, sensor_id: str, 
                      start_time: datetime, 
                      end_time: datetime) -> List[SensorData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        with self.lock:
            if sensor_id not in self.data:
                return []
            
            filtered_data = []
            for data_point in self.data[sensor_id]:
                if start_time <= data_point.timestamp <= end_time:
                    filtered_data.append(data_point)
            
            return filtered_data
    
    def get_sensors_list(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤"""
        with self.lock:
            return list(self.data.keys())
    
    def clear_sensor_data(self, sensor_id: str):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞"""
        with self.lock:
            if sensor_id in self.data:
                del self.data[sensor_id]

class OPCUAConnector:
    """
    –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è OPC UA
    """
    def __init__(self, server_url: str, data_buffer: DataBuffer):
        self.server_url = server_url
        self.data_buffer = data_buffer
        self.client = None
        self.connection_status = ConnectionStatus.DISCONNECTED
        self.subscribed_nodes = {}
        self.subscription = None
        
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OPC UA —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.connection_status = ConnectionStatus.CONNECTING
            self.client = OPCClient(self.server_url)
            await self.client.connect()
            
            self.connection_status = ConnectionStatus.CONNECTED
            logging.info(f"Connected to OPC UA server: {self.server_url}")
            return True
            
        except Exception as e:
            self.connection_status = ConnectionStatus.ERROR
            logging.error(f"Error connecting to OPC UA server: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.subscription:
                await self.subscription.delete()
            
            if self.client:
                await self.client.disconnect()
            
            self.connection_status = ConnectionStatus.DISCONNECTED
            logging.info("Disconnected from OPC UA server")
            
        except Exception as e:
            logging.error(f"Error disconnecting from OPC UA server: {e}")
    
    async def subscribe_to_node(self, node_id: str, sensor_id: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–∑–µ–ª OPC UA"""
        try:
            if not self.client or self.connection_status != ConnectionStatus.CONNECTED:
                logging.error("Not connected to OPC UA server")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not self.subscription:
                self.subscription = await self.client.create_subscription(500, self)
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∑–µ–ª
            node = self.client.get_node(node_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            class DataChangeHandler:
                def __init__(self, sensor_id: str, data_buffer: DataBuffer):
                    self.sensor_id = sensor_id
                    self.data_buffer = data_buffer
                
                def datachange_notification(self, node: Node, val, data):
                    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                        if data.monitored_item.Value.StatusCode.is_good():
                            quality = DataQuality.GOOD
                        elif data.monitored_item.Value.StatusCode.is_uncertain():
                            quality = DataQuality.UNCERTAIN
                        else:
                            quality = DataQuality.BAD
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
                        sensor_data = SensorData(
                            sensor_id=self.sensor_id,
                            timestamp=datetime.now(),
                            value=val,
                            quality=quality,
                            metadata={
                                'node_id': str(node.nodeid),
                                'status_code': str(data.monitored_item.Value.StatusCode)
                            }
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                        self.data_buffer.add_data(sensor_data)
                        
                    except Exception as e:
                        logging.error(f"Error processing OPC UA data change: {e}")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            handler = DataChangeHandler(sensor_id, self.data_buffer)
            await self.subscription.subscribe_data_change(node, handler)
            
            self.subscribed_nodes[sensor_id] = {
                'node_id': node_id,
                'node': node,
                'handler': handler
            }
            
            logging.info(f"Subscribed to OPC UA node {node_id} as sensor {sensor_id}")
            return True
            
        except Exception as e:
            logging.error(f"Error subscribing to OPC UA node {node_id}: {e}")
            return False
    
    async def read_node_value(self, node_id: str) -> Optional[Any]:
        """–ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∑–ª–∞"""
        try:
            if not self.client or self.connection_status != ConnectionStatus.CONNECTED:
                return None
            
            node = self.client.get_node(node_id)
            value = await node.read_value()
            
            return value
            
        except Exception as e:
            logging.error(f"Error reading OPC UA node {node_id}: {e}")
            return None

class MQTTConnector:
    """
    –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è MQTT
    """
    def __init__(self, broker_host: str, broker_port: int, data_buffer: DataBuffer):
        self.broker_host = broker_host
        self.broker_port = broker_port
        self.data_buffer = data_buffer
        self.client = None
        self.connection_status = ConnectionStatus.DISCONNECTED
        self.subscribed_topics = {}
        
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É"""
        try:
            self.connection_status = ConnectionStatus.CONNECTING
            
            self.client = mqtt.Client()
            self.client.on_connect = self._on_connect
            self.client.on_message = self._on_message
            self.client.on_disconnect = self._on_disconnect
            
            self.client.connect(self.broker_host, self.broker_port, 60)
            self.client.loop_start()
            
            # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            timeout = 10
            while self.connection_status == ConnectionStatus.CONNECTING and timeout > 0:
                time.sleep(0.1)
                timeout -= 0.1
            
            return self.connection_status == ConnectionStatus.CONNECTED
            
        except Exception as e:
            self.connection_status = ConnectionStatus.ERROR
            logging.error(f"Error connecting to MQTT broker: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞"""
        try:
            if self.client:
                self.client.loop_stop()
                self.client.disconnect()
            
            self.connection_status = ConnectionStatus.DISCONNECTED
            logging.info("Disconnected from MQTT broker")
            
        except Exception as e:
            logging.error(f"Error disconnecting from MQTT broker: {e}")
    
    def subscribe_to_topic(self, topic: str, sensor_id: str, 
                          data_parser: Optional[Callable] = None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MQTT —Ç–æ–ø–∏–∫"""
        try:
            if not self.client or self.connection_status != ConnectionStatus.CONNECTED:
                logging.error("Not connected to MQTT broker")
                return False
            
            self.client.subscribe(topic)
            
            self.subscribed_topics[topic] = {
                'sensor_id': sensor_id,
                'data_parser': data_parser or self._default_json_parser
            }
            
            logging.info(f"Subscribed to MQTT topic {topic} as sensor {sensor_id}")
            return True
            
        except Exception as e:
            logging.error(f"Error subscribing to MQTT topic {topic}: {e}")
            return False
    
    def publish_data(self, topic: str, data: Dict) -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ MQTT"""
        try:
            if not self.client or self.connection_status != ConnectionStatus.CONNECTED:
                logging.error("Not connected to MQTT broker")
                return False
            
            payload = json.dumps(data)
            result = self.client.publish(topic, payload)
            
            return result.rc == mqtt.MQTT_ERR_SUCCESS
            
        except Exception as e:
            logging.error(f"Error publishing to MQTT topic {topic}: {e}")
            return False
    
    def _on_connect(self, client, userdata, flags, rc):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if rc == 0:
            self.connection_status = ConnectionStatus.CONNECTED
            logging.info(f"Connected to MQTT broker {self.broker_host}:{self.broker_port}")
        else:
            self.connection_status = ConnectionStatus.ERROR
            logging.error(f"Failed to connect to MQTT broker, code: {rc}")
    
    def _on_message(self, client, userdata, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            topic = msg.topic
            
            if topic not in self.subscribed_topics:
                return
            
            topic_config = self.subscribed_topics[topic]
            sensor_id = topic_config['sensor_id']
            parser = topic_config['data_parser']
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            parsed_data = parser(msg.payload.decode())
            
            if parsed_data:
                sensor_data = SensorData(
                    sensor_id=sensor_id,
                    timestamp=datetime.now(),
                    value=parsed_data.get('value'),
                    quality=DataQuality(parsed_data.get('quality', 'good')),
                    unit=parsed_data.get('unit', ''),
                    metadata={
                        'topic': topic,
                        'raw_payload': msg.payload.decode()
                    }
                )
                
                self.data_buffer.add_data(sensor_data)
            
        except Exception as e:
            logging.error(f"Error processing MQTT message: {e}")
    
    def _on_disconnect(self, client, userdata, rc):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
        self.connection_status = ConnectionStatus.DISCONNECTED
        logging.info("Disconnected from MQTT broker")
    
    def _default_json_parser(self, payload: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–µ—Ä JSON –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            return json.loads(payload)
        except Exception as e:
            logging.error(f"Error parsing JSON payload: {e}")
            return None

class TimeSeriesDatabase:
    """
    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    """
    def __init__(self, connection_string: str):
        self.connection_string = connection_string
        self.client = None
        self.write_api = None
        self.query_api = None
        
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –î–ª—è InfluxDB
            if 'influxdb' in self.connection_string.lower():
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                # –§–æ—Ä–º–∞—Ç: influxdb://token@host:port/org/bucket
                parts = self.connection_string.replace('influxdb://', '').split('/')
                token_host = parts[0].split('@')
                token = token_host[0]
                host_port = token_host[1].split(':')
                host = host_port[0]
                port = int(host_port[1]) if len(host_port) > 1 else 8086
                org = parts[1]
                bucket = parts[2]
                
                self.client = influxdb_client.InfluxDBClient(
                    url=f"http://{host}:{port}",
                    token=token,
                    org=org
                )
                
                self.write_api = self.client.write_api(write_options=SYNCHRONOUS)
                self.query_api = self.client.query_api()
                
                self.bucket = bucket
                self.org = org
                
                logging.info(f"Connected to InfluxDB: {host}:{port}")
                return True
            
            return False
            
        except Exception as e:
            logging.error(f"Error connecting to time series database: {e}")
            return False
    
    def write_sensor_data(self, sensor_data: SensorData) -> bool:
        """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞"""
        try:
            if not self.write_api:
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è InfluxDB
            point = influxdb_client.Point("sensor_data") \\
                .tag("sensor_id", sensor_data.sensor_id) \\
                .tag("quality", sensor_data.quality.value) \\
                .tag("unit", sensor_data.unit) \\
                .field("value", float(sensor_data.value) if isinstance(sensor_data.value, (int, float)) else str(sensor_data.value)) \\
                .time(sensor_data.timestamp)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ç–µ–≥–∏
            for key, value in sensor_data.metadata.items():
                point = point.tag(key, str(value))
            
            self.write_api.write(bucket=self.bucket, org=self.org, record=point)
            return True
            
        except Exception as e:
            logging.error(f"Error writing sensor data to database: {e}")
            return False
    
    def query_sensor_data(self, sensor_id: str, 
                         start_time: datetime, 
                         end_time: datetime) -> pd.DataFrame:
        """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞"""
        try:
            if not self.query_api:
                return pd.DataFrame()
            
            query = f'''
                from(bucket: "{self.bucket}")
                |> range(start: {start_time.isoformat()}Z, stop: {end_time.isoformat()}Z)
                |> filter(fn: (r) => r["_measurement"] == "sensor_data")
                |> filter(fn: (r) => r["sensor_id"] == "{sensor_id}")
                |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
            '''
            
            result = self.query_api.query_data_frame(query, org=self.org)
            
            if not result.empty:
                result['_time'] = pd.to_datetime(result['_time'])
                result = result.sort_values('_time')
            
            return result
            
        except Exception as e:
            logging.error(f"Error querying sensor data: {e}")
            return pd.DataFrame()
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.client:
            self.client.close()

class AIModelManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä AI –º–æ–¥–µ–ª–µ–π
    """
    def __init__(self, data_buffer: DataBuffer):
        self.data_buffer = data_buffer
        self.models = {}
        self.model_configs = {}
        self.scalers = {}
        self.model_threads = {}
        self.running_models = set()
        
    def register_model(self, config: AIModelConfig) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏"""
        try:
            self.model_configs[config.model_id] = config
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–µ–π–ª–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
            if config.preprocessing_config.get('scaling', False):
                scaler_type = config.preprocessing_config.get('scaler_type', 'standard')
                if scaler_type == 'standard':
                    self.scalers[config.model_id] = StandardScaler()
                elif scaler_type == 'minmax':
                    self.scalers[config.model_id] = MinMaxScaler()
            
            logging.info(f"Registered AI model: {config.model_id}")
            return True
            
        except Exception as e:
            logging.error(f"Error registering AI model {config.model_id}: {e}")
            return False
    
    def load_model(self, model_id: str, model_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            config = self.model_configs.get(model_id)
            if not config:
                logging.error(f"Model config not found: {model_id}")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if config.model_type == AIModelType.ANOMALY_DETECTION:
                # –î–ª—è sklearn –º–æ–¥–µ–ª–µ–π
                import joblib
                model = joblib.load(model_path)
                self.models[model_id] = model
                
            elif config.model_type in [AIModelType.CLASSIFICATION, AIModelType.REGRESSION]:
                # –î–ª—è TensorFlow/Keras –º–æ–¥–µ–ª–µ–π
                if model_path.endswith('.h5') or model_path.endswith('.keras'):
                    model = tf.keras.models.load_model(model_path)
                    self.models[model_id] = model
                # –î–ª—è PyTorch –º–æ–¥–µ–ª–µ–π
                elif model_path.endswith('.pth'):
                    model = torch.load(model_path)
                    self.models[model_id] = model
                # –î–ª—è sklearn –º–æ–¥–µ–ª–µ–π
                else:
                    import joblib
                    model = joblib.load(model_path)
                    self.models[model_id] = model
            
            logging.info(f"Loaded AI model: {model_id} from {model_path}")
            return True
            
        except Exception as e:
            logging.error(f"Error loading AI model {model_id}: {e}")
            return False
    
    def start_model_inference(self, model_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏"""
        try:
            if model_id not in self.models:
                logging.error(f"Model not loaded: {model_id}")
                return False
            
            if model_id in self.running_models:
                logging.warning(f"Model already running: {model_id}")
                return True
            
            config = self.model_configs[model_id]
            
            def inference_loop():
                """–¶–∏–∫–ª –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏"""
                while model_id in self.running_models:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤
                        input_data = self._prepare_input_data(model_id)
                        
                        if input_data is not None and len(input_data) > 0:
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                            prediction = self._run_inference(model_id, input_data)
                            
                            if prediction is not None:
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                self._process_prediction(model_id, prediction, input_data)
                        
                        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        time.sleep(config.update_frequency)
                        
                    except Exception as e:
                        logging.error(f"Error in inference loop for {model_id}: {e}")
                        time.sleep(config.update_frequency)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.running_models.add(model_id)
            thread = threading.Thread(target=inference_loop, daemon=True)
            thread.start()
            self.model_threads[model_id] = thread
            
            logging.info(f"Started inference for model: {model_id}")
            return True
            
        except Exception as e:
            logging.error(f"Error starting model inference {model_id}: {e}")
            return False
    
    def stop_model_inference(self, model_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏"""
        try:
            if model_id in self.running_models:
                self.running_models.remove(model_id)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                if model_id in self.model_threads:
                    thread = self.model_threads[model_id]
                    thread.join(timeout=5.0)
                    del self.model_threads[model_id]
                
                logging.info(f"Stopped inference for model: {model_id}")
            
        except Exception as e:
            logging.error(f"Error stopping model inference {model_id}: {e}")
    
    def _prepare_input_data(self, model_id: str) -> Optional[np.ndarray]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏"""
        try:
            config = self.model_configs[model_id]
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
            all_sensor_data = []
            
            for sensor_id in config.input_sensors:
                recent_data = self.data_buffer.get_recent_data(sensor_id, config.batch_size)
                
                if not recent_data:
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                values = []
                for data_point in recent_data:
                    if data_point.quality == DataQuality.GOOD:
                        if isinstance(data_point.value, (int, float)):
                            values.append(float(data_point.value))
                
                if values:
                    all_sensor_data.append(values)
            
            if not all_sensor_data:
                return None
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–µ
            min_length = min(len(data) for data in all_sensor_data)
            if min_length == 0:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
            input_matrix = np.array([data[-min_length:] for data in all_sensor_data]).T
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
            if model_id in self.scalers:
                scaler = self.scalers[model_id]
                
                # –ï—Å–ª–∏ —Å–∫–µ–π–ª–µ—Ä –Ω–µ –æ–±—É—á–µ–Ω, –æ–±—É—á–∞–µ–º –µ–≥–æ
                if not hasattr(scaler, 'scale_'):
                    scaler.fit(input_matrix)
                
                input_matrix = scaler.transform(input_matrix)
            
            return input_matrix
            
        except Exception as e:
            logging.error(f"Error preparing input data for {model_id}: {e}")
            return None
    
    def _run_inference(self, model_id: str, input_data: np.ndarray) -> Optional[np.ndarray]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞"""
        try:
            model = self.models[model_id]
            config = self.model_configs[model_id]
            
            if config.model_type == AIModelType.ANOMALY_DETECTION:
                # –î–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π
                if hasattr(model, 'predict'):
                    prediction = model.predict(input_data)
                elif hasattr(model, 'decision_function'):
                    prediction = model.decision_function(input_data)
                else:
                    return None
                    
            elif config.model_type in [AIModelType.CLASSIFICATION, AIModelType.REGRESSION]:
                # –î–ª—è TensorFlow/Keras –º–æ–¥–µ–ª–µ–π
                if hasattr(model, 'predict'):
                    prediction = model.predict(input_data)
                # –î–ª—è PyTorch –º–æ–¥–µ–ª–µ–π
                elif hasattr(model, 'forward'):
                    with torch.no_grad():
                        input_tensor = torch.FloatTensor(input_data)
                        prediction = model(input_tensor).numpy()
                else:
                    return None
            
            else:
                logging.warning(f"Unsupported model type: {config.model_type}")
                return None
            
            return prediction
            
        except Exception as e:
            logging.error(f"Error running inference for {model_id}: {e}")
            return None
    
    def _process_prediction(self, model_id: str, prediction: np.ndarray, input_data: np.ndarray):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        try:
            config = self.model_configs[model_id]
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            result = {
                'model_id': model_id,
                'timestamp': datetime.now().isoformat(),
                'prediction': prediction.tolist() if isinstance(prediction, np.ndarray) else prediction,
                'input_shape': input_data.shape,
                'model_type': config.model_type.value
            }
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π
            if config.model_type == AIModelType.ANOMALY_DETECTION:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
                if isinstance(prediction, np.ndarray):
                    anomaly_count = np.sum(prediction == -1) if prediction.dtype == int else np.sum(prediction < 0)
                    anomaly_percentage = anomaly_count / len(prediction) * 100
                    
                    result['anomaly_count'] = int(anomaly_count)
                    result['anomaly_percentage'] = float(anomaly_percentage)
                    result['status'] = 'anomaly_detected' if anomaly_percentage > 10 else 'normal'
            
            elif config.model_type == AIModelType.CLASSIFICATION:
                # –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
                if isinstance(prediction, np.ndarray) and prediction.ndim == 2:
                    predicted_classes = np.argmax(prediction, axis=1)
                    max_probabilities = np.max(prediction, axis=1)
                    
                    result['predicted_classes'] = predicted_classes.tolist()
                    result['max_probabilities'] = max_probabilities.tolist()
                    result['mean_confidence'] = float(np.mean(max_probabilities))
            
            elif config.model_type == AIModelType.REGRESSION:
                # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if isinstance(prediction, np.ndarray):
                    result['mean_prediction'] = float(np.mean(prediction))
                    result['std_prediction'] = float(np.std(prediction))
                    result['min_prediction'] = float(np.min(prediction))
                    result['max_prediction'] = float(np.max(prediction))
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logging.info(f"Model {model_id} prediction: {result}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã
            # –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ MQTT, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏–ª–∏ —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
            
        except Exception as e:
            logging.error(f"Error processing prediction for {model_id}: {e}")
    
    def get_model_status(self, model_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
        try:
            status = {
                'model_id': model_id,
                'registered': model_id in self.model_configs,
                'loaded': model_id in self.models,
                'running': model_id in self.running_models
            }
            
            if model_id in self.model_configs:
                config = self.model_configs[model_id]
                status['config'] = {
                    'model_type': config.model_type.value,
                    'input_sensors': config.input_sensors,
                    'output_parameters': config.output_parameters,
                    'update_frequency': config.update_frequency,
                    'batch_size': config.batch_size
                }
            
            return status
            
        except Exception as e:
            logging.error(f"Error getting model status {model_id}: {e}")
            return {'error': str(e)}
    
    def stop_all_models(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        for model_id in list(self.running_models):
            self.stop_model_inference(model_id)

class IntegratedAIPlatform:
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è AI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    """
    def __init__(self, config: Dict):
        self.config = config
        self.data_buffer = DataBuffer(config.get('buffer_size', 10000))
        self.connectors = {}
        self.ai_model_manager = AIModelManager(self.data_buffer)
        self.time_series_db = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()
    
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            if 'time_series_db' in self.config:
                self.time_series_db = TimeSeriesDatabase(self.config['time_series_db'])
                self.time_series_db.connect()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
            if 'opcua_servers' in self.config:
                for server_config in self.config['opcua_servers']:
                    connector_id = server_config['id']
                    connector = OPCUAConnector(server_config['url'], self.data_buffer)
                    self.connectors[connector_id] = connector
            
            if 'mqtt_brokers' in self.config:
                for broker_config in self.config['mqtt_brokers']:
                    connector_id = broker_config['id']
                    connector = MQTTConnector(
                        broker_config['host'], 
                        broker_config['port'], 
                        self.data_buffer
                    )
                    self.connectors[connector_id] = connector
            
            logging.info("AI Platform components initialized")
            
        except Exception as e:
            logging.error(f"Error initializing AI platform components: {e}")
    
    async def start_platform(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            for connector_id, connector in self.connectors.items():
                if isinstance(connector, OPCUAConnector):
                    success = await connector.connect()
                elif isinstance(connector, MQTTConnector):
                    success = connector.connect()
                else:
                    success = False
                
                if success:
                    logging.info(f"Connected connector: {connector_id}")
                else:
                    logging.error(f"Failed to connect connector: {connector_id}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ
            await self._setup_data_subscriptions()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            if self.time_series_db:
                self._start_data_persistence()
            
            logging.info("AI Platform started successfully")
            return True
            
        except Exception as e:
            logging.error(f"Error starting AI platform: {e}")
            return False
    
    async def _setup_data_subscriptions(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ü–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if 'data_subscriptions' in self.config:
                for subscription in self.config['data_subscriptions']:
                    connector_id = subscription['connector_id']
                    sensor_id = subscription['sensor_id']
                    
                    if connector_id not in self.connectors:
                        logging.error(f"Connector not found: {connector_id}")
                        continue
                    
                    connector = self.connectors[connector_id]
                    
                    if isinstance(connector, OPCUAConnector):
                        node_id = subscription['node_id']
                        await connector.subscribe_to_node(node_id, sensor_id)
                        
                    elif isinstance(connector, MQTTConnector):
                        topic = subscription['topic']
                        parser = subscription.get('parser')
                        connector.subscribe_to_topic(topic, sensor_id, parser)
            
        except Exception as e:
            logging.error(f"Error setting up data subscriptions: {e}")
    
    def _start_data_persistence(self):
        """–ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        def persistence_loop():
            """–¶–∏–∫–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
            while True:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—á–∏–∫–∏
                    sensors = self.data_buffer.get_sensors_list()
                    
                    for sensor_id in sensors:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
                        recent_data = self.data_buffer.get_recent_data(sensor_id, 100)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        for data_point in recent_data:
                            self.time_series_db.write_sensor_data(data_point)
                    
                    time.sleep(60)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    
                except Exception as e:
                    logging.error(f"Error in data persistence loop: {e}")
                    time.sleep(60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=persistence_loop, daemon=True)
        thread.start()
        
        logging.info("Started data persistence")
    
    def register_ai_model(self, config: AIModelConfig) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏"""
        return self.ai_model_manager.register_model(config)
    
    def load_ai_model(self, model_id: str, model_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ AI –º–æ–¥–µ–ª–∏"""
        return self.ai_model_manager.load_model(model_id, model_path)
    
    def start_ai_model(self, model_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫ AI –º–æ–¥–µ–ª–∏"""
        return self.ai_model_manager.start_model_inference(model_id)
    
    def stop_ai_model(self, model_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI –º–æ–¥–µ–ª–∏"""
        self.ai_model_manager.stop_model_inference(model_id)
    
    def get_platform_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            status = {
                'timestamp': datetime.now().isoformat(),
                'connectors': {},
                'data_buffer': {
                    'sensors_count': len(self.data_buffer.get_sensors_list()),
                    'sensors': self.data_buffer.get_sensors_list()
                },
                'ai_models': {},
                'time_series_db': self.time_series_db is not None
            }
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
            for connector_id, connector in self.connectors.items():
                if hasattr(connector, 'connection_status'):
                    status['connectors'][connector_id] = {
                        'type': type(connector).__name__,
                        'status': connector.connection_status.value
                    }
            
            # –°—Ç–∞—Ç—É—Å AI –º–æ–¥–µ–ª–µ–π
            for model_id in self.ai_model_manager.model_configs.keys():
                status['ai_models'][model_id] = self.ai_model_manager.get_model_status(model_id)
            
            return status
            
        except Exception as e:
            logging.error(f"Error getting platform status: {e}")
            return {'error': str(e)}
    
    def get_sensor_data(self, sensor_id: str, count: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞"""
        try:
            recent_data = self.data_buffer.get_recent_data(sensor_id, count)
            return [data.to_dict() for data in recent_data]
            
        except Exception as e:
            logging.error(f"Error getting sensor data for {sensor_id}: {e}")
            return []
    
    async def stop_platform(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AI –º–æ–¥–µ–ª–∏
            self.ai_model_manager.stop_all_models()
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            for connector_id, connector in self.connectors.items():
                if isinstance(connector, OPCUAConnector):
                    await connector.disconnect()
                elif isinstance(connector, MQTTConnector):
                    connector.disconnect()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            if self.time_series_db:
                self.time_series_db.close()
            
            logging.info("AI Platform stopped")
            
        except Exception as e:
            logging.error(f"Error stopping AI platform: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    platform_config = {
        'buffer_size': 10000,
        'time_series_db': 'influxdb://token@localhost:8086/myorg/mybucket',
        'opcua_servers': [
            {
                'id': 'main_server',
                'url': 'opc.tcp://localhost:4840'
            }
        ],
        'mqtt_brokers': [
            {
                'id': 'main_broker',
                'host': 'localhost',
                'port': 1883
            }
        ],
        'data_subscriptions': [
            {
                'connector_id': 'main_server',
                'sensor_id': 'temperature_01',
                'node_id': 'ns=2;i=2'
            },
            {
                'connector_id': 'main_broker',
                'sensor_id': 'pressure_01',
                'topic': 'sensors/pressure/01'
            }
        ]
    }
    
    async def main():
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        platform = IntegratedAIPlatform(platform_config)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            success = await platform.start_platform()
            
            if success:
                print("Platform started successfully")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º AI –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
                anomaly_config = AIModelConfig(
                    model_id='temperature_anomaly_detector',
                    model_type=AIModelType.ANOMALY_DETECTION,
                    input_sensors=['temperature_01'],
                    output_parameters=['anomaly_score', 'is_anomaly'],
                    preprocessing_config={
                        'scaling': True,
                        'scaler_type': 'standard'
                    },
                    update_frequency=30,  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    batch_size=100
                )
                
                platform.register_ai_model(anomaly_config)
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                # platform.load_ai_model('temperature_anomaly_detector', 'models/temp_anomaly.joblib')
                # platform.start_ai_model('temperature_anomaly_detector')
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                status = platform.get_platform_status()
                print("Platform Status:")
                print(json.dumps(status, indent=2))
                
                # –†–∞–±–æ—Ç–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                print("Platform running... Press Ctrl+C to stop")
                
                try:
                    while True:
                        await asyncio.sleep(10)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤
                        for sensor_id in ['temperature_01', 'pressure_01']:
                            data = platform.get_sensor_data(sensor_id, 5)
                            if data:
                                print(f"\\nSensor {sensor_id} latest data:")
                                for point in data[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç–æ—á–∫–∏
                                    print(f"  {point['timestamp']}: {point['value']} {point['unit']} ({point['quality']})")
                        
                except KeyboardInterrupt:
                    print("\\nStopping platform...")
            
            else:
                print("Failed to start platform")
        
        finally:
            await platform.stop_platform()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
    asyncio.run(main())
\`\`\`

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

### –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

–í –†–æ—Å—Å–∏–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:

**–ì–û–°–¢ –† 51841** - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã:
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º —Å–µ—Ç—è–º
- –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

**–ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 62264** - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ–º:
- –ú–æ–¥–µ–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
- –û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤

**–ì–û–°–¢ –† 51901.15** - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏:
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–∞–∑–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
- –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

\`\`\`python
class RussianIndustrialIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
    """
    def __init__(self):
        self.supported_systems = {
            'SCADA': ['TRACE MODE', 'MasterSCADA', '–û–í–ï–ù', '–≠–õ–ï–ö–°'],
            'MES': ['–§–æ–±–æ—Å', '–õ–û–¶–ú–ê–ù:MES', '–ì–∞–ª–∞–∫—Ç–∏–∫–∞ MES'],
            'ERP': ['1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '–ì–∞–ª–∞–∫—Ç–∏–∫–∞ ERP', '–ë–û–°–°-–ö–∞–¥—Ä–æ–≤–∏–∫'],
            'PLCs': ['–û–í–ï–ù –ü–õ–ö', '–ú–ó–¢–ê', '–°–µ–≥–Ω–µ—Ç–∏–∫—Å', '–≠–õ–ï–ú–ï–†']
        }
        
        self.protocol_adapters = {}
        self.data_converters = {}
    
    def create_trace_mode_adapter(self, server_config: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è TRACE MODE"""
        try:
            adapter_config = {
                'type': 'trace_mode',
                'connection': {
                    'host': server_config.get('host', 'localhost'),
                    'port': server_config.get('port', 1234),
                    'database': server_config.get('database', 'RTDB')
                },
                'data_mapping': {
                    'tags': server_config.get('tags', []),
                    'update_rate': server_config.get('update_rate', 1000)
                }
            }
            
            return adapter_config
            
        except Exception as e:
            logging.error(f"Error creating TRACE MODE adapter: {e}")
            return {}
    
    def create_oven_plc_adapter(self, plc_config: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è –ü–õ–ö –û–í–ï–ù"""
        try:
            adapter_config = {
                'type': 'oven_plc',
                'connection': {
                    'protocol': plc_config.get('protocol', 'modbus_tcp'),
                    'host': plc_config.get('host', '192.168.1.100'),
                    'port': plc_config.get('port', 502),
                    'unit_id': plc_config.get('unit_id', 1)
                },
                'registers': plc_config.get('registers', []),
                'polling_interval': plc_config.get('polling_interval', 1000)
            }
            
            return adapter_config
            
        except Exception as e:
            logging.error(f"Error creating OVEN PLC adapter: {e}")
            return {}
    
    def create_data_converter(self, source_format: str, target_format: str) -> Callable:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        def converter(data: Any) -> Any:
            try:
                if source_format == 'trace_mode' and target_format == 'ai_platform':
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ TRACE MODE
                    return {
                        'sensor_id': data.get('TagName', 'unknown'),
                        'timestamp': datetime.fromisoformat(data.get('TimeStamp', datetime.now().isoformat())),
                        'value': data.get('Value', 0),
                        'quality': DataQuality.GOOD if data.get('Quality', 0) == 192 else DataQuality.BAD,
                        'unit': data.get('Unit', ''),
                        'metadata': {
                            'source': 'trace_mode',
                            'original_quality': data.get('Quality', 0)
                        }
                    }
                
                elif source_format == 'oven_plc' and target_format == 'ai_platform':
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ü–õ–ö –û–í–ï–ù
                    return {
                        'sensor_id': f"oven_plc_{data.get('register', 'unknown')}",
                        'timestamp': datetime.now(),
                        'value': data.get('value', 0),
                        'quality': DataQuality.GOOD,
                        'unit': data.get('unit', ''),
                        'metadata': {
                            'source': 'oven_plc',
                            'register': data.get('register', 0),
                            'function_code': data.get('function_code', 3)
                        }
                    }
                
                return data
                
            except Exception as e:
                logging.error(f"Error converting data from {source_format} to {target_format}: {e}")
                return None
        
        return converter
    
    def validate_gost_compliance(self, integration_config: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"""
        try:
            compliance_report = {
                'gost_r_51841': {
                    'network_protocols': False,
                    'data_exchange': False,
                    'controller_integration': False
                },
                'gost_r_iso_62264': {
                    'enterprise_integration': False,
                    'data_models': False,
                    'interface_standardization': False
                },
                'overall_compliance': 0.0
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ì–û–°–¢ –† 51841
            if 'network_protocols' in integration_config:
                supported_protocols = ['modbus', 'profibus', 'ethernet_ip']
                used_protocols = integration_config['network_protocols']
                
                if any(protocol in supported_protocols for protocol in used_protocols):
                    compliance_report['gost_r_51841']['network_protocols'] = True
            
            if 'data_exchange' in integration_config:
                compliance_report['gost_r_51841']['data_exchange'] = True
            
            if 'plc_integration' in integration_config:
                compliance_report['gost_r_51841']['controller_integration'] = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ì–û–°–¢ –† –ò–°–û/–ú–≠–ö 62264
            if 'enterprise_systems' in integration_config:
                compliance_report['gost_r_iso_62264']['enterprise_integration'] = True
            
            if 'data_models' in integration_config:
                compliance_report['gost_r_iso_62264']['data_models'] = True
            
            if 'standardized_interfaces' in integration_config:
                compliance_report['gost_r_iso_62264']['interface_standardization'] = True
            
            # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            total_checks = 6
            passed_checks = sum([
                sum(compliance_report['gost_r_51841'].values()),
                sum(compliance_report['gost_r_iso_62264'].values())
            ])
            
            compliance_report['overall_compliance'] = passed_checks / total_checks
            
            return compliance_report
            
        except Exception as e:
            logging.error(f"Error validating GOST compliance: {e}")
            return {'error': str(e)}

# –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
class IndustrialSecurityManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    def __init__(self):
        self.security_policies = {}
        self.access_control = {}
        self.audit_log = []
        
    def create_security_policy(self, policy_name: str, policy_config: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            policy = {
                'name': policy_name,
                'encryption': policy_config.get('encryption', True),
                'authentication': policy_config.get('authentication', 'certificate'),
                'authorization': policy_config.get('authorization', 'role_based'),
                'data_integrity': policy_config.get('data_integrity', True),
                'audit_logging': policy_config.get('audit_logging', True),
                'network_segmentation': policy_config.get('network_segmentation', True)
            }
            
            self.security_policies[policy_name] = policy
            
            logging.info(f"Created security policy: {policy_name}")
            
        except Exception as e:
            logging.error(f"Error creating security policy {policy_name}: {e}")
    
    def validate_connection_security(self, connection_config: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            security_score = 0
            max_score = 5
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            if connection_config.get('encryption', False):
                security_score += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if connection_config.get('authentication'):
                security_score += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if connection_config.get('authorization'):
                security_score += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if connection_config.get('data_integrity', False):
                security_score += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏—Ç–∞
            if connection_config.get('audit_logging', False):
                security_score += 1
            
            # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–æ >= 80% –±–∞–ª–ª–æ–≤
            is_secure = security_score / max_score >= 0.8
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞
            audit_entry = {
                'timestamp': datetime.now().isoformat(),
                'action': 'connection_security_validation',
                'connection': connection_config.get('id', 'unknown'),
                'security_score': security_score,
                'max_score': max_score,
                'is_secure': is_secure
            }
            
            self.audit_log.append(audit_entry)
            
            return is_secure
            
        except Exception as e:
            logging.error(f"Error validating connection security: {e}")
            return False
    
    def get_security_recommendations(self, current_config: Dict) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        recommendations = []
        
        try:
            if not current_config.get('encryption', False):
                recommendations.append("–í–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (TLS/SSL)")
            
            if not current_config.get('authentication'):
                recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–ª–∏ –ø–∞—Ä–æ–ª–∏)")
            
            if not current_config.get('authorization'):
                recommendations.append("–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π")
            
            if not current_config.get('data_integrity', False):
                recommendations.append("–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
            
            if not current_config.get('audit_logging', False):
                recommendations.append("–í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏—Ç –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
            if not current_config.get('network_segmentation', False):
                recommendations.append("–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é —Å–µ—Ç–∏")
            
            if not current_config.get('firewall_rules'):
                recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –º–µ–∂—Å–µ—Ç–µ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞")
            
            if not current_config.get('intrusion_detection', False):
                recommendations.append("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ç–æ—Ä–∂–µ–Ω–∏–π")
            
        except Exception as e:
            logging.error(f"Error generating security recommendations: {e}")
        
        return recommendations
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ —Å AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.

### –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞

1. **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã** - —Å–ª–æ–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
2. **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã** - OPC UA, MQTT, Modbus, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
3. **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏** - –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è, –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
4. **AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π, –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
5. **–†–æ—Å—Å–∏–π—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞** - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è

- **DataBuffer** - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- **OPCUAConnector** - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OPC UA —Å–µ—Ä–≤–µ—Ä–∞–º–∏
- **MQTTConnector** - –ª–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è IoT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
- **AIModelManager** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –º–æ–¥–µ–ª—è–º–∏ –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–æ–º
- **IntegratedAIPlatform** - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- **TimeSeriesDatabase** - —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- **–ë–µ—Å—à–æ–≤–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é** - —Å–≤—è–∑—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤ —Å AI-–∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
- **–û–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏** - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—ã—Å—è—á –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–º–æ–¥–µ–ª–µ–π
- **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å** - –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –∑–∞—â–∏—Ç–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏—Å—Ç–µ–º
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º** - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç - —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç –≤—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ!
    `,
  },


  43: {
    title: "–ü—Ä–∞–∫—Ç–∏–∫–∞ - –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI",
    duration: "240 –º–∏–Ω",
    type: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    content: `
# –ü—Ä–∞–∫—Ç–∏–∫–∞ - –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI

## –í–≤–µ–¥–µ–Ω–∏–µ

–í —ç—Ç–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–∫–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç –≤—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å AI-–º–æ–¥–µ–ª—è–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:

**–£—Ä–æ–≤–µ–Ω—å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:**
- –°–∏–º—É–ª—è—Ç–æ—Ä—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
- Modbus RTU/TCP —Å–µ—Ä–≤–µ—Ä—ã
- OPC UA —Å–µ—Ä–≤–µ—Ä—ã
- MQTT –±—Ä–æ–∫–µ—Ä—ã

**–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
- –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
- –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö

**–£—Ä–æ–≤–µ–Ω—å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –º–æ–¥–µ–ª–µ–π
- –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

**–£—Ä–æ–≤–µ–Ω—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:**
- Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –ì—Ä–∞—Ñ–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
- –î–∞—à–±–æ—Ä–¥—ã AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏
- –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π

\`\`\`python
import asyncio
import aiohttp
import json
import time
import logging
import threading
import queue
import sqlite3
import random
import math
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union, Callable, Any, Tuple
from dataclasses import dataclass, field, asdict
from enum import Enum
from concurrent.futures import ThreadPoolExecutor, as_completed
import numpy as np
import pandas as pd
from flask import Flask, render_template, jsonify, request
from flask_socketio import SocketIO, emit
import plotly.graph_objs as go
import plotly.utils

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è ML
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.ensemble import IsolationForest, RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import joblib

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
from scipy import signal
from scipy.stats import zscore
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class SensorType(Enum):
    """–¢–∏–ø—ã –¥–∞—Ç—á–∏–∫–æ–≤"""
    TEMPERATURE = "temperature"
    PRESSURE = "pressure"
    FLOW = "flow"
    LEVEL = "level"
    VIBRATION = "vibration"
    CURRENT = "current"
    VOLTAGE = "voltage"
    POWER = "power"

class DataQuality(Enum):
    """–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
    GOOD = "good"
    UNCERTAIN = "uncertain"
    BAD = "bad"
    SUBSTITUTE = "substitute"

class AlarmLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ç—Ä–µ–≤–æ–≥"""
    INFO = "info"
    WARNING = "warning"
    ALARM = "alarm"
    CRITICAL = "critical"

@dataclass
class SensorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞"""
    sensor_id: str
    sensor_type: SensorType
    name: str
    unit: str
    min_value: float
    max_value: float
    normal_range: Tuple[float, float]
    warning_range: Tuple[float, float]
    alarm_range: Tuple[float, float]
    sampling_rate: float = 1.0  # –ì—Ü
    noise_level: float = 0.01
    drift_rate: float = 0.001
    location: str = ""
    description: str = ""

@dataclass
class SensorReading:
    """–ü–æ–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞"""
    sensor_id: str
    timestamp: datetime
    value: float
    quality: DataQuality
    unit: str
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict:
        return {
            'sensor_id': self.sensor_id,
            'timestamp': self.timestamp.isoformat(),
            'value': self.value,
            'quality': self.quality.value,
            'unit': self.unit,
            'metadata': self.metadata
        }

@dataclass
class AlarmEvent:
    """–°–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–≤–æ–≥–∏"""
    alarm_id: str
    sensor_id: str
    timestamp: datetime
    level: AlarmLevel
    message: str
    value: float
    threshold: float
    acknowledged: bool = False
    
    def to_dict(self) -> Dict:
        return {
            'alarm_id': self.alarm_id,
            'sensor_id': self.sensor_id,
            'timestamp': self.timestamp.isoformat(),
            'level': self.level.value,
            'message': self.message,
            'value': self.value,
            'threshold': self.threshold,
            'acknowledged': self.acknowledged
        }

class IndustrialSensorSimulator:
    """
    –°–∏–º—É–ª—è—Ç–æ—Ä –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
    """
    def __init__(self, config: SensorConfig):
        self.config = config
        self.current_value = (config.min_value + config.max_value) / 2
        self.drift_accumulator = 0.0
        self.last_update = datetime.now()
        self.is_running = False
        self.thread = None
        self.callbacks = []
        
    def add_callback(self, callback: Callable[[SensorReading], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.callbacks.append(callback)
    
    def start_simulation(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        if self.is_running:
            return
        
        self.is_running = True
        self.thread = threading.Thread(target=self._simulation_loop, daemon=True)
        self.thread.start()
        
        logging.info(f"Started simulation for sensor {self.config.sensor_id}")
    
    def stop_simulation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.is_running = False
        if self.thread:
            self.thread.join(timeout=2.0)
        
        logging.info(f"Stopped simulation for sensor {self.config.sensor_id}")
    
    def _simulation_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏"""
        while self.is_running:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                reading = self._generate_reading()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                for callback in self.callbacks:
                    try:
                        callback(reading)
                    except Exception as e:
                        logging.error(f"Error in sensor callback: {e}")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                sleep_time = 1.0 / self.config.sampling_rate
                time.sleep(sleep_time)
                
            except Exception as e:
                logging.error(f"Error in simulation loop for {self.config.sensor_id}: {e}")
                time.sleep(1.0)
    
    def _generate_reading(self) -> SensorReading:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞"""
        now = datetime.now()
        dt = (now - self.last_update).total_seconds()
        self.last_update = now
        
        # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
        base_value = self._get_base_value(now)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–µ–π—Ñ
        self.drift_accumulator += self.config.drift_rate * dt * random.uniform(-1, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        noise = random.gauss(0, self.config.noise_level * (self.config.max_value - self.config.min_value))
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.current_value = base_value + self.drift_accumulator + noise
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        self.current_value = max(self.config.min_value, 
                               min(self.config.max_value, self.current_value))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        quality = self._determine_quality()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–µ
        reading = SensorReading(
            sensor_id=self.config.sensor_id,
            timestamp=now,
            value=self.current_value,
            quality=quality,
            unit=self.config.unit,
            metadata={
                'sensor_type': self.config.sensor_type.value,
                'location': self.config.location,
                'drift': self.drift_accumulator,
                'noise_level': abs(noise)
            }
        )
        
        return reading
    
    def _get_base_value(self, timestamp: datetime) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤
        if self.config.sensor_type == SensorType.TEMPERATURE:
            # –°—É—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            hour = timestamp.hour
            daily_cycle = math.sin(2 * math.pi * (hour - 6) / 24) * 0.2
            base = (self.config.min_value + self.config.max_value) / 2
            return base + daily_cycle * (self.config.max_value - self.config.min_value)
        
        elif self.config.sensor_type == SensorType.PRESSURE:
            # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è
            minutes = timestamp.hour * 60 + timestamp.minute
            cycle = math.sin(2 * math.pi * minutes / (4 * 60)) * 0.1  # 4-—á–∞—Å–æ–≤–æ–π —Ü–∏–∫–ª
            base = (self.config.min_value + self.config.max_value) / 2
            return base + cycle * (self.config.max_value - self.config.min_value)
        
        elif self.config.sensor_type == SensorType.VIBRATION:
            # –°–ª—É—á–∞–π–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏
            if random.random() < 0.05:  # 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Å–ø–ª–µ—Å–∫–∞
                return self.config.max_value * 0.8
            else:
                return self.config.min_value + (self.config.max_value - self.config.min_value) * 0.1
        
        else:
            # –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
            base = (self.config.min_value + self.config.max_value) / 2
            variation = math.sin(time.time() / 60) * 0.1  # –ú–∏–Ω—É—Ç–Ω—ã–π —Ü–∏–∫–ª
            return base + variation * (self.config.max_value - self.config.min_value)
    
    def _determine_quality(self) -> DataQuality:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –ò–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–æ—Ö–∏–µ –¥–∞–Ω–Ω—ã–µ
        rand = random.random()
        
        if rand < 0.02:  # 2% –ø–ª–æ—Ö–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            return DataQuality.BAD
        elif rand < 0.05:  # 3% –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            return DataQuality.UNCERTAIN
        else:
            return DataQuality.GOOD

class DataCollectionSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    def __init__(self, database_path: str = "sensor_data.db"):
        self.database_path = database_path
        self.sensors = {}
        self.simulators = {}
        self.data_buffer = []
        self.buffer_lock = threading.Lock()
        self.alarm_system = None
        self.ai_processor = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self._init_database()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self._start_data_persistence()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.database_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS sensor_readings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    sensor_id TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    value REAL NOT NULL,
                    quality TEXT NOT NULL,
                    unit TEXT,
                    metadata TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–∞—Ç—á–∏–∫–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS sensor_configs (
                    sensor_id TEXT PRIMARY KEY,
                    sensor_type TEXT NOT NULL,
                    name TEXT NOT NULL,
                    unit TEXT,
                    min_value REAL,
                    max_value REAL,
                    normal_range TEXT,
                    warning_range TEXT,
                    alarm_range TEXT,
                    location TEXT,
                    description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–≤–æ–≥
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS alarms (
                    alarm_id TEXT PRIMARY KEY,
                    sensor_id TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    level TEXT NOT NULL,
                    message TEXT NOT NULL,
                    value REAL,
                    threshold REAL,
                    acknowledged INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_readings_sensor_time ON sensor_readings(sensor_id, timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_alarms_sensor_time ON alarms(sensor_id, timestamp)')
            
            conn.commit()
            conn.close()
            
            logging.info("Database initialized successfully")
            
        except Exception as e:
            logging.error(f"Error initializing database: {e}")
    
    def add_sensor(self, config: SensorConfig):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞"""
        try:
            self.sensors[config.sensor_id] = config
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ë–î
            conn = sqlite3.connect(self.database_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO sensor_configs 
                (sensor_id, sensor_type, name, unit, min_value, max_value, 
                 normal_range, warning_range, alarm_range, location, description)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                config.sensor_id,
                config.sensor_type.value,
                config.name,
                config.unit,
                config.min_value,
                config.max_value,
                json.dumps(config.normal_range),
                json.dumps(config.warning_range),
                json.dumps(config.alarm_range),
                config.location,
                config.description
            ))
            
            conn.commit()
            conn.close()
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
            simulator = IndustrialSensorSimulator(config)
            simulator.add_callback(self._on_sensor_reading)
            self.simulators[config.sensor_id] = simulator
            
            logging.info(f"Added sensor: {config.sensor_id}")
            
        except Exception as e:
            logging.error(f"Error adding sensor {config.sensor_id}: {e}")
    
    def start_data_collection(self):
        """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            for simulator in self.simulators.values():
                simulator.start_simulation()
            
            logging.info("Data collection started")
            
        except Exception as e:
            logging.error(f"Error starting data collection: {e}")
    
    def stop_data_collection(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            for simulator in self.simulators.values():
                simulator.stop_simulation()
            
            logging.info("Data collection stopped")
            
        except Exception as e:
            logging.error(f"Error stopping data collection: {e}")
    
    def _on_sensor_reading(self, reading: SensorReading):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
            with self.buffer_lock:
                self.data_buffer.append(reading)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
                if len(self.data_buffer) > 10000:
                    self.data_buffer = self.data_buffer[-5000:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–≤–æ–≥–∏
            if self.alarm_system:
                self.alarm_system.check_alarms(reading)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if self.ai_processor:
                self.ai_processor.process_reading(reading)
            
        except Exception as e:
            logging.error(f"Error processing sensor reading: {e}")
    
    def _start_data_persistence(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        def persistence_loop():
            while True:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
                    readings_to_save = []
                    with self.buffer_lock:
                        if self.data_buffer:
                            readings_to_save = self.data_buffer.copy()
                            self.data_buffer.clear()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    if readings_to_save:
                        self._save_readings_to_db(readings_to_save)
                    
                    time.sleep(10)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    
                except Exception as e:
                    logging.error(f"Error in persistence loop: {e}")
                    time.sleep(10)
        
        thread = threading.Thread(target=persistence_loop, daemon=True)
        thread.start()
    
    def _save_readings_to_db(self, readings: List[SensorReading]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.database_path)
            cursor = conn.cursor()
            
            for reading in readings:
                cursor.execute('''
                    INSERT INTO sensor_readings 
                    (sensor_id, timestamp, value, quality, unit, metadata)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    reading.sensor_id,
                    reading.timestamp.isoformat(),
                    reading.value,
                    reading.quality.value,
                    reading.unit,
                    json.dumps(reading.metadata)
                ))
            
            conn.commit()
            conn.close()
            
            logging.debug(f"Saved {len(readings)} readings to database")
            
        except Exception as e:
            logging.error(f"Error saving readings to database: {e}")
    
    def get_recent_data(self, sensor_id: str, hours: int = 1) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞"""
        try:
            conn = sqlite3.connect(self.database_path)
            
            query = '''
                SELECT timestamp, value, quality, unit, metadata
                FROM sensor_readings
                WHERE sensor_id = ? AND timestamp >= datetime('now', '-{} hours')
                ORDER BY timestamp
            '''.format(hours)
            
            df = pd.read_sql_query(query, conn, params=(sensor_id,))
            conn.close()
            
            if not df.empty:
                df['timestamp'] = pd.to_datetime(df['timestamp'])
                df['value'] = pd.to_numeric(df['value'])
            
            return df
            
        except Exception as e:
            logging.error(f"Error getting recent data for {sensor_id}: {e}")
            return pd.DataFrame()
    
    def get_sensor_list(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤"""
        try:
            conn = sqlite3.connect(self.database_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT sensor_id, sensor_type, name, unit, location, description
                FROM sensor_configs
                ORDER BY name
            ''')
            
            sensors = []
            for row in cursor.fetchall():
                sensors.append({
                    'sensor_id': row[0],
                    'sensor_type': row[1],
                    'name': row[2],
                    'unit': row[3],
                    'location': row[4],
                    'description': row[5]
                })
            
            conn.close()
            return sensors
            
        except Exception as e:
            logging.error(f"Error getting sensor list: {e}")
            return []
    
    def set_alarm_system(self, alarm_system):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–≤–æ–≥"""
        self.alarm_system = alarm_system
    
    def set_ai_processor(self, ai_processor):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.ai_processor = ai_processor

class AlarmSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–≤–æ–≥ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    """
    def __init__(self, data_system: DataCollectionSystem):
        self.data_system = data_system
        self.active_alarms = {}
        self.alarm_history = []
        self.callbacks = []
    
    def add_alarm_callback(self, callback: Callable[[AlarmEvent], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–≤–æ–≥"""
        self.callbacks.append(callback)
    
    def check_alarms(self, reading: SensorReading):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–≤–æ–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞–Ω–∏—è"""
        try:
            if reading.sensor_id not in self.data_system.sensors:
                return
            
            config = self.data_system.sensors[reading.sensor_id]
            value = reading.value
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–µ–ª—ã
            if value < config.alarm_range[0] or value > config.alarm_range[1]:
                self._trigger_alarm(reading, AlarmLevel.CRITICAL, 
                                  f"Critical value {value:.2f} outside range {config.alarm_range}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–µ–ª—ã
            elif value < config.warning_range[0] or value > config.warning_range[1]:
                self._trigger_alarm(reading, AlarmLevel.WARNING,
                                  f"Warning value {value:.2f} outside range {config.warning_range}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            if reading.quality == DataQuality.BAD:
                self._trigger_alarm(reading, AlarmLevel.ALARM,
                                  f"Bad data quality for sensor {reading.sensor_id}")
            
        except Exception as e:
            logging.error(f"Error checking alarms for {reading.sensor_id}: {e}")
    
    def _trigger_alarm(self, reading: SensorReading, level: AlarmLevel, message: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–≤–æ–≥–∏"""
        try:
            alarm_id = f"{reading.sensor_id}_{level.value}_{int(time.time())}"
            
            alarm = AlarmEvent(
                alarm_id=alarm_id,
                sensor_id=reading.sensor_id,
                timestamp=reading.timestamp,
                level=level,
                message=message,
                value=reading.value,
                threshold=0.0  # –ú–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä–æ–≥
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏
            self.active_alarms[alarm_id] = alarm
            self.alarm_history.append(alarm)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self._save_alarm_to_db(alarm)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            for callback in self.callbacks:
                try:
                    callback(alarm)
                except Exception as e:
                    logging.error(f"Error in alarm callback: {e}")
            
            logging.warning(f"ALARM: {message}")
            
        except Exception as e:
            logging.error(f"Error triggering alarm: {e}")
    
    def _save_alarm_to_db(self, alarm: AlarmEvent):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏ –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.data_system.database_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO alarms 
                (alarm_id, sensor_id, timestamp, level, message, value, threshold)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                alarm.alarm_id,
                alarm.sensor_id,
                alarm.timestamp.isoformat(),
                alarm.level.value,
                alarm.message,
                alarm.value,
                alarm.threshold
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logging.error(f"Error saving alarm to database: {e}")
    
    def acknowledge_alarm(self, alarm_id: str) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏"""
        try:
            if alarm_id in self.active_alarms:
                self.active_alarms[alarm_id].acknowledged = True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                conn = sqlite3.connect(self.data_system.database_path)
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE alarms SET acknowledged = 1 WHERE alarm_id = ?
                ''', (alarm_id,))
                
                conn.commit()
                conn.close()
                
                logging.info(f"Acknowledged alarm: {alarm_id}")
                return True
            
            return False
            
        except Exception as e:
            logging.error(f"Error acknowledging alarm {alarm_id}: {e}")
            return False
    
    def get_active_alarms(self) -> List[AlarmEvent]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥"""
        return [alarm for alarm in self.active_alarms.values() if not alarm.acknowledged]
    
    def get_alarm_history(self, hours: int = 24) -> List[AlarmEvent]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–≤–æ–≥"""
        try:
            conn = sqlite3.connect(self.data_system.database_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT alarm_id, sensor_id, timestamp, level, message, value, threshold, acknowledged
                FROM alarms
                WHERE timestamp >= datetime('now', '-{} hours')
                ORDER BY timestamp DESC
            '''.format(hours))
            
            alarms = []
            for row in cursor.fetchall():
                alarm = AlarmEvent(
                    alarm_id=row[0],
                    sensor_id=row[1],
                    timestamp=datetime.fromisoformat(row[2]),
                    level=AlarmLevel(row[3]),
                    message=row[4],
                    value=row[5],
                    threshold=row[6],
                    acknowledged=bool(row[7])
                )
                alarms.append(alarm)
            
            conn.close()
            return alarms
            
        except Exception as e:
            logging.error(f"Error getting alarm history: {e}")
            return []

class AIDataProcessor:
    """
    AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    """
    def __init__(self, data_system: DataCollectionSystem):
        self.data_system = data_system
        self.models = {}
        self.scalers = {}
        self.anomaly_detectors = {}
        self.prediction_cache = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self._initialize_models()
    
    def _initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ú–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
            self.anomaly_detectors['global'] = IsolationForest(
                contamination=0.1,
                random_state=42
            )
            
            # –°–∫–µ–π–ª–µ—Ä—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            self.scalers['global'] = StandardScaler()
            
            logging.info("AI models initialized")
            
        except Exception as e:
            logging.error(f"Error initializing AI models: {e}")
    
    def process_reading(self, reading: SensorReading):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞"""
        try:
            # –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
            self._detect_anomalies(reading)
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
            self._make_predictions(reading)
            
        except Exception as e:
            logging.error(f"Error processing reading with AI: {e}")
    
    def _detect_anomalies(self, reading: SensorReading):
        """–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π"""
        try:
            if reading.quality != DataQuality.GOOD:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = self.data_system.get_recent_data(reading.sensor_id, hours=24)
            
            if len(df) < 100:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            values = df['value'].values.reshape(-1, 1)
            
            # –û–±—É—á–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            detector_key = f"{reading.sensor_id}_anomaly"
            if detector_key not in self.anomaly_detectors:
                self.anomaly_detectors[detector_key] = IsolationForest(
                    contamination=0.1,
                    random_state=42
                )
                self.anomaly_detectors[detector_key].fit(values)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            current_value = np.array([[reading.value]])
            anomaly_score = self.anomaly_detectors[detector_key].decision_function(current_value)[0]
            is_anomaly = self.anomaly_detectors[detector_key].predict(current_value)[0] == -1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.prediction_cache[f"{reading.sensor_id}_anomaly"] = {
                'timestamp': reading.timestamp,
                'anomaly_score': float(anomaly_score),
                'is_anomaly': bool(is_anomaly),
                'value': reading.value
            }
            
            if is_anomaly:
                logging.warning(f"Anomaly detected for {reading.sensor_id}: {reading.value} (score: {anomaly_score:.3f})")
            
        except Exception as e:
            logging.error(f"Error in anomaly detection for {reading.sensor_id}: {e}")
    
    def _make_predictions(self, reading: SensorReading):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = self.data_system.get_recent_data(reading.sensor_id, hours=6)
            
            if len(df) < 50:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                return
            
            # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
            values = df['value'].values
            timestamps = pd.to_datetime(df['timestamp']).values
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            if len(values) >= 10:
                recent_values = values[-10:]
                trend = np.polyfit(range(len(recent_values)), recent_values, 1)[0]
                
                # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –º–∏–Ω—É—Ç
                next_value = reading.value + trend * 30  # 30 —Ç–æ—á–µ–∫ –≤–ø–µ—Ä–µ–¥
                
                self.prediction_cache[f"{reading.sensor_id}_prediction"] = {
                    'timestamp': reading.timestamp,
                    'current_value': reading.value,
                    'predicted_value': float(next_value),
                    'trend': float(trend),
                    'confidence': 0.7  # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                }
            
        except Exception as e:
            logging.error(f"Error in prediction for {reading.sensor_id}: {e}")
    
    def get_anomaly_status(self, sensor_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–æ–º–∞–ª–∏–π"""
        key = f"{sensor_id}_anomaly"
        return self.prediction_cache.get(key, {})
    
    def get_prediction(self, sensor_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        key = f"{sensor_id}_prediction"
        return self.prediction_cache.get(key, {})
    
    def train_classification_model(self, sensor_id: str, target_column: str = 'state'):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            df = self.data_system.get_recent_data(sensor_id, hours=168)  # –ù–µ–¥–µ–ª—è
            
            if len(df) < 1000:
                logging.warning(f"Insufficient data for training classification model for {sensor_id}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            df['value_ma_5'] = df['value'].rolling(window=5).mean()
            df['value_ma_20'] = df['value'].rolling(window=20).mean()
            df['value_std_5'] = df['value'].rolling(window=5).std()
            df['value_diff'] = df['value'].diff()
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π
            config = self.data_system.sensors.get(sensor_id)
            if config:
                conditions = [
                    (df['value'] >= config.normal_range[0]) & (df['value'] <= config.normal_range[1]),
                    (df['value'] >= config.warning_range[0]) & (df['value'] <= config.warning_range[1]),
                    True  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
                ]
                choices = ['normal', 'warning', 'alarm']
                df['state'] = np.select(conditions, choices, default='alarm')
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            feature_columns = ['value', 'value_ma_5', 'value_ma_20', 'value_std_5', 'value_diff']
            df_clean = df.dropna()
            
            if len(df_clean) < 500:
                logging.warning(f"Insufficient clean data for training")
                return False
            
            X = df_clean[feature_columns].values
            y = df_clean['state'].values
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.2, random_state=42, stratify=y
            )
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            scaler = StandardScaler()
            X_train_scaled = scaler.fit_transform(X_train)
            X_test_scaled = scaler.transform(X_test)
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            model = RandomForestClassifier(
                n_estimators=100,
                random_state=42,
                class_weight='balanced'
            )
            model.fit(X_train_scaled, y_train)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            y_pred = model.predict(X_test_scaled)
            report = classification_report(y_test, y_pred, output_dict=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            self.models[f"{sensor_id}_classifier"] = model
            self.scalers[f"{sensor_id}_classifier"] = scaler
            
            logging.info(f"Trained classification model for {sensor_id}")
            logging.info(f"Model accuracy: {report['accuracy']:.3f}")
            
            return True
            
        except Exception as e:
            logging.error(f"Error training classification model for {sensor_id}: {e}")
            return False
    
    def predict_equipment_state(self, reading: SensorReading) -> Dict:
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        try:
            model_key = f"{reading.sensor_id}_classifier"
            
            if model_key not in self.models:
                return {'error': 'Model not trained'}
            
            model = self.models[model_key]
            scaler = self.scalers[model_key]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            df = self.data_system.get_recent_data(reading.sensor_id, hours=1)
            
            if len(df) < 20:
                return {'error': 'Insufficient data for prediction'}
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            df['value_ma_5'] = df['value'].rolling(window=5).mean()
            df['value_ma_20'] = df['value'].rolling(window=20).mean()
            df['value_std_5'] = df['value'].rolling(window=5).std()
            df['value_diff'] = df['value'].diff()
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
            last_row = df.iloc[-1]
            
            features = np.array([[
                last_row['value'],
                last_row['value_ma_5'],
                last_row['value_ma_20'],
                last_row['value_std_5'],
                last_row['value_diff']
            ]])
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            features_scaled = scaler.transform(features)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = model.predict(features_scaled)[0]
            probabilities = model.predict_proba(features_scaled)[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å—ã
            classes = model.classes_
            prob_dict = {cls: float(prob) for cls, prob in zip(classes, probabilities)}
            
            result = {
                'sensor_id': reading.sensor_id,
                'timestamp': reading.timestamp.isoformat(),
                'predicted_state': prediction,
                'probabilities': prob_dict,
                'confidence': float(max(probabilities))
            }
            
            return result
            
        except Exception as e:
            logging.error(f"Error predicting equipment state: {e}")
            return {'error': str(e)}

class WebDashboard:
    """
    Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
    """
    def __init__(self, data_system: DataCollectionSystem, 
                 alarm_system: AlarmSystem, 
                 ai_processor: AIDataProcessor):
        self.data_system = data_system
        self.alarm_system = alarm_system
        self.ai_processor = ai_processor
        
        # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = Flask(__name__)
        self.app.config['SECRET_KEY'] = 'your-secret-key-here'
        self.socketio = SocketIO(self.app, cors_allowed_origins="*")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self._register_routes()
        self._register_socketio_events()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
        self._start_realtime_updates()
    
    def _register_routes(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ Flask"""
        
        @self.app.route('/')
        def index():
            return render_template('dashboard.html')
        
        @self.app.route('/api/sensors')
        def get_sensors():
            return jsonify(self.data_system.get_sensor_list())
        
        @self.app.route('/api/sensor/<sensor_id>/data')
        def get_sensor_data(sensor_id):
            hours = request.args.get('hours', 1, type=int)
            df = self.data_system.get_recent_data(sensor_id, hours)
            
            if df.empty:
                return jsonify([])
            
            data = []
            for _, row in df.iterrows():
                data.append({
                    'timestamp': row['timestamp'].isoformat(),
                    'value': row['value'],
                    'quality': row['quality']
                })
            
            return jsonify(data)
        
        @self.app.route('/api/sensor/<sensor_id>/chart')
        def get_sensor_chart(sensor_id):
            hours = request.args.get('hours', 1, type=int)
            df = self.data_system.get_recent_data(sensor_id, hours)
            
            if df.empty:
                return jsonify({})
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å Plotly
            fig = go.Figure()
            
            fig.add_trace(go.Scatter(
                x=df['timestamp'],
                y=df['value'],
                mode='lines+markers',
                name=sensor_id,
                line=dict(width=2),
                marker=dict(size=4)
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –ª–∏–Ω–∏–∏
            if sensor_id in self.data_system.sensors:
                config = self.data_system.sensors[sensor_id]
                
                # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                fig.add_hline(y=config.normal_range[0], line_dash="dash", 
                             line_color="green", annotation_text="Normal Min")
                fig.add_hline(y=config.normal_range[1], line_dash="dash", 
                             line_color="green", annotation_text="Normal Max")
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
                fig.add_hline(y=config.warning_range[0], line_dash="dot", 
                             line_color="orange", annotation_text="Warning Min")
                fig.add_hline(y=config.warning_range[1], line_dash="dot", 
                             line_color="orange", annotation_text="Warning Max")
                
                # –ê–≤–∞—Ä–∏–π–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                fig.add_hline(y=config.alarm_range[0], line_dash="solid", 
                             line_color="red", annotation_text="Alarm Min")
                fig.add_hline(y=config.alarm_range[1], line_dash="solid", 
                             line_color="red", annotation_text="Alarm Max")
            
            fig.update_layout(
                title=f'Sensor {sensor_id} Data',
                xaxis_title='Time',
                yaxis_title='Value',
                hovermode='x unified'
            )
            
            return jsonify(json.loads(plotly.utils.PlotlyJSONEncoder().encode(fig)))
        
        @self.app.route('/api/alarms')
        def get_alarms():
            hours = request.args.get('hours', 24, type=int)
            alarms = self.alarm_system.get_alarm_history(hours)
            return jsonify([alarm.to_dict() for alarm in alarms])
        
        @self.app.route('/api/alarms/active')
        def get_active_alarms():
            alarms = self.alarm_system.get_active_alarms()
            return jsonify([alarm.to_dict() for alarm in alarms])
        
        @self.app.route('/api/alarm/<alarm_id>/acknowledge', methods=['POST'])
        def acknowledge_alarm(alarm_id):
            success = self.alarm_system.acknowledge_alarm(alarm_id)
            return jsonify({'success': success})
        
        @self.app.route('/api/ai/anomalies')
        def get_anomalies():
            anomalies = {}
            for sensor_id in self.data_system.sensors.keys():
                status = self.ai_processor.get_anomaly_status(sensor_id)
                if status:
                    anomalies[sensor_id] = status
            return jsonify(anomalies)
        
        @self.app.route('/api/ai/predictions')
        def get_predictions():
            predictions = {}
            for sensor_id in self.data_system.sensors.keys():
                prediction = self.ai_processor.get_prediction(sensor_id)
                if prediction:
                    predictions[sensor_id] = prediction
            return jsonify(predictions)
    
    def _register_socketio_events(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π SocketIO"""
        
        @self.socketio.on('connect')
        def handle_connect():
            logging.info('Client connected to dashboard')
        
        @self.socketio.on('disconnect')
        def handle_disconnect():
            logging.info('Client disconnected from dashboard')
    
    def _start_realtime_updates(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        def update_loop():
            while True:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
                    current_data = {}
                    for sensor_id in self.data_system.sensors.keys():
                        df = self.data_system.get_recent_data(sensor_id, hours=0.1)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–∏–Ω—É—Ç
                        if not df.empty:
                            latest = df.iloc[-1]
                            current_data[sensor_id] = {
                                'timestamp': latest['timestamp'].isoformat(),
                                'value': latest['value'],
                                'quality': latest['quality'],
                                'unit': latest['unit']
                            }
                    
                    if current_data:
                        self.socketio.emit('sensor_data_update', current_data)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏
                    active_alarms = self.alarm_system.get_active_alarms()
                    self.socketio.emit('alarms_update', [alarm.to_dict() for alarm in active_alarms])
                    
                    time.sleep(5)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    
                except Exception as e:
                    logging.error(f"Error in realtime update loop: {e}")
                    time.sleep(5)
        
        thread = threading.Thread(target=update_loop, daemon=True)
        thread.start()
    
    def run(self, host='0.0.0.0', port=5000, debug=False):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        self.socketio.run(self.app, host=host, port=port, debug=debug)

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
DASHBOARD_HTML = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Data Collection System Dashboard</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .header {
            background-color: #2c3e50;
            color: white;
            padding: 20px;
            margin: -20px -20px 20px -20px;
            text-align: center;
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        .sensor-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .sensor-value {
            font-size: 2em;
            font-weight: bold;
            color: #2c3e50;
        }
        .sensor-status {
            padding: 5px 10px;
            border-radius: 4px;
            color: white;
            font-weight: bold;
            display: inline-block;
            margin-top: 10px;
        }
        .status-good { background-color: #27ae60; }
        .status-warning { background-color: #f39c12; }
        .status-alarm { background-color: #e74c3c; }
        .chart-container {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .alarms-panel {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .alarm-item {
            padding: 10px;
            margin: 5px 0;
            border-radius: 4px;
            border-left: 4px solid;
        }
        .alarm-critical { border-color: #e74c3c; background-color: #fdf2f2; }
        .alarm-warning { border-color: #f39c12; background-color: #fef9e7; }
        .alarm-info { border-color: #3498db; background-color: #ebf3fd; }
        .controls {
            margin-bottom: 20px;
        }
        .btn {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }
        .btn:hover {
            background-color: #2980b9;
        }
        .connection-status {
            position: fixed;
            top: 10px;
            right: 10px;
            padding: 10px;
            border-radius: 4px;
            color: white;
            font-weight: bold;
        }
        .connected { background-color: #27ae60; }
        .disconnected { background-color: #e74c3c; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ü§ñ AI Data Collection System</h1>
        <p>–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π</p>
    </div>
    
    <div id="connectionStatus" class="connection-status disconnected">
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...
    </div>
    
    <div class="controls">
        <button class="btn" onclick="refreshData()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
        <button class="btn" onclick="toggleAutoRefresh()">‚è∏Ô∏è –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</button>
        <select id="timeRange" onchange="updateTimeRange()">
            <option value="1">–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</option>
            <option value="6">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤</option>
            <option value="24">–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</option>
        </select>
    </div>
    
    <div class="dashboard-grid" id="sensorsGrid">
        <!-- –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
    </div>
    
    <div class="chart-container">
        <h3>üìä –ì—Ä–∞—Ñ–∏–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤</h3>
        <div id="chartsContainer">
            <!-- –ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
    </div>
    
    <div class="alarms-panel">
        <h3>üö® –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏</h3>
        <div id="alarmsContainer">
            <!-- –¢—Ä–µ–≤–æ–≥–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
    </div>

    <script>
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
        const socket = io();
        let autoRefresh = true;
        let currentTimeRange = 1;
        
        socket.on('connect', function() {
            document.getElementById('connectionStatus').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
            document.getElementById('connectionStatus').className = 'connection-status connected';
            console.log('Connected to server');
        });
        
        socket.on('disconnect', function() {
            document.getElementById('connectionStatus').textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
            document.getElementById('connectionStatus').className = 'connection-status disconnected';
            console.log('Disconnected from server');
        });
        
        socket.on('sensor_data_update', function(data) {
            updateSensorCards(data);
        });
        
        socket.on('alarms_update', function(alarms) {
            updateAlarmsPanel(alarms);
        });
        
        // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        function refreshData() {
            loadSensors();
            loadCharts();
            loadAlarms();
        }
        
        function toggleAutoRefresh() {
            autoRefresh = !autoRefresh;
            const btn = event.target;
            btn.textContent = autoRefresh ? '‚è∏Ô∏è –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '‚ñ∂Ô∏è –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
        }
        
        function updateTimeRange() {
            currentTimeRange = document.getElementById('timeRange').value;
            loadCharts();
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        async function loadSensors() {
            try {
                const response = await fetch('/api/sensors');
                const sensors = await response.json();
                
                const grid = document.getElementById('sensorsGrid');
                grid.innerHTML = '';
                
                for (const sensor of sensors) {
                    const card = createSensorCard(sensor);
                    grid.appendChild(card);
                }
            } catch (error) {
                console.error('Error loading sensors:', error);
            }
        }
        
        function createSensorCard(sensor) {
            const card = document.createElement('div');
            card.className = 'sensor-card';
            card.id = `sensor-${sensor.sensor_id}`;
            
            card.innerHTML = `
                <h4>${sensor.name}</h4>
                <div class="sensor-value" id="value-${sensor.sensor_id}">--</div>
                <div>${sensor.unit}</div>
                <div class="sensor-status status-good" id="status-${sensor.sensor_id}">–•–æ—Ä–æ—à–æ</div>
                <div style="margin-top: 10px;">
                    <small>üìç ${sensor.location}</small><br>
                    <small>üîß ${sensor.sensor_type}</small>
                </div>
            `;
            
            return card;
        }
        
        function updateSensorCards(data) {
            for (const [sensorId, sensorData] of Object.entries(data)) {
                const valueElement = document.getElementById(`value-${sensorId}`);
                const statusElement = document.getElementById(`status-${sensorId}`);
                
                if (valueElement) {
                    valueElement.textContent = sensorData.value.toFixed(2);
                }
                
                if (statusElement) {
                    let statusClass = 'status-good';
                    let statusText = '–•–æ—Ä–æ—à–æ';
                    
                    if (sensorData.quality === 'bad') {
                        statusClass = 'status-alarm';
                        statusText = '–ü–ª–æ—Ö–æ';
                    } else if (sensorData.quality === 'uncertain') {
                        statusClass = 'status-warning';
                        statusText = '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ';
                    }
                    
                    statusElement.className = `sensor-status ${statusClass}`;
                    statusElement.textContent = statusText;
                }
            }
        }
        
        async function loadCharts() {
            try {
                const sensorsResponse = await fetch('/api/sensors');
                const sensors = await sensorsResponse.json();
                
                const container = document.getElementById('chartsContainer');
                container.innerHTML = '';
                
                for (const sensor of sensors) {
                    const chartResponse = await fetch(`/api/sensor/${sensor.sensor_id}/chart?hours=${currentTimeRange}`);
                    const chartData = await chartResponse.json();
                    
                    if (Object.keys(chartData).length > 0) {
                        const chartDiv = document.createElement('div');
                        chartDiv.id = `chart-${sensor.sensor_id}`;
                        chartDiv.style.height = '400px';
                        chartDiv.style.marginBottom = '20px';
                        container.appendChild(chartDiv);
                        
                        Plotly.newPlot(chartDiv.id, chartData.data, chartData.layout, {responsive: true});
                    }
                }
            } catch (error) {
                console.error('Error loading charts:', error);
            }
        }
        
        async function loadAlarms() {
            try {
                const response = await fetch('/api/alarms/active');
                const alarms = await response.json();
                updateAlarmsPanel(alarms);
            } catch (error) {
                console.error('Error loading alarms:', error);
            }
        }
        
        function updateAlarmsPanel(alarms) {
            const container = document.getElementById('alarmsContainer');
            
            if (alarms.length === 0) {
                container.innerHTML = '<p>‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –Ω–µ—Ç</p>';
                return;
            }
            
            container.innerHTML = '';
            
            for (const alarm of alarms) {
                const alarmDiv = document.createElement('div');
                alarmDiv.className = `alarm-item alarm-${alarm.level}`;
                
                const timestamp = new Date(alarm.timestamp).toLocaleString('ru-RU');
                
                alarmDiv.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>${alarm.sensor_id}</strong> - ${alarm.message}
                            <br><small>üìÖ ${timestamp} | üìä –ó–Ω–∞—á–µ–Ω–∏–µ: ${alarm.value.toFixed(2)}</small>
                        </div>
                        <button class="btn" onclick="acknowledgeAlarm('${alarm.alarm_id}')">
                            ‚úì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                        </button>
                    </div>
                `;
                
                container.appendChild(alarmDiv);
            }
        }
        
        async function acknowledgeAlarm(alarmId) {
            try {
                const response = await fetch(`/api/alarm/${alarmId}/acknowledge`, {
                    method: 'POST'
                });
                const result = await response.json();
                
                if (result.success) {
                    loadAlarms(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–≤–æ–≥–∏
                }
            } catch (error) {
                console.error('Error acknowledging alarm:', error);
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            refreshData();
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setInterval(function() {
                if (autoRefresh) {
                    loadCharts();
                    loadAlarms();
                }
            }, 30000);
        });
    </script>
</body>
</html>
'''

def create_dashboard_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    import os
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é templates –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    templates_dir = 'templates'
    if not os.path.exists(templates_dir):
        os.makedirs(templates_dir)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —à–∞–±–ª–æ–Ω
    with open(os.path.join(templates_dir, 'dashboard.html'), 'w', encoding='utf-8') as f:
        f.write(DASHBOARD_HTML)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    logging.info("Starting AI Data Collection System Demo")
    
    try:
        # –°–æ–∑–¥–∞–µ–º HTML —à–∞–±–ª–æ–Ω
        create_dashboard_template()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        data_system = DataCollectionSystem("demo_sensor_data.db")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–æ–≤
        sensor_configs = [
            SensorConfig(
                sensor_id="TEMP_001",
                sensor_type=SensorType.TEMPERATURE,
                name="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–µ—á–∏ ‚Ññ1",
                unit="¬∞C",
                min_value=20.0,
                max_value=1200.0,
                normal_range=(800.0, 1000.0),
                warning_range=(750.0, 1050.0),
                alarm_range=(700.0, 1100.0),
                sampling_rate=0.5,  # 0.5 –ì—Ü
                location="–¶–µ—Ö ‚Ññ1, –ü–µ—á—å ‚Ññ1",
                description="–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Ä–∞–±–æ—á–µ–π –∑–æ–Ω–µ –ø–µ—á–∏"
            ),
            SensorConfig(
                sensor_id="PRESS_001",
                sensor_type=SensorType.PRESSURE,
                name="–î–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ",
                unit="bar",
                min_value=0.0,
                max_value=10.0,
                normal_range=(2.0, 6.0),
                warning_range=(1.5, 7.0),
                alarm_range=(1.0, 8.0),
                sampling_rate=1.0,  # 1 –ì—Ü
                location="–¶–µ—Ö ‚Ññ1, –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–∞—è",
                description="–î–∞—Ç—á–∏–∫ –¥–∞–≤–ª–µ–Ω–∏—è –≤ –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ"
            ),
            SensorConfig(
                sensor_id="FLOW_001",
                sensor_type=SensorType.FLOW,
                name="–†–∞—Å—Ö–æ–¥ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏",
                unit="–ª/–º–∏–Ω",
                min_value=0.0,
                max_value=100.0,
                normal_range=(20.0, 80.0),
                warning_range=(15.0, 85.0),
                alarm_range=(10.0, 90.0),
                sampling_rate=0.2,  # 0.2 –ì—Ü
                location="–¶–µ—Ö ‚Ññ1, –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è",
                description="–†–∞—Å—Ö–æ–¥–æ–º–µ—Ä –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏"
            ),
            SensorConfig(
                sensor_id="VIB_001",
                sensor_type=SensorType.VIBRATION,
                name="–í–∏–±—Ä–∞—Ü–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è",
                unit="–º–º/—Å",
                min_value=0.0,
                max_value=50.0,
                normal_range=(0.0, 10.0),
                warning_range=(0.0, 20.0),
                alarm_range=(0.0, 30.0),
                sampling_rate=2.0,  # 2 –ì—Ü
                location="–¶–µ—Ö ‚Ññ1, –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–≤–æ–¥",
                description="–î–∞—Ç—á–∏–∫ –≤–∏–±—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è"
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—á–∏–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É
        for config in sensor_configs:
            data_system.add_sensor(config)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ç—Ä–µ–≤–æ–≥
        alarm_system = AlarmSystem(data_system)
        data_system.set_alarm_system(alarm_system)
        
        # –°–æ–∑–¥–∞–µ–º AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        ai_processor = AIDataProcessor(data_system)
        data_system.set_ai_processor(ai_processor)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–¥–∞—à–±–æ—Ä–¥
        dashboard = WebDashboard(data_system, alarm_system, ai_processor)
        
        # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è —Ç—Ä–µ–≤–æ–≥
        def alarm_callback(alarm: AlarmEvent):
            logging.warning(f"üö® ALARM: {alarm.message}")
        
        alarm_system.add_alarm_callback(alarm_callback)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        data_system.start_data_collection()
        
        logging.info("System started successfully!")
        logging.info("Web dashboard available at: http://localhost:5000")
        logging.info("Press Ctrl+C to stop the system")
        
        # –û–±—É—á–∞–µ–º AI –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        def train_models_later():
            time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            logging.info("Training AI models...")
            
            for config in sensor_configs:
                success = ai_processor.train_classification_model(config.sensor_id)
                if success:
                    logging.info(f"Successfully trained model for {config.sensor_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        training_thread = threading.Thread(target=train_models_later, daemon=True)
        training_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        dashboard.run(host='0.0.0.0', port=5000, debug=False)
        
    except KeyboardInterrupt:
        logging.info("Shutting down system...")
        data_system.stop_data_collection()
        logging.info("System stopped")
        
    except Exception as e:
        logging.error(f"Error in main: {e}")
        raise

if __name__ == "__main__":
    main()
\`\`\`

## –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ

### –ú–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ

–°–∏—Å—Ç–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –º–µ—Ç—Ä–æ–ª–æ–≥–∏–∏:

**–ì–û–°–¢ 8.009-84** - –ù–æ—Ä–º–∏—Ä—É–µ–º—ã–µ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
- –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

**–ì–û–°–¢ –† 8.563-96** - –ú–µ—Ç–æ–¥–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π:
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π
- –û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π

**–§–ó ‚Ññ102** - –û–± –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –µ–¥–∏–Ω—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π:
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ä–µ–¥—Å—Ç–≤–∞–º –∏–∑–º–µ—Ä–µ–Ω–∏–π
- –ü–æ–≤–µ—Ä–∫–∞ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–æ—Ä–æ–≤
- –ú–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å

### –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

**–ì–û–°–¢ –† 51901.11-2005** - –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Ä–∏—Å–∫–∞:
- –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
- –°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

**–ì–û–°–¢ –† 51841-2001** - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã:
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º —Å–µ—Ç—è–º
- –ü—Ä–æ—Ç–æ–∫–æ–ª—ã –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

\`\`\`python
class RussianComplianceManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
    """
    def __init__(self, data_system: DataCollectionSystem):
        self.data_system = data_system
        self.compliance_reports = {}
        self.gost_validators = {}
        
    def validate_metrological_compliance(self, sensor_id: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            report = {
                'sensor_id': sensor_id,
                'gost_8_009_84': {
                    'accuracy_class': 'A',  # –ö–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏
                    'measurement_range': True,
                    'dynamic_characteristics': True,
                    'stability': True
                },
                'gost_r_8_563_96': {
                    'measurement_procedure': True,
                    'uncertainty_evaluation': True,
                    'quality_control': True
                },
                'fz_102': {
                    'verification_required': True,
                    'calibration_interval': 365,  # –¥–Ω–µ–π
                    'traceability': True
                },
                'overall_compliance': 0.0
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            total_checks = 10
            passed_checks = sum([
                sum(report['gost_8_009_84'].values()),
                sum(report['gost_r_8_563_96'].values()),
                sum([isinstance(v, bool) and v for v in report['fz_102'].values()])
            ])
            
            report['overall_compliance'] = passed_checks / total_checks
            
            return report
            
        except Exception as e:
            logging.error(f"Error validating metrological compliance: {e}")
            return {'error': str(e)}
    
    def generate_verification_certificate(self, sensor_id: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ –ø–æ–≤–µ—Ä–∫–µ"""
        try:
            if sensor_id not in self.data_system.sensors:
                return {'error': 'Sensor not found'}
            
            config = self.data_system.sensors[sensor_id]
            
            certificate = {
                'certificate_number': f"RU.C.27.004.A.{random.randint(10000, 99999)}.{datetime.now().year}",
                'sensor_info': {
                    'sensor_id': sensor_id,
                    'name': config.name,
                    'type': config.sensor_type.value,
                    'measurement_range': f"{config.min_value} - {config.max_value} {config.unit}",
                    'accuracy_class': '0.5'
                },
                'verification_info': {
                    'verification_date': datetime.now().isoformat(),
                    'next_verification': (datetime.now() + timedelta(days=365)).isoformat(),
                    'verification_method': '–ì–û–°–¢ 8.009-84',
                    'reference_standard': '–ì–≠–¢ 153-2019',
                    'verification_organization': '–§–ë–£ "–†–æ—Å—Ç–µ—Å—Ç-–ú–æ—Å–∫–≤–∞"'
                },
                'measurement_results': {
                    'systematic_error': 0.1,  # %
                    'random_error': 0.05,  # %
                    'total_error': 0.15,  # %
                    'meets_requirements': True
                },
                'validity': {
                    'valid_until': (datetime.now() + timedelta(days=365)).isoformat(),
                    'status': 'valid'
                }
            }
            
            return certificate
            
        except Exception as e:
            logging.error(f"Error generating verification certificate: {e}")
            return {'error': str(e)}
    
    def create_measurement_procedure(self, sensor_id: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        try:
            if sensor_id not in self.data_system.sensors:
                return {'error': 'Sensor not found'}
            
            config = self.data_system.sensors[sensor_id]
            
            procedure = {
                'document_info': {
                    'title': f"–ú–µ—Ç–æ–¥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π {config.sensor_type.value}",
                    'document_number': f"–ú–ò-{sensor_id}-2024",
                    'version': '1.0',
                    'approval_date': datetime.now().isoformat(),
                    'gost_reference': '–ì–û–°–¢ –† 8.563-96'
                },
                'measurement_object': {
                    'parameter': config.sensor_type.value,
                    'unit': config.unit,
                    'measurement_range': f"{config.min_value} - {config.max_value}",
                    'measurement_conditions': {
                        'temperature': '20 ¬± 5 ¬∞C',
                        'humidity': '65 ¬± 15 %',
                        'pressure': '86 - 106 –∫–ü–∞'
                    }
                },
                'measurement_procedure': {
                    'preparation': [
                        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π',
                        '–£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ –ø–æ–≤–µ—Ä–∫–µ',
                        '–í—ã–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏–±–æ—Ä –≤ —Ä–∞–±–æ—á–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ –º–µ–Ω–µ–µ 30 –º–∏–Ω'
                    ],
                    'measurement_steps': [
                        '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—á–∏–∫ –∫ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ',
                        '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–π —Ä–µ–∂–∏–º –∏–∑–º–µ—Ä–µ–Ω–∏–π',
                        '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ—Ä–∏—é –∏–∑ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π',
                        '–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                        '–û—Ü–µ–Ω–∏—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π'
                    ],
                    'data_processing': [
                        '–ò—Å–∫–ª—é—á–∏—Ç—å –≥—Ä—É–±—ã–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏',
                        '–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
                        '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª',
                        '–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏'
                    ]
                },
                'uncertainty_budget': {
                    'type_a_uncertainty': 0.05,  # %
                    'type_b_uncertainty': 0.10,  # %
                    'combined_uncertainty': 0.11,  # %
                    'expanded_uncertainty': 0.22,  # % (k=2)
                    'coverage_factor': 2,
                    'confidence_level': 0.95
                }
            }
            
            return procedure
            
        except Exception as e:
            logging.error(f"Error creating measurement procedure: {e}")
            return {'error': str(e)}

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
class StateSystemsIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
    """
    def __init__(self):
        self.fgis_arshin_api = "https://fgis.gost.ru/fundmetrology/api/"
        self.rosstandart_api = "https://www.gost.ru/api/"
        
    def register_in_fgis_arshin(self, sensor_config: SensorConfig) -> Dict:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –°–ò –≤ –§–ì–ò–° –ê–†–®–ò–ù"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –§–ì–ò–° –ê–†–®–ò–ù
            registration_data = {
                'registration_number': f"RU.C.27.004.A.{random.randint(10000, 99999)}",
                'sensor_info': {
                    'name': sensor_config.name,
                    'type': sensor_config.sensor_type.value,
                    'manufacturer': '–û–û–û "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏"',
                    'model': f"PD-{sensor_config.sensor_type.value.upper()}-001",
                    'serial_number': f"SN{random.randint(100000, 999999)}",
                    'year_of_manufacture': 2024
                },
                'metrological_characteristics': {
                    'measurement_range': f"{sensor_config.min_value} - {sensor_config.max_value}",
                    'unit': sensor_config.unit,
                    'accuracy_class': '0.5',
                    'basic_error': '¬±0.5%'
                },
                'verification_info': {
                    'verification_interval': 365,  # –¥–Ω–µ–π
                    'verification_method': '–ì–û–°–¢ 8.009-84',
                    'first_verification': datetime.now().isoformat()
                },
                'status': 'registered',
                'registration_date': datetime.now().isoformat()
            }
            
            logging.info(f"Registered sensor {sensor_config.sensor_id} in FGIS ARSHIN")
            return registration_data
            
        except Exception as e:
            logging.error(f"Error registering in FGIS ARSHIN: {e}")
            return {'error': str(e)}
    
    def submit_verification_results(self, sensor_id: str, verification_data: Dict) -> Dict:
        """–ü–æ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–≤–µ—Ä–∫–∏ –≤ –§–ì–ò–° –ê–†–®–ò–ù"""
        try:
            submission = {
                'submission_id': f"SUB-{random.randint(100000, 999999)}",
                'sensor_id': sensor_id,
                'verification_data': verification_data,
                'submission_date': datetime.now().isoformat(),
                'status': 'submitted',
                'processing_time': '5-10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π'
            }
            
            logging.info(f"Submitted verification results for {sensor_id}")
            return submission
            
        except Exception as e:
            logging.error(f"Error submitting verification results: {e}")
            return {'error': str(e)}
\`\`\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–í —ç—Ç–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–∫–µ –º—ã —Å–æ–∑–¥–∞–ª–∏ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤.

### –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞

1. **–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö** - –æ—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–æ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏
2. **–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã** - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ì–û–°–¢ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
3. **Real-time –æ–±—Ä–∞–±–æ—Ç–∫–∞** - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Å–±–æ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
4. **AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - –¥–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
5. **Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
6. **–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–≤–æ–≥** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

- **IndustrialSensorSimulator** - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
- **DataCollectionSystem** - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
- **AlarmSystem** - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–≤–æ–≥ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
- **AIDataProcessor** - AI-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∞–Ω–æ–º–∞–ª–∏–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- **WebDashboard** - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
- **RussianComplianceManager** - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º

### –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å

–°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- **Production-ready –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É** - –≥–æ—Ç–æ–≤—É—é –∫ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ç–µ–Ω –¥–∞—Ç—á–∏–∫–æ–≤
- **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å** - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º** - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
- **AI-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å** - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

–°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞:
- **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã** - OPC UA, Profibus, EtherNet/IP
- **–û–±–ª–∞—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** - AWS IoT, Azure IoT, Yandex Cloud
- **–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è** - iOS/Android –∫–ª–∏–µ–Ω—Ç—ã
- **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** - –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ERP/MES** - —Å–≤—è–∑—å —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

–≠—Ç–æ—Ç —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ú–æ–¥—É–ª—å 8 "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤" –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö AI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ enterprise-—Ä–µ—à–µ–Ω–∏–π!
    `,
  },

